{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;IAChQ,uFAAuF;IACvF,8DAA8D;IAC9D,MAAM,IAAI,MAAM,CAAC,2CAA2C,EAAE,eAAe,IAAI,CAAC,MAAM,wDAAwD,CAAC;AACrJ;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/charts/po-cycle-time/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { pool } from '../../../../../backend/db.js';\nimport type { ChartDataPoint } from '@/types';\n\ninterface CycleTimeQueryResult {\n  cycle_time_bucket: string;\n  count: number | string;\n}\n\n// Define the order of buckets for sorting\nconst BUCKET_ORDER = ['0-1 Day(s)', '2-3 Days', '4-7 Days', '8-14 Days', '15+ Days'];\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const month = searchParams.get('month');\n  const year = searchParams.get('year');\n\n  let connection;\n  try {\n    connection = await pool.getConnection();\n    let whereClauses: string[] = [\"status = 'Approved'\", \"approvalDate IS NOT NULL\", \"creationDate IS NOT NULL\"];\n    const queryParams: (string | number)[] = [];\n\n    if (month && month !== 'all') {\n      const parsedMonth = parseInt(month, 10);\n      if (!isNaN(parsedMonth) && parsedMonth >= 1 && parsedMonth <= 12) {\n        whereClauses.push(\"MONTH(creationDate) = ?\");\n        queryParams.push(parsedMonth);\n      }\n    }\n    if (year && year !== 'all') {\n      const parsedYear = parseInt(year, 10);\n      if (!isNaN(parsedYear)) {\n        whereClauses.push(\"YEAR(creationDate) = ?\");\n        queryParams.push(parsedYear);\n      }\n    }\n    \n    const whereString = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n    const query = `\n      SELECT\n        CASE\n          WHEN DATEDIFF(approvalDate, creationDate) <= 1 THEN '0-1 Day(s)'\n          WHEN DATEDIFF(approvalDate, creationDate) <= 3 THEN '2-3 Days'\n          WHEN DATEDIFF(approvalDate, creationDate) <= 7 THEN '4-7 Days'\n          WHEN DATEDIFF(approvalDate, creationDate) <= 14 THEN '8-14 Days'\n          ELSE '15+ Days'\n        END as cycle_time_bucket,\n        COUNT(*) as count\n      FROM PurchaseOrder\n      ${whereString}\n      GROUP BY cycle_time_bucket;\n    `;\n\n    const [rows]: any[] = await connection.execute(query, queryParams);\n\n    const chartData: ChartDataPoint[] = rows.map((row: CycleTimeQueryResult) => ({\n      name: row.cycle_time_bucket,\n      Count: Number(row.count),\n    }));\n\n    // Sort the data according to the predefined bucket order\n    chartData.sort((a, b) => {\n      return BUCKET_ORDER.indexOf(a.name as string) - BUCKET_ORDER.indexOf(b.name as string);\n    });\n    \n    // Ensure all defined buckets are present, even if count is 0\n    const finalChartData = BUCKET_ORDER.map(bucketName => {\n        const existingBucket = chartData.find(d => d.name === bucketName);\n        return existingBucket || { name: bucketName, Count: 0 };\n    });\n\n\n    return NextResponse.json(finalChartData);\n\n  } catch (error: any) {\n    console.error('Error fetching PO cycle time data:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch PO cycle time data', details: error.message },\n      { status: 500 }\n    );\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA;;;AAQA,0CAA0C;AAC1C,MAAM,eAAe;IAAC;IAAc;IAAY;IAAY;IAAa;CAAW;AAE7E,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC;IAC/B,MAAM,OAAO,aAAa,GAAG,CAAC;IAE9B,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,+GAAA,CAAA,OAAI,CAAC,aAAa;QACrC,IAAI,eAAyB;YAAC;YAAuB;YAA4B;SAA2B;QAC5G,MAAM,cAAmC,EAAE;QAE3C,IAAI,SAAS,UAAU,OAAO;YAC5B,MAAM,cAAc,SAAS,OAAO;YACpC,IAAI,CAAC,MAAM,gBAAgB,eAAe,KAAK,eAAe,IAAI;gBAChE,aAAa,IAAI,CAAC;gBAClB,YAAY,IAAI,CAAC;YACnB;QACF;QACA,IAAI,QAAQ,SAAS,OAAO;YAC1B,MAAM,aAAa,SAAS,MAAM;YAClC,IAAI,CAAC,MAAM,aAAa;gBACtB,aAAa,IAAI,CAAC;gBAClB,YAAY,IAAI,CAAC;YACnB;QACF;QAEA,MAAM,cAAc,aAAa,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,aAAa,IAAI,CAAC,UAAU,GAAG;QAEtF,MAAM,QAAQ,CAAC;;;;;;;;;;;MAWb,EAAE,YAAY;;IAEhB,CAAC;QAED,MAAM,CAAC,KAAK,GAAU,MAAM,WAAW,OAAO,CAAC,OAAO;QAEtD,MAAM,YAA8B,KAAK,GAAG,CAAC,CAAC,MAA8B,CAAC;gBAC3E,MAAM,IAAI,iBAAiB;gBAC3B,OAAO,OAAO,IAAI,KAAK;YACzB,CAAC;QAED,yDAAyD;QACzD,UAAU,IAAI,CAAC,CAAC,GAAG;YACjB,OAAO,aAAa,OAAO,CAAC,EAAE,IAAI,IAAc,aAAa,OAAO,CAAC,EAAE,IAAI;QAC7E;QAEA,6DAA6D;QAC7D,MAAM,iBAAiB,aAAa,GAAG,CAAC,CAAA;YACpC,MAAM,iBAAiB,UAAU,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK;YACtD,OAAO,kBAAkB;gBAAE,MAAM;gBAAY,OAAO;YAAE;QAC1D;QAGA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAsC,SAAS,MAAM,OAAO;QAAC,GACtE;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,IAAI,YAAY,WAAW,OAAO;IACpC;AACF","debugId":null}}]
}