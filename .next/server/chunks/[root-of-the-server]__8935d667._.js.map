{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/dashboard-stats/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport type { FetchedDashboardStats } from '@/types';\n// The static pool import is removed from here\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const month = searchParams.get('month');\n  const year = searchParams.get('year');\n  \n  let connection;\n  try {\n    // Dynamic import: The database pool is imported only when the API is called.\n    const { getDbPool } = await import('../../../../backend/db.js');\n    const pool = await getDbPool();\n    connection = await pool.getConnection();\n\n    let poWhereClause = '';\n    let quoteWhereClause = '';\n    let fuelWhereClause = '';\n    let requisitionWhereClause = '';\n    const queryParams: (string | number)[] = [];\n    const quoteQueryParams: (string | number)[] = [];\n    const fuelQueryParams: (string | number)[] = [];\n    const requisitionQueryParams: (string | number)[] = [];\n\n\n    if (month && month !== 'all' && year && year !== 'all') {\n      poWhereClause = 'WHERE MONTH(creationDate) = ? AND YEAR(creationDate) = ?';\n      quoteWhereClause = 'WHERE MONTH(quoteDate) = ? AND YEAR(quoteDate) = ?';\n      fuelWhereClause = 'WHERE MONTH(fuelDate) = ? AND YEAR(fuelDate) = ?';\n      requisitionWhereClause = 'WHERE MONTH(requisitionDate) = ? AND YEAR(requisitionDate) = ?';\n      \n      queryParams.push(parseInt(month, 10), parseInt(year, 10));\n      quoteQueryParams.push(parseInt(month, 10), parseInt(year, 10));\n      fuelQueryParams.push(parseInt(month, 10), parseInt(year, 10));\n      requisitionQueryParams.push(parseInt(month, 10), parseInt(year, 10));\n    } else if (year && year !== 'all') {\n      poWhereClause = 'WHERE YEAR(creationDate) = ?';\n      quoteWhereClause = 'WHERE YEAR(quoteDate) = ?';\n      fuelWhereClause = 'WHERE YEAR(fuelDate) = ?';\n      requisitionWhereClause = 'WHERE YEAR(requisitionDate) = ?';\n      \n      queryParams.push(parseInt(year, 10));\n      quoteQueryParams.push(parseInt(year, 10));\n      fuelQueryParams.push(parseInt(year, 10));\n      requisitionQueryParams.push(parseInt(year, 10));\n    }\n\n\n    // Users Stats (not time-filtered for now)\n    const [userRows]: any[] = await connection.execute('SELECT isActive, COUNT(*) as count FROM User GROUP BY isActive');\n    let totalUsers = 0;\n    let activeUsers = 0;\n    let inactiveUsers = 0;\n    userRows.forEach((row: { isActive: boolean | number, count: number | string }) => {\n      const count = Number(row.count);\n      totalUsers += count;\n      if (row.isActive) activeUsers = count; else inactiveUsers = count;\n    });\n\n    // Purchase Order Stats\n    const [poRows]: any[] = await connection.execute(`SELECT status, COUNT(*) as count FROM PurchaseOrder ${poWhereClause} GROUP BY status`, queryParams);\n    let totalPOs = 0;\n    let approvedPOs = 0;\n    let pendingPOs = 0;\n    let rejectedPOs = 0;\n    poRows.forEach((row: { status: string, count: number | string }) => {\n      const count = Number(row.count);\n      totalPOs += count;\n      if (row.status === 'Approved') approvedPOs = count;\n      else if (row.status === 'Pending Approval') pendingPOs = count;\n      else if (row.status === 'Rejected') rejectedPOs = count;\n    });\n\n    // Goods Received\n    const grnActivityBaseQuery = `\n       FROM PurchaseOrder po\n       JOIN POItem poi ON po.id = poi.poId\n       WHERE poi.quantityReceived > 0 \n    `;\n    let grnActivityWhereClause = '';\n    const grnActivityParams = [];\n    if (month && month !== 'all' && year && year !== 'all') {\n      grnActivityWhereClause = 'AND MONTH(po.creationDate) = ? AND YEAR(po.creationDate) = ?';\n      grnActivityParams.push(parseInt(month, 10), parseInt(year, 10));\n    } else if (year && year !== 'all') {\n      grnActivityWhereClause = 'AND YEAR(po.creationDate) = ?';\n      grnActivityParams.push(parseInt(year, 10));\n    }\n    const [grnPOsRows]: any[] = await connection.execute(\n      `SELECT COUNT(DISTINCT po.id) as count ${grnActivityBaseQuery} ${grnActivityWhereClause}`,\n      grnActivityParams\n    );\n    const totalPOsWithGRNActivity = Number(grnPOsRows[0]?.count || 0);\n    \n    // Approved POs for GRN stat (this count might also be filtered by date)\n    const [approvedPORowsForGRN]: any[] = await connection.execute(`SELECT COUNT(*) as count FROM PurchaseOrder WHERE status = 'Approved' ${poWhereClause ? `AND ${poWhereClause.substring(6)}` : ''}`, queryParams);\n    const totalApprovedPOsForGRN = Number(approvedPORowsForGRN[0]?.count || 0);\n\n\n    // Requisition Stats\n    const [requisitionRows]: any[] = await connection.execute(`SELECT COUNT(*) as count FROM Requisition ${requisitionWhereClause}`, requisitionQueryParams);\n    const totalRequisitions = Number(requisitionRows[0]?.count || 0);\n\n    // Fuel Records Stats\n    const [fuelRecordsRows]: any[] = await connection.execute(`SELECT COUNT(*) as count FROM FuelRecord ${fuelWhereClause}`, fuelQueryParams);\n    const totalFuelRecords = Number(fuelRecordsRows[0]?.count || 0);\n    const [fuelTagsRows]: any[] = await connection.execute('SELECT COUNT(DISTINCT id) as count FROM Tag');\n    const totalFuelTags = Number(fuelTagsRows[0]?.count || 0);\n    \n    // Client Quotes Stats\n    const [quoteRows]: any[] = await connection.execute(`SELECT status, COUNT(*) as count FROM Quote ${quoteWhereClause} GROUP BY status`, quoteQueryParams);\n    let totalQuotes = 0;\n    let approvedQuotes = 0;\n    let pendingQuotes = 0;\n    let rejectedQuotes = 0;\n    quoteRows.forEach((row: { status: string, count: number | string }) => {\n        const count = Number(row.count);\n        totalQuotes += count;\n        if (row.status === 'Approved') approvedQuotes = count;\n        else if (row.status === 'Pending Approval') pendingQuotes = count;\n        else if (row.status === 'Rejected') rejectedQuotes = count;\n    });\n\n    const responsePayload: FetchedDashboardStats = {\n      users: { total: totalUsers, active: activeUsers, inactive: inactiveUsers },\n      purchaseOrders: { total: totalPOs, approved: approvedPOs, pending: pendingPOs, rejected: rejectedPOs },\n      goodsReceived: { \n        totalApprovedPOs: totalApprovedPOsForGRN,\n        totalPOsWithGRNActivity: totalPOsWithGRNActivity\n      },\n      requisitions: { total: totalRequisitions },\n      fuel: { totalTags: totalFuelTags, totalRecords: totalFuelRecords },\n      clientQuotes: { total: totalQuotes, approved: approvedQuotes, pending: pendingQuotes, rejected: rejectedQuotes },\n    };\n    \n    return NextResponse.json(responsePayload);\n\n  } catch (error: any) {\n    console.error('Error fetching dashboard stats:', error);\n    return NextResponse.json({ error: 'Failed to fetch dashboard statistics', details: error.message }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}