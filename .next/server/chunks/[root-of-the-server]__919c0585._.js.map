{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    // throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;AAChQ,uFAAuF;AACvF,8DAA8D;AAC9D,sJAAsJ;AAC1J;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/requisitions/%5Bid%5D/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { pool } from '../../../../../backend/db.js';\nimport type { RequisitionPayload, RequisitionItem, Site, Category as CategoryType, User as UserType, Approver } from '@/types';\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const { id } = params;\n  if (!id) {\n    return NextResponse.json({ error: 'Requisition ID is required' }, { status: 400 });\n  }\n\n  let connection;\n  try {\n    connection = await pool.getConnection();\n\n    // Header justification removed from select\n    const requisitionQuery = `\n      SELECT \n        r.*, \n        s.name as siteName, s.siteCode,\n        u.name as requestorFullName,\n        app.name as approverName\n      FROM Requisition r\n      LEFT JOIN Site s ON r.siteId = s.id\n      LEFT JOIN User u ON r.requestedByUserId = u.id\n      LEFT JOIN Approver app ON r.approverId = app.id\n      WHERE r.id = ?\n    `;\n    const [reqRows]: any[] = await connection.execute(requisitionQuery, [id]);\n\n    if (reqRows.length === 0) {\n      return NextResponse.json({ error: `Requisition with ID ${id} not found.` }, { status: 404 });\n    }\n\n    const requisitionData: RequisitionPayload = {\n      ...reqRows[0],\n      siteId: Number(reqRows[0].siteId), // Ensure header siteId is number\n      requisitionDate: new Date(reqRows[0].requisitionDate).toISOString(),\n      approvalDate: reqRows[0].approvalDate ? new Date(reqRows[0].approvalDate).toISOString() : null,\n      totalEstimatedValue: parseFloat(reqRows[0].totalEstimatedValue || 0),\n      requestedByName: reqRows[0].requestorFullName || reqRows[0].requestedByName,\n      approverName: reqRows[0].approverName,\n      // Header justification removed\n      items: [], // items will be populated next\n    };\n\n    // Item siteId removed from select, item.notes now holds item justification\n    const itemsQuery = `\n      SELECT ri.id, ri.requisitionId, ri.partNumber, ri.description, ri.categoryId, ri.quantity, ri.notes, ri.createdAt, ri.updatedAt,\n             c.category as categoryName \n      FROM RequisitionItem ri\n      LEFT JOIN Category c ON ri.categoryId = c.id\n      WHERE ri.requisitionId = ?\n    `;\n    const [itemRows]: any[] = await connection.execute(itemsQuery, [id]);\n    \n    // Map to RequisitionItem type, which now has justification instead of notes, and no siteId\n    requisitionData.items = itemRows.map((item: any) => ({\n      id: item.id,\n      requisitionId: item.requisitionId,\n      partNumber: item.partNumber,\n      description: item.description,\n      categoryId: item.categoryId,\n      categoryName: item.categoryName,\n      quantity: parseInt(item.quantity, 10),\n      justification: item.notes, // `notes` from DB is now item's `justification`\n      // siteId removed from item mapping\n    })) as RequisitionItem[];\n\n    return NextResponse.json(requisitionData);\n\n  } catch (error: any) {\n    console.error(`[API_ERROR] /api/requisitions/${id} GET:`, error);\n    return NextResponse.json({ error: `Failed to fetch requisition ${id}.`, details: error.message }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const { id } = params;\n  if (!id) {\n    return NextResponse.json({ error: 'Requisition ID is required for update' }, { status: 400 });\n  }\n\n  let connection;\n  try {\n    // Expecting header siteId, no header justification. Item justification is in item.justification.\n    const requisitionData = await request.json() as Omit<RequisitionPayload, 'totalEstimatedValue' | 'items' | 'justification'> & { items: RequisitionItem[], siteId: number };\n    \n    connection = await pool.getConnection();\n    await connection.beginTransaction();\n\n    const [currentReq]:any[] = await connection.execute('SELECT status FROM Requisition WHERE id = ?', [id]);\n    if (currentReq.length === 0) {\n        await connection.rollback();\n        return NextResponse.json({ error: 'Requisition not found for update.'}, { status: 404});\n    }\n    if (currentReq[0].status !== 'Draft' && currentReq[0].status !== 'Pending Approval') {\n        await connection.rollback();\n        return NextResponse.json({ error: `Cannot update requisition. Status is '${currentReq[0].status}'. Only 'Draft' or 'Pending Approval' requisitions can be edited.`}, { status: 400});\n    }\n\n    const newStatus = requisitionData.approverId ? 'Pending Approval' : 'Draft';\n    \n    // Header justification removed from UPDATE\n    await connection.execute(\n      `UPDATE Requisition SET \n        requisitionDate = ?, requestedByUserId = ?, requestedByName = ?, siteId = ?, \n        status = ?, approverId = ?, updatedAt = NOW() \n       WHERE id = ?`, // justification removed\n      [\n        new Date(requisitionData.requisitionDate).toISOString().slice(0, 19).replace('T', ' '),\n        requisitionData.requestedByUserId || null,\n        requisitionData.requestedByName,\n        Number(requisitionData.siteId), // Header siteId\n        newStatus, \n        requisitionData.approverId || null,\n        id\n      ]\n    );\n\n    await connection.execute('DELETE FROM RequisitionItem WHERE requisitionId = ?', [id]);\n\n    if (requisitionData.items && requisitionData.items.length > 0) {\n      for (const item of requisitionData.items) {\n        // item.siteId removed from INSERT, item.justification inserted into DB 'notes' column\n        await connection.execute(\n          `INSERT INTO RequisitionItem (id, requisitionId, partNumber, description, categoryId, quantity, notes, createdAt, updatedAt)\n           VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), NOW())`, // siteId removed, notes for item justification\n          [\n            item.id || crypto.randomUUID(),\n            id, \n            item.partNumber, \n            item.description, \n            item.categoryId ? Number(item.categoryId) : null, \n            item.quantity, \n            item.justification, // This is the item-specific justification\n          ]\n        );\n      }\n    }\n\n    await connection.commit();\n    \n    // Fetch the updated requisition to return it with all joined data\n    const getUpdatedQuery = `\n      SELECT \n        r.*, \n        s.name as siteName, s.siteCode,\n        u.name as requestorFullName,\n        app.name as approverName\n      FROM Requisition r\n      LEFT JOIN Site s ON r.siteId = s.id\n      LEFT JOIN User u ON r.requestedByUserId = u.id\n      LEFT JOIN Approver app ON r.approverId = app.id\n      WHERE r.id = ?\n    `;\n    const [updatedReqRows]: any[] = await connection.execute(getUpdatedQuery, [id]);\n    const updatedRequisition: RequisitionPayload = {\n        ...updatedReqRows[0],\n        siteId: Number(updatedReqRows[0].siteId),\n        approvalDate: updatedReqRows[0].approvalDate ? new Date(updatedReqRows[0].approvalDate).toISOString() : null,\n        requisitionDate: new Date(updatedReqRows[0].requisitionDate).toISOString(),\n        items: [] // initialize items\n    };\n\n    // Re-fetch items with the new structure\n    const itemsQueryUpdated = `\n      SELECT ri.id, ri.requisitionId, ri.partNumber, ri.description, ri.categoryId, ri.quantity, ri.notes, \n             c.category as categoryName \n      FROM RequisitionItem ri\n      LEFT JOIN Category c ON ri.categoryId = c.id\n      WHERE ri.requisitionId = ?\n    `;\n    const [updatedItemRows]: any[] = await connection.execute(itemsQueryUpdated, [id]);\n    updatedRequisition.items = updatedItemRows.map((item: any) => ({\n      id: item.id,\n      requisitionId: item.requisitionId,\n      partNumber: item.partNumber,\n      description: item.description,\n      categoryId: item.categoryId,\n      categoryName: item.categoryName,\n      quantity: parseInt(item.quantity, 10),\n      justification: item.notes, // DB notes column holds item justification\n    }));\n\n    return NextResponse.json(updatedRequisition);\n\n  } catch (error: any) {\n    if (connection) await connection.rollback();\n    console.error(`[API_ERROR] /api/requisitions/${id} PUT:`, error);\n    return NextResponse.json({ error: `Failed to update requisition ${id}.`, details: error.message }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n\nexport async function DELETE(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    const { id } = params;\n    if (!id) {\n        return NextResponse.json({ error: 'Requisition ID is required' }, { status: 400 });\n    }\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        await connection.beginTransaction();\n\n        const [currentReq]:any[] = await connection.execute('SELECT status FROM Requisition WHERE id = ?', [id]);\n        if (currentReq.length === 0) {\n            await connection.rollback();\n            return NextResponse.json({ error: 'Requisition not found for deletion.'}, { status: 404});\n        }\n        if (currentReq[0].status !== 'Draft' && currentReq[0].status !== 'Rejected') {\n            await connection.rollback();\n            return NextResponse.json({ error: `Cannot delete requisition. Status is '${currentReq[0].status}'. Only 'Draft' or 'Rejected' requisitions can be deleted directly.`}, { status: 400});\n        }\n\n        await connection.execute('DELETE FROM RequisitionItem WHERE requisitionId = ?', [id]);\n        const [result]: any = await connection.execute('DELETE FROM Requisition WHERE id = ?', [id]);\n\n        if (result.affectedRows === 0) {\n            await connection.rollback();\n            return NextResponse.json({ error: 'Requisition not found or already deleted' }, { status: 404 });\n        }\n\n        await connection.commit();\n        return NextResponse.json({ message: 'Requisition deleted successfully' });\n    } catch (error: any) {\n        if (connection) await connection.rollback();\n        console.error(`[API_ERROR] /api/requisitions/${id} DELETE:`, error);\n        return NextResponse.json({ error: 'Failed to delete requisition', details: error.message }, { status: 500 });\n    } finally {\n        if (connection) connection.release();\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}