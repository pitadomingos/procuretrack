{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\n\n// Configure dotenv to load the .env file from the backend directory at module load time.\ndotenv.config({ path: path.resolve(process.cwd(), 'backend', '.env') });\n\nlet pool = null;\n\nasync function getDbPool() {\n  if (pool) {\n    return pool;\n  }\n\n  // --- Debugging Environment ---\n  console.log('[DB_INIT] Current working directory:', process.cwd());\n  console.log('[DB_INIT] Checking for environment variables...');\n  \n  try {\n    // Check for essential DB environment variables\n    const essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME', 'JWT_SECRET'];\n    const missingEnvVars = [];\n    for (const v of essentialEnvVars) {\n        if (!process.env[v]) {\n            missingEnvVars.push(v);\n        } else {\n            // Avoid logging password in production\n            if (v !== 'DB_PASSWORD' && v !== 'JWT_SECRET') {\n                console.log(`[DB_INIT] Found ENV VAR: ${v} = ${process.env[v]}`);\n            } else {\n                 console.log(`[DB_INIT] Found ENV VAR: ${v} = (hidden)`);\n            }\n        }\n    }\n    \n    if (missingEnvVars.length > 0) {\n      const errorMsg = `Configuration is incomplete. Missing variables: ${missingEnvVars.join(', ')}. Please define these in your backend/.env file. For JWT_SECRET, use a long, random string.`;\n      console.error(`[DB_INIT_ERROR] ${errorMsg}`);\n      throw new Error(errorMsg);\n    }\n\n    // --- SSL Certificate Handling ---\n    const caCertPathOrContent = process.env.DB_SSL_CA;\n    let caCertContent;\n\n    if (caCertPathOrContent) {\n      const potentialPath = path.resolve(process.cwd(), caCertPathOrContent);\n      \n      if (fs.existsSync(potentialPath) && fs.statSync(potentialPath).isFile()) {\n        console.log(`DB_INIT_INFO: DB_SSL_CA points to a file. Reading certificate from \"${potentialPath}\".`);\n        caCertContent = fs.readFileSync(potentialPath, 'utf8');\n      } else {\n        console.log(\"DB_INIT_INFO: DB_SSL_CA does not appear to be a file path. Using its content directly for SSL connection.\");\n        caCertContent = caCertPathOrContent;\n      }\n    } else {\n      console.warn(`DB_WARN: The DB_SSL_CA environment variable is not set. Connecting with SSL using system default CAs. If connection fails, please provide the path to your 'ca.pem' file in the DB_SSL_CA variable in your .env file.`);\n    }\n    \n    const sslConfig = { rejectUnauthorized: true, ca: caCertContent || undefined };\n\n    // --- Connection Pool Creation ---\n    console.log(\"DB_INIT_INFO: Creating database connection pool for the first time.\");\n    const newPool = mysql.createPool({\n      host: process.env.DB_HOST,\n      user: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n      ssl: sslConfig,\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0,\n    });\n\n    try {\n      // Test the connection before assigning it to the singleton\n      const connection = await newPool.getConnection();\n      console.log(\"DB_INIT_SUCCESS: Database connection pool created and verified successfully.\");\n      connection.release();\n    } catch (testError) {\n      console.error(\"CRITICAL_DB_INIT_ERROR: Failed to get a connection from the pool after creation.\", testError);\n      // Destroy the pool if the initial connection test fails\n      newPool.end();\n      throw testError; // Re-throw to be caught by the main catch block\n    }\n\n    pool = newPool;\n    return pool;\n\n  } catch (error) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Failed to create and verify database connection pool. Error: ${error.message}`);\n    // Re-throw the error to be caught by the calling API route\n    throw error;\n  }\n}\n\n// Export the function that provides the pool\nexport { getDbPool };\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAEA,yFAAyF;AACzF,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,WAAW;AAAQ;AAErE,IAAI,OAAO;AAEX,eAAe;IACb,IAAI,MAAM;QACR,OAAO;IACT;IAEA,gCAAgC;IAChC,QAAQ,GAAG,CAAC,wCAAwC,QAAQ,GAAG;IAC/D,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,+CAA+C;QAC/C,MAAM,mBAAmB;YAAC;YAAW;YAAW;YAAe;YAAW;SAAa;QACvF,MAAM,iBAAiB,EAAE;QACzB,KAAK,MAAM,KAAK,iBAAkB;YAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACjB,eAAe,IAAI,CAAC;YACxB,OAAO;gBACH,uCAAuC;gBACvC,IAAI,MAAM,iBAAiB,MAAM,cAAc;oBAC3C,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,GAAG,EAAE,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACnE,OAAO;oBACF,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,WAAW,CAAC;gBAC3D;YACJ;QACJ;QAEA,IAAI,eAAe,MAAM,GAAG,GAAG;YAC7B,MAAM,WAAW,CAAC,gDAAgD,EAAE,eAAe,IAAI,CAAC,MAAM,2FAA2F,CAAC;YAC1L,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,UAAU;YAC3C,MAAM,IAAI,MAAM;QAClB;QAEA,mCAAmC;QACnC,MAAM,sBAAsB,QAAQ,GAAG,CAAC,SAAS;QACjD,IAAI;QAEJ,IAAI,qBAAqB;YACvB,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI;YAElD,IAAI,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,kBAAkB,6FAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,eAAe,MAAM,IAAI;gBACvE,QAAQ,GAAG,CAAC,CAAC,oEAAoE,EAAE,cAAc,EAAE,CAAC;gBACpG,gBAAgB,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,eAAe;YACjD,OAAO;gBACL,QAAQ,GAAG,CAAC;gBACZ,gBAAgB;YAClB;QACF,OAAO;YACL,QAAQ,IAAI,CAAC,CAAC,qNAAqN,CAAC;QACtO;QAEA,MAAM,YAAY;YAAE,oBAAoB;YAAM,IAAI,iBAAiB;QAAU;QAE7E,mCAAmC;QACnC,QAAQ,GAAG,CAAC;QACZ,MAAM,UAAU,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YAC/B,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;YACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;YAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;YAChE,KAAK;YACL,oBAAoB;YACpB,iBAAiB;YACjB,YAAY;QACd;QAEA,IAAI;YACF,2DAA2D;YAC3D,MAAM,aAAa,MAAM,QAAQ,aAAa;YAC9C,QAAQ,GAAG,CAAC;YACZ,WAAW,OAAO;QACpB,EAAE,OAAO,WAAW;YAClB,QAAQ,KAAK,CAAC,oFAAoF;YAClG,wDAAwD;YACxD,QAAQ,GAAG;YACX,MAAM,WAAW,gDAAgD;QACnE;QAEA,OAAO;QACP,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,MAAM,OAAO,EAAE;QACrH,2DAA2D;QAC3D,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/requisitions/%5Bid%5D/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { getDbPool } from '../../../../../backend/db.js';\nimport type { RequisitionPayload, RequisitionItem, Site, Category as CategoryType, User as UserType, Approver } from '@/types';\nimport { randomUUID } from 'crypto';\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const { id } = params;\n  if (!id) {\n    return NextResponse.json({ error: 'Requisition ID is required' }, { status: 400 });\n  }\n\n  let connection;\n  try {\n    const pool = await getDbPool();\n    connection = await pool.getConnection();\n\n    // Header justification removed from select\n    const requisitionQuery = `\n      SELECT \n        r.*, \n        s.name as siteName, s.siteCode,\n        u.name as requestorFullName,\n        app.name as approverName\n      FROM Requisition r\n      LEFT JOIN Site s ON r.siteId = s.id\n      LEFT JOIN User u ON r.requestedByUserId = u.id\n      LEFT JOIN Approver app ON r.approverId = app.id\n      WHERE r.id = ?\n    `;\n    const [reqRows]: any[] = await connection.execute(requisitionQuery, [id]);\n\n    if (reqRows.length === 0) {\n      return NextResponse.json({ error: `Requisition with ID ${id} not found.` }, { status: 404 });\n    }\n\n    const requisitionData: RequisitionPayload = {\n      ...reqRows[0],\n      siteId: Number(reqRows[0].siteId), // Ensure header siteId is number\n      requisitionDate: new Date(reqRows[0].requisitionDate).toISOString(),\n      approvalDate: reqRows[0].approvalDate ? new Date(reqRows[0].approvalDate).toISOString() : null,\n      totalEstimatedValue: parseFloat(reqRows[0].totalEstimatedValue || 0),\n      requestedByName: reqRows[0].requestorFullName || reqRows[0].requestedByName,\n      approverName: reqRows[0].approverName,\n      // Header justification removed\n      items: [], // items will be populated next\n    };\n\n    // Item siteId removed from select, item.notes now holds item justification\n    const itemsQuery = `\n      SELECT ri.id, ri.requisitionId, ri.partNumber, ri.description, ri.categoryId, ri.quantity, ri.notes, ri.createdAt, ri.updatedAt,\n             c.category as categoryName \n      FROM RequisitionItem ri\n      LEFT JOIN Category c ON ri.categoryId = c.id\n      WHERE ri.requisitionId = ?\n    `;\n    const [itemRows]: any[] = await connection.execute(itemsQuery, [id]);\n    \n    // Map to RequisitionItem type, which now has justification instead of notes, and no siteId\n    requisitionData.items = itemRows.map((item: any) => ({\n      id: item.id,\n      requisitionId: item.requisitionId,\n      partNumber: item.partNumber,\n      description: item.description,\n      categoryId: item.categoryId,\n      categoryName: item.categoryName,\n      quantity: parseInt(item.quantity, 10),\n      justification: item.notes, // `notes` from DB is now item's `justification`\n      // siteId removed from item mapping\n    })) as RequisitionItem[];\n\n    return NextResponse.json(requisitionData);\n\n  } catch (error: any) {\n    console.error(`[API_ERROR] /api/requisitions/${id} GET:`, error);\n    return NextResponse.json({ error: `Failed to fetch requisition ${id}.`, details: error.message }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const { id } = params;\n  if (!id) {\n    return NextResponse.json({ error: 'Requisition ID is required for update' }, { status: 400 });\n  }\n\n  let connection;\n  try {\n    const pool = await getDbPool();\n    // Expecting header siteId, no header justification. Item justification is in item.justification.\n    const requisitionData = await request.json() as Omit<RequisitionPayload, 'totalEstimatedValue' | 'items' | 'justification'> & { items: RequisitionItem[], siteId: number };\n    \n    connection = await pool.getConnection();\n    await connection.beginTransaction();\n\n    const [currentReq]:any[] = await connection.execute('SELECT status FROM Requisition WHERE id = ?', [id]);\n    if (currentReq.length === 0) {\n        await connection.rollback();\n        return NextResponse.json({ error: 'Requisition not found for update.'}, { status: 404});\n    }\n    if (currentReq[0].status !== 'Draft' && currentReq[0].status !== 'Pending Approval') {\n        await connection.rollback();\n        return NextResponse.json({ error: `Cannot update requisition. Status is '${currentReq[0].status}'. Only 'Draft' or 'Pending Approval' requisitions can be edited.`}, { status: 400});\n    }\n\n    const newStatus = requisitionData.approverId ? 'Pending Approval' : 'Draft';\n    \n    // Header justification removed from UPDATE\n    await connection.execute(\n      `UPDATE Requisition SET \n        requisitionDate = ?, requestedByUserId = ?, requestedByName = ?, siteId = ?, \n        status = ?, approverId = ?, updatedAt = NOW() \n       WHERE id = ?`, // justification removed\n      [\n        new Date(requisitionData.requisitionDate).toISOString().slice(0, 19).replace('T', ' '),\n        requisitionData.requestedByUserId || null,\n        requisitionData.requestedByName,\n        Number(requisitionData.siteId), // Header siteId\n        newStatus, \n        requisitionData.approverId || null,\n        id\n      ]\n    );\n\n    await connection.execute('DELETE FROM RequisitionItem WHERE requisitionId = ?', [id]);\n\n    if (requisitionData.items && requisitionData.items.length > 0) {\n      for (const item of requisitionData.items) {\n        // item.siteId removed from INSERT, item.justification inserted into DB 'notes' column\n        await connection.execute(\n          `INSERT INTO RequisitionItem (id, requisitionId, partNumber, description, categoryId, quantity, notes, createdAt, updatedAt)\n           VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), NOW())`, // siteId removed, notes for item justification\n          [\n            item.id || randomUUID(),\n            id, \n            item.partNumber, \n            item.description, \n            item.categoryId ? Number(item.categoryId) : null, \n            item.quantity, \n            item.justification, // This is the item-specific justification\n          ]\n        );\n      }\n    }\n\n    await connection.commit();\n    \n    // Fetch the updated requisition to return it with all joined data\n    const getUpdatedQuery = `\n      SELECT \n        r.*, \n        s.name as siteName, s.siteCode,\n        u.name as requestorFullName,\n        app.name as approverName\n      FROM Requisition r\n      LEFT JOIN Site s ON r.siteId = s.id\n      LEFT JOIN User u ON r.requestedByUserId = u.id\n      LEFT JOIN Approver app ON r.approverId = app.id\n      WHERE r.id = ?\n    `;\n    const [updatedReqRows]: any[] = await connection.execute(getUpdatedQuery, [id]);\n    const updatedRequisition: RequisitionPayload = {\n        ...updatedReqRows[0],\n        siteId: Number(updatedReqRows[0].siteId),\n        approvalDate: updatedReqRows[0].approvalDate ? new Date(updatedReqRows[0].approvalDate).toISOString() : null,\n        requisitionDate: new Date(updatedReqRows[0].requisitionDate).toISOString(),\n        items: [] // initialize items\n    };\n\n    // Re-fetch items with the new structure\n    const itemsQueryUpdated = `\n      SELECT ri.id, ri.requisitionId, ri.partNumber, ri.description, ri.categoryId, ri.quantity, ri.notes, \n             c.category as categoryName \n      FROM RequisitionItem ri\n      LEFT JOIN Category c ON ri.categoryId = c.id\n      WHERE ri.requisitionId = ?\n    `;\n    const [updatedItemRows]: any[] = await connection.execute(itemsQueryUpdated, [id]);\n    updatedRequisition.items = updatedItemRows.map((item: any) => ({\n      id: item.id,\n      requisitionId: item.requisitionId,\n      partNumber: item.partNumber,\n      description: item.description,\n      categoryId: item.categoryId,\n      categoryName: item.categoryName,\n      quantity: parseInt(item.quantity, 10),\n      justification: item.notes, // DB notes column holds item justification\n    }));\n\n    return NextResponse.json(updatedRequisition);\n\n  } catch (error: any) {\n    if (connection) await connection.rollback();\n    console.error(`[API_ERROR] /api/requisitions/${id} PUT:`, error);\n    return NextResponse.json({ error: `Failed to update requisition ${id}.`, details: error.message }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n\nexport async function DELETE(\n    request: Request,\n    { params }: { params: { id: string } }\n) {\n    const { id } = params;\n    if (!id) {\n        return NextResponse.json({ error: 'Requisition ID is required' }, { status: 400 });\n    }\n    let connection;\n    try {\n        const pool = await getDbPool();\n        connection = await pool.getConnection();\n        await connection.beginTransaction();\n\n        const [currentReq]:any[] = await connection.execute('SELECT status FROM Requisition WHERE id = ?', [id]);\n        if (currentReq.length === 0) {\n            await connection.rollback();\n            return NextResponse.json({ error: 'Requisition not found for deletion.'}, { status: 404});\n        }\n        if (currentReq[0].status !== 'Draft' && currentReq[0].status !== 'Rejected') {\n            await connection.rollback();\n            return NextResponse.json({ error: `Cannot delete requisition. Status is '${currentReq[0].status}'. Only 'Draft' or 'Rejected' requisitions can be deleted directly.`}, { status: 400});\n        }\n\n        await connection.execute('DELETE FROM RequisitionItem WHERE requisitionId = ?', [id]);\n        const [result]: any = await connection.execute('DELETE FROM Requisition WHERE id = ?', [id]);\n\n        if (result.affectedRows === 0) {\n            await connection.rollback();\n            return NextResponse.json({ error: 'Requisition not found or already deleted' }, { status: 404 });\n        }\n\n        await connection.commit();\n        return NextResponse.json({ message: 'Requisition deleted successfully' });\n    } catch (error: any) {\n        if (connection) await connection.rollback();\n        console.error(`[API_ERROR] /api/requisitions/${id} DELETE:`, error);\n        return NextResponse.json({ error: 'Failed to delete requisition', details: error.message }, { status: 500 });\n    } finally {\n        if (connection) connection.release();\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}