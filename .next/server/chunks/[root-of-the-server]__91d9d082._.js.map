{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/activity-log/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport type { ActivityLogEntry } from '@/types';\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const limitParam = searchParams.get('limit');\n  const month = searchParams.get('month');\n  const year = searchParams.get('year');\n  const userFilter = searchParams.get('userFilter');\n  const actionTypeFilter = searchParams.get('actionTypeFilter');\n\n  let limit = 100;\n  if (limitParam) {\n    const parsedLimit = parseInt(limitParam, 10);\n    if (!isNaN(parsedLimit) && parsedLimit > 0) {\n      limit = parsedLimit;\n    }\n  }\n\n  console.log(`[API_INFO] /api/activity-log GET: Received params - limit: ${limit}, month: ${month}, year: ${year}, userFilter: ${userFilter}, actionTypeFilter: ${actionTypeFilter}`);\n\n  let connection;\n  try {\n    const { pool } = await import('../../../../backend/db.js');\n    connection = await pool.getConnection();\n    console.log(`[API_INFO] /api/activity-log GET: Database connection obtained.`);\n\n    let query = `\n      SELECT id, user, action, timestamp, details\n      FROM ActivityLog\n    `;\n    const whereClauses: string[] = [];\n    const queryParams: (string | number)[] = [];\n\n    if (month && month !== 'all') {\n      const parsedMonth = parseInt(month, 10);\n      if(!isNaN(parsedMonth)){\n        whereClauses.push(\"MONTH(timestamp) = ?\");\n        queryParams.push(parsedMonth);\n      } else {\n        console.warn(`[API_WARN] /api/activity-log GET: Invalid month value received: ${month}. Ignoring month filter.`);\n      }\n    }\n    if (year && year !== 'all') {\n      const parsedYear = parseInt(year, 10);\n      if(!isNaN(parsedYear)){\n        whereClauses.push(\"YEAR(timestamp) = ?\");\n        queryParams.push(parsedYear);\n      } else {\n        console.warn(`[API_WARN] /api/activity-log GET: Invalid year value received: ${year}. Ignoring year filter.`);\n      }\n    }\n    if (userFilter && userFilter.trim() !== '') {\n      whereClauses.push(\"user LIKE ?\");\n      queryParams.push(`%${userFilter.trim()}%`);\n    }\n    if (actionTypeFilter && actionTypeFilter.trim() !== '') {\n      whereClauses.push(\"action LIKE ?\");\n      queryParams.push(`%${actionTypeFilter.trim()}%`);\n    }\n\n    if (whereClauses.length > 0) {\n      query += ` WHERE ${whereClauses.join(' AND ')}`;\n    }\n\n    query += ` ORDER BY timestamp DESC LIMIT ?`;\n    queryParams.push(limit);\n    \n    console.log(`[API_INFO] /api/activity-log GET: Executing query: ${query.replace(/\\s+/g, ' ').trim()} with params: ${JSON.stringify(queryParams)}`);\n    \n    const [rows]: any[] = await connection.query(query, queryParams); \n\n    console.log(`[API_INFO] /api/activity-log GET: Successfully fetched ${rows.length} activity log entries.`);\n    \n    const activityLog: ActivityLogEntry[] = rows.map((row: any) => ({\n        ...row,\n        timestamp: new Date(row.timestamp).toLocaleString('en-GB', { \n            day: '2-digit', month: 'short', year: 'numeric', \n            hour: '2-digit', minute: '2-digit', hour12: true \n        })\n    }));\n\n    return NextResponse.json(activityLog);\n  } catch (error: any) {\n    console.error('[API_ERROR] /api/activity-log GET: Error fetching activity log:', error);\n    const errorCode = error.code || 'N/A';\n    const sqlMessage = error.sqlMessage || error.message;\n    const details = `Error Code: ${errorCode}. Message: ${sqlMessage}. SQL State: ${error.sqlState || 'N/A'}`;\n    \n    return NextResponse.json(\n        { \n            error: 'Failed to fetch activity log data from the database.', \n            details: details,\n            rawErrorMessage: error.message\n        }, \n        { status: 500 }\n    );\n  } finally {\n    if (connection) {\n        try {\n            await connection.release();\n            console.log('[API_INFO] /api/activity-log GET: Database connection released.');\n        } catch (releaseError: any) {\n            console.error('[API_ERROR] /api/activity-log GET: Error releasing DB connection:', releaseError.message);\n        }\n    }\n  }\n}\n"],"names":[],"mappings":";;;AACA;;AAGO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,aAAa,aAAa,GAAG,CAAC;IACpC,MAAM,QAAQ,aAAa,GAAG,CAAC;IAC/B,MAAM,OAAO,aAAa,GAAG,CAAC;IAC9B,MAAM,aAAa,aAAa,GAAG,CAAC;IACpC,MAAM,mBAAmB,aAAa,GAAG,CAAC;IAE1C,IAAI,QAAQ;IACZ,IAAI,YAAY;QACd,MAAM,cAAc,SAAS,YAAY;QACzC,IAAI,CAAC,MAAM,gBAAgB,cAAc,GAAG;YAC1C,QAAQ;QACV;IACF;IAEA,QAAQ,GAAG,CAAC,CAAC,2DAA2D,EAAE,MAAM,SAAS,EAAE,MAAM,QAAQ,EAAE,KAAK,cAAc,EAAE,WAAW,oBAAoB,EAAE,kBAAkB;IAEnL,IAAI;IACJ,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG;QACjB,aAAa,MAAM,KAAK,aAAa;QACrC,QAAQ,GAAG,CAAC,CAAC,+DAA+D,CAAC;QAE7E,IAAI,QAAQ,CAAC;;;IAGb,CAAC;QACD,MAAM,eAAyB,EAAE;QACjC,MAAM,cAAmC,EAAE;QAE3C,IAAI,SAAS,UAAU,OAAO;YAC5B,MAAM,cAAc,SAAS,OAAO;YACpC,IAAG,CAAC,MAAM,cAAa;gBACrB,aAAa,IAAI,CAAC;gBAClB,YAAY,IAAI,CAAC;YACnB,OAAO;gBACL,QAAQ,IAAI,CAAC,CAAC,gEAAgE,EAAE,MAAM,wBAAwB,CAAC;YACjH;QACF;QACA,IAAI,QAAQ,SAAS,OAAO;YAC1B,MAAM,aAAa,SAAS,MAAM;YAClC,IAAG,CAAC,MAAM,aAAY;gBACpB,aAAa,IAAI,CAAC;gBAClB,YAAY,IAAI,CAAC;YACnB,OAAO;gBACL,QAAQ,IAAI,CAAC,CAAC,+DAA+D,EAAE,KAAK,uBAAuB,CAAC;YAC9G;QACF;QACA,IAAI,cAAc,WAAW,IAAI,OAAO,IAAI;YAC1C,aAAa,IAAI,CAAC;YAClB,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,WAAW,IAAI,GAAG,CAAC,CAAC;QAC3C;QACA,IAAI,oBAAoB,iBAAiB,IAAI,OAAO,IAAI;YACtD,aAAa,IAAI,CAAC;YAClB,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,iBAAiB,IAAI,GAAG,CAAC,CAAC;QACjD;QAEA,IAAI,aAAa,MAAM,GAAG,GAAG;YAC3B,SAAS,CAAC,OAAO,EAAE,aAAa,IAAI,CAAC,UAAU;QACjD;QAEA,SAAS,CAAC,gCAAgC,CAAC;QAC3C,YAAY,IAAI,CAAC;QAEjB,QAAQ,GAAG,CAAC,CAAC,mDAAmD,EAAE,MAAM,OAAO,CAAC,QAAQ,KAAK,IAAI,GAAG,cAAc,EAAE,KAAK,SAAS,CAAC,cAAc;QAEjJ,MAAM,CAAC,KAAK,GAAU,MAAM,WAAW,KAAK,CAAC,OAAO;QAEpD,QAAQ,GAAG,CAAC,CAAC,uDAAuD,EAAE,KAAK,MAAM,CAAC,sBAAsB,CAAC;QAEzG,MAAM,cAAkC,KAAK,GAAG,CAAC,CAAC,MAAa,CAAC;gBAC5D,GAAG,GAAG;gBACN,WAAW,IAAI,KAAK,IAAI,SAAS,EAAE,cAAc,CAAC,SAAS;oBACvD,KAAK;oBAAW,OAAO;oBAAS,MAAM;oBACtC,MAAM;oBAAW,QAAQ;oBAAW,QAAQ;gBAChD;YACJ,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,mEAAmE;QACjF,MAAM,YAAY,MAAM,IAAI,IAAI;QAChC,MAAM,aAAa,MAAM,UAAU,IAAI,MAAM,OAAO;QACpD,MAAM,UAAU,CAAC,YAAY,EAAE,UAAU,WAAW,EAAE,WAAW,aAAa,EAAE,MAAM,QAAQ,IAAI,OAAO;QAEzG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YACI,OAAO;YACP,SAAS;YACT,iBAAiB,MAAM,OAAO;QAClC,GACA;YAAE,QAAQ;QAAI;IAEpB,SAAU;QACR,IAAI,YAAY;YACZ,IAAI;gBACA,MAAM,WAAW,OAAO;gBACxB,QAAQ,GAAG,CAAC;YAChB,EAAE,OAAO,cAAmB;gBACxB,QAAQ,KAAK,CAAC,qEAAqE,aAAa,OAAO;YAC3G;QACJ;IACF;AACF","debugId":null}}]
}