{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\n\n// Configure dotenv to load the .env file from the backend directory\ndotenv.config({ path: path.resolve(process.cwd(), 'backend', '.env') });\n\nlet pool = null;\n\nasync function getDbPool() {\n  if (pool) {\n    return pool;\n  }\n\n  // --- Debugging Environment ---\n  console.log('[DB_INIT] Current working directory:', process.cwd());\n  console.log('[DB_INIT] Checking for environment variables...');\n  \n  try {\n    // Check for essential DB environment variables\n    const essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\n    const missingEnvVars = [];\n    for (const v of essentialEnvVars) {\n        if (!process.env[v]) {\n            missingEnvVars.push(v);\n        } else {\n            // Avoid logging password in production\n            if (v !== 'DB_PASSWORD') {\n                console.log(`[DB_INIT] Found ENV VAR: ${v} = ${process.env[v]}`);\n            } else {\n                 console.log(`[DB_INIT] Found ENV VAR: DB_PASSWORD = (hidden)`);\n            }\n        }\n    }\n    \n    if (missingEnvVars.length > 0) {\n      const errorMsg = `Database configuration is incomplete. Missing variables: ${missingEnvVars.join(', ')}. Please define these in your root .env file.`;\n      console.error(`[DB_INIT_ERROR] ${errorMsg}`);\n      throw new Error(errorMsg);\n    }\n\n    // --- SSL Certificate Handling ---\n    const caCertPathOrContent = process.env.DB_SSL_CA;\n    let caCertContent;\n\n    if (caCertPathOrContent) {\n      const potentialPath = path.resolve(process.cwd(), caCertPathOrContent);\n      \n      if (fs.existsSync(potentialPath) && fs.statSync(potentialPath).isFile()) {\n        console.log(`DB_INIT_INFO: DB_SSL_CA points to a file. Reading certificate from \"${potentialPath}\".`);\n        caCertContent = fs.readFileSync(potentialPath, 'utf8');\n      } else {\n        console.log(\"DB_INIT_INFO: DB_SSL_CA does not appear to be a file path. Using its content directly for SSL connection.\");\n        caCertContent = caCertPathOrContent;\n      }\n    } else {\n      console.warn(`DB_WARN: The DB_SSL_CA environment variable is not set. Connecting with SSL using system default CAs. If connection fails, please provide the path to your 'ca.pem' file in the DB_SSL_CA variable in your .env file.`);\n    }\n    \n    const sslConfig = { rejectUnauthorized: true, ca: caCertContent || undefined };\n\n    // --- Connection Pool Creation ---\n    console.log(\"DB_INIT_INFO: Creating database connection pool for the first time.\");\n    const newPool = mysql.createPool({\n      host: process.env.DB_HOST,\n      user: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n      ssl: sslConfig,\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0,\n    });\n\n    try {\n      // Test the connection before assigning it to the singleton\n      const connection = await newPool.getConnection();\n      console.log(\"DB_INIT_SUCCESS: Database connection pool created and verified successfully.\");\n      connection.release();\n    } catch (testError) {\n      console.error(\"CRITICAL_DB_INIT_ERROR: Failed to get a connection from the pool after creation.\", testError);\n      // Destroy the pool if the initial connection test fails\n      newPool.end();\n      throw testError; // Re-throw to be caught by the main catch block\n    }\n\n    pool = newPool;\n    return pool;\n\n  } catch (error) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Failed to create and verify database connection pool. Error: ${error.message}`);\n    // Re-throw the error to be caught by the calling API route\n    throw error;\n  }\n}\n\n// Export the function that provides the pool\nexport { getDbPool };\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAEA,oEAAoE;AACpE,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,WAAW;AAAQ;AAErE,IAAI,OAAO;AAEX,eAAe;IACb,IAAI,MAAM;QACR,OAAO;IACT;IAEA,gCAAgC;IAChC,QAAQ,GAAG,CAAC,wCAAwC,QAAQ,GAAG;IAC/D,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,+CAA+C;QAC/C,MAAM,mBAAmB;YAAC;YAAW;YAAW;YAAe;SAAU;QACzE,MAAM,iBAAiB,EAAE;QACzB,KAAK,MAAM,KAAK,iBAAkB;YAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACjB,eAAe,IAAI,CAAC;YACxB,OAAO;gBACH,uCAAuC;gBACvC,IAAI,MAAM,eAAe;oBACrB,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,GAAG,EAAE,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACnE,OAAO;oBACF,QAAQ,GAAG,CAAC,CAAC,+CAA+C,CAAC;gBAClE;YACJ;QACJ;QAEA,IAAI,eAAe,MAAM,GAAG,GAAG;YAC7B,MAAM,WAAW,CAAC,yDAAyD,EAAE,eAAe,IAAI,CAAC,MAAM,6CAA6C,CAAC;YACrJ,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,UAAU;YAC3C,MAAM,IAAI,MAAM;QAClB;QAEA,mCAAmC;QACnC,MAAM,sBAAsB,QAAQ,GAAG,CAAC,SAAS;QACjD,IAAI;QAEJ,IAAI,qBAAqB;YACvB,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI;YAElD,IAAI,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,kBAAkB,6FAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,eAAe,MAAM,IAAI;gBACvE,QAAQ,GAAG,CAAC,CAAC,oEAAoE,EAAE,cAAc,EAAE,CAAC;gBACpG,gBAAgB,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,eAAe;YACjD,OAAO;gBACL,QAAQ,GAAG,CAAC;gBACZ,gBAAgB;YAClB;QACF,OAAO;YACL,QAAQ,IAAI,CAAC,CAAC,qNAAqN,CAAC;QACtO;QAEA,MAAM,YAAY;YAAE,oBAAoB;YAAM,IAAI,iBAAiB;QAAU;QAE7E,mCAAmC;QACnC,QAAQ,GAAG,CAAC;QACZ,MAAM,UAAU,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YAC/B,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;YACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;YAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;YAChE,KAAK;YACL,oBAAoB;YACpB,iBAAiB;YACjB,YAAY;QACd;QAEA,IAAI;YACF,2DAA2D;YAC3D,MAAM,aAAa,MAAM,QAAQ,aAAa;YAC9C,QAAQ,GAAG,CAAC;YACZ,WAAW,OAAO;QACpB,EAAE,OAAO,WAAW;YAClB,QAAQ,KAAK,CAAC,oFAAoF;YAClG,wDAAwD;YACxD,QAAQ,GAAG;YACX,MAAM,WAAW,gDAAgD;QACnE;QAEA,OAAO;QACP,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,MAAM,OAAO,EAAE;QACrH,2DAA2D;QAC3D,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/purchase-orders/%5BpoId%5D/approve/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { getDbPool } from '../../../../../../backend/db.js'; // Adjusted path\nimport type { PurchaseOrderPayload } from '@/types';\n\nexport async function POST(\n  request: Request,\n  { params }: { params: { poId: string } }\n) {\n  const poIdParam = params.poId;\n  const numericPoId = Number(poIdParam);\n\n  if (!poIdParam || isNaN(numericPoId)) {\n    return NextResponse.json({ error: 'Valid Purchase Order ID is required' }, { status: 400 });\n  }\n\n  let connection;\n  try {\n    const pool = await getDbPool();\n    connection = await pool.getConnection();\n    await connection.beginTransaction();\n\n    // 1. Fetch the Purchase Order\n    const [poRows]: any[] = await connection.execute('SELECT * FROM PurchaseOrder WHERE id = ? FOR UPDATE', [numericPoId]);\n    if (poRows.length === 0) {\n      await connection.rollback();\n      return NextResponse.json({ error: `Purchase Order with ID ${numericPoId} not found` }, { status: 404 });\n    }\n    const purchaseOrder: PurchaseOrderPayload = poRows[0] as PurchaseOrderPayload;\n\n    // 2. Check if PO is already approved or not pending\n    if (purchaseOrder.status !== 'Pending Approval') {\n      await connection.rollback();\n      return NextResponse.json({ error: `Purchase Order is not pending approval. Current status: ${purchaseOrder.status}` }, { status: 400 });\n    }\n\n    // 3. Get the assigned approverId from the PO (still useful for context if needed later, but not directly used in this simplified update)\n    const assignedApproverId = purchaseOrder.approverId;\n    if (!assignedApproverId) {\n      await connection.rollback();\n      // This check remains as a PO should have an assigned approver to be approved.\n      return NextResponse.json({ error: 'No approver assigned to this Purchase Order. Cannot approve.' }, { status: 400 });\n    }\n\n    // 4. Update the Purchase Order status and approval date\n    const approvalDate = new Date();\n    await connection.execute(\n      'UPDATE PurchaseOrder SET status = ?, approvalDate = ? WHERE id = ?',\n      ['Approved', approvalDate, numericPoId]\n    );\n\n    await connection.commit();\n\n    return NextResponse.json({ \n      message: 'Purchase Order approved successfully.', \n      poId: numericPoId, \n      newStatus: 'Approved', \n      approvalDate: approvalDate.toISOString(),\n    });\n\n  } catch (error: any) {\n    if (connection) await connection.rollback();\n    console.error(`Error approving PO ${poIdParam}: Server-side full error:`, error); \n    \n    let errorDetails = 'An unknown error occurred on the server.';\n    let errorStack = '';\n\n    if (error instanceof Error) {\n      errorDetails = error.message;\n      errorStack = error.stack || '';\n    } else if (typeof error === 'string') {\n      errorDetails = error;\n    } else if (error && typeof error.message === 'string') {\n      errorDetails = error.message;\n      if (typeof error.stack === 'string') {\n        errorStack = error.stack;\n      }\n    }\n\n    return NextResponse.json({ \n      error: `Failed to approve Purchase Order ${poIdParam}.`, \n      details: errorDetails,\n      stack: errorStack \n    }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA,mMAA6D,gBAAgB;;;AAGtE,eAAe,KACpB,OAAgB,EAChB,EAAE,MAAM,EAAgC;IAExC,MAAM,YAAY,OAAO,IAAI;IAC7B,MAAM,cAAc,OAAO;IAE3B,IAAI,CAAC,aAAa,MAAM,cAAc;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsC,GAAG;YAAE,QAAQ;QAAI;IAC3F;IAEA,IAAI;IACJ,IAAI;QACF,MAAM,OAAO,MAAM,CAAA,GAAA,+GAAA,CAAA,YAAS,AAAD;QAC3B,aAAa,MAAM,KAAK,aAAa;QACrC,MAAM,WAAW,gBAAgB;QAEjC,8BAA8B;QAC9B,MAAM,CAAC,OAAO,GAAU,MAAM,WAAW,OAAO,CAAC,uDAAuD;YAAC;SAAY;QACrH,IAAI,OAAO,MAAM,KAAK,GAAG;YACvB,MAAM,WAAW,QAAQ;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,uBAAuB,EAAE,YAAY,UAAU,CAAC;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACvG;QACA,MAAM,gBAAsC,MAAM,CAAC,EAAE;QAErD,oDAAoD;QACpD,IAAI,cAAc,MAAM,KAAK,oBAAoB;YAC/C,MAAM,WAAW,QAAQ;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,wDAAwD,EAAE,cAAc,MAAM,EAAE;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACvI;QAEA,yIAAyI;QACzI,MAAM,qBAAqB,cAAc,UAAU;QACnD,IAAI,CAAC,oBAAoB;YACvB,MAAM,WAAW,QAAQ;YACzB,8EAA8E;YAC9E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA+D,GAAG;gBAAE,QAAQ;YAAI;QACpH;QAEA,wDAAwD;QACxD,MAAM,eAAe,IAAI;QACzB,MAAM,WAAW,OAAO,CACtB,sEACA;YAAC;YAAY;YAAc;SAAY;QAGzC,MAAM,WAAW,MAAM;QAEvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN,WAAW;YACX,cAAc,aAAa,WAAW;QACxC;IAEF,EAAE,OAAO,OAAY;QACnB,IAAI,YAAY,MAAM,WAAW,QAAQ;QACzC,QAAQ,KAAK,CAAC,CAAC,mBAAmB,EAAE,UAAU,yBAAyB,CAAC,EAAE;QAE1E,IAAI,eAAe;QACnB,IAAI,aAAa;QAEjB,IAAI,iBAAiB,OAAO;YAC1B,eAAe,MAAM,OAAO;YAC5B,aAAa,MAAM,KAAK,IAAI;QAC9B,OAAO,IAAI,OAAO,UAAU,UAAU;YACpC,eAAe;QACjB,OAAO,IAAI,SAAS,OAAO,MAAM,OAAO,KAAK,UAAU;YACrD,eAAe,MAAM,OAAO;YAC5B,IAAI,OAAO,MAAM,KAAK,KAAK,UAAU;gBACnC,aAAa,MAAM,KAAK;YAC1B;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO,CAAC,iCAAiC,EAAE,UAAU,CAAC,CAAC;YACvD,SAAS;YACT,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB,SAAU;QACR,IAAI,YAAY,WAAW,OAAO;IACpC;AACF","debugId":null}}]
}