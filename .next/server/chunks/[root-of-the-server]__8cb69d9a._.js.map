{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    // throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;AAChQ,uFAAuF;AACvF,8DAA8D;AAC9D,sJAAsJ;AAC1J;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/purchase-orders/%5BpoId%5D/approve/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { pool } from '../../../../../../backend/db.js'; // Adjusted path\nimport type { PurchaseOrderPayload } from '@/types';\n\nexport async function POST(\n  request: Request,\n  { params }: { params: { poId: string } }\n) {\n  const poIdParam = params.poId;\n  const numericPoId = Number(poIdParam);\n\n  if (!poIdParam || isNaN(numericPoId)) {\n    return NextResponse.json({ error: 'Valid Purchase Order ID is required' }, { status: 400 });\n  }\n\n  let connection;\n  try {\n    connection = await pool.getConnection();\n    await connection.beginTransaction();\n\n    // 1. Fetch the Purchase Order\n    const [poRows]: any[] = await connection.execute('SELECT * FROM PurchaseOrder WHERE id = ? FOR UPDATE', [numericPoId]);\n    if (poRows.length === 0) {\n      await connection.rollback();\n      return NextResponse.json({ error: `Purchase Order with ID ${numericPoId} not found` }, { status: 404 });\n    }\n    const purchaseOrder: PurchaseOrderPayload = poRows[0] as PurchaseOrderPayload;\n\n    // 2. Check if PO is already approved or not pending\n    if (purchaseOrder.status !== 'Pending Approval') {\n      await connection.rollback();\n      return NextResponse.json({ error: `Purchase Order is not pending approval. Current status: ${purchaseOrder.status}` }, { status: 400 });\n    }\n\n    // 3. Get the assigned approverId from the PO (still useful for context if needed later, but not directly used in this simplified update)\n    const assignedApproverId = purchaseOrder.approverId;\n    if (!assignedApproverId) {\n      await connection.rollback();\n      // This check remains as a PO should have an assigned approver to be approved.\n      return NextResponse.json({ error: 'No approver assigned to this Purchase Order. Cannot approve.' }, { status: 400 });\n    }\n\n    // 4. Update the Purchase Order status and approval date\n    const approvalDate = new Date();\n    await connection.execute(\n      'UPDATE PurchaseOrder SET status = ?, approvalDate = ? WHERE id = ?',\n      ['Approved', approvalDate, numericPoId]\n    );\n\n    await connection.commit();\n\n    return NextResponse.json({ \n      message: 'Purchase Order approved successfully.', \n      poId: numericPoId, \n      newStatus: 'Approved', \n      approvalDate: approvalDate.toISOString(),\n    });\n\n  } catch (error: any) {\n    if (connection) await connection.rollback();\n    console.error(`Error approving PO ${poIdParam}: Server-side full error:`, error); \n    \n    let errorDetails = 'An unknown error occurred on the server.';\n    let errorStack = '';\n\n    if (error instanceof Error) {\n      errorDetails = error.message;\n      errorStack = error.stack || '';\n    } else if (typeof error === 'string') {\n      errorDetails = error;\n    } else if (error && typeof error.message === 'string') {\n      errorDetails = error.message;\n      if (typeof error.stack === 'string') {\n        errorStack = error.stack;\n      }\n    }\n\n    return NextResponse.json({ \n      error: `Failed to approve Purchase Order ${poIdParam}.`, \n      details: errorDetails,\n      stack: errorStack \n    }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA,mMAAwD,gBAAgB;;;AAGjE,eAAe,KACpB,OAAgB,EAChB,EAAE,MAAM,EAAgC;IAExC,MAAM,YAAY,OAAO,IAAI;IAC7B,MAAM,cAAc,OAAO;IAE3B,IAAI,CAAC,aAAa,MAAM,cAAc;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAsC,GAAG;YAAE,QAAQ;QAAI;IAC3F;IAEA,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,+GAAA,CAAA,OAAI,CAAC,aAAa;QACrC,MAAM,WAAW,gBAAgB;QAEjC,8BAA8B;QAC9B,MAAM,CAAC,OAAO,GAAU,MAAM,WAAW,OAAO,CAAC,uDAAuD;YAAC;SAAY;QACrH,IAAI,OAAO,MAAM,KAAK,GAAG;YACvB,MAAM,WAAW,QAAQ;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,uBAAuB,EAAE,YAAY,UAAU,CAAC;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACvG;QACA,MAAM,gBAAsC,MAAM,CAAC,EAAE;QAErD,oDAAoD;QACpD,IAAI,cAAc,MAAM,KAAK,oBAAoB;YAC/C,MAAM,WAAW,QAAQ;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,wDAAwD,EAAE,cAAc,MAAM,EAAE;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACvI;QAEA,yIAAyI;QACzI,MAAM,qBAAqB,cAAc,UAAU;QACnD,IAAI,CAAC,oBAAoB;YACvB,MAAM,WAAW,QAAQ;YACzB,8EAA8E;YAC9E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA+D,GAAG;gBAAE,QAAQ;YAAI;QACpH;QAEA,wDAAwD;QACxD,MAAM,eAAe,IAAI;QACzB,MAAM,WAAW,OAAO,CACtB,sEACA;YAAC;YAAY;YAAc;SAAY;QAGzC,MAAM,WAAW,MAAM;QAEvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN,WAAW;YACX,cAAc,aAAa,WAAW;QACxC;IAEF,EAAE,OAAO,OAAY;QACnB,IAAI,YAAY,MAAM,WAAW,QAAQ;QACzC,QAAQ,KAAK,CAAC,CAAC,mBAAmB,EAAE,UAAU,yBAAyB,CAAC,EAAE;QAE1E,IAAI,eAAe;QACnB,IAAI,aAAa;QAEjB,IAAI,iBAAiB,OAAO;YAC1B,eAAe,MAAM,OAAO;YAC5B,aAAa,MAAM,KAAK,IAAI;QAC9B,OAAO,IAAI,OAAO,UAAU,UAAU;YACpC,eAAe;QACjB,OAAO,IAAI,SAAS,OAAO,MAAM,OAAO,KAAK,UAAU;YACrD,eAAe,MAAM,OAAO;YAC5B,IAAI,OAAO,MAAM,KAAK,KAAK,UAAU;gBACnC,aAAa,MAAM,KAAK;YAC1B;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO,CAAC,iCAAiC,EAAE,UAAU,CAAC,CAAC;YACvD,SAAS;YACT,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB,SAAU;QACR,IAAI,YAAY,WAAW,OAAO;IACpC;AACF","debugId":null}}]
}