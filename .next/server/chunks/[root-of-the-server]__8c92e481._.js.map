{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;IAChQ,uFAAuF;IACvF,8DAA8D;IAC9D,MAAM,IAAI,MAAM,CAAC,2CAA2C,EAAE,eAAe,IAAI,CAAC,MAAM,wDAAwD,CAAC;AACrJ;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/suppliers/route.js"],"sourcesContent":["\nimport { pool } from '../../../../backend/db.js';\nimport { NextResponse } from 'next/server';\nimport multer from 'multer';\nimport csv from 'csv-parser';\nimport { Readable } from 'stream'; // Import Readable stream\n\nexport async function GET() {\n  try {\n    const [rows] = await pool.execute('SELECT * FROM Supplier');\n    return NextResponse.json(rows);\n  } catch (error) {\n    console.error('Error fetching suppliers:', error);\n    return NextResponse.json({ error: 'Failed to fetch suppliers' }, { status: 500 });\n  }\n}\n\n// Configure multer for file uploads\n// Using memoryStorage for temporary storage\nconst upload = multer({ storage: multer.memoryStorage() });\n\n// Helper function to run multer middleware (needed for Next.js API Routes with multer)\nconst runMiddleware = (req, res, fn) => {\n  return new Promise((resolve, reject) => {\n    fn(req, res, (result) => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n      return resolve(result);\n    });\n  });\n};\n\n// Ensure the request is not body-parsed by Next.js for file uploads\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\n\n// Export a POST handler for file uploads\nexport async function POST(request) {\n  const res = new NextResponse(); // Create a NextResponse instance for multer\n\n  try {\n    // Run the multer middleware\n    await runMiddleware(request, res, upload.single('file'));\n\n    const file = request.file; // Access the uploaded file (available after multer processing)\n\n    if (!file) {\n      return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });\n    }\n\n    const results = [];\n    // Create a readable stream from the file buffer\n    const stream = Readable.from(file.buffer);\n\n    await new Promise((resolve, reject) => {\n      stream\n        .pipe(csv())\n        .on('data', (data) => results.push(data))\n        .on('end', () => {\n          console.log('Parsed CSV data for suppliers:', results);\n          // TODO: Add logic for validating and inserting supplier data into the database\n          resolve();\n        })\n        .on('error', (error) => reject(error));\n    });\n\n    return NextResponse.json({ message: 'Supplier file uploaded and parsed successfully', data: results });\n\n  } catch (error) {\n    console.error('Error uploading or parsing supplier CSV:', error);\n    // Check if the error is from multer (e.g., file size limit)\n    if (error instanceof multer.MulterError) {\n      return NextResponse.json({ error: `Multer error: ${error.message}` }, { status: 400 });\n    }\n    // General error\n    return NextResponse.json({ error: 'Failed to upload or process supplier file' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;AACA,oLAAmC,yBAAyB;;;;;;AAErD,eAAe;IACpB,IAAI;QACF,MAAM,CAAC,KAAK,GAAG,MAAM,+GAAA,CAAA,OAAI,CAAC,OAAO,CAAC;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF;AAEA,oCAAoC;AACpC,4CAA4C;AAC5C,MAAM,SAAS,CAAA,GAAA,iIAAA,CAAA,UAAM,AAAD,EAAE;IAAE,SAAS,iIAAA,CAAA,UAAM,CAAC,aAAa;AAAG;AAExD,uFAAuF;AACvF,MAAM,gBAAgB,CAAC,KAAK,KAAK;IAC/B,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,GAAG,KAAK,KAAK,CAAC;YACZ,IAAI,kBAAkB,OAAO;gBAC3B,OAAO,OAAO;YAChB;YACA,OAAO,QAAQ;QACjB;IACF;AACF;AAGO,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;IACd;AACF;AAIO,eAAe,KAAK,OAAO;IAChC,MAAM,MAAM,IAAI,gIAAA,CAAA,eAAY,IAAI,4CAA4C;IAE5E,IAAI;QACF,4BAA4B;QAC5B,MAAM,cAAc,SAAS,KAAK,OAAO,MAAM,CAAC;QAEhD,MAAM,OAAO,QAAQ,IAAI,EAAE,+DAA+D;QAE1F,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,MAAM,UAAU,EAAE;QAClB,gDAAgD;QAChD,MAAM,SAAS,qGAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,KAAK,MAAM;QAExC,MAAM,IAAI,QAAQ,CAAC,SAAS;YAC1B,OACG,IAAI,CAAC,CAAA,GAAA,wIAAA,CAAA,UAAG,AAAD,KACP,EAAE,CAAC,QAAQ,CAAC,OAAS,QAAQ,IAAI,CAAC,OAClC,EAAE,CAAC,OAAO;gBACT,QAAQ,GAAG,CAAC,kCAAkC;gBAC9C,+EAA+E;gBAC/E;YACF,GACC,EAAE,CAAC,SAAS,CAAC,QAAU,OAAO;QACnC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAkD,MAAM;QAAQ;IAEtG,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,4DAA4D;QAC5D,IAAI,iBAAiB,iIAAA,CAAA,UAAM,CAAC,WAAW,EAAE;YACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,cAAc,EAAE,MAAM,OAAO,EAAE;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACtF;QACA,gBAAgB;QAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4C,GAAG;YAAE,QAAQ;QAAI;IACjG;AACF","debugId":null}}]
}