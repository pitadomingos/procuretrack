{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\n\n// Configure dotenv to load the .env file from the backend directory at module load time.\ndotenv.config({ path: path.resolve(process.cwd(), 'backend', '.env') });\n\nlet pool = null;\n\nasync function getDbPool() {\n  if (pool) {\n    return pool;\n  }\n\n  // --- Debugging Environment ---\n  console.log('[DB_INIT] Current working directory:', process.cwd());\n  console.log('[DB_INIT] Checking for environment variables...');\n  \n  try {\n    // Check for essential DB environment variables\n    const essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME', 'JWT_SECRET'];\n    const missingEnvVars = [];\n    for (const v of essentialEnvVars) {\n        if (!process.env[v]) {\n            missingEnvVars.push(v);\n        } else {\n            // Avoid logging password in production\n            if (v !== 'DB_PASSWORD' && v !== 'JWT_SECRET') {\n                console.log(`[DB_INIT] Found ENV VAR: ${v} = ${process.env[v]}`);\n            } else {\n                 console.log(`[DB_INIT] Found ENV VAR: ${v} = (hidden)`);\n            }\n        }\n    }\n    \n    if (missingEnvVars.length > 0) {\n      const errorMsg = `Configuration is incomplete. Missing variables: ${missingEnvVars.join(', ')}. Please define these in your backend/.env file. For JWT_SECRET, use a long, random string.`;\n      console.error(`[DB_INIT_ERROR] ${errorMsg}`);\n      throw new Error(errorMsg);\n    }\n\n    // --- SSL Certificate Handling ---\n    const caCertPathOrContent = process.env.DB_SSL_CA;\n    let caCertContent;\n\n    if (caCertPathOrContent) {\n      const potentialPath = path.resolve(process.cwd(), caCertPathOrContent);\n      \n      if (fs.existsSync(potentialPath) && fs.statSync(potentialPath).isFile()) {\n        console.log(`DB_INIT_INFO: DB_SSL_CA points to a file. Reading certificate from \"${potentialPath}\".`);\n        caCertContent = fs.readFileSync(potentialPath, 'utf8');\n      } else {\n        console.log(\"DB_INIT_INFO: DB_SSL_CA does not appear to be a file path. Using its content directly for SSL connection.\");\n        caCertContent = caCertPathOrContent;\n      }\n    } else {\n      console.warn(`DB_WARN: The DB_SSL_CA environment variable is not set. Connecting with SSL using system default CAs. If connection fails, please provide the path to your 'ca.pem' file in the DB_SSL_CA variable in your .env file.`);\n    }\n    \n    const sslConfig = { rejectUnauthorized: true, ca: caCertContent || undefined };\n\n    // --- Connection Pool Creation ---\n    console.log(\"DB_INIT_INFO: Creating database connection pool for the first time.\");\n    const newPool = mysql.createPool({\n      host: process.env.DB_HOST,\n      user: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n      ssl: sslConfig,\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0,\n    });\n\n    try {\n      // Test the connection before assigning it to the singleton\n      const connection = await newPool.getConnection();\n      console.log(\"DB_INIT_SUCCESS: Database connection pool created and verified successfully.\");\n      connection.release();\n    } catch (testError) {\n      console.error(\"CRITICAL_DB_INIT_ERROR: Failed to get a connection from the pool after creation.\", testError);\n      // Destroy the pool if the initial connection test fails\n      newPool.end();\n      throw testError; // Re-throw to be caught by the main catch block\n    }\n\n    pool = newPool;\n    return pool;\n\n  } catch (error) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Failed to create and verify database connection pool. Error: ${error.message}`);\n    // Re-throw the error to be caught by the calling API route\n    throw error;\n  }\n}\n\n// Export the function that provides the pool\nexport { getDbPool };\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAEA,yFAAyF;AACzF,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,WAAW;AAAQ;AAErE,IAAI,OAAO;AAEX,eAAe;IACb,IAAI,MAAM;QACR,OAAO;IACT;IAEA,gCAAgC;IAChC,QAAQ,GAAG,CAAC,wCAAwC,QAAQ,GAAG;IAC/D,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,+CAA+C;QAC/C,MAAM,mBAAmB;YAAC;YAAW;YAAW;YAAe;YAAW;SAAa;QACvF,MAAM,iBAAiB,EAAE;QACzB,KAAK,MAAM,KAAK,iBAAkB;YAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACjB,eAAe,IAAI,CAAC;YACxB,OAAO;gBACH,uCAAuC;gBACvC,IAAI,MAAM,iBAAiB,MAAM,cAAc;oBAC3C,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,GAAG,EAAE,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACnE,OAAO;oBACF,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,WAAW,CAAC;gBAC3D;YACJ;QACJ;QAEA,IAAI,eAAe,MAAM,GAAG,GAAG;YAC7B,MAAM,WAAW,CAAC,gDAAgD,EAAE,eAAe,IAAI,CAAC,MAAM,2FAA2F,CAAC;YAC1L,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,UAAU;YAC3C,MAAM,IAAI,MAAM;QAClB;QAEA,mCAAmC;QACnC,MAAM,sBAAsB,QAAQ,GAAG,CAAC,SAAS;QACjD,IAAI;QAEJ,IAAI,qBAAqB;YACvB,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI;YAElD,IAAI,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,kBAAkB,6FAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,eAAe,MAAM,IAAI;gBACvE,QAAQ,GAAG,CAAC,CAAC,oEAAoE,EAAE,cAAc,EAAE,CAAC;gBACpG,gBAAgB,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,eAAe;YACjD,OAAO;gBACL,QAAQ,GAAG,CAAC;gBACZ,gBAAgB;YAClB;QACF,OAAO;YACL,QAAQ,IAAI,CAAC,CAAC,qNAAqN,CAAC;QACtO;QAEA,MAAM,YAAY;YAAE,oBAAoB;YAAM,IAAI,iBAAiB;QAAU;QAE7E,mCAAmC;QACnC,QAAQ,GAAG,CAAC;QACZ,MAAM,UAAU,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YAC/B,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;YACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;YAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;YAChE,KAAK;YACL,oBAAoB;YACpB,iBAAiB;YACjB,YAAY;QACd;QAEA,IAAI;YACF,2DAA2D;YAC3D,MAAM,aAAa,MAAM,QAAQ,aAAa;YAC9C,QAAQ,GAAG,CAAC;YACZ,WAAW,OAAO;QACpB,EAAE,OAAO,WAAW;YAClB,QAAQ,KAAK,CAAC,oFAAoF;YAClG,wDAAwD;YACxD,QAAQ,GAAG;YACX,MAAM,WAAW,gDAAgD;QACnE;QAEA,OAAO;QACP,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,MAAM,OAAO,EAAE;QACrH,2DAA2D;QAC3D,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/clients/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { getDbPool } from '../../../../backend/db.js';\nimport type { Client } from '@/types';\nimport csv from 'csv-parser';\nimport { Readable } from 'stream';\nimport { randomUUID } from 'crypto';\n\nexport async function GET() {\n  console.log('[API_INFO] /api/clients GET: Received request to fetch clients.');\n  try {\n    const pool = await getDbPool();\n    const [rows] = await pool.execute('SELECT id, name, address, city, country, contactPerson, email, createdAt, updatedAt FROM Client ORDER BY name ASC');\n    console.log(`[API_INFO] /api/clients GET: Successfully fetched ${Array.isArray(rows) ? rows.length : 0} clients from DB.`);\n    return NextResponse.json(rows);\n  } catch (error: any) {\n    console.error('[API_ERROR] /api/clients GET: Error fetching clients from DB:', error);\n    // Log more detailed error information if available\n    console.error('[API_ERROR_DETAILS] /api/clients GET: Error message:', error.message);\n    console.error('[API_ERROR_DETAILS] /api/clients GET: Error name:', error.name);\n    console.error('[API_ERROR_DETAILS] /api/clients GET: Error code (if DB error):', error.code);\n    console.error('[API_ERROR_DETAILS] /api/clients GET: Error stack:', error.stack);\n    return NextResponse.json(\n        { \n            error: 'Failed to fetch clients from database. Please check server logs for more details.', \n            details: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error.'\n        }, \n        { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  const contentType = request.headers.get('content-type');\n  const pool = await getDbPool();\n\n  if (contentType && contentType.includes('multipart/form-data')) {\n    console.log('[API_INFO] /api/clients POST: Received multipart/form-data request for CSV upload.');\n    try {\n      const formData = await request.formData();\n      const file = formData.get('file') as File | null;\n      \n      if (!file) {\n        console.error('[API_ERROR] /api/clients POST CSV: No file found in formData.');\n        return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });\n      }\n      console.log(`[API_INFO] /api/clients POST CSV: Received file: ${file.name}, size: ${file.size}, type: ${file.type}`);\n      \n      const fileBuffer = Buffer.from(await file.arrayBuffer());\n      const results: any[] = [];\n      const stream = Readable.from(fileBuffer);\n      let firstRecordLogged = false;\n\n      console.log('[API_INFO] /api/clients POST CSV: Starting CSV parsing...');\n      await new Promise<void>((resolve, reject) => {\n        stream\n          .pipe(csv({\n            mapHeaders: ({ header, index }) => {\n              const trimmedHeader = header.trim();\n              console.log(`[API_DEBUG] /api/clients POST CSV: Mapped CSV header at index ${index}: '${header}' to '${trimmedHeader}'`);\n              return trimmedHeader;\n            }\n          }))\n          .on('headers', (headers) => {\n            console.log('[API_INFO] /api/clients POST CSV: Detected CSV Headers:', headers);\n          })\n          .on('data', (data) => {\n            if (!firstRecordLogged) {\n              console.log('[API_DEBUG] /api/clients POST CSV: First parsed data record from CSV:', data);\n              firstRecordLogged = true;\n            }\n            results.push(data);\n          })\n          .on('end', () => {\n            console.log(`[API_INFO] /api/clients POST CSV: CSV parsing finished. ${results.length} records found.`);\n            resolve();\n          })\n          .on('error', (parseError) => {\n            console.error('[API_ERROR] /api/clients POST CSV: Error during CSV parsing:', parseError);\n            reject(parseError);\n          });\n      });\n\n      if (results.length === 0) {\n        console.warn('[API_WARN] /api/clients POST CSV: CSV file is empty or could not be parsed into records.');\n        return NextResponse.json({ message: 'CSV file is empty or yielded no records.' }, { status: 400 });\n      }\n\n      let successfulInserts = 0;\n      let failedInserts = 0;\n      const errors: string[] = [];\n      \n      const connection = await pool.getConnection();\n      console.log('[API_INFO] /api/clients POST CSV: Database connection obtained for batch insert/update.');\n      try {\n        await connection.beginTransaction();\n        console.log('[API_INFO] /api/clients POST CSV: Started database transaction.');\n\n        for (const [index, record] of results.entries()) {\n          // Consistent header access, case-insensitive for common variations\n          const clientId = record.ID || record.id || record.Id || randomUUID(); \n          const clientName = record.Name || record.name;\n          const clientAddress = record.Address || record.address || null;\n          const clientCity = record.City || record.city || null;\n          const clientCountry = record.Country || record.country || null;\n          const clientContactPerson = record['Contact Person'] || record.contactPerson || record.Contact || null;\n          const clientEmail = record['Contact Email'] || record.contactEmail || record.Email || null;\n\n          if (!clientName) {\n            failedInserts++;\n            const errorMsg = `Skipped record #${index + 1} (potential ID: ${clientId}): Name is required. Record data: ${JSON.stringify(record)}`;\n            console.warn(`[API_WARN] /api/clients POST CSV: ${errorMsg}`);\n            errors.push(errorMsg);\n            continue;\n          }\n\n          console.log(`[API_DEBUG] /api/clients POST CSV: Processing record #${index + 1}: ID=${clientId}, Name=${clientName}, Address=${clientAddress}, City=${clientCity}, Country=${clientCountry}, ContactPerson=${clientContactPerson}, Email=${clientEmail}`);\n\n          try {\n            const query = `\n              INSERT INTO Client (id, name, address, city, country, contactPerson, email, createdAt, updatedAt)\n              VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), NOW())\n              ON DUPLICATE KEY UPDATE \n                name = VALUES(name), \n                address = VALUES(address), \n                city = VALUES(city), \n                country = VALUES(country), \n                contactPerson = VALUES(contactPerson), \n                email = VALUES(email), \n                updatedAt = NOW();\n            `;\n            await connection.execute(query, [\n              clientId, clientName, clientAddress, clientCity, clientCountry, clientContactPerson, clientEmail\n            ]);\n            successfulInserts++;\n            console.log(`[API_INFO] /api/clients POST CSV: Successfully processed client ID: ${clientId}`);\n          } catch (dbError: any) {\n            failedInserts++;\n            const errorMsg = `Failed to insert/update record #${index + 1} (ID ${clientId}, Name: ${clientName || 'N/A'}): ${dbError.message}. SQL Error Code: ${dbError.code || 'N/A'}.`;\n            console.error(`[API_ERROR] /api/clients POST CSV: Database error for record: ${errorMsg}`, dbError);\n            errors.push(errorMsg);\n          }\n        }\n        await connection.commit();\n        console.log('[API_INFO] /api/clients POST CSV: Database transaction committed.');\n      } catch (transactionError: any) {\n        await connection.rollback();\n        console.error('[API_ERROR] /api/clients POST CSV: Transaction error during client import:', transactionError);\n        return NextResponse.json({ error: 'Transaction failed during CSV import.', details: transactionError.message, errors }, { status: 500 });\n      } finally {\n        connection.release();\n        console.log('[API_INFO] /api/clients POST CSV: Database connection released.');\n      }\n\n      let message = `${successfulInserts} client(s) processed successfully.`;\n      if (failedInserts > 0) {\n        message += ` ${failedInserts} client(s) failed.`;\n      }\n      \n      console.log(`[API_INFO] /api/clients POST CSV: Final processing result - ${message}`);\n      if (errors.length > 0) {\n        console.warn('[API_WARN] /api/clients POST CSV: Errors encountered during processing:', errors);\n      }\n      \n      return NextResponse.json({ message, errors: errors.length > 0 ? errors : undefined }, { status: errors.length > 0 && successfulInserts === 0 ? 400 : 200 });\n\n    } catch (error: any) {\n      console.error('[API_ERROR] /api/clients POST CSV: Error handling client CSV upload (outer try-catch):', error);\n      return NextResponse.json({ error: 'Failed to handle client CSV upload.', details: error.message }, { status: 500 });\n    }\n\n  } else if (contentType && contentType.includes('application/json')) {\n    console.log('[API_INFO] /api/clients POST: Received application/json request.');\n    try {\n      const clientData = await request.json() as Omit<Client, 'createdAt' | 'updatedAt'>;\n\n      if (!clientData.id || !clientData.name) {\n        return NextResponse.json({ error: 'Client ID and Name are required.' }, { status: 400 });\n      }\n\n      const query = `\n        INSERT INTO Client (id, name, address, city, country, contactPerson, email, createdAt, updatedAt)\n        VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), NOW())\n      `;\n      await pool.execute(query, [\n        clientData.id,\n        clientData.name,\n        clientData.address || null,\n        clientData.city || null,\n        clientData.country || null,\n        clientData.contactPerson || null,\n        clientData.email || null,\n      ]);\n\n      const [newClientRows]: any[] = await pool.execute(\n        'SELECT id, name, address, city, country, contactPerson, email, createdAt, updatedAt FROM Client WHERE id = ?', \n        [clientData.id]\n      );\n      if (newClientRows.length === 0) {\n          return NextResponse.json({ error: 'Client created but failed to retrieve.' }, { status: 500 });\n      }\n      return NextResponse.json(newClientRows[0], { status: 201 });\n\n    } catch (error: any) {\n      console.error('[API_ERROR] /api/clients POST JSON: Error creating client:', error);\n      if (error.code === 'ER_DUP_ENTRY') {\n        return NextResponse.json({ error: 'Client with this ID already exists.' }, { status: 409 });\n      }\n      return NextResponse.json({ error: 'Failed to create client (JSON)', details: error.message }, { status: 500 });\n    }\n  } else {\n    console.warn(`[API_WARN] /api/clients POST: Unsupported Content-Type: ${contentType}`);\n    return NextResponse.json({ error: 'Unsupported Content-Type' }, { status: 415 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}