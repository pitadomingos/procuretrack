{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/suppliers/route.js"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport multer from 'multer';\nimport csv from 'csv-parser';\nimport { Readable } from 'stream'; // Import Readable stream\n\nexport async function GET() {\n  let connection;\n  try {\n    const { pool } = await import('../../../../backend/db.js');\n    connection = await pool.getConnection();\n    const [rows] = await connection.execute('SELECT * FROM Supplier');\n    return NextResponse.json(rows);\n  } catch (error) {\n    console.error('Error fetching suppliers:', error);\n    return NextResponse.json({ error: 'Failed to fetch suppliers' }, { status: 500 });\n  } finally {\n      if (connection) connection.release();\n  }\n}\n\n// Configure multer for file uploads\nconst upload = multer({ storage: multer.memoryStorage() });\n\n// Helper function to run multer middleware\nconst runMiddleware = (req, res, fn) => {\n  return new Promise((resolve, reject) => {\n    fn(req, res, (result) => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n      return resolve(result);\n    });\n  });\n};\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport async function POST(request) {\n  const res = new NextResponse(); \n\n  try {\n    await runMiddleware(request, res, upload.single('file'));\n\n    const file = request.file;\n\n    if (!file) {\n      return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });\n    }\n\n    const results = [];\n    const stream = Readable.from(file.buffer);\n\n    await new Promise((resolve, reject) => {\n      stream\n        .pipe(csv())\n        .on('data', (data) => results.push(data))\n        .on('end', () => {\n          console.log('Parsed CSV data for suppliers:', results);\n          // TODO: Add logic for validating and inserting supplier data into the database\n          resolve();\n        })\n        .on('error', (error) => reject(error));\n    });\n\n    return NextResponse.json({ message: 'Supplier file uploaded and parsed successfully', data: results });\n\n  } catch (error) {\n    console.error('Error uploading or parsing supplier CSV:', error);\n    if (error instanceof multer.MulterError) {\n      return NextResponse.json({ error: `Multer error: ${error.message}` }, { status: 400 });\n    }\n    return NextResponse.json({ error: 'Failed to upload or process supplier file' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA,oLAAmC,yBAAyB;;;;;AAErD,eAAe;IACpB,IAAI;IACJ,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG;QACjB,aAAa,MAAM,KAAK,aAAa;QACrC,MAAM,CAAC,KAAK,GAAG,MAAM,WAAW,OAAO,CAAC;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF,SAAU;QACN,IAAI,YAAY,WAAW,OAAO;IACtC;AACF;AAEA,oCAAoC;AACpC,MAAM,SAAS,CAAA,GAAA,iIAAA,CAAA,UAAM,AAAD,EAAE;IAAE,SAAS,iIAAA,CAAA,UAAM,CAAC,aAAa;AAAG;AAExD,2CAA2C;AAC3C,MAAM,gBAAgB,CAAC,KAAK,KAAK;IAC/B,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,GAAG,KAAK,KAAK,CAAC;YACZ,IAAI,kBAAkB,OAAO;gBAC3B,OAAO,OAAO;YAChB;YACA,OAAO,QAAQ;QACjB;IACF;AACF;AAEO,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;IACd;AACF;AAEO,eAAe,KAAK,OAAO;IAChC,MAAM,MAAM,IAAI,gIAAA,CAAA,eAAY;IAE5B,IAAI;QACF,MAAM,cAAc,SAAS,KAAK,OAAO,MAAM,CAAC;QAEhD,MAAM,OAAO,QAAQ,IAAI;QAEzB,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,MAAM,UAAU,EAAE;QAClB,MAAM,SAAS,qGAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,KAAK,MAAM;QAExC,MAAM,IAAI,QAAQ,CAAC,SAAS;YAC1B,OACG,IAAI,CAAC,CAAA,GAAA,wIAAA,CAAA,UAAG,AAAD,KACP,EAAE,CAAC,QAAQ,CAAC,OAAS,QAAQ,IAAI,CAAC,OAClC,EAAE,CAAC,OAAO;gBACT,QAAQ,GAAG,CAAC,kCAAkC;gBAC9C,+EAA+E;gBAC/E;YACF,GACC,EAAE,CAAC,SAAS,CAAC,QAAU,OAAO;QACnC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAkD,MAAM;QAAQ;IAEtG,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,IAAI,iBAAiB,iIAAA,CAAA,UAAM,CAAC,WAAW,EAAE;YACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,cAAc,EAAE,MAAM,OAAO,EAAE;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACtF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4C,GAAG;YAAE,QAAQ;QAAI;IACjG;AACF","debugId":null}}]
}