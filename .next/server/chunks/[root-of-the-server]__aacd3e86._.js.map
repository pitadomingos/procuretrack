{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;IAChQ,uFAAuF;IACvF,8DAA8D;IAC9D,MAAM,IAAI,MAAM,CAAC,2CAA2C,EAAE,eAAe,IAAI,CAAC,MAAM,wDAAwD,CAAC;AACrJ;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/purchase-orders/next-po-number/route.js"],"sourcesContent":["\nimport { pool } from '../../../../../backend/db.js';\nimport { NextResponse } from 'next/server';\n\nexport async function GET() {\n  try {\n    const prefix = \"PO-\";\n    const numberLength = 5; // Defines the length of the numeric part, e.g., 00001\n\n    // Query to get the highest numeric part of PO numbers with the specified prefix\n    // It extracts the numeric part after the prefix, casts it to a number, and orders to find the max.\n    const [rows] = await pool.execute(\n      `SELECT poNumber FROM PurchaseOrder \n       WHERE poNumber LIKE ? \n       ORDER BY CAST(SUBSTRING(poNumber, ?) AS UNSIGNED) DESC \n       LIMIT 1`,\n      [`${prefix}%`, prefix.length + 1]\n    );\n\n    let nextNumericValue = 1; // Default to 1 if no POs are found or if parsing fails\n\n    if (rows.length > 0) {\n      const lastPoNumber = rows[0].poNumber;\n      // Ensure the lastPoNumber actually starts with the prefix before trying to parse\n      if (lastPoNumber && lastPoNumber.startsWith(prefix)) {\n        const numericPartString = lastPoNumber.substring(prefix.length);\n        const lastNumericValue = parseInt(numericPartString, 10);\n        \n        if (!isNaN(lastNumericValue)) {\n          nextNumericValue = lastNumericValue + 1;\n        }\n      }\n    }\n\n    const nextPoNumber = `${prefix}${String(nextNumericValue).padStart(numberLength, '0')}`;\n\n    return NextResponse.json({ nextPoNumber });\n\n  } catch (error) {\n    console.error('Error fetching next PO number:', error);\n    return NextResponse.json({ error: 'Failed to generate next PO number' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS;QACf,MAAM,eAAe,GAAG,sDAAsD;QAE9E,gFAAgF;QAChF,mGAAmG;QACnG,MAAM,CAAC,KAAK,GAAG,MAAM,+GAAA,CAAA,OAAI,CAAC,OAAO,CAC/B,CAAC;;;cAGO,CAAC,EACT;YAAC,GAAG,OAAO,CAAC,CAAC;YAAE,OAAO,MAAM,GAAG;SAAE;QAGnC,IAAI,mBAAmB,GAAG,uDAAuD;QAEjF,IAAI,KAAK,MAAM,GAAG,GAAG;YACnB,MAAM,eAAe,IAAI,CAAC,EAAE,CAAC,QAAQ;YACrC,iFAAiF;YACjF,IAAI,gBAAgB,aAAa,UAAU,CAAC,SAAS;gBACnD,MAAM,oBAAoB,aAAa,SAAS,CAAC,OAAO,MAAM;gBAC9D,MAAM,mBAAmB,SAAS,mBAAmB;gBAErD,IAAI,CAAC,MAAM,mBAAmB;oBAC5B,mBAAmB,mBAAmB;gBACxC;YACF;QACF;QAEA,MAAM,eAAe,GAAG,SAAS,OAAO,kBAAkB,QAAQ,CAAC,cAAc,MAAM;QAEvF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAa;IAE1C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAoC,GAAG;YAAE,QAAQ;QAAI;IACzF;AACF","debugId":null}}]
}