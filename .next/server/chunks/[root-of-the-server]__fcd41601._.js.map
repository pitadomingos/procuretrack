{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/charts/requisitions-by-status/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport type { ChartDataPoint } from '@/types';\n\ninterface RequisitionStatusQueryResult {\n  status: string | null;\n  count: number | string;\n}\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const month = searchParams.get('month');\n  const year = searchParams.get('year');\n\n  let connection;\n  try {\n    const { pool } = await import('../../../../../backend/db.js');\n    connection = await pool.getConnection();\n    let whereClauses: string[] = [];\n    const queryParams: (string | number)[] = [];\n\n    if (month && month !== 'all') {\n      whereClauses.push(\"MONTH(requisitionDate) = ?\");\n      queryParams.push(parseInt(month, 10));\n    }\n    if (year && year !== 'all') {\n      whereClauses.push(\"YEAR(requisitionDate) = ?\");\n      queryParams.push(parseInt(year, 10));\n    }\n    \n    const whereString = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n    const query = `\n      SELECT \n        COALESCE(status, 'Unknown') as status_name, \n        COUNT(*) as count \n      FROM Requisition\n      ${whereString}\n      GROUP BY status_name\n      ORDER BY count DESC;\n    `;\n    const [rows]: any[] = await connection.execute(query, queryParams);\n\n    const chartData: ChartDataPoint[] = rows.map((row: RequisitionStatusQueryResult) => ({\n      name: row.status_name || 'Unknown',\n      Count: Number(row.count),\n    }));\n\n    return NextResponse.json(chartData);\n  } catch (error: any) {\n    console.error('Error fetching requisitions by status data:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch requisitions by status data', details: error.message },\n      { status: 500 }\n    );\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":";;;AACA;;AAQO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC;IAC/B,MAAM,OAAO,aAAa,GAAG,CAAC;IAE9B,IAAI;IACJ,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG;QACjB,aAAa,MAAM,KAAK,aAAa;QACrC,IAAI,eAAyB,EAAE;QAC/B,MAAM,cAAmC,EAAE;QAE3C,IAAI,SAAS,UAAU,OAAO;YAC5B,aAAa,IAAI,CAAC;YAClB,YAAY,IAAI,CAAC,SAAS,OAAO;QACnC;QACA,IAAI,QAAQ,SAAS,OAAO;YAC1B,aAAa,IAAI,CAAC;YAClB,YAAY,IAAI,CAAC,SAAS,MAAM;QAClC;QAEA,MAAM,cAAc,aAAa,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,aAAa,IAAI,CAAC,UAAU,GAAG;QAEtF,MAAM,QAAQ,CAAC;;;;;MAKb,EAAE,YAAY;;;IAGhB,CAAC;QACD,MAAM,CAAC,KAAK,GAAU,MAAM,WAAW,OAAO,CAAC,OAAO;QAEtD,MAAM,YAA8B,KAAK,GAAG,CAAC,CAAC,MAAsC,CAAC;gBACnF,MAAM,IAAI,WAAW,IAAI;gBACzB,OAAO,OAAO,IAAI,KAAK;YACzB,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA+C,SAAS,MAAM,OAAO;QAAC,GAC/E;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,IAAI,YAAY,WAAW,OAAO;IACpC;AACF","debugId":null}}]
}