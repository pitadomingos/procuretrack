{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-1.5-flash-latest', // Updated model name\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,yIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 331, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/po-data-tools.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Tools for fetching Purchase Order data for Genkit flows.\n * - getPurchaseOrdersTool: Fetches POs based on specified criteria.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n// DEFERRED: import { pool } from '../../../backend/db.js';\n\n// Input schema for the getPurchaseOrdersTool\nconst GetPurchaseOrdersInputSchema = z.object({\n  startDate: z.string().optional().describe(\"Start date for PO creationDate (YYYY-MM-DD)\"),\n  endDate: z.string().optional().describe(\"End date for PO creationDate (YYYY-MM-DD)\"),\n  status: z.string().optional().describe(\"Filter by PO status (e.g., 'Approved', 'Pending Approval')\"),\n  supplierId: z.string().optional().describe(\"Filter by supplier ID (supplierCode)\"),\n  minGrandTotal: z.number().optional().describe(\"Minimum grand total value for POs\"),\n  maxGrandTotal: z.number().optional().describe(\"Maximum grand total value for POs\"),\n  limit: z.number().optional().default(50).describe(\"Max number of POs to return, default 50\")\n}).describe(\"Input for fetching purchase orders. All filters are optional.\");\n\n// Output schema for each PO returned by the tool\nconst PurchaseOrderToolOutputSchema = z.object({\n  id: z.number(),\n  poNumber: z.string(),\n  creationDate: z.string().describe(\"PO creation date in YYYY-MM-DD format\"),\n  status: z.string(),\n  supplierId: z.string().optional().nullable(),\n  supplierName: z.string().optional().nullable().describe(\"Name of the supplier, if available\"),\n  grandTotal: z.number().optional().nullable(),\n  currency: z.string().optional().nullable(),\n  requestedByName: z.string().optional().nullable(),\n  itemCount: z.number().optional().describe(\"Number of items in this PO\"),\n});\n\n// Tool definition\nexport const getPurchaseOrdersTool = ai.defineTool(\n  {\n    name: 'getPurchaseOrdersTool',\n    description: 'Fetches purchase order data based on specified filters. Useful for analyzing PO trends, values, and statuses. Returns a list of purchase orders.',\n    inputSchema: GetPurchaseOrdersInputSchema,\n    outputSchema: z.array(PurchaseOrderToolOutputSchema),\n  },\n  async (input) => {\n    // Lazily import the pool to prevent server crashes if DB env vars are not set.\n    // This moves the potential error from load time to runtime, where it can be caught.\n    console.log('[getPurchaseOrdersTool] Attempting to lazy-import database pool...');\n    const { pool } = await import('../../../backend/db.js');\n    console.log('[getPurchaseOrdersTool] Database pool imported successfully.');\n\n    console.log('[getPurchaseOrdersTool] Received input:', input);\n    let connection;\n    try {\n      connection = await pool.getConnection();\n      let query = `\n        SELECT \n          po.id, \n          po.poNumber, \n          DATE_FORMAT(po.creationDate, '%Y-%m-%d') as creationDate, \n          po.status, \n          po.supplierId, \n          s.supplierName, \n          po.grandTotal, \n          po.currency, \n          po.requestedByName,\n          (SELECT COUNT(*) FROM POItem poi WHERE poi.poId = po.id) as itemCount\n        FROM PurchaseOrder po\n        LEFT JOIN Supplier s ON po.supplierId = s.supplierCode\n        WHERE 1=1\n      `;\n      const queryParams: (string | number)[] = [];\n\n      if (input.startDate) {\n        query += ' AND po.creationDate >= ?';\n        queryParams.push(input.startDate);\n      }\n      if (input.endDate) {\n        query += ' AND po.creationDate <= ?';\n        queryParams.push(input.endDate);\n      }\n      if (input.status) {\n        query += ' AND po.status = ?';\n        queryParams.push(input.status);\n      }\n      if (input.supplierId) {\n        query += ' AND po.supplierId = ?';\n        queryParams.push(input.supplierId);\n      }\n      if (input.minGrandTotal !== undefined) {\n        query += ' AND po.grandTotal >= ?';\n        queryParams.push(input.minGrandTotal);\n      }\n      if (input.maxGrandTotal !== undefined) {\n        query += ' AND po.grandTotal <= ?';\n        queryParams.push(input.maxGrandTotal);\n      }\n      \n      query += ' ORDER BY po.creationDate DESC LIMIT ?';\n      queryParams.push(input.limit || 50);\n\n      console.log('[getPurchaseOrdersTool] Executing query:', query, 'Params:', queryParams);\n      const [rows] = await connection.execute(query, queryParams) as any[];\n      console.log('[getPurchaseOrdersTool] Query successful, rows found:', rows.length);\n      \n      return rows.map(row => ({\n        ...row,\n        grandTotal: row.grandTotal ? parseFloat(row.grandTotal) : null,\n        itemCount: parseInt(row.itemCount, 10) || 0,\n      }));\n\n    } catch (error: any) {\n      console.error('[getPurchaseOrdersTool] Error executing tool:', error);\n      // Re-throwing the error so it can be caught by the flow's more robust error handler.\n      // This ensures a proper JSON error response is sent to the client.\n      throw new Error(`Failed to execute purchase order tool: ${error.message}`);\n    } finally {\n      if (connection) connection.release();\n    }\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/po-analysis-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for analyzing Purchase Order data based on user prompts.\n * - analyzePurchaseOrders: Main function to call the flow.\n * - POAnalysisInput: Input type for the flow.\n * - POAnalysisOutput: Output type for the flow.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getPurchaseOrdersTool } from '../tools/po-data-tools';\n\n// Input schema for the flow\nconst POAnalysisInputSchema = z.object({\n  prompt: z.string().describe(\"The user's natural language question or request about Purchase Orders.\"),\n});\nexport type POAnalysisInput = z.infer<typeof POAnalysisInputSchema>;\n\n// Output schema for the flow\nconst POAnalysisOutputSchema = z.object({\n  responseText: z.string().describe(\"The textual summary or answer to the user's prompt.\"),\n  chartData: z.array(z.object({ name: z.string(), value: z.number() })).optional().describe(\"Optional data for a simple bar chart if applicable (e.g., {name: 'Supplier A', value: 12000}). 'name' is the bar label, 'value' is the bar height.\"),\n  chartTitle: z.string().nullable().optional().describe(\"Title for the chart if chartData is provided. Omit or set to null if no chart is generated.\"),\n  debugInfo: z.string().describe(\"Debugging information, like data fetched by tools. This is a mandatory field.\"),\n});\nexport type POAnalysisOutput = z.infer<typeof POAnalysisOutputSchema>;\n\n// Define the main prompt for the Gemini model\nconst poAnalysisSystemPrompt = ai.definePrompt({\n  name: 'poAnalysisSystemPrompt',\n  input: { schema: POAnalysisInputSchema },\n  output: { schema: POAnalysisOutputSchema },\n  tools: [getPurchaseOrdersTool],\n  prompt: `You are a data analyst for a company named Jachris. Your ONLY task is to answer questions about Purchase Order (PO) data by using the provided tools.\n\n**CRITICAL INSTRUCTIONS:**\n1.  **EXCLUSIVE DATA SOURCE:** You **MUST** use the 'getPurchaseOrdersTool' to fetch any data you need. Do not use any prior knowledge or make up information.\n2.  **NO HALLUCINATION:** Base your entire answer **exclusively** on the data returned by the tool. If the tool returns no data or an empty array, you **MUST** state that no records were found matching the criteria, and 'chartData' must be an empty array. Do not invent suppliers, amounts, dates, or currencies.\n3.  **CURRENCY:** Use the currency symbol (e.g., MZN, USD) provided in the 'currency' field of the data for all monetary values in your response. Do not assume a currency if it is not present in the data.\n4.  **CHARTING:** If the user asks for a visual breakdown or a chart is appropriate, populate 'chartData'. If 'chartData' is populated, you **MUST** provide a descriptive 'chartTitle'. If no chart is generated, 'chartData' MUST be an empty array and 'chartTitle' MUST be omitted or set to null.\n5.  **DEBUGGING (MANDATORY):** You **MUST** populate the 'debugInfo' field. Summarize which tool you called, what filters you used, and how many records it returned. If no tool was called, explain why. Example: \"Tool 'getPurchaseOrdersTool' was called with filters: {status: 'Approved'}. It returned 15 PO records.\"\n\n**Your Process:**\n1.  **Analyze User Request:** Determine what filters are needed for the 'getPurchaseOrdersTool'.\n2.  **Call Tool:** Execute the 'getPurchaseOrdersTool' with the determined filters.\n3.  **Analyze Tool Output:** Use the JSON data returned from the tool to construct your answer.\n4.  **Format Final Output:** Generate a single JSON object matching the required output schema.\n\n**Current Date for Context:** ${new Date().toISOString().split('T')[0]}\n\n**User's request:** {{{prompt}}}\n`,\n});\n\n\n// Define the Genkit flow\nconst poAnalysisFlow = ai.defineFlow(\n  {\n    name: 'poAnalysisFlow',\n    inputSchema: POAnalysisInputSchema,\n    outputSchema: POAnalysisOutputSchema,\n  },\n  async (input): Promise<POAnalysisOutput> => {\n    console.log('[poAnalysisFlow] Received input:', input);\n    try {\n        const { output } = await poAnalysisSystemPrompt(input);\n\n        if (!output) {\n          console.error('[poAnalysisFlow] LLM returned a null or undefined output. This can happen if the model response does not conform to the output schema.');\n          throw new Error('The AI model failed to produce a valid response. Please try rephrasing your question.');\n        }\n        \n        console.log('[poAnalysisFlow] Successfully processed. LLM Output:', JSON.stringify(output).substring(0, 500) + \"...\");\n        return output;\n\n    } catch (error: any) {\n        console.error(\"[poAnalysisFlow] An error occurred during flow execution:\", error);\n        // This catch block handles errors from the tool (e.g., DB connection) or the LLM call itself.\n        // It formats the error into the expected output structure.\n        return {\n            responseText: `An error occurred while analyzing the data: ${error.message || 'Unknown error'}. Please check the system logs or try again.`,\n            debugInfo: `Error caught in poAnalysisFlow: ${error.stack || error.message}`,\n        };\n    }\n  }\n);\n\n// Exported wrapper function to be called from API routes or server actions\nexport async function analyzePurchaseOrders(input: POAnalysisInput): Promise<POAnalysisOutput> {\n  return poAnalysisFlow(input);\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;CAKC,GAED;AACA;AAAA;AACA;;;;;;;AAEA,4BAA4B;AAC5B,MAAM,wBAAwB,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,QAAQ,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGA,6BAA6B;AAC7B,MAAM,yBAAyB,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,cAAc,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,WAAW,yIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,yIAAA,CAAA,IAAC,CAAC,MAAM;QAAI,OAAO,yIAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAAI,QAAQ,GAAG,QAAQ,CAAC;IAC1F,YAAY,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ,CAAC;IACtD,WAAW,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGA,8CAA8C;AAC9C,MAAM,yBAAyB,qHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7C,MAAM;IACN,OAAO;QAAE,QAAQ;IAAsB;IACvC,QAAQ;QAAE,QAAQ;IAAuB;IACzC,OAAO;QAAC,2IAAA,CAAA,wBAAqB;KAAC;IAC9B,QAAQ,CAAC;;;;;;;;;;;;;;;8BAemB,EAAE,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;;;AAGvE,CAAC;AACD;AAGA,yBAAyB;AACzB,MAAM,iBAAiB,qHAAA,CAAA,KAAE,CAAC,UAAU,CAClC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,QAAQ,GAAG,CAAC,oCAAoC;IAChD,IAAI;QACA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,uBAAuB;QAEhD,IAAI,CAAC,QAAQ;YACX,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC,wDAAwD,KAAK,SAAS,CAAC,QAAQ,SAAS,CAAC,GAAG,OAAO;QAC/G,OAAO;IAEX,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,6DAA6D;QAC3E,8FAA8F;QAC9F,2DAA2D;QAC3D,OAAO;YACH,cAAc,CAAC,4CAA4C,EAAE,MAAM,OAAO,IAAI,gBAAgB,4CAA4C,CAAC;YAC3I,WAAW,CAAC,gCAAgC,EAAE,MAAM,KAAK,IAAI,MAAM,OAAO,EAAE;QAChF;IACJ;AACF;AAIK,eAAe,sBAAsB,KAAsB;IAChE,OAAO,eAAe;AACxB;;;IAFsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 562, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/ai/analyze-po/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { analyzePurchaseOrders, type POAnalysisInput, type POAnalysisOutput } from '@/ai/flows/po-analysis-flow';\n\nexport async function POST(request: Request) {\n  console.log('[API /api/ai/analyze-po] Received POST request.');\n  try {\n    const body = await request.json();\n    const { prompt } = body;\n\n    if (!prompt || typeof prompt !== 'string') {\n      console.error('[API /api/ai/analyze-po] Validation Error: Prompt is required.');\n      return NextResponse.json({ error: 'Prompt is required and must be a string.' }, { status: 400 });\n    }\n\n    console.log(`[API /api/ai/analyze-po] Calling analyzePurchaseOrders flow with prompt: \"${prompt}\"`);\n    const input: POAnalysisInput = { prompt };\n    const result: POAnalysisOutput = await analyzePurchaseOrders(input);\n\n    console.log('[API /api/ai/analyze-po] Flow executed successfully. Sending result to client.');\n    return NextResponse.json(result);\n\n  } catch (error: any) {\n    console.error('[API /api/ai/analyze-po] CRITICAL ERROR in POST handler:', error);\n    return NextResponse.json(\n      { \n        error: 'An unexpected error occurred in the API handler.', \n        details: error.message,\n        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined,\n      }, \n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA;;;AAEO,eAAe,KAAK,OAAgB;IACzC,QAAQ,GAAG,CAAC;IACZ,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,MAAM,EAAE,GAAG;QAEnB,IAAI,CAAC,UAAU,OAAO,WAAW,UAAU;YACzC,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA2C,GAAG;gBAAE,QAAQ;YAAI;QAChG;QAEA,QAAQ,GAAG,CAAC,CAAC,0EAA0E,EAAE,OAAO,CAAC,CAAC;QAClG,MAAM,QAAyB;YAAE;QAAO;QACxC,MAAM,SAA2B,MAAM,CAAA,GAAA,8IAAA,CAAA,wBAAqB,AAAD,EAAE;QAE7D,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,4DAA4D;QAC1E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,MAAM,OAAO;YACtB,OAAO,uCAAyC,MAAM,KAAK;QAC7D,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}