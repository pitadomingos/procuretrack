{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    // throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;AAChQ,uFAAuF;AACvF,8DAA8D;AAC9D,sJAAsJ;AAC1J;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/quotes/%5Bid%5D/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { pool } from '../../../../../backend/db.js';\nimport type { QuotePayload, QuoteItem, Client, Approver } from '@/types';\nimport { randomUUID } from 'crypto';\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const { id: quoteId } = params;\n  if (!quoteId) {\n    return NextResponse.json({ error: 'Quote ID is required' }, { status: 400 });\n  }\n  console.log(`[API_INFO] /api/quotes/${quoteId} GET: Received request.`);\n\n  let connection;\n  try {\n    connection = await pool.getConnection();\n    const quoteQuery = `\n      SELECT \n        q.*, \n        c.name as clientName, c.email as clientEmail, c.address as clientAddress, c.city as clientCity, c.country as clientCountry, c.contactPerson as clientContactPerson,\n        app.name as approverName \n      FROM Quote q\n      LEFT JOIN Client c ON q.clientId = c.id\n      LEFT JOIN Approver app ON q.approverId = app.id\n      WHERE q.id = ?\n    `;\n    const [quoteRows]: any[] = await connection.execute(quoteQuery, [quoteId]);\n\n    if (quoteRows.length === 0) {\n      console.warn(`[API_WARN] /api/quotes/${quoteId} GET: Quote not found.`);\n      return NextResponse.json({ error: `Quote with ID ${quoteId} not found.` }, { status: 404 });\n    }\n\n    const quoteData: QuotePayload = {\n      ...quoteRows[0],\n      subTotal: parseFloat(quoteRows[0].subTotal || 0),\n      vatAmount: parseFloat(quoteRows[0].vatAmount || 0),\n      grandTotal: parseFloat(quoteRows[0].grandTotal || 0),\n      approvalDate: quoteRows[0].approvalDate ? new Date(quoteRows[0].approvalDate).toISOString() : null,\n    };\n\n    const [itemRows]: any[] = await connection.execute('SELECT * FROM QuoteItem WHERE quoteId = ?', [quoteId]);\n    quoteData.items = itemRows.map((item: any) => ({\n        ...item,\n        quantity: parseInt(item.quantity, 10),\n        unitPrice: parseFloat(item.unitPrice),\n    })) as QuoteItem[];\n\n    console.log(`[API_INFO] /api/quotes/${quoteId} GET: Successfully fetched quote with ${quoteData.items.length} items.`);\n    return NextResponse.json(quoteData);\n\n  } catch (error: any) {\n    console.error(`[API_ERROR] /api/quotes/${quoteId} GET:`, error);\n    return NextResponse.json({ error: `Failed to fetch quote with ID ${quoteId}.`, details: error.message }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const { id: quoteId } = params;\n  if (!quoteId) {\n    return NextResponse.json({ error: 'Quote ID is required for update' }, { status: 400 });\n  }\n  console.log(`[API_INFO] /api/quotes/${quoteId} PUT: Received request.`);\n\n  let connection;\n  try {\n    const quoteData = await request.json() as QuotePayload;\n    console.log(`[API_INFO] /api/quotes/${quoteId} PUT: Data:`, JSON.stringify(quoteData).substring(0, 500));\n    console.log(`[API_INFO] /api/quotes PUT JSON: Received approverId for update: '${quoteData.approverId}', Type: ${typeof quoteData.approverId}`);\n\n    connection = await pool.getConnection();\n    await connection.beginTransaction();\n\n    const [existingQuote]: any[] = await connection.execute('SELECT status FROM Quote WHERE id = ?', [quoteId]);\n    if (existingQuote.length === 0) {\n        await connection.rollback();\n        return NextResponse.json({ error: `Quote with ID ${quoteId} not found for update.` }, { status: 404 });\n    }\n    \n    const rawApproverId = quoteData.approverId;\n    const finalApproverId = (rawApproverId === \"\" || rawApproverId === undefined) ? null : rawApproverId;\n    console.log(`[API_INFO] /api/quotes PUT JSON: Final approverId for DB update: '${finalApproverId}', Type: ${typeof finalApproverId}`);\n\n\n    await connection.execute(\n      `UPDATE Quote SET \n        quoteNumber = ?, quoteDate = ?, clientId = ?, creatorEmail = ?, \n        subTotal = ?, vatAmount = ?, grandTotal = ?, currency = ?, \n        termsAndConditions = ?, notes = ?, status = ?, approverId = ?, approvalDate = ?,\n        updatedAt = NOW()\n       WHERE id = ?`,\n      [\n        quoteData.quoteNumber, new Date(quoteData.quoteDate).toISOString().slice(0, 19).replace('T', ' '), quoteData.clientId, quoteData.creatorEmail,\n        quoteData.subTotal, quoteData.vatAmount, quoteData.grandTotal, quoteData.currency,\n        quoteData.termsAndConditions, quoteData.notes, quoteData.status, \n        finalApproverId,\n        quoteData.approvalDate ? new Date(quoteData.approvalDate).toISOString().slice(0, 19).replace('T', ' ') : null,\n        quoteId\n      ]\n    );\n\n    await connection.execute('DELETE FROM QuoteItem WHERE quoteId = ?', [quoteId]);\n    if (quoteData.items && quoteData.items.length > 0) {\n      for (const item of quoteData.items) {\n        await connection.execute(\n          `INSERT INTO QuoteItem (id, quoteId, partNumber, customerRef, description, quantity, unitPrice)\n           VALUES (?, ?, ?, ?, ?, ?, ?)`,\n          [item.id || randomUUID(), quoteId, item.partNumber, item.customerRef, item.description, item.quantity, item.unitPrice]\n        );\n      }\n    }\n\n    await connection.commit();\n    console.log(`[API_INFO] /api/quotes/${quoteId} PUT: Successfully updated quote.`);\n    \n    const getUpdatedQuery = `\n      SELECT q.*, c.name as clientName, c.email as clientEmail, app.name as approverName \n      FROM Quote q\n      LEFT JOIN Client c ON q.clientId = c.id\n      LEFT JOIN Approver app ON q.approverId = app.id\n      WHERE q.id = ?\n    `;\n    const [updatedQuoteRows]: any[] = await connection.execute(getUpdatedQuery, [quoteId]);\n    const updatedQuoteData = updatedQuoteRows[0];\n    const [updatedItemRows]: any[] = await connection.execute('SELECT * FROM QuoteItem WHERE quoteId = ?', [quoteId]);\n    updatedQuoteData.items = updatedItemRows;\n     updatedQuoteData.approvalDate = updatedQuoteData.approvalDate ? new Date(updatedQuoteData.approvalDate).toISOString() : null;\n\n\n    return NextResponse.json(updatedQuoteData);\n\n  } catch (error: any) {\n    if (connection) await connection.rollback();\n    console.error(`[API_ERROR] /api/quotes/${quoteId} PUT:`, error);\n    console.error(`[API_ERROR_DETAILS] /api/quotes PUT JSON: Code: ${error.code}, Message: ${error.message}, Stack: ${error.stack}`);\n    return NextResponse.json({ error: `Failed to update quote with ID ${quoteId}.`, details: error.message, code: error.code }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n    \n"],"names":[],"mappings":"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","debugId":null}}]
}