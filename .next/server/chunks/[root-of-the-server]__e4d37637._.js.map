{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\n\n// Configure dotenv to load the .env file from the backend directory at module load time.\ndotenv.config({ path: path.resolve(process.cwd(), 'backend', '.env') });\n\nlet pool = null;\n\nasync function getDbPool() {\n  if (pool) {\n    return pool;\n  }\n\n  // --- Debugging Environment ---\n  console.log('[DB_INIT] Current working directory:', process.cwd());\n  console.log('[DB_INIT] Checking for environment variables...');\n  \n  try {\n    // Check for essential DB environment variables\n    const essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME', 'JWT_SECRET'];\n    const missingEnvVars = [];\n    for (const v of essentialEnvVars) {\n        if (!process.env[v]) {\n            missingEnvVars.push(v);\n        } else {\n            // Avoid logging password in production\n            if (v !== 'DB_PASSWORD' && v !== 'JWT_SECRET') {\n                console.log(`[DB_INIT] Found ENV VAR: ${v} = ${process.env[v]}`);\n            } else {\n                 console.log(`[DB_INIT] Found ENV VAR: ${v} = (hidden)`);\n            }\n        }\n    }\n    \n    if (missingEnvVars.length > 0) {\n      const errorMsg = `Configuration is incomplete. Missing variables: ${missingEnvVars.join(', ')}. Please define these in your backend/.env file. For JWT_SECRET, use a long, random string.`;\n      console.error(`[DB_INIT_ERROR] ${errorMsg}`);\n      throw new Error(errorMsg);\n    }\n\n    // --- SSL Certificate Handling ---\n    const caCertPathOrContent = process.env.DB_SSL_CA;\n    let caCertContent;\n\n    if (caCertPathOrContent) {\n      const potentialPath = path.resolve(process.cwd(), caCertPathOrContent);\n      \n      if (fs.existsSync(potentialPath) && fs.statSync(potentialPath).isFile()) {\n        console.log(`DB_INIT_INFO: DB_SSL_CA points to a file. Reading certificate from \"${potentialPath}\".`);\n        caCertContent = fs.readFileSync(potentialPath, 'utf8');\n      } else {\n        console.log(\"DB_INIT_INFO: DB_SSL_CA does not appear to be a file path. Using its content directly for SSL connection.\");\n        caCertContent = caCertPathOrContent;\n      }\n    } else {\n      console.warn(`DB_WARN: The DB_SSL_CA environment variable is not set. Connecting with SSL using system default CAs. If connection fails, please provide the path to your 'ca.pem' file in the DB_SSL_CA variable in your .env file.`);\n    }\n    \n    const sslConfig = { rejectUnauthorized: true, ca: caCertContent || undefined };\n\n    // --- Connection Pool Creation ---\n    console.log(\"DB_INIT_INFO: Creating database connection pool for the first time.\");\n    const newPool = mysql.createPool({\n      host: process.env.DB_HOST,\n      user: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n      ssl: sslConfig,\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0,\n    });\n\n    try {\n      // Test the connection before assigning it to the singleton\n      const connection = await newPool.getConnection();\n      console.log(\"DB_INIT_SUCCESS: Database connection pool created and verified successfully.\");\n      connection.release();\n    } catch (testError) {\n      console.error(\"CRITICAL_DB_INIT_ERROR: Failed to get a connection from the pool after creation.\", testError);\n      // Destroy the pool if the initial connection test fails\n      newPool.end();\n      throw testError; // Re-throw to be caught by the main catch block\n    }\n\n    pool = newPool;\n    return pool;\n\n  } catch (error) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Failed to create and verify database connection pool. Error: ${error.message}`);\n    // Re-throw the error to be caught by the calling API route\n    throw error;\n  }\n}\n\n// Export the function that provides the pool\nexport { getDbPool };\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAEA,yFAAyF;AACzF,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,WAAW;AAAQ;AAErE,IAAI,OAAO;AAEX,eAAe;IACb,IAAI,MAAM;QACR,OAAO;IACT;IAEA,gCAAgC;IAChC,QAAQ,GAAG,CAAC,wCAAwC,QAAQ,GAAG;IAC/D,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,+CAA+C;QAC/C,MAAM,mBAAmB;YAAC;YAAW;YAAW;YAAe;YAAW;SAAa;QACvF,MAAM,iBAAiB,EAAE;QACzB,KAAK,MAAM,KAAK,iBAAkB;YAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACjB,eAAe,IAAI,CAAC;YACxB,OAAO;gBACH,uCAAuC;gBACvC,IAAI,MAAM,iBAAiB,MAAM,cAAc;oBAC3C,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,GAAG,EAAE,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACnE,OAAO;oBACF,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,WAAW,CAAC;gBAC3D;YACJ;QACJ;QAEA,IAAI,eAAe,MAAM,GAAG,GAAG;YAC7B,MAAM,WAAW,CAAC,gDAAgD,EAAE,eAAe,IAAI,CAAC,MAAM,2FAA2F,CAAC;YAC1L,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,UAAU;YAC3C,MAAM,IAAI,MAAM;QAClB;QAEA,mCAAmC;QACnC,MAAM,sBAAsB,QAAQ,GAAG,CAAC,SAAS;QACjD,IAAI;QAEJ,IAAI,qBAAqB;YACvB,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI;YAElD,IAAI,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,kBAAkB,6FAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,eAAe,MAAM,IAAI;gBACvE,QAAQ,GAAG,CAAC,CAAC,oEAAoE,EAAE,cAAc,EAAE,CAAC;gBACpG,gBAAgB,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,eAAe;YACjD,OAAO;gBACL,QAAQ,GAAG,CAAC;gBACZ,gBAAgB;YAClB;QACF,OAAO;YACL,QAAQ,IAAI,CAAC,CAAC,qNAAqN,CAAC;QACtO;QAEA,MAAM,YAAY;YAAE,oBAAoB;YAAM,IAAI,iBAAiB;QAAU;QAE7E,mCAAmC;QACnC,QAAQ,GAAG,CAAC;QACZ,MAAM,UAAU,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YAC/B,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;YACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;YAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;YAChE,KAAK;YACL,oBAAoB;YACpB,iBAAiB;YACjB,YAAY;QACd;QAEA,IAAI;YACF,2DAA2D;YAC3D,MAAM,aAAa,MAAM,QAAQ,aAAa;YAC9C,QAAQ,GAAG,CAAC;YACZ,WAAW,OAAO;QACpB,EAAE,OAAO,WAAW;YAClB,QAAQ,KAAK,CAAC,oFAAoF;YAClG,wDAAwD;YACxD,QAAQ,GAAG;YACX,MAAM,WAAW,gDAAgD;QACnE;QAEA,OAAO;QACP,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,MAAM,OAAO,EAAE;QACrH,2DAA2D;QAC3D,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/quotes/%5Bid%5D/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { getDbPool } from '../../../../../backend/db.js';\nimport type { QuotePayload, QuoteItem, Client, Approver } from '@/types';\nimport { randomUUID } from 'crypto';\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const { id: quoteId } = params;\n  if (!quoteId) {\n    return NextResponse.json({ error: 'Quote ID is required' }, { status: 400 });\n  }\n  console.log(`[API_INFO] /api/quotes/${quoteId} GET: Received request.`);\n\n  let connection;\n  try {\n    const pool = await getDbPool();\n    connection = await pool.getConnection();\n    const quoteQuery = `\n      SELECT \n        q.*, \n        c.name as clientName, c.email as clientEmail, c.address as clientAddress, c.city as clientCity, c.country as clientCountry, c.contactPerson as clientContactPerson,\n        app.name as approverName \n      FROM Quote q\n      LEFT JOIN Client c ON q.clientId = c.id\n      LEFT JOIN Approver app ON q.approverId = app.id\n      WHERE q.id = ?\n    `;\n    const [quoteRows]: any[] = await connection.execute(quoteQuery, [quoteId]);\n\n    if (quoteRows.length === 0) {\n      console.warn(`[API_WARN] /api/quotes/${quoteId} GET: Quote not found.`);\n      return NextResponse.json({ error: `Quote with ID ${quoteId} not found.` }, { status: 404 });\n    }\n\n    const quoteData: QuotePayload = {\n      ...quoteRows[0],\n      subTotal: parseFloat(quoteRows[0].subTotal || 0),\n      vatAmount: parseFloat(quoteRows[0].vatAmount || 0),\n      grandTotal: parseFloat(quoteRows[0].grandTotal || 0),\n      approvalDate: quoteRows[0].approvalDate ? new Date(quoteRows[0].approvalDate).toISOString() : null,\n    };\n\n    const [itemRows]: any[] = await connection.execute('SELECT * FROM QuoteItem WHERE quoteId = ?', [quoteId]);\n    quoteData.items = itemRows.map((item: any) => ({\n        ...item,\n        quantity: parseInt(item.quantity, 10),\n        unitPrice: parseFloat(item.unitPrice),\n    })) as QuoteItem[];\n\n    console.log(`[API_INFO] /api/quotes/${quoteId} GET: Successfully fetched quote with ${quoteData.items.length} items.`);\n    return NextResponse.json(quoteData);\n\n  } catch (error: any) {\n    console.error(`[API_ERROR] /api/quotes/${quoteId} GET:`, error);\n    return NextResponse.json({ error: `Failed to fetch quote with ID ${quoteId}.`, details: error.message }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const { id: quoteId } = params;\n  if (!quoteId) {\n    return NextResponse.json({ error: 'Quote ID is required for update' }, { status: 400 });\n  }\n  console.log(`[API_INFO] /api/quotes/${quoteId} PUT: Received request.`);\n\n  let connection;\n  try {\n    const pool = await getDbPool();\n    const quoteData = await request.json() as QuotePayload;\n    console.log(`[API_INFO] /api/quotes/${quoteId} PUT: Data:`, JSON.stringify(quoteData).substring(0, 500));\n    console.log(`[API_INFO] /api/quotes PUT JSON: Received approverId for update: '${quoteData.approverId}', Type: ${typeof quoteData.approverId}`);\n\n    connection = await pool.getConnection();\n    await connection.beginTransaction();\n\n    const [existingQuote]: any[] = await connection.execute('SELECT status FROM Quote WHERE id = ?', [quoteId]);\n    if (existingQuote.length === 0) {\n        await connection.rollback();\n        return NextResponse.json({ error: `Quote with ID ${quoteId} not found for update.` }, { status: 404 });\n    }\n    \n    const rawApproverId = quoteData.approverId;\n    const finalApproverId = (rawApproverId === \"\" || rawApproverId === undefined) ? null : rawApproverId;\n    console.log(`[API_INFO] /api/quotes PUT JSON: Final approverId for DB update: '${finalApproverId}', Type: ${typeof finalApproverId}`);\n\n\n    await connection.execute(\n      `UPDATE Quote SET \n        quoteNumber = ?, quoteDate = ?, clientId = ?, creatorEmail = ?, \n        subTotal = ?, vatAmount = ?, grandTotal = ?, currency = ?, \n        termsAndConditions = ?, notes = ?, status = ?, approverId = ?, approvalDate = ?,\n        updatedAt = NOW()\n       WHERE id = ?`,\n      [\n        quoteData.quoteNumber, new Date(quoteData.quoteDate).toISOString().slice(0, 19).replace('T', ' '), quoteData.clientId, quoteData.creatorEmail,\n        quoteData.subTotal, quoteData.vatAmount, quoteData.grandTotal, quoteData.currency,\n        quoteData.termsAndConditions, quoteData.notes, quoteData.status, \n        finalApproverId,\n        quoteData.approvalDate ? new Date(quoteData.approvalDate).toISOString().slice(0, 19).replace('T', ' ') : null,\n        quoteId\n      ]\n    );\n\n    await connection.execute('DELETE FROM QuoteItem WHERE quoteId = ?', [quoteId]);\n    if (quoteData.items && quoteData.items.length > 0) {\n      for (const item of quoteData.items) {\n        await connection.execute(\n          `INSERT INTO QuoteItem (id, quoteId, partNumber, customerRef, description, quantity, unitPrice)\n           VALUES (?, ?, ?, ?, ?, ?, ?)`,\n          [item.id || randomUUID(), quoteId, item.partNumber, item.customerRef, item.description, item.quantity, item.unitPrice]\n        );\n      }\n    }\n\n    await connection.commit();\n    console.log(`[API_INFO] /api/quotes/${quoteId} PUT: Successfully updated quote.`);\n    \n    const getUpdatedQuery = `\n      SELECT q.*, c.name as clientName, c.email as clientEmail, app.name as approverName \n      FROM Quote q\n      LEFT JOIN Client c ON q.clientId = c.id\n      LEFT JOIN Approver app ON q.approverId = app.id\n      WHERE q.id = ?\n    `;\n    const [updatedQuoteRows]: any[] = await connection.execute(getUpdatedQuery, [quoteId]);\n    const updatedQuoteData = updatedQuoteRows[0];\n    const [updatedItemRows]: any[] = await connection.execute('SELECT * FROM QuoteItem WHERE quoteId = ?', [quoteId]);\n    updatedQuoteData.items = updatedItemRows;\n     updatedQuoteData.approvalDate = updatedQuoteData.approvalDate ? new Date(updatedQuoteData.approvalDate).toISOString() : null;\n\n\n    return NextResponse.json(updatedQuoteData);\n\n  } catch (error: any) {\n    if (connection) await connection.rollback();\n    console.error(`[API_ERROR] /api/quotes/${quoteId} PUT:`, error);\n    console.error(`[API_ERROR_DETAILS] /api/quotes PUT JSON: Code: ${error.code}, Message: ${error.message}, Stack: ${error.stack}`);\n    return NextResponse.json({ error: `Failed to update quote with ID ${quoteId}.`, details: error.message, code: error.code }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}