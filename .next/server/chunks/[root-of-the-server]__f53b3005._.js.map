{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    // throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;AAChQ,uFAAuF;AACvF,8DAA8D;AAC9D,sJAAsJ;AAC1J;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/requisitions/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { pool } from '../../../../backend/db.js';\nimport type { RequisitionPayload, RequisitionItem } from '@/types';\nimport { randomUUID } from 'crypto';\n\nconst safeToISOString = (dateValue: any): string | null => {\n  if (!dateValue) return null;\n  const dateObj = new Date(dateValue);\n  if (isNaN(dateObj.getTime())) {\n    console.warn(`[API WARN] Invalid date value encountered: ${dateValue}. Returning null.`);\n    return null;\n  }\n  return dateObj.toISOString();\n};\n\n\nexport async function POST(request: Request) {\n  let connection;\n  try {\n    const requisitionData = await request.json() as Omit<RequisitionPayload, 'totalEstimatedValue' | 'items' | 'status' | 'justification'> & { items: RequisitionItem[], status?: RequisitionPayload['status'], approverId?: string | null, siteId: number }; // siteId (header) is now expected to be number\n    \n    const generatedId = requisitionData.id || randomUUID();\n\n    // Validate header siteId\n    if (!requisitionData.siteId) {\n        return NextResponse.json({ error: 'Site/Department is required for the requisition header.' }, { status: 400 });\n    }\n    if (!requisitionData.requisitionNumber || !requisitionData.requisitionDate || !requisitionData.requestedByName) {\n        return NextResponse.json({ error: 'Missing required fields for requisition header (Req No, Date, Requested By).' }, { status: 400 });\n    }\n    if (!requisitionData.items || requisitionData.items.length === 0) {\n        return NextResponse.json({ error: 'Requisition must have at least one item.' }, { status: 400 });\n    }\n\n    connection = await pool.getConnection();\n    await connection.beginTransaction();\n\n    const statusToSave = requisitionData.approverId ? 'Pending Approval' : 'Draft';\n\n    // Header justification field removed from INSERT\n    await connection.execute(\n      `INSERT INTO Requisition (id, requisitionNumber, requisitionDate, requestedByUserId, requestedByName, siteId, status, approverId, createdAt, updatedAt)\n       VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())`, // justification removed\n      [\n        generatedId,\n        requisitionData.requisitionNumber,\n        new Date(requisitionData.requisitionDate).toISOString().slice(0, 19).replace('T', ' '),\n        requisitionData.requestedByUserId || null,\n        requisitionData.requestedByName,\n        Number(requisitionData.siteId), // Header siteId\n        statusToSave, \n        requisitionData.approverId || null, \n      ]\n    );\n\n    for (const item of requisitionData.items) {\n      if (!item.description || !item.quantity) { // Item-level justification is now in item.justification (mapped to DB notes column)\n          await connection.rollback();\n          return NextResponse.json({ error: `Item description and quantity are required. Item problematic: ${JSON.stringify(item)}` }, { status: 400 });\n      }\n      // Item siteId removed from INSERT\n      await connection.execute(\n        `INSERT INTO RequisitionItem (id, requisitionId, partNumber, description, categoryId, quantity, notes, createdAt, updatedAt)\n         VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), NOW())`, // siteId removed, notes now stores item justification\n        [\n          item.id || randomUUID(),\n          generatedId, \n          item.partNumber, \n          item.description, \n          item.categoryId ? Number(item.categoryId) : null, \n          Number(item.quantity), \n          item.justification, // This was item.notes (renamed to justification in type, maps to 'notes' DB column)\n        ]\n      );\n    }\n\n    await connection.commit();\n    return NextResponse.json({ message: 'Requisition created successfully', requisitionId: generatedId, requisitionNumber: requisitionData.requisitionNumber, status: statusToSave }, { status: 201 });\n\n  } catch (error: any) {\n    if (connection) await connection.rollback();\n    console.error('[API_ERROR] /api/requisitions POST:', error);\n    \n    let errorMessage = 'Failed to create requisition.';\n    let statusCode = 500;\n    let errorDetails = error.message || 'An unknown database error occurred.';\n\n    if (error.code) {\n      switch (error.code) {\n        case 'ER_DUP_ENTRY':\n          errorMessage = 'Requisition with this ID or Number already exists.';\n          statusCode = 409;\n          break;\n        case 'ER_NO_REFERENCED_ROW_2':\n          let field = 'a related record';\n          const fkMatch = error.message.match(/FOREIGN KEY \\(`(\\w+)`\\)/);\n          if (fkMatch && fkMatch[1]) {\n              field = `field '${fkMatch[1]}'`;\n          } else if (error.message.includes('fk_requisition_site')) field = 'Site ID for requisition header';\n          else if (error.message.includes('fk_requisition_user')) field = 'Requested By User ID';\n          else if (error.message.includes('fk_requisition_approver')) field = 'Approver ID';\n          else if (error.message.includes('fk_reqitem_category')) field = 'Item Category ID';\n          errorMessage = `Invalid reference for ${field}. Please ensure the selected value exists.`;\n          statusCode = 400;\n          break;\n        case 'ER_BAD_NULL_ERROR':\n             errorMessage = `A required field was not provided or was invalid. Field: ${error.message.match(/Column '(\\w+)'/)?.[1] || 'unknown'}`;\n             statusCode = 400;\n             break;\n        case 'ER_BAD_FIELD_ERROR': \n             const columnMatch = error.message.match(/Unknown column '(\\w+)'/);\n             const unknownColumn = columnMatch ? columnMatch[1].toLowerCase() : 'an unknown column';\n             errorMessage = `Database error: Unknown column '${unknownColumn}' in field list.`;\n             errorDetails = `The database table (possibly Requisition or RequisitionItem) is missing the column '${unknownColumn}' or it's misspelled in the query. Please ensure database migrations have been run correctly. Original DB error: ${error.message}`;\n             statusCode = 500; \n             break;\n        default:\n          break;\n      }\n    }\n    return NextResponse.json({ error: errorMessage, details: errorDetails, code: error.code || 'UNKNOWN_DB_ERROR' }, { status: statusCode });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const month = searchParams.get('month');\n  const year = searchParams.get('year');\n  const siteId = searchParams.get('siteId'); // This will filter by Requisition.siteId (header site)\n  const requestedByUserId = searchParams.get('requestedByUserId');\n  const status = searchParams.get('status');\n\n  let query = `\n    SELECT \n      r.id, r.requisitionNumber, r.requisitionDate, r.requestedByName, r.status, \n      r.approverId, r.approvalDate,\n      s.name as siteName, s.siteCode, -- This is for the header site\n      u.name as requestorFullName,\n      app.name as approverName\n      -- Removed r.justification as it's no longer a header field from form\n    FROM Requisition r\n    LEFT JOIN Site s ON r.siteId = s.id -- Join for header site\n    LEFT JOIN User u ON r.requestedByUserId = u.id\n    LEFT JOIN Approver app ON r.approverId = app.id\n    WHERE 1=1\n  `;\n  const queryParams: (string | number)[] = [];\n\n  if (month && month !== 'all') {\n    query += ' AND MONTH(r.requisitionDate) = ?';\n    queryParams.push(parseInt(month, 10));\n  }\n  if (year && year !== 'all') {\n    query += ' AND YEAR(r.requisitionDate) = ?';\n    queryParams.push(parseInt(year, 10));\n  }\n  if (siteId && siteId !== 'all') { // Filters by header siteId\n    query += ' AND r.siteId = ?';\n    queryParams.push(parseInt(siteId, 10));\n  }\n  if (requestedByUserId && requestedByUserId !== 'all') {\n    query += ' AND r.requestedByUserId = ?';\n    queryParams.push(requestedByUserId);\n  }\n  if (status && status !== 'all') {\n    query += ' AND r.status = ?';\n    queryParams.push(status);\n  }\n\n  query += ' ORDER BY r.requisitionDate DESC, r.requisitionNumber DESC';\n\n  try {\n    const [rows]: any[] = await pool.execute(query, queryParams);\n    const requisitions = rows.map(row => ({\n        ...row,\n        siteName: row.siteCode || row.siteName, // Header site display\n        requestedByName: row.requestorFullName || row.requestedByName,\n        approverName: row.approverName,\n        approvalDate: safeToISOString(row.approvalDate),\n        requisitionDate: safeToISOString(row.requisitionDate),\n    }));\n    return NextResponse.json(requisitions);\n  } catch (error: any) {\n    console.error('[API_ERROR] /api/requisitions GET:', error); \n    const errorMessage = error.sqlMessage || error.message || 'An unknown database error occurred.';\n    const errorCode = error.code || 'UNKNOWN_DB_ERROR';\n    const sqlState = error.sqlState || 'N/A';\n    \n    console.error(`[API_ERROR_DETAILS] /api/requisitions GET: Code: ${errorCode}, SQL State: ${sqlState}, Message: \"${errorMessage}\"`);\n    \n    return NextResponse.json(\n      {\n        error: 'Failed to fetch requisitions due to a server-side database error.',\n        details: `Database operation failed with message: \"${errorMessage}\". Error Code: ${errorCode}. SQL State: ${sqlState}. Please check server logs for the full query and parameters if the issue persists.`,\n        code: errorCode,\n        sqlState: sqlState \n      }, \n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}