{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-1.5-flash-latest', // Updated model name\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,yIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 339, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;IAChQ,uFAAuF;IACvF,8DAA8D;IAC9D,MAAM,IAAI,MAAM,CAAC,2CAA2C,EAAE,eAAe,IAAI,CAAC,MAAM,wDAAwD,CAAC;AACrJ;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/tools/po-data-tools.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Tools for fetching Purchase Order data for Genkit flows.\n * - getPurchaseOrdersTool: Fetches POs based on specified criteria.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { pool } from '../../../backend/db.js'; // Corrected path\n\n// Input schema for the getPurchaseOrdersTool\nconst GetPurchaseOrdersInputSchema = z.object({\n  startDate: z.string().optional().describe(\"Start date for PO creationDate (YYYY-MM-DD)\"),\n  endDate: z.string().optional().describe(\"End date for PO creationDate (YYYY-MM-DD)\"),\n  status: z.string().optional().describe(\"Filter by PO status (e.g., 'Approved', 'Pending Approval')\"),\n  supplierId: z.string().optional().describe(\"Filter by supplier ID (supplierCode)\"),\n  minGrandTotal: z.number().optional().describe(\"Minimum grand total value for POs\"),\n  maxGrandTotal: z.number().optional().describe(\"Maximum grand total value for POs\"),\n  limit: z.number().optional().default(50).describe(\"Max number of POs to return, default 50\")\n}).describe(\"Input for fetching purchase orders. All filters are optional.\");\n\n// Output schema for each PO returned by the tool\nconst PurchaseOrderToolOutputSchema = z.object({\n  id: z.number(),\n  poNumber: z.string(),\n  creationDate: z.string().describe(\"PO creation date in YYYY-MM-DD format\"),\n  status: z.string(),\n  supplierId: z.string().optional().nullable(),\n  supplierName: z.string().optional().nullable().describe(\"Name of the supplier, if available\"),\n  grandTotal: z.number().optional().nullable(),\n  currency: z.string().optional().nullable(),\n  requestedByName: z.string().optional().nullable(),\n  itemCount: z.number().optional().describe(\"Number of items in this PO\"),\n});\n\n// Tool definition\nexport const getPurchaseOrdersTool = ai.defineTool(\n  {\n    name: 'getPurchaseOrdersTool',\n    description: 'Fetches purchase order data based on specified filters. Useful for analyzing PO trends, values, and statuses. Returns a list of purchase orders.',\n    inputSchema: GetPurchaseOrdersInputSchema,\n    outputSchema: z.array(PurchaseOrderToolOutputSchema),\n  },\n  async (input) => {\n    console.log('[getPurchaseOrdersTool] Received input:', input);\n    let connection;\n    try {\n      connection = await pool.getConnection();\n      let query = `\n        SELECT \n          po.id, \n          po.poNumber, \n          DATE_FORMAT(po.creationDate, '%Y-%m-%d') as creationDate, \n          po.status, \n          po.supplierId, \n          s.supplierName, \n          po.grandTotal, \n          po.currency, \n          po.requestedByName,\n          (SELECT COUNT(*) FROM POItem poi WHERE poi.poId = po.id) as itemCount\n        FROM PurchaseOrder po\n        LEFT JOIN Supplier s ON po.supplierId = s.supplierCode\n        WHERE 1=1\n      `;\n      const queryParams: (string | number)[] = [];\n\n      if (input.startDate) {\n        query += ' AND po.creationDate >= ?';\n        queryParams.push(input.startDate);\n      }\n      if (input.endDate) {\n        query += ' AND po.creationDate <= ?';\n        queryParams.push(input.endDate);\n      }\n      if (input.status) {\n        query += ' AND po.status = ?';\n        queryParams.push(input.status);\n      }\n      if (input.supplierId) {\n        query += ' AND po.supplierId = ?';\n        queryParams.push(input.supplierId);\n      }\n      if (input.minGrandTotal !== undefined) {\n        query += ' AND po.grandTotal >= ?';\n        queryParams.push(input.minGrandTotal);\n      }\n      if (input.maxGrandTotal !== undefined) {\n        query += ' AND po.grandTotal <= ?';\n        queryParams.push(input.maxGrandTotal);\n      }\n      \n      query += ' ORDER BY po.creationDate DESC LIMIT ?';\n      queryParams.push(input.limit || 50);\n\n      console.log('[getPurchaseOrdersTool] Executing query:', query, 'Params:', queryParams);\n      const [rows] = await connection.execute(query, queryParams) as any[];\n      console.log('[getPurchaseOrdersTool] Query successful, rows found:', rows.length);\n      \n      return rows.map(row => ({\n        ...row,\n        grandTotal: row.grandTotal ? parseFloat(row.grandTotal) : null,\n        itemCount: parseInt(row.itemCount, 10) || 0,\n      }));\n\n    } catch (error: any) {\n      console.error('[getPurchaseOrdersTool] Error fetching purchase orders:', error);\n      // It's often better for the LLM to know an error occurred rather than getting empty data without context\n      throw new Error(`Failed to fetch purchase orders from database: ${error.message}`);\n    } finally {\n      if (connection) connection.release();\n    }\n  }\n);\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 546, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/po-analysis-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for analyzing Purchase Order data based on user prompts.\n * - analyzePurchaseOrders: Main function to call the flow.\n * - POAnalysisInput: Input type for the flow.\n * - POAnalysisOutput: Output type for the flow.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getPurchaseOrdersTool } from '../tools/po-data-tools';\n\n// Input schema for the flow\nexport const POAnalysisInputSchema = z.object({\n  prompt: z.string().describe(\"The user's natural language question or request about Purchase Orders.\"),\n});\nexport type POAnalysisInput = z.infer<typeof POAnalysisInputSchema>;\n\n// Output schema for the flow\nexport const POAnalysisOutputSchema = z.object({\n  responseText: z.string().describe(\"The textual summary or answer to the user's prompt.\"),\n  chartData: z.array(z.object({ name: z.string(), value: z.number() })).optional().describe(\"Optional data for a simple bar chart if applicable (e.g., {name: 'Supplier A', value: 12000}). 'name' is the bar label, 'value' is the bar height.\"),\n  chartTitle: z.string().optional().describe(\"Title for the chart if chartData is provided.\"),\n  debugInfo: z.string().optional().describe(\"Debugging information, like data fetched by tools.\"),\n});\nexport type POAnalysisOutput = z.infer<typeof POAnalysisOutputSchema>;\n\n// Define the main prompt for the Gemini model\nconst poAnalysisSystemPrompt = ai.definePrompt({\n  name: 'poAnalysisSystemPrompt',\n  input: { schema: POAnalysisInputSchema },\n  output: { schema: POAnalysisOutputSchema },\n  tools: [getPurchaseOrdersTool],\n  system: `You are an expert data analyst specializing in Purchase Orders (POs) for a company named Jachris.\nYour goal is to answer the user's question by fetching data using the available tools and then analyzing it.\n\nAvailable tools:\n- getPurchaseOrdersTool: Fetches purchase order data. You can filter by criteria like date ranges (YYYY-MM-DD format), status, supplier, and value. It returns a list of POs with details like poNumber, creationDate, status, supplierName, grandTotal, currency, requestedByName, and itemCount.\n\nYour Process:\n1.  **Analyze Request**: Understand the user's request to determine what data is needed.\n2.  **Use Tools**: Call the 'getPurchaseOrdersTool' with the necessary filters to retrieve the data.\n3.  **Synthesize Answer**: Analyze the data returned by the tool to form your answer.\n4.  **Format Output**: Structure your entire response as a single JSON object matching the requested schema.\n\nOutput Requirements:\n- \\`responseText\\`: Provide a clear, concise textual response that directly answers the user's query. If no data is found, state that clearly.\n- \\`chartData\\` (optional): If the query involves aggregation (e.g., total PO value per supplier, count of POs by status), provide data for a bar chart. Each object in the array should have a 'name' (string label for the bar) and a 'value' (numeric value for the bar).\n- \\`chartTitle\\` (optional): Provide a title for the chart if \\`chartData\\` is present.\n- \\`debugInfo\\` (optional): **Crucially, if you use a tool, you MUST summarize what you did.** For example: \"Tool 'getPurchaseOrdersTool' was called with filters: {status: 'Approved', startDate: '2024-01-01'}. It returned 15 PO records.\"\n\nImportant Context:\n- The current year is ${new Date().getFullYear()}. Calculate date ranges for \"this year\" or \"last month\" accordingly.\n- Be specific with numbers and insights.\n\nUser's request: {{{prompt}}}\n`,\n});\n\n\n// Define the Genkit flow\nconst poAnalysisFlow = ai.defineFlow(\n  {\n    name: 'poAnalysisFlow',\n    inputSchema: POAnalysisInputSchema,\n    outputSchema: POAnalysisOutputSchema,\n  },\n  async (input): Promise<POAnalysisOutput> => {\n    console.log('[poAnalysisFlow] Received input:', input);\n    try {\n        const { output } = await poAnalysisSystemPrompt(input);\n\n        if (!output) {\n          console.error('[poAnalysisFlow] LLM returned a null or undefined output. This can happen if the model response does not conform to the output schema.');\n          throw new Error('The AI model failed to produce a valid response. Please try rephrasing your question.');\n        }\n        \n        console.log('[poAnalysisFlow] Successfully processed. LLM Output:', JSON.stringify(output).substring(0, 500) + \"...\");\n        return output;\n\n    } catch (error: any) {\n        console.error(\"[poAnalysisFlow] An error occurred during flow execution:\", error);\n        // This catch block handles errors from the tool (e.g., DB connection) or the LLM call itself.\n        // It formats the error into the expected output structure.\n        return {\n            responseText: `An error occurred while analyzing the data: ${error.message || 'Unknown error'}. Please check the system logs or try again.`,\n            debugInfo: `Error caught in poAnalysisFlow: ${error.stack || error.message}`,\n        };\n    }\n  }\n);\n\n// Exported wrapper function to be called from API routes or server actions\nexport async function analyzePurchaseOrders(input: POAnalysisInput): Promise<POAnalysisOutput> {\n  return poAnalysisFlow(input);\n}\n"],"names":[],"mappings":";;;;;;;AAEA;;;;;CAKC,GAED;AACA;AAAA;AACA;;;;;;;AAGO,MAAM,wBAAwB,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,QAAQ,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAIO,MAAM,yBAAyB,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,cAAc,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,WAAW,yIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,yIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,yIAAA,CAAA,IAAC,CAAC,MAAM;QAAI,OAAO,yIAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAAI,QAAQ,GAAG,QAAQ,CAAC;IAC1F,YAAY,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC3C,WAAW,yIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC5C;AAGA,8CAA8C;AAC9C,MAAM,yBAAyB,qHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7C,MAAM;IACN,OAAO;QAAE,QAAQ;IAAsB;IACvC,QAAQ;QAAE,QAAQ;IAAuB;IACzC,OAAO;QAAC,2IAAA,CAAA,wBAAqB;KAAC;IAC9B,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;sBAmBW,EAAE,IAAI,OAAO,WAAW,GAAG;;;;AAIjD,CAAC;AACD;AAGA,yBAAyB;AACzB,MAAM,iBAAiB,qHAAA,CAAA,KAAE,CAAC,UAAU,CAClC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,QAAQ,GAAG,CAAC,oCAAoC;IAChD,IAAI;QACA,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,uBAAuB;QAEhD,IAAI,CAAC,QAAQ;YACX,QAAQ,KAAK,CAAC;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ,GAAG,CAAC,wDAAwD,KAAK,SAAS,CAAC,QAAQ,SAAS,CAAC,GAAG,OAAO;QAC/G,OAAO;IAEX,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,6DAA6D;QAC3E,8FAA8F;QAC9F,2DAA2D;QAC3D,OAAO;YACH,cAAc,CAAC,4CAA4C,EAAE,MAAM,OAAO,IAAI,gBAAgB,4CAA4C,CAAC;YAC3I,WAAW,CAAC,gCAAgC,EAAE,MAAM,KAAK,IAAI,MAAM,OAAO,EAAE;QAChF;IACJ;AACF;AAIK,eAAe,sBAAsB,KAAsB;IAChE,OAAO,eAAe;AACxB;;;IAlFa;IAMA;IA0ES;;AAhFT,iPAAA;AAMA,iPAAA;AA0ES,iPAAA","debugId":null}},
    {"offset": {"line": 660, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/ai/analyze-po/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { analyzePurchaseOrders, type POAnalysisInput, type POAnalysisOutput } from '@/ai/flows/po-analysis-flow';\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const { prompt } = body;\n\n    if (!prompt || typeof prompt !== 'string') {\n      return NextResponse.json({ error: 'Prompt is required and must be a string.' }, { status: 400 });\n    }\n\n    console.log('[API /api/ai/analyze-po] Received prompt:', prompt);\n\n    const input: POAnalysisInput = { prompt };\n    const result: POAnalysisOutput = await analyzePurchaseOrders(input);\n\n    console.log('[API /api/ai/analyze-po] Flow result:', result);\n    return NextResponse.json(result);\n\n  } catch (error: any) {\n    console.error('[API /api/ai/analyze-po] Error processing AI request:', error);\n    return NextResponse.json(\n      { \n        error: 'Failed to process AI request.', \n        details: error.message,\n        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined,\n      }, \n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,MAAM,EAAE,GAAG;QAEnB,IAAI,CAAC,UAAU,OAAO,WAAW,UAAU;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA2C,GAAG;gBAAE,QAAQ;YAAI;QAChG;QAEA,QAAQ,GAAG,CAAC,6CAA6C;QAEzD,MAAM,QAAyB;YAAE;QAAO;QACxC,MAAM,SAA2B,MAAM,CAAA,GAAA,8IAAA,CAAA,wBAAqB,AAAD,EAAE;QAE7D,QAAQ,GAAG,CAAC,yCAAyC;QACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yDAAyD;QACvE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,MAAM,OAAO;YACtB,OAAO,uCAAyC,MAAM,KAAK;QAC7D,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}