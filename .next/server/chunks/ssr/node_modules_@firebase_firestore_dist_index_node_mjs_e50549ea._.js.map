{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.node.mjs","sources":["file:///home/user/studio/node_modules/%40firebase/firestore/dist/index.node.mjs"],"sourcesContent":["import { _getProvider, getApp, _removeServiceInstance, _registerComponent, registerVersion, SDK_VERSION as SDK_VERSION$1 } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { inspect, TextEncoder, TextDecoder } from 'util';\nimport { FirebaseError, getUA, isIndexedDBAvailable, isSafari, createMockUserToken, getModularInstance, deepEqual, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { randomBytes as randomBytes$1 } from 'crypto';\nimport { Integer, Md5 } from '@firebase/webchannel-wrapper';\nimport * as grpc from '@grpc/grpc-js';\nimport * as protoLoader from '@grpc/proto-loader';\n\nconst name = \"@firebase/firestore\";\nconst version$1 = \"3.13.0\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Simple wrapper around a nullable UID. Mostly exists to make code more\r\n * readable.\r\n */\r\nclass User {\r\n    constructor(uid) {\r\n        this.uid = uid;\r\n    }\r\n    isAuthenticated() {\r\n        return this.uid != null;\r\n    }\r\n    /**\r\n     * Returns a key representing this user, suitable for inclusion in a\r\n     * dictionary.\r\n     */\r\n    toKey() {\r\n        if (this.isAuthenticated()) {\r\n            return 'uid:' + this.uid;\r\n        }\r\n        else {\r\n            return 'anonymous-user';\r\n        }\r\n    }\r\n    isEqual(otherUser) {\r\n        return otherUser.uid === this.uid;\r\n    }\r\n}\r\n/** A user with a null UID. */\r\nUser.UNAUTHENTICATED = new User(null);\r\n// TODO(mikelehen): Look into getting a proper uid-equivalent for\r\n// non-FirebaseAuth providers.\r\nUser.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\r\nUser.FIRST_PARTY = new User('first-party-uid');\r\nUser.MOCK_USER = new User('mock-user');\n\nconst version = \"9.23.0\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet SDK_VERSION = version;\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Formats an object as a JSON string, suitable for logging. */\r\nfunction formatJSON(value) {\r\n    // util.inspect() results in much more readable output than JSON.stringify()\r\n    return inspect(value, { depth: 100 });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/firestore');\r\n// Helper methods are needed because variables can't be exported as read/write\r\nfunction getLogLevel() {\r\n    return logClient.logLevel;\r\n}\r\n/**\r\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\r\n *\r\n * @param logLevel - The verbosity you set for activity and error logging. Can\r\n *   be any of the following values:\r\n *\r\n *   <ul>\r\n *     <li>`debug` for the most verbose logging level, primarily for\r\n *     debugging.</li>\r\n *     <li>`error` to log errors only.</li>\r\n *     <li><code>`silent` to turn off logging.</li>\r\n *   </ul>\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    logClient.setLogLevel(logLevel);\r\n}\r\nfunction logDebug(msg, ...obj) {\r\n    if (logClient.logLevel <= LogLevel.DEBUG) {\r\n        const args = obj.map(argToString);\r\n        logClient.debug(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\r\n    }\r\n}\r\nfunction logError(msg, ...obj) {\r\n    if (logClient.logLevel <= LogLevel.ERROR) {\r\n        const args = obj.map(argToString);\r\n        logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction logWarn(msg, ...obj) {\r\n    if (logClient.logLevel <= LogLevel.WARN) {\r\n        const args = obj.map(argToString);\r\n        logClient.warn(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\r\n    }\r\n}\r\n/**\r\n * Converts an additional log parameter to a string representation.\r\n */\r\nfunction argToString(obj) {\r\n    if (typeof obj === 'string') {\r\n        return obj;\r\n    }\r\n    else {\r\n        try {\r\n            return formatJSON(obj);\r\n        }\r\n        catch (e) {\r\n            // Converting to JSON failed, just log the object directly\r\n            return obj;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Unconditionally fails, throwing an Error with the given message.\r\n * Messages are stripped in production builds.\r\n *\r\n * Returns `never` and can be used in expressions:\r\n * @example\r\n * let futureVar = fail('not implemented yet');\r\n */\r\nfunction fail(failure = 'Unexpected state') {\r\n    // Log the failure in addition to throw an exception, just in case the\r\n    // exception is swallowed.\r\n    const message = `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\r\n    logError(message);\r\n    // NOTE: We don't use FirestoreError here because these are internal failures\r\n    // that cannot be handled by the user. (Also it would create a circular\r\n    // dependency between the error and assert modules which doesn't work.)\r\n    throw new Error(message);\r\n}\r\n/**\r\n * Fails if the given assertion condition is false, throwing an Error with the\r\n * given message if it did.\r\n *\r\n * Messages are stripped in production builds.\r\n */\r\nfunction hardAssert(assertion, message) {\r\n    if (!assertion) {\r\n        fail();\r\n    }\r\n}\r\n/**\r\n * Fails if the given assertion condition is false, throwing an Error with the\r\n * given message if it did.\r\n *\r\n * The code of callsites invoking this function are stripped out in production\r\n * builds. Any side-effects of code within the debugAssert() invocation will not\r\n * happen in this case.\r\n *\r\n * @internal\r\n */\r\nfunction debugAssert(assertion, message) {\r\n    if (!assertion) {\r\n        fail();\r\n    }\r\n}\r\n/**\r\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\r\n * instance of `T` before casting.\r\n */\r\nfunction debugCast(obj, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconstructor) {\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst Code = {\r\n    // Causes are copied from:\r\n    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\r\n    /** Not an error; returned on success. */\r\n    OK: 'ok',\r\n    /** The operation was cancelled (typically by the caller). */\r\n    CANCELLED: 'cancelled',\r\n    /** Unknown error or an error from a different error domain. */\r\n    UNKNOWN: 'unknown',\r\n    /**\r\n     * Client specified an invalid argument. Note that this differs from\r\n     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\r\n     * problematic regardless of the state of the system (e.g., a malformed file\r\n     * name).\r\n     */\r\n    INVALID_ARGUMENT: 'invalid-argument',\r\n    /**\r\n     * Deadline expired before operation could complete. For operations that\r\n     * change the state of the system, this error may be returned even if the\r\n     * operation has completed successfully. For example, a successful response\r\n     * from a server could have been delayed long enough for the deadline to\r\n     * expire.\r\n     */\r\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\r\n    /** Some requested entity (e.g., file or directory) was not found. */\r\n    NOT_FOUND: 'not-found',\r\n    /**\r\n     * Some entity that we attempted to create (e.g., file or directory) already\r\n     * exists.\r\n     */\r\n    ALREADY_EXISTS: 'already-exists',\r\n    /**\r\n     * The caller does not have permission to execute the specified operation.\r\n     * PERMISSION_DENIED must not be used for rejections caused by exhausting\r\n     * some resource (use RESOURCE_EXHAUSTED instead for those errors).\r\n     * PERMISSION_DENIED must not be used if the caller can not be identified\r\n     * (use UNAUTHENTICATED instead for those errors).\r\n     */\r\n    PERMISSION_DENIED: 'permission-denied',\r\n    /**\r\n     * The request does not have valid authentication credentials for the\r\n     * operation.\r\n     */\r\n    UNAUTHENTICATED: 'unauthenticated',\r\n    /**\r\n     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\r\n     * entire file system is out of space.\r\n     */\r\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\r\n    /**\r\n     * Operation was rejected because the system is not in a state required for\r\n     * the operation's execution. For example, directory to be deleted may be\r\n     * non-empty, an rmdir operation is applied to a non-directory, etc.\r\n     *\r\n     * A litmus test that may help a service implementor in deciding\r\n     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\r\n     *  (a) Use UNAVAILABLE if the client can retry just the failing call.\r\n     *  (b) Use ABORTED if the client should retry at a higher-level\r\n     *      (e.g., restarting a read-modify-write sequence).\r\n     *  (c) Use FAILED_PRECONDITION if the client should not retry until\r\n     *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\r\n     *      fails because the directory is non-empty, FAILED_PRECONDITION\r\n     *      should be returned since the client should not retry unless\r\n     *      they have first fixed up the directory by deleting files from it.\r\n     *  (d) Use FAILED_PRECONDITION if the client performs conditional\r\n     *      REST Get/Update/Delete on a resource and the resource on the\r\n     *      server does not match the condition. E.g., conflicting\r\n     *      read-modify-write on the same resource.\r\n     */\r\n    FAILED_PRECONDITION: 'failed-precondition',\r\n    /**\r\n     * The operation was aborted, typically due to a concurrency issue like\r\n     * sequencer check failures, transaction aborts, etc.\r\n     *\r\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\r\n     * and UNAVAILABLE.\r\n     */\r\n    ABORTED: 'aborted',\r\n    /**\r\n     * Operation was attempted past the valid range. E.g., seeking or reading\r\n     * past end of file.\r\n     *\r\n     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\r\n     * if the system state changes. For example, a 32-bit file system will\r\n     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\r\n     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\r\n     * an offset past the current file size.\r\n     *\r\n     * There is a fair bit of overlap between FAILED_PRECONDITION and\r\n     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\r\n     * when it applies so that callers who are iterating through a space can\r\n     * easily look for an OUT_OF_RANGE error to detect when they are done.\r\n     */\r\n    OUT_OF_RANGE: 'out-of-range',\r\n    /** Operation is not implemented or not supported/enabled in this service. */\r\n    UNIMPLEMENTED: 'unimplemented',\r\n    /**\r\n     * Internal errors. Means some invariants expected by underlying System has\r\n     * been broken. If you see one of these errors, Something is very broken.\r\n     */\r\n    INTERNAL: 'internal',\r\n    /**\r\n     * The service is currently unavailable. This is a most likely a transient\r\n     * condition and may be corrected by retrying with a backoff.\r\n     *\r\n     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\r\n     * and UNAVAILABLE.\r\n     */\r\n    UNAVAILABLE: 'unavailable',\r\n    /** Unrecoverable data loss or corruption. */\r\n    DATA_LOSS: 'data-loss'\r\n};\r\n/** An error returned by a Firestore operation. */\r\nclass FirestoreError extends FirebaseError {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /**\r\n     * The backend error code associated with this error.\r\n     */\r\n    code, \r\n    /**\r\n     * A custom error description.\r\n     */\r\n    message) {\r\n        super(code, message);\r\n        this.code = code;\r\n        this.message = message;\r\n        // HACK: We write a toString property directly because Error is not a real\r\n        // class and so inheritance does not work correctly. We could alternatively\r\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\r\n        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass OAuthToken {\r\n    constructor(value, user) {\r\n        this.user = user;\r\n        this.type = 'OAuth';\r\n        this.headers = new Map();\r\n        this.headers.set('Authorization', `Bearer ${value}`);\r\n    }\r\n}\r\n/**\r\n * A CredentialsProvider that always yields an empty token.\r\n * @internal\r\n */\r\nclass EmptyAuthCredentialsProvider {\r\n    getToken() {\r\n        return Promise.resolve(null);\r\n    }\r\n    invalidateToken() { }\r\n    start(asyncQueue, changeListener) {\r\n        // Fire with initial user.\r\n        asyncQueue.enqueueRetryable(() => changeListener(User.UNAUTHENTICATED));\r\n    }\r\n    shutdown() { }\r\n}\r\n/**\r\n * A CredentialsProvider that always returns a constant token. Used for\r\n * emulator token mocking.\r\n */\r\nclass EmulatorAuthCredentialsProvider {\r\n    constructor(token) {\r\n        this.token = token;\r\n        /**\r\n         * Stores the listener registered with setChangeListener()\r\n         * This isn't actually necessary since the UID never changes, but we use this\r\n         * to verify the listen contract is adhered to in tests.\r\n         */\r\n        this.changeListener = null;\r\n    }\r\n    getToken() {\r\n        return Promise.resolve(this.token);\r\n    }\r\n    invalidateToken() { }\r\n    start(asyncQueue, changeListener) {\r\n        this.changeListener = changeListener;\r\n        // Fire with initial user.\r\n        asyncQueue.enqueueRetryable(() => changeListener(this.token.user));\r\n    }\r\n    shutdown() {\r\n        this.changeListener = null;\r\n    }\r\n}\r\nclass FirebaseAuthCredentialsProvider {\r\n    constructor(authProvider) {\r\n        this.authProvider = authProvider;\r\n        /** Tracks the current User. */\r\n        this.currentUser = User.UNAUTHENTICATED;\r\n        /**\r\n         * Counter used to detect if the token changed while a getToken request was\r\n         * outstanding.\r\n         */\r\n        this.tokenCounter = 0;\r\n        this.forceRefresh = false;\r\n        this.auth = null;\r\n    }\r\n    start(asyncQueue, changeListener) {\r\n        let lastTokenId = this.tokenCounter;\r\n        // A change listener that prevents double-firing for the same token change.\r\n        const guardedChangeListener = user => {\r\n            if (this.tokenCounter !== lastTokenId) {\r\n                lastTokenId = this.tokenCounter;\r\n                return changeListener(user);\r\n            }\r\n            else {\r\n                return Promise.resolve();\r\n            }\r\n        };\r\n        // A promise that can be waited on to block on the next token change.\r\n        // This promise is re-created after each change.\r\n        let nextToken = new Deferred();\r\n        this.tokenListener = () => {\r\n            this.tokenCounter++;\r\n            this.currentUser = this.getUser();\r\n            nextToken.resolve();\r\n            nextToken = new Deferred();\r\n            asyncQueue.enqueueRetryable(() => guardedChangeListener(this.currentUser));\r\n        };\r\n        const awaitNextToken = () => {\r\n            const currentTokenAttempt = nextToken;\r\n            asyncQueue.enqueueRetryable(async () => {\r\n                await currentTokenAttempt.promise;\r\n                await guardedChangeListener(this.currentUser);\r\n            });\r\n        };\r\n        const registerAuth = (auth) => {\r\n            logDebug('FirebaseAuthCredentialsProvider', 'Auth detected');\r\n            this.auth = auth;\r\n            this.auth.addAuthTokenListener(this.tokenListener);\r\n            awaitNextToken();\r\n        };\r\n        this.authProvider.onInit(auth => registerAuth(auth));\r\n        // Our users can initialize Auth right after Firestore, so we give it\r\n        // a chance to register itself with the component framework before we\r\n        // determine whether to start up in unauthenticated mode.\r\n        setTimeout(() => {\r\n            if (!this.auth) {\r\n                const auth = this.authProvider.getImmediate({ optional: true });\r\n                if (auth) {\r\n                    registerAuth(auth);\r\n                }\r\n                else {\r\n                    // If auth is still not available, proceed with `null` user\r\n                    logDebug('FirebaseAuthCredentialsProvider', 'Auth not yet detected');\r\n                    nextToken.resolve();\r\n                    nextToken = new Deferred();\r\n                }\r\n            }\r\n        }, 0);\r\n        awaitNextToken();\r\n    }\r\n    getToken() {\r\n        // Take note of the current value of the tokenCounter so that this method\r\n        // can fail (with an ABORTED error) if there is a token change while the\r\n        // request is outstanding.\r\n        const initialTokenCounter = this.tokenCounter;\r\n        const forceRefresh = this.forceRefresh;\r\n        this.forceRefresh = false;\r\n        if (!this.auth) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.auth.getToken(forceRefresh).then(tokenData => {\r\n            // Cancel the request since the token changed while the request was\r\n            // outstanding so the response is potentially for a previous user (which\r\n            // user, we can't be sure).\r\n            if (this.tokenCounter !== initialTokenCounter) {\r\n                logDebug('FirebaseAuthCredentialsProvider', 'getToken aborted due to token change.');\r\n                return this.getToken();\r\n            }\r\n            else {\r\n                if (tokenData) {\r\n                    hardAssert(typeof tokenData.accessToken === 'string');\r\n                    return new OAuthToken(tokenData.accessToken, this.currentUser);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    invalidateToken() {\r\n        this.forceRefresh = true;\r\n    }\r\n    shutdown() {\r\n        if (this.auth) {\r\n            this.auth.removeAuthTokenListener(this.tokenListener);\r\n        }\r\n    }\r\n    // Auth.getUid() can return null even with a user logged in. It is because\r\n    // getUid() is synchronous, but the auth code populating Uid is asynchronous.\r\n    // This method should only be called in the AuthTokenListener callback\r\n    // to guarantee to get the actual user.\r\n    getUser() {\r\n        const currentUid = this.auth && this.auth.getUid();\r\n        hardAssert(currentUid === null || typeof currentUid === 'string');\r\n        return new User(currentUid);\r\n    }\r\n}\r\n/*\r\n * FirstPartyToken provides a fresh token each time its value\r\n * is requested, because if the token is too old, requests will be rejected.\r\n * Technically this may no longer be necessary since the SDK should gracefully\r\n * recover from unauthenticated errors (see b/33147818 for context), but it's\r\n * safer to keep the implementation as-is.\r\n */\r\nclass FirstPartyToken {\r\n    constructor(sessionIndex, iamToken, authTokenFactory) {\r\n        this.sessionIndex = sessionIndex;\r\n        this.iamToken = iamToken;\r\n        this.authTokenFactory = authTokenFactory;\r\n        this.type = 'FirstParty';\r\n        this.user = User.FIRST_PARTY;\r\n        this._headers = new Map();\r\n    }\r\n    /**\r\n     * Gets an authorization token, using a provided factory function, or return\r\n     * null.\r\n     */\r\n    getAuthToken() {\r\n        if (this.authTokenFactory) {\r\n            return this.authTokenFactory();\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    get headers() {\r\n        this._headers.set('X-Goog-AuthUser', this.sessionIndex);\r\n        // Use array notation to prevent minification\r\n        const authHeaderTokenValue = this.getAuthToken();\r\n        if (authHeaderTokenValue) {\r\n            this._headers.set('Authorization', authHeaderTokenValue);\r\n        }\r\n        if (this.iamToken) {\r\n            this._headers.set('X-Goog-Iam-Authorization-Token', this.iamToken);\r\n        }\r\n        return this._headers;\r\n    }\r\n}\r\n/*\r\n * Provides user credentials required for the Firestore JavaScript SDK\r\n * to authenticate the user, using technique that is only available\r\n * to applications hosted by Google.\r\n */\r\nclass FirstPartyAuthCredentialsProvider {\r\n    constructor(sessionIndex, iamToken, authTokenFactory) {\r\n        this.sessionIndex = sessionIndex;\r\n        this.iamToken = iamToken;\r\n        this.authTokenFactory = authTokenFactory;\r\n    }\r\n    getToken() {\r\n        return Promise.resolve(new FirstPartyToken(this.sessionIndex, this.iamToken, this.authTokenFactory));\r\n    }\r\n    start(asyncQueue, changeListener) {\r\n        // Fire with initial uid.\r\n        asyncQueue.enqueueRetryable(() => changeListener(User.FIRST_PARTY));\r\n    }\r\n    shutdown() { }\r\n    invalidateToken() { }\r\n}\r\nclass AppCheckToken {\r\n    constructor(value) {\r\n        this.value = value;\r\n        this.type = 'AppCheck';\r\n        this.headers = new Map();\r\n        if (value && value.length > 0) {\r\n            this.headers.set('x-firebase-appcheck', this.value);\r\n        }\r\n    }\r\n}\r\nclass FirebaseAppCheckTokenProvider {\r\n    constructor(appCheckProvider) {\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.forceRefresh = false;\r\n        this.appCheck = null;\r\n        this.latestAppCheckToken = null;\r\n    }\r\n    start(asyncQueue, changeListener) {\r\n        const onTokenChanged = tokenResult => {\r\n            if (tokenResult.error != null) {\r\n                logDebug('FirebaseAppCheckTokenProvider', `Error getting App Check token; using placeholder token instead. Error: ${tokenResult.error.message}`);\r\n            }\r\n            const tokenUpdated = tokenResult.token !== this.latestAppCheckToken;\r\n            this.latestAppCheckToken = tokenResult.token;\r\n            logDebug('FirebaseAppCheckTokenProvider', `Received ${tokenUpdated ? 'new' : 'existing'} token.`);\r\n            return tokenUpdated\r\n                ? changeListener(tokenResult.token)\r\n                : Promise.resolve();\r\n        };\r\n        this.tokenListener = (tokenResult) => {\r\n            asyncQueue.enqueueRetryable(() => onTokenChanged(tokenResult));\r\n        };\r\n        const registerAppCheck = (appCheck) => {\r\n            logDebug('FirebaseAppCheckTokenProvider', 'AppCheck detected');\r\n            this.appCheck = appCheck;\r\n            this.appCheck.addTokenListener(this.tokenListener);\r\n        };\r\n        this.appCheckProvider.onInit(appCheck => registerAppCheck(appCheck));\r\n        // Our users can initialize AppCheck after Firestore, so we give it\r\n        // a chance to register itself with the component framework.\r\n        setTimeout(() => {\r\n            if (!this.appCheck) {\r\n                const appCheck = this.appCheckProvider.getImmediate({ optional: true });\r\n                if (appCheck) {\r\n                    registerAppCheck(appCheck);\r\n                }\r\n                else {\r\n                    // If AppCheck is still not available, proceed without it.\r\n                    logDebug('FirebaseAppCheckTokenProvider', 'AppCheck not yet detected');\r\n                }\r\n            }\r\n        }, 0);\r\n    }\r\n    getToken() {\r\n        const forceRefresh = this.forceRefresh;\r\n        this.forceRefresh = false;\r\n        if (!this.appCheck) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.appCheck.getToken(forceRefresh).then(tokenResult => {\r\n            if (tokenResult) {\r\n                hardAssert(typeof tokenResult.token === 'string');\r\n                this.latestAppCheckToken = tokenResult.token;\r\n                return new AppCheckToken(tokenResult.token);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n    invalidateToken() {\r\n        this.forceRefresh = true;\r\n    }\r\n    shutdown() {\r\n        if (this.appCheck) {\r\n            this.appCheck.removeTokenListener(this.tokenListener);\r\n        }\r\n    }\r\n}\r\n/**\r\n * An AppCheck token provider that always yields an empty token.\r\n * @internal\r\n */\r\nclass EmptyAppCheckTokenProvider {\r\n    getToken() {\r\n        return Promise.resolve(new AppCheckToken(''));\r\n    }\r\n    invalidateToken() { }\r\n    start(asyncQueue, changeListener) { }\r\n    shutdown() { }\r\n}\r\n/**\r\n * Builds a CredentialsProvider depending on the type of\r\n * the credentials passed in.\r\n */\r\nfunction makeAuthCredentialsProvider(credentials) {\r\n    if (!credentials) {\r\n        return new EmptyAuthCredentialsProvider();\r\n    }\r\n    switch (credentials['type']) {\r\n        case 'firstParty':\r\n            return new FirstPartyAuthCredentialsProvider(credentials['sessionIndex'] || '0', credentials['iamToken'] || null, credentials['authTokenFactory'] || null);\r\n        case 'provider':\r\n            return credentials['client'];\r\n        default:\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeAuthCredentialsProvider failed due to invalid credential type');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Generates `nBytes` of random bytes.\r\n *\r\n * If `nBytes < 0` , an error will be thrown.\r\n */\r\nfunction randomBytes(nBytes) {\r\n    return randomBytes$1(nBytes);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AutoId {\r\n    static newId() {\r\n        // Alphanumeric characters\r\n        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        // The largest byte value that is a multiple of `char.length`.\r\n        const maxMultiple = Math.floor(256 / chars.length) * chars.length;\r\n        let autoId = '';\r\n        const targetLength = 20;\r\n        while (autoId.length < targetLength) {\r\n            const bytes = randomBytes(40);\r\n            for (let i = 0; i < bytes.length; ++i) {\r\n                // Only accept values that are [0, maxMultiple), this ensures they can\r\n                // be evenly mapped to indices of `chars` via a modulo operation.\r\n                if (autoId.length < targetLength && bytes[i] < maxMultiple) {\r\n                    autoId += chars.charAt(bytes[i] % chars.length);\r\n                }\r\n            }\r\n        }\r\n        return autoId;\r\n    }\r\n}\r\nfunction primitiveComparator(left, right) {\r\n    if (left < right) {\r\n        return -1;\r\n    }\r\n    if (left > right) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n/** Helper to compare arrays using isEqual(). */\r\nfunction arrayEquals(left, right, comparator) {\r\n    if (left.length !== right.length) {\r\n        return false;\r\n    }\r\n    return left.every((value, index) => comparator(value, right[index]));\r\n}\r\n/**\r\n * Returns the immediate lexicographically-following string. This is useful to\r\n * construct an inclusive range for indexeddb iterators.\r\n */\r\nfunction immediateSuccessor(s) {\r\n    // Return the input string, with an additional NUL byte appended.\r\n    return s + '\\0';\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\r\nconst MIN_SECONDS = -62135596800;\r\n// Number of nanoseconds in a millisecond.\r\nconst MS_TO_NANOS = 1e6;\r\n/**\r\n * A `Timestamp` represents a point in time independent of any time zone or\r\n * calendar, represented as seconds and fractions of seconds at nanosecond\r\n * resolution in UTC Epoch time.\r\n *\r\n * It is encoded using the Proleptic Gregorian Calendar which extends the\r\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\r\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\r\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\r\n * 9999-12-31T23:59:59.999999999Z.\r\n *\r\n * For examples and further specifications, refer to the\r\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\r\n */\r\nclass Timestamp {\r\n    /**\r\n     * Creates a new timestamp.\r\n     *\r\n     * @param seconds - The number of seconds of UTC time since Unix epoch\r\n     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\r\n     *     9999-12-31T23:59:59Z inclusive.\r\n     * @param nanoseconds - The non-negative fractions of a second at nanosecond\r\n     *     resolution. Negative second values with fractions must still have\r\n     *     non-negative nanoseconds values that count forward in time. Must be\r\n     *     from 0 to 999,999,999 inclusive.\r\n     */\r\n    constructor(\r\n    /**\r\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\r\n     */\r\n    seconds, \r\n    /**\r\n     * The fractions of a second at nanosecond resolution.*\r\n     */\r\n    nanoseconds) {\r\n        this.seconds = seconds;\r\n        this.nanoseconds = nanoseconds;\r\n        if (nanoseconds < 0) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);\r\n        }\r\n        if (nanoseconds >= 1e9) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);\r\n        }\r\n        if (seconds < MIN_SECONDS) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);\r\n        }\r\n        // This will break in the year 10,000.\r\n        if (seconds >= 253402300800) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new timestamp with the current date, with millisecond precision.\r\n     *\r\n     * @returns a new timestamp representing the current date.\r\n     */\r\n    static now() {\r\n        return Timestamp.fromMillis(Date.now());\r\n    }\r\n    /**\r\n     * Creates a new timestamp from the given date.\r\n     *\r\n     * @param date - The date to initialize the `Timestamp` from.\r\n     * @returns A new `Timestamp` representing the same point in time as the given\r\n     *     date.\r\n     */\r\n    static fromDate(date) {\r\n        return Timestamp.fromMillis(date.getTime());\r\n    }\r\n    /**\r\n     * Creates a new timestamp from the given number of milliseconds.\r\n     *\r\n     * @param milliseconds - Number of milliseconds since Unix epoch\r\n     *     1970-01-01T00:00:00Z.\r\n     * @returns A new `Timestamp` representing the same point in time as the given\r\n     *     number of milliseconds.\r\n     */\r\n    static fromMillis(milliseconds) {\r\n        const seconds = Math.floor(milliseconds / 1000);\r\n        const nanos = Math.floor((milliseconds - seconds * 1000) * MS_TO_NANOS);\r\n        return new Timestamp(seconds, nanos);\r\n    }\r\n    /**\r\n     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\r\n     * causes a loss of precision since `Date` objects only support millisecond\r\n     * precision.\r\n     *\r\n     * @returns JavaScript `Date` object representing the same point in time as\r\n     *     this `Timestamp`, with millisecond precision.\r\n     */\r\n    toDate() {\r\n        return new Date(this.toMillis());\r\n    }\r\n    /**\r\n     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\r\n     * epoch). This operation causes a loss of precision.\r\n     *\r\n     * @returns The point in time corresponding to this timestamp, represented as\r\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\r\n     */\r\n    toMillis() {\r\n        return this.seconds * 1000 + this.nanoseconds / MS_TO_NANOS;\r\n    }\r\n    _compareTo(other) {\r\n        if (this.seconds === other.seconds) {\r\n            return primitiveComparator(this.nanoseconds, other.nanoseconds);\r\n        }\r\n        return primitiveComparator(this.seconds, other.seconds);\r\n    }\r\n    /**\r\n     * Returns true if this `Timestamp` is equal to the provided one.\r\n     *\r\n     * @param other - The `Timestamp` to compare against.\r\n     * @returns true if this `Timestamp` is equal to the provided one.\r\n     */\r\n    isEqual(other) {\r\n        return (other.seconds === this.seconds && other.nanoseconds === this.nanoseconds);\r\n    }\r\n    /** Returns a textual representation of this `Timestamp`. */\r\n    toString() {\r\n        return ('Timestamp(seconds=' +\r\n            this.seconds +\r\n            ', nanoseconds=' +\r\n            this.nanoseconds +\r\n            ')');\r\n    }\r\n    /** Returns a JSON-serializable representation of this `Timestamp`. */\r\n    toJSON() {\r\n        return { seconds: this.seconds, nanoseconds: this.nanoseconds };\r\n    }\r\n    /**\r\n     * Converts this object to a primitive string, which allows `Timestamp` objects\r\n     * to be compared using the `>`, `<=`, `>=` and `>` operators.\r\n     */\r\n    valueOf() {\r\n        // This method returns a string of the form <seconds>.<nanoseconds> where\r\n        // <seconds> is translated to have a non-negative value and both <seconds>\r\n        // and <nanoseconds> are left-padded with zeroes to be a consistent length.\r\n        // Strings with this format then have a lexiographical ordering that matches\r\n        // the expected ordering. The <seconds> translation is done to avoid having\r\n        // a leading negative sign (i.e. a leading '-' character) in its string\r\n        // representation, which would affect its lexiographical ordering.\r\n        const adjustedSeconds = this.seconds - MIN_SECONDS;\r\n        // Note: Up to 12 decimal digits are required to represent all valid\r\n        // 'seconds' values.\r\n        const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\r\n        const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\r\n        return formattedSeconds + '.' + formattedNanoseconds;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A version of a document in Firestore. This corresponds to the version\r\n * timestamp, such as update_time or read_time.\r\n */\r\nclass SnapshotVersion {\r\n    constructor(timestamp) {\r\n        this.timestamp = timestamp;\r\n    }\r\n    static fromTimestamp(value) {\r\n        return new SnapshotVersion(value);\r\n    }\r\n    static min() {\r\n        return new SnapshotVersion(new Timestamp(0, 0));\r\n    }\r\n    static max() {\r\n        return new SnapshotVersion(new Timestamp(253402300799, 1e9 - 1));\r\n    }\r\n    compareTo(other) {\r\n        return this.timestamp._compareTo(other.timestamp);\r\n    }\r\n    isEqual(other) {\r\n        return this.timestamp.isEqual(other.timestamp);\r\n    }\r\n    /** Returns a number representation of the version for use in spec tests. */\r\n    toMicroseconds() {\r\n        // Convert to microseconds.\r\n        return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\r\n    }\r\n    toString() {\r\n        return 'SnapshotVersion(' + this.timestamp.toString() + ')';\r\n    }\r\n    toTimestamp() {\r\n        return this.timestamp;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DOCUMENT_KEY_NAME = '__name__';\r\n/**\r\n * Path represents an ordered sequence of string segments.\r\n */\r\nclass BasePath {\r\n    constructor(segments, offset, length) {\r\n        if (offset === undefined) {\r\n            offset = 0;\r\n        }\r\n        else if (offset > segments.length) {\r\n            fail();\r\n        }\r\n        if (length === undefined) {\r\n            length = segments.length - offset;\r\n        }\r\n        else if (length > segments.length - offset) {\r\n            fail();\r\n        }\r\n        this.segments = segments;\r\n        this.offset = offset;\r\n        this.len = length;\r\n    }\r\n    get length() {\r\n        return this.len;\r\n    }\r\n    isEqual(other) {\r\n        return BasePath.comparator(this, other) === 0;\r\n    }\r\n    child(nameOrPath) {\r\n        const segments = this.segments.slice(this.offset, this.limit());\r\n        if (nameOrPath instanceof BasePath) {\r\n            nameOrPath.forEach(segment => {\r\n                segments.push(segment);\r\n            });\r\n        }\r\n        else {\r\n            segments.push(nameOrPath);\r\n        }\r\n        return this.construct(segments);\r\n    }\r\n    /** The index of one past the last segment of the path. */\r\n    limit() {\r\n        return this.offset + this.length;\r\n    }\r\n    popFirst(size) {\r\n        size = size === undefined ? 1 : size;\r\n        return this.construct(this.segments, this.offset + size, this.length - size);\r\n    }\r\n    popLast() {\r\n        return this.construct(this.segments, this.offset, this.length - 1);\r\n    }\r\n    firstSegment() {\r\n        return this.segments[this.offset];\r\n    }\r\n    lastSegment() {\r\n        return this.get(this.length - 1);\r\n    }\r\n    get(index) {\r\n        return this.segments[this.offset + index];\r\n    }\r\n    isEmpty() {\r\n        return this.length === 0;\r\n    }\r\n    isPrefixOf(other) {\r\n        if (other.length < this.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < this.length; i++) {\r\n            if (this.get(i) !== other.get(i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    isImmediateParentOf(potentialChild) {\r\n        if (this.length + 1 !== potentialChild.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < this.length; i++) {\r\n            if (this.get(i) !== potentialChild.get(i)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    forEach(fn) {\r\n        for (let i = this.offset, end = this.limit(); i < end; i++) {\r\n            fn(this.segments[i]);\r\n        }\r\n    }\r\n    toArray() {\r\n        return this.segments.slice(this.offset, this.limit());\r\n    }\r\n    static comparator(p1, p2) {\r\n        const len = Math.min(p1.length, p2.length);\r\n        for (let i = 0; i < len; i++) {\r\n            const left = p1.get(i);\r\n            const right = p2.get(i);\r\n            if (left < right) {\r\n                return -1;\r\n            }\r\n            if (left > right) {\r\n                return 1;\r\n            }\r\n        }\r\n        if (p1.length < p2.length) {\r\n            return -1;\r\n        }\r\n        if (p1.length > p2.length) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n/**\r\n * A slash-separated path for navigating resources (documents and collections)\r\n * within Firestore.\r\n *\r\n * @internal\r\n */\r\nclass ResourcePath extends BasePath {\r\n    construct(segments, offset, length) {\r\n        return new ResourcePath(segments, offset, length);\r\n    }\r\n    canonicalString() {\r\n        // NOTE: The client is ignorant of any path segments containing escape\r\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\r\n        // for legacy reasons and should not be used frequently).\r\n        return this.toArray().join('/');\r\n    }\r\n    toString() {\r\n        return this.canonicalString();\r\n    }\r\n    /**\r\n     * Creates a resource path from the given slash-delimited string. If multiple\r\n     * arguments are provided, all components are combined. Leading and trailing\r\n     * slashes from all components are ignored.\r\n     */\r\n    static fromString(...pathComponents) {\r\n        // NOTE: The client is ignorant of any path segments containing escape\r\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\r\n        // for legacy reasons and should not be used frequently).\r\n        const segments = [];\r\n        for (const path of pathComponents) {\r\n            if (path.indexOf('//') >= 0) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid segment (${path}). Paths must not contain // in them.`);\r\n            }\r\n            // Strip leading and traling slashed.\r\n            segments.push(...path.split('/').filter(segment => segment.length > 0));\r\n        }\r\n        return new ResourcePath(segments);\r\n    }\r\n    static emptyPath() {\r\n        return new ResourcePath([]);\r\n    }\r\n}\r\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\r\n/**\r\n * A dot-separated path for navigating sub-objects within a document.\r\n * @internal\r\n */\r\nclass FieldPath$1 extends BasePath {\r\n    construct(segments, offset, length) {\r\n        return new FieldPath$1(segments, offset, length);\r\n    }\r\n    /**\r\n     * Returns true if the string could be used as a segment in a field path\r\n     * without escaping.\r\n     */\r\n    static isValidIdentifier(segment) {\r\n        return identifierRegExp.test(segment);\r\n    }\r\n    canonicalString() {\r\n        return this.toArray()\r\n            .map(str => {\r\n            str = str.replace(/\\\\/g, '\\\\\\\\').replace(/`/g, '\\\\`');\r\n            if (!FieldPath$1.isValidIdentifier(str)) {\r\n                str = '`' + str + '`';\r\n            }\r\n            return str;\r\n        })\r\n            .join('.');\r\n    }\r\n    toString() {\r\n        return this.canonicalString();\r\n    }\r\n    /**\r\n     * Returns true if this field references the key of a document.\r\n     */\r\n    isKeyField() {\r\n        return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\r\n    }\r\n    /**\r\n     * The field designating the key of a document.\r\n     */\r\n    static keyField() {\r\n        return new FieldPath$1([DOCUMENT_KEY_NAME]);\r\n    }\r\n    /**\r\n     * Parses a field string from the given server-formatted string.\r\n     *\r\n     * - Splitting the empty string is not allowed (for now at least).\r\n     * - Empty segments within the string (e.g. if there are two consecutive\r\n     *   separators) are not allowed.\r\n     *\r\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\r\n     * non-identifier path components, even if they aren't escaped.\r\n     */\r\n    static fromServerFormat(path) {\r\n        const segments = [];\r\n        let current = '';\r\n        let i = 0;\r\n        const addCurrentSegment = () => {\r\n            if (current.length === 0) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid field path (${path}). Paths must not be empty, begin ` +\r\n                    `with '.', end with '.', or contain '..'`);\r\n            }\r\n            segments.push(current);\r\n            current = '';\r\n        };\r\n        let inBackticks = false;\r\n        while (i < path.length) {\r\n            const c = path[i];\r\n            if (c === '\\\\') {\r\n                if (i + 1 === path.length) {\r\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\r\n                }\r\n                const next = path[i + 1];\r\n                if (!(next === '\\\\' || next === '.' || next === '`')) {\r\n                    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\r\n                }\r\n                current += next;\r\n                i += 2;\r\n            }\r\n            else if (c === '`') {\r\n                inBackticks = !inBackticks;\r\n                i++;\r\n            }\r\n            else if (c === '.' && !inBackticks) {\r\n                addCurrentSegment();\r\n                i++;\r\n            }\r\n            else {\r\n                current += c;\r\n                i++;\r\n            }\r\n        }\r\n        addCurrentSegment();\r\n        if (inBackticks) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\r\n        }\r\n        return new FieldPath$1(segments);\r\n    }\r\n    static emptyPath() {\r\n        return new FieldPath$1([]);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass DocumentKey {\r\n    constructor(path) {\r\n        this.path = path;\r\n    }\r\n    static fromPath(path) {\r\n        return new DocumentKey(ResourcePath.fromString(path));\r\n    }\r\n    static fromName(name) {\r\n        return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\r\n    }\r\n    static empty() {\r\n        return new DocumentKey(ResourcePath.emptyPath());\r\n    }\r\n    get collectionGroup() {\r\n        return this.path.popLast().lastSegment();\r\n    }\r\n    /** Returns true if the document is in the specified collectionId. */\r\n    hasCollectionId(collectionId) {\r\n        return (this.path.length >= 2 &&\r\n            this.path.get(this.path.length - 2) === collectionId);\r\n    }\r\n    /** Returns the collection group (i.e. the name of the parent collection) for this key. */\r\n    getCollectionGroup() {\r\n        return this.path.get(this.path.length - 2);\r\n    }\r\n    /** Returns the fully qualified path to the parent collection. */\r\n    getCollectionPath() {\r\n        return this.path.popLast();\r\n    }\r\n    isEqual(other) {\r\n        return (other !== null && ResourcePath.comparator(this.path, other.path) === 0);\r\n    }\r\n    toString() {\r\n        return this.path.toString();\r\n    }\r\n    static comparator(k1, k2) {\r\n        return ResourcePath.comparator(k1.path, k2.path);\r\n    }\r\n    static isDocumentKey(path) {\r\n        return path.length % 2 === 0;\r\n    }\r\n    /**\r\n     * Creates and returns a new document key with the given segments.\r\n     *\r\n     * @param segments - The segments of the path to the document\r\n     * @returns A new instance of DocumentKey\r\n     */\r\n    static fromSegments(segments) {\r\n        return new DocumentKey(new ResourcePath(segments.slice()));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The initial mutation batch id for each index. Gets updated during index\r\n * backfill.\r\n */\r\nconst INITIAL_LARGEST_BATCH_ID = -1;\r\n/**\r\n * The initial sequence number for each index. Gets updated during index\r\n * backfill.\r\n */\r\nconst INITIAL_SEQUENCE_NUMBER = 0;\r\n/**\r\n * An index definition for field indexes in Firestore.\r\n *\r\n * Every index is associated with a collection. The definition contains a list\r\n * of fields and their index kind (which can be `ASCENDING`, `DESCENDING` or\r\n * `CONTAINS` for ArrayContains/ArrayContainsAny queries).\r\n *\r\n * Unlike the backend, the SDK does not differentiate between collection or\r\n * collection group-scoped indices. Every index can be used for both single\r\n * collection and collection group queries.\r\n */\r\nclass FieldIndex {\r\n    constructor(\r\n    /**\r\n     * The index ID. Returns -1 if the index ID is not available (e.g. the index\r\n     * has not yet been persisted).\r\n     */\r\n    indexId, \r\n    /** The collection ID this index applies to. */\r\n    collectionGroup, \r\n    /** The field segments for this index. */\r\n    fields, \r\n    /** Shows how up-to-date the index is for the current user. */\r\n    indexState) {\r\n        this.indexId = indexId;\r\n        this.collectionGroup = collectionGroup;\r\n        this.fields = fields;\r\n        this.indexState = indexState;\r\n    }\r\n}\r\n/** An ID for an index that has not yet been added to persistence.  */\r\nFieldIndex.UNKNOWN_ID = -1;\r\n/** Returns the ArrayContains/ArrayContainsAny segment for this index. */\r\nfunction fieldIndexGetArraySegment(fieldIndex) {\r\n    return fieldIndex.fields.find(s => s.kind === 2 /* IndexKind.CONTAINS */);\r\n}\r\n/** Returns all directional (ascending/descending) segments for this index. */\r\nfunction fieldIndexGetDirectionalSegments(fieldIndex) {\r\n    return fieldIndex.fields.filter(s => s.kind !== 2 /* IndexKind.CONTAINS */);\r\n}\r\n/**\r\n * Returns the order of the document key component for the given index.\r\n *\r\n * PORTING NOTE: This is only used in the Web IndexedDb implementation.\r\n */\r\nfunction fieldIndexGetKeyOrder(fieldIndex) {\r\n    const directionalSegments = fieldIndexGetDirectionalSegments(fieldIndex);\r\n    return directionalSegments.length === 0\r\n        ? 0 /* IndexKind.ASCENDING */\r\n        : directionalSegments[directionalSegments.length - 1].kind;\r\n}\r\n/**\r\n * Compares indexes by collection group and segments. Ignores update time and\r\n * index ID.\r\n */\r\nfunction fieldIndexSemanticComparator(left, right) {\r\n    let cmp = primitiveComparator(left.collectionGroup, right.collectionGroup);\r\n    if (cmp !== 0) {\r\n        return cmp;\r\n    }\r\n    for (let i = 0; i < Math.min(left.fields.length, right.fields.length); ++i) {\r\n        cmp = indexSegmentComparator(left.fields[i], right.fields[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    return primitiveComparator(left.fields.length, right.fields.length);\r\n}\r\n/** Returns a debug representation of the field index */\r\nfunction fieldIndexToString(fieldIndex) {\r\n    return `id=${fieldIndex.indexId}|cg=${fieldIndex.collectionGroup}|f=${fieldIndex.fields.map(f => `${f.fieldPath}:${f.kind}`).join(',')}`;\r\n}\r\n/** An index component consisting of field path and index type.  */\r\nclass IndexSegment {\r\n    constructor(\r\n    /** The field path of the component. */\r\n    fieldPath, \r\n    /** The fields sorting order. */\r\n    kind) {\r\n        this.fieldPath = fieldPath;\r\n        this.kind = kind;\r\n    }\r\n}\r\nfunction indexSegmentComparator(left, right) {\r\n    const cmp = FieldPath$1.comparator(left.fieldPath, right.fieldPath);\r\n    if (cmp !== 0) {\r\n        return cmp;\r\n    }\r\n    return primitiveComparator(left.kind, right.kind);\r\n}\r\n/**\r\n * Stores the \"high water mark\" that indicates how updated the Index is for the\r\n * current user.\r\n */\r\nclass IndexState {\r\n    constructor(\r\n    /**\r\n     * Indicates when the index was last updated (relative to other indexes).\r\n     */\r\n    sequenceNumber, \r\n    /** The the latest indexed read time, document and batch id. */\r\n    offset) {\r\n        this.sequenceNumber = sequenceNumber;\r\n        this.offset = offset;\r\n    }\r\n    /** The state of an index that has not yet been backfilled. */\r\n    static empty() {\r\n        return new IndexState(INITIAL_SEQUENCE_NUMBER, IndexOffset.min());\r\n    }\r\n}\r\n/**\r\n * Creates an offset that matches all documents with a read time higher than\r\n * `readTime`.\r\n */\r\nfunction newIndexOffsetSuccessorFromReadTime(readTime, largestBatchId) {\r\n    // We want to create an offset that matches all documents with a read time\r\n    // greater than the provided read time. To do so, we technically need to\r\n    // create an offset for `(readTime, MAX_DOCUMENT_KEY)`. While we could use\r\n    // Unicode codepoints to generate MAX_DOCUMENT_KEY, it is much easier to use\r\n    // `(readTime + 1, DocumentKey.empty())` since `> DocumentKey.empty()` matches\r\n    // all valid document IDs.\r\n    const successorSeconds = readTime.toTimestamp().seconds;\r\n    const successorNanos = readTime.toTimestamp().nanoseconds + 1;\r\n    const successor = SnapshotVersion.fromTimestamp(successorNanos === 1e9\r\n        ? new Timestamp(successorSeconds + 1, 0)\r\n        : new Timestamp(successorSeconds, successorNanos));\r\n    return new IndexOffset(successor, DocumentKey.empty(), largestBatchId);\r\n}\r\n/** Creates a new offset based on the provided document. */\r\nfunction newIndexOffsetFromDocument(document) {\r\n    return new IndexOffset(document.readTime, document.key, INITIAL_LARGEST_BATCH_ID);\r\n}\r\n/**\r\n * Stores the latest read time, document and batch ID that were processed for an\r\n * index.\r\n */\r\nclass IndexOffset {\r\n    constructor(\r\n    /**\r\n     * The latest read time version that has been indexed by Firestore for this\r\n     * field index.\r\n     */\r\n    readTime, \r\n    /**\r\n     * The key of the last document that was indexed for this query. Use\r\n     * `DocumentKey.empty()` if no document has been indexed.\r\n     */\r\n    documentKey, \r\n    /*\r\n     * The largest mutation batch id that's been processed by Firestore.\r\n     */\r\n    largestBatchId) {\r\n        this.readTime = readTime;\r\n        this.documentKey = documentKey;\r\n        this.largestBatchId = largestBatchId;\r\n    }\r\n    /** Returns an offset that sorts before all regular offsets. */\r\n    static min() {\r\n        return new IndexOffset(SnapshotVersion.min(), DocumentKey.empty(), INITIAL_LARGEST_BATCH_ID);\r\n    }\r\n    /** Returns an offset that sorts after all regular offsets. */\r\n    static max() {\r\n        return new IndexOffset(SnapshotVersion.max(), DocumentKey.empty(), INITIAL_LARGEST_BATCH_ID);\r\n    }\r\n}\r\nfunction indexOffsetComparator(left, right) {\r\n    let cmp = left.readTime.compareTo(right.readTime);\r\n    if (cmp !== 0) {\r\n        return cmp;\r\n    }\r\n    cmp = DocumentKey.comparator(left.documentKey, right.documentKey);\r\n    if (cmp !== 0) {\r\n        return cmp;\r\n    }\r\n    return primitiveComparator(left.largestBatchId, right.largestBatchId);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PRIMARY_LEASE_LOST_ERROR_MSG = 'The current tab is not in the required state to perform this operation. ' +\r\n    'It might be necessary to refresh the browser tab.';\r\n/**\r\n * A base class representing a persistence transaction, encapsulating both the\r\n * transaction's sequence numbers as well as a list of onCommitted listeners.\r\n *\r\n * When you call Persistence.runTransaction(), it will create a transaction and\r\n * pass it to your callback. You then pass it to any method that operates\r\n * on persistence.\r\n */\r\nclass PersistenceTransaction {\r\n    constructor() {\r\n        this.onCommittedListeners = [];\r\n    }\r\n    addOnCommittedListener(listener) {\r\n        this.onCommittedListeners.push(listener);\r\n    }\r\n    raiseOnCommittedEvent() {\r\n        this.onCommittedListeners.forEach(listener => listener());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Verifies the error thrown by a LocalStore operation. If a LocalStore\r\n * operation fails because the primary lease has been taken by another client,\r\n * we ignore the error (the persistence layer will immediately call\r\n * `applyPrimaryLease` to propagate the primary state change). All other errors\r\n * are re-thrown.\r\n *\r\n * @param err - An error returned by a LocalStore operation.\r\n * @returns A Promise that resolves after we recovered, or the original error.\r\n */\r\nasync function ignoreIfPrimaryLeaseLoss(err) {\r\n    if (err.code === Code.FAILED_PRECONDITION &&\r\n        err.message === PRIMARY_LEASE_LOST_ERROR_MSG) {\r\n        logDebug('LocalStore', 'Unexpectedly lost primary lease');\r\n    }\r\n    else {\r\n        throw err;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * PersistencePromise is essentially a re-implementation of Promise except\r\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\r\n * are executed synchronously when a PersistencePromise resolves rather than\r\n * asynchronously (Promise implementations use setImmediate() or similar).\r\n *\r\n * This is necessary to interoperate with IndexedDB which will automatically\r\n * commit transactions if control is returned to the event loop without\r\n * synchronously initiating another operation on the transaction.\r\n *\r\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\r\n * Promises.\r\n */\r\nclass PersistencePromise {\r\n    constructor(callback) {\r\n        // NOTE: next/catchCallback will always point to our own wrapper functions,\r\n        // not the user's raw next() or catch() callbacks.\r\n        this.nextCallback = null;\r\n        this.catchCallback = null;\r\n        // When the operation resolves, we'll set result or error and mark isDone.\r\n        this.result = undefined;\r\n        this.error = undefined;\r\n        this.isDone = false;\r\n        // Set to true when .then() or .catch() are called and prevents additional\r\n        // chaining.\r\n        this.callbackAttached = false;\r\n        callback(value => {\r\n            this.isDone = true;\r\n            this.result = value;\r\n            if (this.nextCallback) {\r\n                // value should be defined unless T is Void, but we can't express\r\n                // that in the type system.\r\n                this.nextCallback(value);\r\n            }\r\n        }, error => {\r\n            this.isDone = true;\r\n            this.error = error;\r\n            if (this.catchCallback) {\r\n                this.catchCallback(error);\r\n            }\r\n        });\r\n    }\r\n    catch(fn) {\r\n        return this.next(undefined, fn);\r\n    }\r\n    next(nextFn, catchFn) {\r\n        if (this.callbackAttached) {\r\n            fail();\r\n        }\r\n        this.callbackAttached = true;\r\n        if (this.isDone) {\r\n            if (!this.error) {\r\n                return this.wrapSuccess(nextFn, this.result);\r\n            }\r\n            else {\r\n                return this.wrapFailure(catchFn, this.error);\r\n            }\r\n        }\r\n        else {\r\n            return new PersistencePromise((resolve, reject) => {\r\n                this.nextCallback = (value) => {\r\n                    this.wrapSuccess(nextFn, value).next(resolve, reject);\r\n                };\r\n                this.catchCallback = (error) => {\r\n                    this.wrapFailure(catchFn, error).next(resolve, reject);\r\n                };\r\n            });\r\n        }\r\n    }\r\n    toPromise() {\r\n        return new Promise((resolve, reject) => {\r\n            this.next(resolve, reject);\r\n        });\r\n    }\r\n    wrapUserFunction(fn) {\r\n        try {\r\n            const result = fn();\r\n            if (result instanceof PersistencePromise) {\r\n                return result;\r\n            }\r\n            else {\r\n                return PersistencePromise.resolve(result);\r\n            }\r\n        }\r\n        catch (e) {\r\n            return PersistencePromise.reject(e);\r\n        }\r\n    }\r\n    wrapSuccess(nextFn, value) {\r\n        if (nextFn) {\r\n            return this.wrapUserFunction(() => nextFn(value));\r\n        }\r\n        else {\r\n            // If there's no nextFn, then R must be the same as T\r\n            return PersistencePromise.resolve(value);\r\n        }\r\n    }\r\n    wrapFailure(catchFn, error) {\r\n        if (catchFn) {\r\n            return this.wrapUserFunction(() => catchFn(error));\r\n        }\r\n        else {\r\n            return PersistencePromise.reject(error);\r\n        }\r\n    }\r\n    static resolve(result) {\r\n        return new PersistencePromise((resolve, reject) => {\r\n            resolve(result);\r\n        });\r\n    }\r\n    static reject(error) {\r\n        return new PersistencePromise((resolve, reject) => {\r\n            reject(error);\r\n        });\r\n    }\r\n    static waitFor(\r\n    // Accept all Promise types in waitFor().\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    all) {\r\n        return new PersistencePromise((resolve, reject) => {\r\n            let expectedCount = 0;\r\n            let resolvedCount = 0;\r\n            let done = false;\r\n            all.forEach(element => {\r\n                ++expectedCount;\r\n                element.next(() => {\r\n                    ++resolvedCount;\r\n                    if (done && resolvedCount === expectedCount) {\r\n                        resolve();\r\n                    }\r\n                }, err => reject(err));\r\n            });\r\n            done = true;\r\n            if (resolvedCount === expectedCount) {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Given an array of predicate functions that asynchronously evaluate to a\r\n     * boolean, implements a short-circuiting `or` between the results. Predicates\r\n     * will be evaluated until one of them returns `true`, then stop. The final\r\n     * result will be whether any of them returned `true`.\r\n     */\r\n    static or(predicates) {\r\n        let p = PersistencePromise.resolve(false);\r\n        for (const predicate of predicates) {\r\n            p = p.next(isTrue => {\r\n                if (isTrue) {\r\n                    return PersistencePromise.resolve(isTrue);\r\n                }\r\n                else {\r\n                    return predicate();\r\n                }\r\n            });\r\n        }\r\n        return p;\r\n    }\r\n    static forEach(collection, f) {\r\n        const promises = [];\r\n        collection.forEach((r, s) => {\r\n            promises.push(f.call(this, r, s));\r\n        });\r\n        return this.waitFor(promises);\r\n    }\r\n    /**\r\n     * Concurrently map all array elements through asynchronous function.\r\n     */\r\n    static mapArray(array, f) {\r\n        return new PersistencePromise((resolve, reject) => {\r\n            const expectedCount = array.length;\r\n            const results = new Array(expectedCount);\r\n            let resolvedCount = 0;\r\n            for (let i = 0; i < expectedCount; i++) {\r\n                const current = i;\r\n                f(array[current]).next(result => {\r\n                    results[current] = result;\r\n                    ++resolvedCount;\r\n                    if (resolvedCount === expectedCount) {\r\n                        resolve(results);\r\n                    }\r\n                }, err => reject(err));\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * An alternative to recursive PersistencePromise calls, that avoids\r\n     * potential memory problems from unbounded chains of promises.\r\n     *\r\n     * The `action` will be called repeatedly while `condition` is true.\r\n     */\r\n    static doWhile(condition, action) {\r\n        return new PersistencePromise((resolve, reject) => {\r\n            const process = () => {\r\n                if (condition() === true) {\r\n                    action().next(() => {\r\n                        process();\r\n                    }, reject);\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            };\r\n            process();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// References to `window` are guarded by SimpleDb.isAvailable()\r\n/* eslint-disable no-restricted-globals */\r\nconst LOG_TAG$i = 'SimpleDb';\r\n/**\r\n * The maximum number of retry attempts for an IndexedDb transaction that fails\r\n * with a DOMException.\r\n */\r\nconst TRANSACTION_RETRY_COUNT = 3;\r\n/**\r\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\r\n * specific object store.\r\n */\r\nclass SimpleDbTransaction {\r\n    constructor(action, transaction) {\r\n        this.action = action;\r\n        this.transaction = transaction;\r\n        this.aborted = false;\r\n        /**\r\n         * A `Promise` that resolves with the result of the IndexedDb transaction.\r\n         */\r\n        this.completionDeferred = new Deferred();\r\n        this.transaction.oncomplete = () => {\r\n            this.completionDeferred.resolve();\r\n        };\r\n        this.transaction.onabort = () => {\r\n            if (transaction.error) {\r\n                this.completionDeferred.reject(new IndexedDbTransactionError(action, transaction.error));\r\n            }\r\n            else {\r\n                this.completionDeferred.resolve();\r\n            }\r\n        };\r\n        this.transaction.onerror = (event) => {\r\n            const error = checkForAndReportiOSError(event.target.error);\r\n            this.completionDeferred.reject(new IndexedDbTransactionError(action, error));\r\n        };\r\n    }\r\n    static open(db, action, mode, objectStoreNames) {\r\n        try {\r\n            return new SimpleDbTransaction(action, db.transaction(objectStoreNames, mode));\r\n        }\r\n        catch (e) {\r\n            throw new IndexedDbTransactionError(action, e);\r\n        }\r\n    }\r\n    get completionPromise() {\r\n        return this.completionDeferred.promise;\r\n    }\r\n    abort(error) {\r\n        if (error) {\r\n            this.completionDeferred.reject(error);\r\n        }\r\n        if (!this.aborted) {\r\n            logDebug(LOG_TAG$i, 'Aborting transaction:', error ? error.message : 'Client-initiated abort');\r\n            this.aborted = true;\r\n            this.transaction.abort();\r\n        }\r\n    }\r\n    maybeCommit() {\r\n        // If the browser supports V3 IndexedDB, we invoke commit() explicitly to\r\n        // speed up index DB processing if the event loop remains blocks.\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const maybeV3IndexedDb = this.transaction;\r\n        if (!this.aborted && typeof maybeV3IndexedDb.commit === 'function') {\r\n            maybeV3IndexedDb.commit();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\r\n     * operations performed on the SimpleDbStore happen within the context of this\r\n     * transaction and it cannot be used anymore once the transaction is\r\n     * completed.\r\n     *\r\n     * Note that we can't actually enforce that the KeyType and ValueType are\r\n     * correct, but they allow type safety through the rest of the consuming code.\r\n     */\r\n    store(storeName) {\r\n        const store = this.transaction.objectStore(storeName);\r\n        return new SimpleDbStore(store);\r\n    }\r\n}\r\n/**\r\n * Provides a wrapper around IndexedDb with a simplified interface that uses\r\n * Promise-like return values to chain operations. Real promises cannot be used\r\n * since .then() continuations are executed asynchronously (e.g. via\r\n * .setImmediate), which would cause IndexedDB to end the transaction.\r\n * See PersistencePromise for more details.\r\n */\r\nclass SimpleDb {\r\n    /*\r\n     * Creates a new SimpleDb wrapper for IndexedDb database `name`.\r\n     *\r\n     * Note that `version` must not be a downgrade. IndexedDB does not support\r\n     * downgrading the schema version. We currently do not support any way to do\r\n     * versioning outside of IndexedDB's versioning mechanism, as only\r\n     * version-upgrade transactions are allowed to do things like create\r\n     * objectstores.\r\n     */\r\n    constructor(name, version, schemaConverter) {\r\n        this.name = name;\r\n        this.version = version;\r\n        this.schemaConverter = schemaConverter;\r\n        const iOSVersion = SimpleDb.getIOSVersion(getUA());\r\n        // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the\r\n        // bug we're checking for should exist in iOS >= 12.2 and < 13, but for\r\n        // whatever reason it's much harder to hit after 12.2 so we only proactively\r\n        // log on 12.2.\r\n        if (iOSVersion === 12.2) {\r\n            logError('Firestore persistence suffers from a bug in iOS 12.2 ' +\r\n                'Safari that may cause your app to stop working. See ' +\r\n                'https://stackoverflow.com/q/56496296/110915 for details ' +\r\n                'and a potential workaround.');\r\n        }\r\n    }\r\n    /** Deletes the specified database. */\r\n    static delete(name) {\r\n        logDebug(LOG_TAG$i, 'Removing database:', name);\r\n        return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\r\n    }\r\n    /** Returns true if IndexedDB is available in the current environment. */\r\n    static isAvailable() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        if (SimpleDb.isMockPersistence()) {\r\n            return true;\r\n        }\r\n        // We extensively use indexed array values and compound keys,\r\n        // which IE and Edge do not support. However, they still have indexedDB\r\n        // defined on the window, so we need to check for them here and make sure\r\n        // to return that persistence is not enabled for those browsers.\r\n        // For tracking support of this feature, see here:\r\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\r\n        // Check the UA string to find out the browser.\r\n        const ua = getUA();\r\n        // IE 10\r\n        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\r\n        // IE 11\r\n        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\r\n        // Edge\r\n        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\r\n        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\r\n        // iOS Safari: Disable for users running iOS version < 10.\r\n        const iOSVersion = SimpleDb.getIOSVersion(ua);\r\n        const isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;\r\n        // Android browser: Disable for userse running version < 4.5.\r\n        const androidVersion = SimpleDb.getAndroidVersion(ua);\r\n        const isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;\r\n        if (ua.indexOf('MSIE ') > 0 ||\r\n            ua.indexOf('Trident/') > 0 ||\r\n            ua.indexOf('Edge/') > 0 ||\r\n            isUnsupportedIOS ||\r\n            isUnsupportedAndroid) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * Returns true if the backing IndexedDB store is the Node IndexedDBShim\r\n     * (see https://github.com/axemclion/IndexedDBShim).\r\n     */\r\n    static isMockPersistence() {\r\n        var _a;\r\n        return (typeof process !== 'undefined' &&\r\n            ((_a = process.env) === null || _a === void 0 ? void 0 : _a.USE_MOCK_PERSISTENCE) === 'YES');\r\n    }\r\n    /** Helper to get a typed SimpleDbStore from a transaction. */\r\n    static getStore(txn, store) {\r\n        return txn.store(store);\r\n    }\r\n    // visible for testing\r\n    /** Parse User Agent to determine iOS version. Returns -1 if not found. */\r\n    static getIOSVersion(ua) {\r\n        const iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\\d_]+)/i);\r\n        const version = iOSVersionRegex\r\n            ? iOSVersionRegex[1].split('_').slice(0, 2).join('.')\r\n            : '-1';\r\n        return Number(version);\r\n    }\r\n    // visible for testing\r\n    /** Parse User Agent to determine Android version. Returns -1 if not found. */\r\n    static getAndroidVersion(ua) {\r\n        const androidVersionRegex = ua.match(/Android ([\\d.]+)/i);\r\n        const version = androidVersionRegex\r\n            ? androidVersionRegex[1].split('.').slice(0, 2).join('.')\r\n            : '-1';\r\n        return Number(version);\r\n    }\r\n    /**\r\n     * Opens the specified database, creating or upgrading it if necessary.\r\n     */\r\n    async ensureDb(action) {\r\n        if (!this.db) {\r\n            logDebug(LOG_TAG$i, 'Opening database:', this.name);\r\n            this.db = await new Promise((resolve, reject) => {\r\n                // TODO(mikelehen): Investigate browser compatibility.\r\n                // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\r\n                // suggests IE9 and older WebKit browsers handle upgrade\r\n                // differently. They expect setVersion, as described here:\r\n                // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion\r\n                const request = indexedDB.open(this.name, this.version);\r\n                request.onsuccess = (event) => {\r\n                    const db = event.target.result;\r\n                    resolve(db);\r\n                };\r\n                request.onblocked = () => {\r\n                    reject(new IndexedDbTransactionError(action, 'Cannot upgrade IndexedDB schema while another tab is open. ' +\r\n                        'Close all tabs that access Firestore and reload this page to proceed.'));\r\n                };\r\n                request.onerror = (event) => {\r\n                    const error = event.target.error;\r\n                    if (error.name === 'VersionError') {\r\n                        reject(new FirestoreError(Code.FAILED_PRECONDITION, 'A newer version of the Firestore SDK was previously used and so the persisted ' +\r\n                            'data is not compatible with the version of the SDK you are now using. The SDK ' +\r\n                            'will operate with persistence disabled. If you need persistence, please ' +\r\n                            're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' +\r\n                            'data for your app to start fresh.'));\r\n                    }\r\n                    else if (error.name === 'InvalidStateError') {\r\n                        reject(new FirestoreError(Code.FAILED_PRECONDITION, 'Unable to open an IndexedDB connection. This could be due to running in a ' +\r\n                            'private browsing session on a browser whose private browsing sessions do not ' +\r\n                            'support IndexedDB: ' +\r\n                            error));\r\n                    }\r\n                    else {\r\n                        reject(new IndexedDbTransactionError(action, error));\r\n                    }\r\n                };\r\n                request.onupgradeneeded = (event) => {\r\n                    logDebug(LOG_TAG$i, 'Database \"' + this.name + '\" requires upgrade from version:', event.oldVersion);\r\n                    const db = event.target.result;\r\n                    this.schemaConverter\r\n                        .createOrUpgrade(db, request.transaction, event.oldVersion, this.version)\r\n                        .next(() => {\r\n                        logDebug(LOG_TAG$i, 'Database upgrade to version ' + this.version + ' complete');\r\n                    });\r\n                };\r\n            });\r\n        }\r\n        if (this.versionchangelistener) {\r\n            this.db.onversionchange = event => this.versionchangelistener(event);\r\n        }\r\n        return this.db;\r\n    }\r\n    setVersionChangeListener(versionChangeListener) {\r\n        this.versionchangelistener = versionChangeListener;\r\n        if (this.db) {\r\n            this.db.onversionchange = (event) => {\r\n                return versionChangeListener(event);\r\n            };\r\n        }\r\n    }\r\n    async runTransaction(action, mode, objectStores, transactionFn) {\r\n        const readonly = mode === 'readonly';\r\n        let attemptNumber = 0;\r\n        while (true) {\r\n            ++attemptNumber;\r\n            try {\r\n                this.db = await this.ensureDb(action);\r\n                const transaction = SimpleDbTransaction.open(this.db, action, readonly ? 'readonly' : 'readwrite', objectStores);\r\n                const transactionFnResult = transactionFn(transaction)\r\n                    .next(result => {\r\n                    transaction.maybeCommit();\r\n                    return result;\r\n                })\r\n                    .catch(error => {\r\n                    // Abort the transaction if there was an error.\r\n                    transaction.abort(error);\r\n                    // We cannot actually recover, and calling `abort()` will cause the transaction's\r\n                    // completion promise to be rejected. This in turn means that we won't use\r\n                    // `transactionFnResult` below. We return a rejection here so that we don't add the\r\n                    // possibility of returning `void` to the type of `transactionFnResult`.\r\n                    return PersistencePromise.reject(error);\r\n                })\r\n                    .toPromise();\r\n                // As noted above, errors are propagated by aborting the transaction. So\r\n                // we swallow any error here to avoid the browser logging it as unhandled.\r\n                transactionFnResult.catch(() => { });\r\n                // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\r\n                // fire), but still return the original transactionFnResult back to the\r\n                // caller.\r\n                await transaction.completionPromise;\r\n                return transactionFnResult;\r\n            }\r\n            catch (e) {\r\n                const error = e;\r\n                // TODO(schmidt-sebastian): We could probably be smarter about this and\r\n                // not retry exceptions that are likely unrecoverable (such as quota\r\n                // exceeded errors).\r\n                // Note: We cannot use an instanceof check for FirestoreException, since the\r\n                // exception is wrapped in a generic error by our async/await handling.\r\n                const retryable = error.name !== 'FirebaseError' &&\r\n                    attemptNumber < TRANSACTION_RETRY_COUNT;\r\n                logDebug(LOG_TAG$i, 'Transaction failed with error:', error.message, 'Retrying:', retryable);\r\n                this.close();\r\n                if (!retryable) {\r\n                    return Promise.reject(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    close() {\r\n        if (this.db) {\r\n            this.db.close();\r\n        }\r\n        this.db = undefined;\r\n    }\r\n}\r\n/**\r\n * A controller for iterating over a key range or index. It allows an iterate\r\n * callback to delete the currently-referenced object, or jump to a new key\r\n * within the key range or index.\r\n */\r\nclass IterationController {\r\n    constructor(dbCursor) {\r\n        this.dbCursor = dbCursor;\r\n        this.shouldStop = false;\r\n        this.nextKey = null;\r\n    }\r\n    get isDone() {\r\n        return this.shouldStop;\r\n    }\r\n    get skipToKey() {\r\n        return this.nextKey;\r\n    }\r\n    set cursor(value) {\r\n        this.dbCursor = value;\r\n    }\r\n    /**\r\n     * This function can be called to stop iteration at any point.\r\n     */\r\n    done() {\r\n        this.shouldStop = true;\r\n    }\r\n    /**\r\n     * This function can be called to skip to that next key, which could be\r\n     * an index or a primary key.\r\n     */\r\n    skip(key) {\r\n        this.nextKey = key;\r\n    }\r\n    /**\r\n     * Delete the current cursor value from the object store.\r\n     *\r\n     * NOTE: You CANNOT do this with a keysOnly query.\r\n     */\r\n    delete() {\r\n        return wrapRequest(this.dbCursor.delete());\r\n    }\r\n}\r\n/** An error that wraps exceptions that thrown during IndexedDB execution. */\r\nclass IndexedDbTransactionError extends FirestoreError {\r\n    constructor(actionName, cause) {\r\n        super(Code.UNAVAILABLE, `IndexedDB transaction '${actionName}' failed: ${cause}`);\r\n        this.name = 'IndexedDbTransactionError';\r\n    }\r\n}\r\n/** Verifies whether `e` is an IndexedDbTransactionError. */\r\nfunction isIndexedDbTransactionError(e) {\r\n    // Use name equality, as instanceof checks on errors don't work with errors\r\n    // that wrap other errors.\r\n    return e.name === 'IndexedDbTransactionError';\r\n}\r\n/**\r\n * A wrapper around an IDBObjectStore providing an API that:\r\n *\r\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\r\n * methods for acting against the object store.\r\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\r\n * method return a PersistencePromise instead.\r\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\r\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\r\n */\r\nclass SimpleDbStore {\r\n    constructor(store) {\r\n        this.store = store;\r\n    }\r\n    put(keyOrValue, value) {\r\n        let request;\r\n        if (value !== undefined) {\r\n            logDebug(LOG_TAG$i, 'PUT', this.store.name, keyOrValue, value);\r\n            request = this.store.put(value, keyOrValue);\r\n        }\r\n        else {\r\n            logDebug(LOG_TAG$i, 'PUT', this.store.name, '<auto-key>', keyOrValue);\r\n            request = this.store.put(keyOrValue);\r\n        }\r\n        return wrapRequest(request);\r\n    }\r\n    /**\r\n     * Adds a new value into an Object Store and returns the new key. Similar to\r\n     * IndexedDb's `add()`, this method will fail on primary key collisions.\r\n     *\r\n     * @param value - The object to write.\r\n     * @returns The key of the value to add.\r\n     */\r\n    add(value) {\r\n        logDebug(LOG_TAG$i, 'ADD', this.store.name, value, value);\r\n        const request = this.store.add(value);\r\n        return wrapRequest(request);\r\n    }\r\n    /**\r\n     * Gets the object with the specified key from the specified store, or null\r\n     * if no object exists with the specified key.\r\n     *\r\n     * @key The key of the object to get.\r\n     * @returns The object with the specified key or null if no object exists.\r\n     */\r\n    get(key) {\r\n        const request = this.store.get(key);\r\n        // We're doing an unsafe cast to ValueType.\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return wrapRequest(request).next(result => {\r\n            // Normalize nonexistence to null.\r\n            if (result === undefined) {\r\n                result = null;\r\n            }\r\n            logDebug(LOG_TAG$i, 'GET', this.store.name, key, result);\r\n            return result;\r\n        });\r\n    }\r\n    delete(key) {\r\n        logDebug(LOG_TAG$i, 'DELETE', this.store.name, key);\r\n        const request = this.store.delete(key);\r\n        return wrapRequest(request);\r\n    }\r\n    /**\r\n     * If we ever need more of the count variants, we can add overloads. For now,\r\n     * all we need is to count everything in a store.\r\n     *\r\n     * Returns the number of rows in the store.\r\n     */\r\n    count() {\r\n        logDebug(LOG_TAG$i, 'COUNT', this.store.name);\r\n        const request = this.store.count();\r\n        return wrapRequest(request);\r\n    }\r\n    loadAll(indexOrRange, range) {\r\n        const iterateOptions = this.options(indexOrRange, range);\r\n        // Use `getAll()` if the browser supports IndexedDB v3, as it is roughly\r\n        // 20% faster. Unfortunately, getAll() does not support custom indices.\r\n        if (!iterateOptions.index && typeof this.store.getAll === 'function') {\r\n            const request = this.store.getAll(iterateOptions.range);\r\n            return new PersistencePromise((resolve, reject) => {\r\n                request.onerror = (event) => {\r\n                    reject(event.target.error);\r\n                };\r\n                request.onsuccess = (event) => {\r\n                    resolve(event.target.result);\r\n                };\r\n            });\r\n        }\r\n        else {\r\n            const cursor = this.cursor(iterateOptions);\r\n            const results = [];\r\n            return this.iterateCursor(cursor, (key, value) => {\r\n                results.push(value);\r\n            }).next(() => {\r\n                return results;\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Loads the first `count` elements from the provided index range. Loads all\r\n     * elements if no limit is provided.\r\n     */\r\n    loadFirst(range, count) {\r\n        const request = this.store.getAll(range, count === null ? undefined : count);\r\n        return new PersistencePromise((resolve, reject) => {\r\n            request.onerror = (event) => {\r\n                reject(event.target.error);\r\n            };\r\n            request.onsuccess = (event) => {\r\n                resolve(event.target.result);\r\n            };\r\n        });\r\n    }\r\n    deleteAll(indexOrRange, range) {\r\n        logDebug(LOG_TAG$i, 'DELETE ALL', this.store.name);\r\n        const options = this.options(indexOrRange, range);\r\n        options.keysOnly = false;\r\n        const cursor = this.cursor(options);\r\n        return this.iterateCursor(cursor, (key, value, control) => {\r\n            // NOTE: Calling delete() on a cursor is documented as more efficient than\r\n            // calling delete() on an object store with a single key\r\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\r\n            // however, this requires us *not* to use a keysOnly cursor\r\n            // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\r\n            // may want to compare the performance of each method.\r\n            return control.delete();\r\n        });\r\n    }\r\n    iterate(optionsOrCallback, callback) {\r\n        let options;\r\n        if (!callback) {\r\n            options = {};\r\n            callback = optionsOrCallback;\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        const cursor = this.cursor(options);\r\n        return this.iterateCursor(cursor, callback);\r\n    }\r\n    /**\r\n     * Iterates over a store, but waits for the given callback to complete for\r\n     * each entry before iterating the next entry. This allows the callback to do\r\n     * asynchronous work to determine if this iteration should continue.\r\n     *\r\n     * The provided callback should return `true` to continue iteration, and\r\n     * `false` otherwise.\r\n     */\r\n    iterateSerial(callback) {\r\n        const cursorRequest = this.cursor({});\r\n        return new PersistencePromise((resolve, reject) => {\r\n            cursorRequest.onerror = (event) => {\r\n                const error = checkForAndReportiOSError(event.target.error);\r\n                reject(error);\r\n            };\r\n            cursorRequest.onsuccess = (event) => {\r\n                const cursor = event.target.result;\r\n                if (!cursor) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n                callback(cursor.primaryKey, cursor.value).next(shouldContinue => {\r\n                    if (shouldContinue) {\r\n                        cursor.continue();\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            };\r\n        });\r\n    }\r\n    iterateCursor(cursorRequest, fn) {\r\n        const results = [];\r\n        return new PersistencePromise((resolve, reject) => {\r\n            cursorRequest.onerror = (event) => {\r\n                reject(event.target.error);\r\n            };\r\n            cursorRequest.onsuccess = (event) => {\r\n                const cursor = event.target.result;\r\n                if (!cursor) {\r\n                    resolve();\r\n                    return;\r\n                }\r\n                const controller = new IterationController(cursor);\r\n                const userResult = fn(cursor.primaryKey, cursor.value, controller);\r\n                if (userResult instanceof PersistencePromise) {\r\n                    const userPromise = userResult.catch(err => {\r\n                        controller.done();\r\n                        return PersistencePromise.reject(err);\r\n                    });\r\n                    results.push(userPromise);\r\n                }\r\n                if (controller.isDone) {\r\n                    resolve();\r\n                }\r\n                else if (controller.skipToKey === null) {\r\n                    cursor.continue();\r\n                }\r\n                else {\r\n                    cursor.continue(controller.skipToKey);\r\n                }\r\n            };\r\n        }).next(() => PersistencePromise.waitFor(results));\r\n    }\r\n    options(indexOrRange, range) {\r\n        let indexName = undefined;\r\n        if (indexOrRange !== undefined) {\r\n            if (typeof indexOrRange === 'string') {\r\n                indexName = indexOrRange;\r\n            }\r\n            else {\r\n                range = indexOrRange;\r\n            }\r\n        }\r\n        return { index: indexName, range };\r\n    }\r\n    cursor(options) {\r\n        let direction = 'next';\r\n        if (options.reverse) {\r\n            direction = 'prev';\r\n        }\r\n        if (options.index) {\r\n            const index = this.store.index(options.index);\r\n            if (options.keysOnly) {\r\n                return index.openKeyCursor(options.range, direction);\r\n            }\r\n            else {\r\n                return index.openCursor(options.range, direction);\r\n            }\r\n        }\r\n        else {\r\n            return this.store.openCursor(options.range, direction);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\r\n * handlers to resolve / reject the PersistencePromise as appropriate.\r\n */\r\nfunction wrapRequest(request) {\r\n    return new PersistencePromise((resolve, reject) => {\r\n        request.onsuccess = (event) => {\r\n            const result = event.target.result;\r\n            resolve(result);\r\n        };\r\n        request.onerror = (event) => {\r\n            const error = checkForAndReportiOSError(event.target.error);\r\n            reject(error);\r\n        };\r\n    });\r\n}\r\n// Guard so we only report the error once.\r\nlet reportedIOSError = false;\r\nfunction checkForAndReportiOSError(error) {\r\n    const iOSVersion = SimpleDb.getIOSVersion(getUA());\r\n    if (iOSVersion >= 12.2 && iOSVersion < 13) {\r\n        const IOS_ERROR = 'An internal error was encountered in the Indexed Database server';\r\n        if (error.message.indexOf(IOS_ERROR) >= 0) {\r\n            // Wrap error in a more descriptive one.\r\n            const newError = new FirestoreError('internal', `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${IOS_ERROR}'. This is likely ` +\r\n                `due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 ` +\r\n                `for details and a potential workaround.`);\r\n            if (!reportedIOSError) {\r\n                reportedIOSError = true;\r\n                // Throw a global exception outside of this promise chain, for the user to\r\n                // potentially catch.\r\n                setTimeout(() => {\r\n                    throw newError;\r\n                }, 0);\r\n            }\r\n            return newError;\r\n        }\r\n    }\r\n    return error;\r\n}\n\nconst LOG_TAG$h = 'IndexBackiller';\r\n/** How long we wait to try running index backfill after SDK initialization. */\r\nconst INITIAL_BACKFILL_DELAY_MS = 15 * 1000;\r\n/** Minimum amount of time between backfill checks, after the first one. */\r\nconst REGULAR_BACKFILL_DELAY_MS = 60 * 1000;\r\n/** The maximum number of documents to process each time backfill() is called. */\r\nconst MAX_DOCUMENTS_TO_PROCESS = 50;\r\n/** This class is responsible for the scheduling of Index Backfiller. */\r\nclass IndexBackfillerScheduler {\r\n    constructor(asyncQueue, backfiller) {\r\n        this.asyncQueue = asyncQueue;\r\n        this.backfiller = backfiller;\r\n        this.task = null;\r\n    }\r\n    start() {\r\n        this.schedule(INITIAL_BACKFILL_DELAY_MS);\r\n    }\r\n    stop() {\r\n        if (this.task) {\r\n            this.task.cancel();\r\n            this.task = null;\r\n        }\r\n    }\r\n    get started() {\r\n        return this.task !== null;\r\n    }\r\n    schedule(delay) {\r\n        logDebug(LOG_TAG$h, `Scheduled in ${delay}ms`);\r\n        this.task = this.asyncQueue.enqueueAfterDelay(\"index_backfill\" /* TimerId.IndexBackfill */, delay, async () => {\r\n            this.task = null;\r\n            try {\r\n                const documentsProcessed = await this.backfiller.backfill();\r\n                logDebug(LOG_TAG$h, `Documents written: ${documentsProcessed}`);\r\n            }\r\n            catch (e) {\r\n                if (isIndexedDbTransactionError(e)) {\r\n                    logDebug(LOG_TAG$h, 'Ignoring IndexedDB error during index backfill: ', e);\r\n                }\r\n                else {\r\n                    await ignoreIfPrimaryLeaseLoss(e);\r\n                }\r\n            }\r\n            await this.schedule(REGULAR_BACKFILL_DELAY_MS);\r\n        });\r\n    }\r\n}\r\n/** Implements the steps for backfilling indexes. */\r\nclass IndexBackfiller {\r\n    constructor(\r\n    /**\r\n     * LocalStore provides access to IndexManager and LocalDocumentView.\r\n     * These properties will update when the user changes. Consequently,\r\n     * making a local copy of IndexManager and LocalDocumentView will require\r\n     * updates over time. The simpler solution is to rely on LocalStore to have\r\n     * an up-to-date references to IndexManager and LocalDocumentStore.\r\n     */\r\n    localStore, persistence) {\r\n        this.localStore = localStore;\r\n        this.persistence = persistence;\r\n    }\r\n    async backfill(maxDocumentsToProcess = MAX_DOCUMENTS_TO_PROCESS) {\r\n        return this.persistence.runTransaction('Backfill Indexes', 'readwrite-primary', txn => this.writeIndexEntries(txn, maxDocumentsToProcess));\r\n    }\r\n    /** Writes index entries until the cap is reached. Returns the number of documents processed. */\r\n    writeIndexEntries(transation, maxDocumentsToProcess) {\r\n        const processedCollectionGroups = new Set();\r\n        let documentsRemaining = maxDocumentsToProcess;\r\n        let continueLoop = true;\r\n        return PersistencePromise.doWhile(() => continueLoop === true && documentsRemaining > 0, () => {\r\n            return this.localStore.indexManager\r\n                .getNextCollectionGroupToUpdate(transation)\r\n                .next((collectionGroup) => {\r\n                if (collectionGroup === null ||\r\n                    processedCollectionGroups.has(collectionGroup)) {\r\n                    continueLoop = false;\r\n                }\r\n                else {\r\n                    logDebug(LOG_TAG$h, `Processing collection: ${collectionGroup}`);\r\n                    return this.writeEntriesForCollectionGroup(transation, collectionGroup, documentsRemaining).next(documentsProcessed => {\r\n                        documentsRemaining -= documentsProcessed;\r\n                        processedCollectionGroups.add(collectionGroup);\r\n                    });\r\n                }\r\n            });\r\n        }).next(() => maxDocumentsToProcess - documentsRemaining);\r\n    }\r\n    /**\r\n     * Writes entries for the provided collection group. Returns the number of documents processed.\r\n     */\r\n    writeEntriesForCollectionGroup(transaction, collectionGroup, documentsRemainingUnderCap) {\r\n        // Use the earliest offset of all field indexes to query the local cache.\r\n        return this.localStore.indexManager\r\n            .getMinOffsetFromCollectionGroup(transaction, collectionGroup)\r\n            .next(existingOffset => this.localStore.localDocuments\r\n            .getNextDocuments(transaction, collectionGroup, existingOffset, documentsRemainingUnderCap)\r\n            .next(nextBatch => {\r\n            const docs = nextBatch.changes;\r\n            return this.localStore.indexManager\r\n                .updateIndexEntries(transaction, docs)\r\n                .next(() => this.getNewOffset(existingOffset, nextBatch))\r\n                .next(newOffset => {\r\n                logDebug(LOG_TAG$h, `Updating offset: ${newOffset}`);\r\n                return this.localStore.indexManager.updateCollectionGroup(transaction, collectionGroup, newOffset);\r\n            })\r\n                .next(() => docs.size);\r\n        }));\r\n    }\r\n    /** Returns the next offset based on the provided documents. */\r\n    getNewOffset(existingOffset, lookupResult) {\r\n        let maxOffset = existingOffset;\r\n        lookupResult.changes.forEach((key, document) => {\r\n            const newOffset = newIndexOffsetFromDocument(document);\r\n            if (indexOffsetComparator(newOffset, maxOffset) > 0) {\r\n                maxOffset = newOffset;\r\n            }\r\n        });\r\n        return new IndexOffset(maxOffset.readTime, maxOffset.documentKey, Math.max(lookupResult.batchId, existingOffset.largestBatchId));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to\r\n * exceed. All subsequent calls to next will return increasing values. If provided with a\r\n * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as\r\n * well as write out sequence numbers that it produces via `next()`.\r\n */\r\nclass ListenSequence {\r\n    constructor(previousValue, sequenceNumberSyncer) {\r\n        this.previousValue = previousValue;\r\n        if (sequenceNumberSyncer) {\r\n            sequenceNumberSyncer.sequenceNumberHandler = sequenceNumber => this.setPreviousValue(sequenceNumber);\r\n            this.writeNewSequenceNumber = sequenceNumber => sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);\r\n        }\r\n    }\r\n    setPreviousValue(externalPreviousValue) {\r\n        this.previousValue = Math.max(externalPreviousValue, this.previousValue);\r\n        return this.previousValue;\r\n    }\r\n    next() {\r\n        const nextValue = ++this.previousValue;\r\n        if (this.writeNewSequenceNumber) {\r\n            this.writeNewSequenceNumber(nextValue);\r\n        }\r\n        return nextValue;\r\n    }\r\n}\r\nListenSequence.INVALID = -1;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst escapeChar = '\\u0001';\r\nconst encodedSeparatorChar = '\\u0001';\r\nconst encodedNul = '\\u0010';\r\nconst encodedEscape = '\\u0011';\r\n/**\r\n * Encodes a resource path into a IndexedDb-compatible string form.\r\n */\r\nfunction encodeResourcePath(path) {\r\n    let result = '';\r\n    for (let i = 0; i < path.length; i++) {\r\n        if (result.length > 0) {\r\n            result = encodeSeparator(result);\r\n        }\r\n        result = encodeSegment(path.get(i), result);\r\n    }\r\n    return encodeSeparator(result);\r\n}\r\n/** Encodes a single segment of a resource path into the given result */\r\nfunction encodeSegment(segment, resultBuf) {\r\n    let result = resultBuf;\r\n    const length = segment.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const c = segment.charAt(i);\r\n        switch (c) {\r\n            case '\\0':\r\n                result += escapeChar + encodedNul;\r\n                break;\r\n            case escapeChar:\r\n                result += escapeChar + encodedEscape;\r\n                break;\r\n            default:\r\n                result += c;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/** Encodes a path separator into the given result */\r\nfunction encodeSeparator(result) {\r\n    return result + escapeChar + encodedSeparatorChar;\r\n}\r\n/**\r\n * Decodes the given IndexedDb-compatible string form of a resource path into\r\n * a ResourcePath instance. Note that this method is not suitable for use with\r\n * decoding resource names from the server; those are One Platform format\r\n * strings.\r\n */\r\nfunction decodeResourcePath(path) {\r\n    // Event the empty path must encode as a path of at least length 2. A path\r\n    // with exactly 2 must be the empty path.\r\n    const length = path.length;\r\n    hardAssert(length >= 2);\r\n    if (length === 2) {\r\n        hardAssert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar);\r\n        return ResourcePath.emptyPath();\r\n    }\r\n    // Escape characters cannot exist past the second-to-last position in the\r\n    // source value.\r\n    const lastReasonableEscapeIndex = length - 2;\r\n    const segments = [];\r\n    let segmentBuilder = '';\r\n    for (let start = 0; start < length;) {\r\n        // The last two characters of a valid encoded path must be a separator, so\r\n        // there must be an end to this segment.\r\n        const end = path.indexOf(escapeChar, start);\r\n        if (end < 0 || end > lastReasonableEscapeIndex) {\r\n            fail();\r\n        }\r\n        const next = path.charAt(end + 1);\r\n        switch (next) {\r\n            case encodedSeparatorChar:\r\n                const currentPiece = path.substring(start, end);\r\n                let segment;\r\n                if (segmentBuilder.length === 0) {\r\n                    // Avoid copying for the common case of a segment that excludes \\0\r\n                    // and \\001\r\n                    segment = currentPiece;\r\n                }\r\n                else {\r\n                    segmentBuilder += currentPiece;\r\n                    segment = segmentBuilder;\r\n                    segmentBuilder = '';\r\n                }\r\n                segments.push(segment);\r\n                break;\r\n            case encodedNul:\r\n                segmentBuilder += path.substring(start, end);\r\n                segmentBuilder += '\\0';\r\n                break;\r\n            case encodedEscape:\r\n                // The escape character can be used in the output to encode itself.\r\n                segmentBuilder += path.substring(start, end + 1);\r\n                break;\r\n            default:\r\n                fail();\r\n        }\r\n        start = end + 2;\r\n    }\r\n    return new ResourcePath(segments);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DbRemoteDocumentStore$1 = 'remoteDocuments';\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Name of the IndexedDb object store.\r\n *\r\n * Note that the name 'owner' is chosen to ensure backwards compatibility with\r\n * older clients that only supported single locked access to the persistence\r\n * layer.\r\n */\r\nconst DbPrimaryClientStore = 'owner';\r\n/**\r\n * The key string used for the single object that exists in the\r\n * DbPrimaryClient store.\r\n */\r\nconst DbPrimaryClientKey = 'owner';\r\n/** Name of the IndexedDb object store.  */\r\nconst DbMutationQueueStore = 'mutationQueues';\r\n/** Keys are automatically assigned via the userId property. */\r\nconst DbMutationQueueKeyPath = 'userId';\r\n/** Name of the IndexedDb object store.  */\r\nconst DbMutationBatchStore = 'mutations';\r\n/** Keys are automatically assigned via the userId, batchId properties. */\r\nconst DbMutationBatchKeyPath = 'batchId';\r\n/** The index name for lookup of mutations by user. */\r\nconst DbMutationBatchUserMutationsIndex = 'userMutationsIndex';\r\n/** The user mutations index is keyed by [userId, batchId] pairs. */\r\nconst DbMutationBatchUserMutationsKeyPath = ['userId', 'batchId'];\r\n/**\r\n * Creates a [userId] key for use in the DbDocumentMutations index to iterate\r\n * over all of a user's document mutations.\r\n */\r\nfunction newDbDocumentMutationPrefixForUser(userId) {\r\n    return [userId];\r\n}\r\n/**\r\n * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\r\n * index to iterate over all at document mutations for a given path or lower.\r\n */\r\nfunction newDbDocumentMutationPrefixForPath(userId, path) {\r\n    return [userId, encodeResourcePath(path)];\r\n}\r\n/**\r\n * Creates a full index key of [userId, encodedPath, batchId] for inserting\r\n * and deleting into the DbDocumentMutations index.\r\n */\r\nfunction newDbDocumentMutationKey(userId, path, batchId) {\r\n    return [userId, encodeResourcePath(path), batchId];\r\n}\r\n/**\r\n * Because we store all the useful information for this store in the key,\r\n * there is no useful information to store as the value. The raw (unencoded)\r\n * path cannot be stored because IndexedDb doesn't store prototype\r\n * information.\r\n */\r\nconst DbDocumentMutationPlaceholder = {};\r\nconst DbDocumentMutationStore = 'documentMutations';\r\nconst DbRemoteDocumentStore = 'remoteDocumentsV14';\r\n/**\r\n * The primary key of the remote documents store, which allows for efficient\r\n * access by collection path and read time.\r\n */\r\nconst DbRemoteDocumentKeyPath = [\r\n    'prefixPath',\r\n    'collectionGroup',\r\n    'readTime',\r\n    'documentId'\r\n];\r\n/** An index that provides access to documents by key. */\r\nconst DbRemoteDocumentDocumentKeyIndex = 'documentKeyIndex';\r\nconst DbRemoteDocumentDocumentKeyIndexPath = [\r\n    'prefixPath',\r\n    'collectionGroup',\r\n    'documentId'\r\n];\r\n/**\r\n * An index that provides access to documents by collection group and read\r\n * time.\r\n *\r\n * This index is used by the index backfiller.\r\n */\r\nconst DbRemoteDocumentCollectionGroupIndex = 'collectionGroupIndex';\r\nconst DbRemoteDocumentCollectionGroupIndexPath = [\r\n    'collectionGroup',\r\n    'readTime',\r\n    'prefixPath',\r\n    'documentId'\r\n];\r\nconst DbRemoteDocumentGlobalStore = 'remoteDocumentGlobal';\r\nconst DbRemoteDocumentGlobalKey = 'remoteDocumentGlobalKey';\r\nconst DbTargetStore = 'targets';\r\n/** Keys are automatically assigned via the targetId property. */\r\nconst DbTargetKeyPath = 'targetId';\r\n/** The name of the queryTargets index. */\r\nconst DbTargetQueryTargetsIndexName = 'queryTargetsIndex';\r\n/**\r\n * The index of all canonicalIds to the targets that they match. This is not\r\n * a unique mapping because canonicalId does not promise a unique name for all\r\n * possible queries, so we append the targetId to make the mapping unique.\r\n */\r\nconst DbTargetQueryTargetsKeyPath = ['canonicalId', 'targetId'];\r\n/** Name of the IndexedDb object store.  */\r\nconst DbTargetDocumentStore = 'targetDocuments';\r\n/** Keys are automatically assigned via the targetId, path properties. */\r\nconst DbTargetDocumentKeyPath = ['targetId', 'path'];\r\n/** The index name for the reverse index. */\r\nconst DbTargetDocumentDocumentTargetsIndex = 'documentTargetsIndex';\r\n/** We also need to create the reverse index for these properties. */\r\nconst DbTargetDocumentDocumentTargetsKeyPath = ['path', 'targetId'];\r\n/**\r\n * The key string used for the single object that exists in the\r\n * DbTargetGlobal store.\r\n */\r\nconst DbTargetGlobalKey = 'targetGlobalKey';\r\nconst DbTargetGlobalStore = 'targetGlobal';\r\n/** Name of the IndexedDb object store. */\r\nconst DbCollectionParentStore = 'collectionParents';\r\n/** Keys are automatically assigned via the collectionId, parent properties. */\r\nconst DbCollectionParentKeyPath = ['collectionId', 'parent'];\r\n/** Name of the IndexedDb object store. */\r\nconst DbClientMetadataStore = 'clientMetadata';\r\n/** Keys are automatically assigned via the clientId properties. */\r\nconst DbClientMetadataKeyPath = 'clientId';\r\n/** Name of the IndexedDb object store. */\r\nconst DbBundleStore = 'bundles';\r\nconst DbBundleKeyPath = 'bundleId';\r\n/** Name of the IndexedDb object store. */\r\nconst DbNamedQueryStore = 'namedQueries';\r\nconst DbNamedQueryKeyPath = 'name';\r\n/** Name of the IndexedDb object store. */\r\nconst DbIndexConfigurationStore = 'indexConfiguration';\r\nconst DbIndexConfigurationKeyPath = 'indexId';\r\n/**\r\n * An index that provides access to the index configurations by collection\r\n * group.\r\n *\r\n * PORTING NOTE: iOS and Android maintain this index in-memory, but this is\r\n * not possible here as the Web client supports concurrent access to\r\n * persistence via multi-tab.\r\n */\r\nconst DbIndexConfigurationCollectionGroupIndex = 'collectionGroupIndex';\r\nconst DbIndexConfigurationCollectionGroupIndexPath = 'collectionGroup';\r\n/** Name of the IndexedDb object store. */\r\nconst DbIndexStateStore = 'indexState';\r\nconst DbIndexStateKeyPath = ['indexId', 'uid'];\r\n/**\r\n * An index that provides access to documents in a collection sorted by last\r\n * update time. Used by the backfiller.\r\n *\r\n * PORTING NOTE: iOS and Android maintain this index in-memory, but this is\r\n * not possible here as the Web client supports concurrent access to\r\n * persistence via multi-tab.\r\n */\r\nconst DbIndexStateSequenceNumberIndex = 'sequenceNumberIndex';\r\nconst DbIndexStateSequenceNumberIndexPath = ['uid', 'sequenceNumber'];\r\n/** Name of the IndexedDb object store. */\r\nconst DbIndexEntryStore = 'indexEntries';\r\nconst DbIndexEntryKeyPath = [\r\n    'indexId',\r\n    'uid',\r\n    'arrayValue',\r\n    'directionalValue',\r\n    'orderedDocumentKey',\r\n    'documentKey'\r\n];\r\nconst DbIndexEntryDocumentKeyIndex = 'documentKeyIndex';\r\nconst DbIndexEntryDocumentKeyIndexPath = [\r\n    'indexId',\r\n    'uid',\r\n    'orderedDocumentKey'\r\n];\r\n/** Name of the IndexedDb object store. */\r\nconst DbDocumentOverlayStore = 'documentOverlays';\r\nconst DbDocumentOverlayKeyPath = [\r\n    'userId',\r\n    'collectionPath',\r\n    'documentId'\r\n];\r\nconst DbDocumentOverlayCollectionPathOverlayIndex = 'collectionPathOverlayIndex';\r\nconst DbDocumentOverlayCollectionPathOverlayIndexPath = [\r\n    'userId',\r\n    'collectionPath',\r\n    'largestBatchId'\r\n];\r\nconst DbDocumentOverlayCollectionGroupOverlayIndex = 'collectionGroupOverlayIndex';\r\nconst DbDocumentOverlayCollectionGroupOverlayIndexPath = [\r\n    'userId',\r\n    'collectionGroup',\r\n    'largestBatchId'\r\n];\r\n// Visible for testing\r\nconst V1_STORES = [\r\n    DbMutationQueueStore,\r\n    DbMutationBatchStore,\r\n    DbDocumentMutationStore,\r\n    DbRemoteDocumentStore$1,\r\n    DbTargetStore,\r\n    DbPrimaryClientStore,\r\n    DbTargetGlobalStore,\r\n    DbTargetDocumentStore\r\n];\r\n// Visible for testing\r\nconst V3_STORES = V1_STORES;\r\n// Note: DbRemoteDocumentChanges is no longer used and dropped with v9.\r\nconst V4_STORES = [...V3_STORES, DbClientMetadataStore];\r\nconst V6_STORES = [...V4_STORES, DbRemoteDocumentGlobalStore];\r\nconst V8_STORES = [...V6_STORES, DbCollectionParentStore];\r\nconst V11_STORES = [...V8_STORES, DbBundleStore, DbNamedQueryStore];\r\nconst V12_STORES = [...V11_STORES, DbDocumentOverlayStore];\r\nconst V13_STORES = [\r\n    DbMutationQueueStore,\r\n    DbMutationBatchStore,\r\n    DbDocumentMutationStore,\r\n    DbRemoteDocumentStore,\r\n    DbTargetStore,\r\n    DbPrimaryClientStore,\r\n    DbTargetGlobalStore,\r\n    DbTargetDocumentStore,\r\n    DbClientMetadataStore,\r\n    DbRemoteDocumentGlobalStore,\r\n    DbCollectionParentStore,\r\n    DbBundleStore,\r\n    DbNamedQueryStore,\r\n    DbDocumentOverlayStore\r\n];\r\nconst V14_STORES = V13_STORES;\r\nconst V15_STORES = [\r\n    ...V14_STORES,\r\n    DbIndexConfigurationStore,\r\n    DbIndexStateStore,\r\n    DbIndexEntryStore\r\n];\r\n/** Returns the object stores for the provided schema. */\r\nfunction getObjectStores(schemaVersion) {\r\n    if (schemaVersion === 15) {\r\n        return V15_STORES;\r\n    }\r\n    else if (schemaVersion === 14) {\r\n        return V14_STORES;\r\n    }\r\n    else if (schemaVersion === 13) {\r\n        return V13_STORES;\r\n    }\r\n    else if (schemaVersion === 12) {\r\n        return V12_STORES;\r\n    }\r\n    else if (schemaVersion === 11) {\r\n        return V11_STORES;\r\n    }\r\n    else {\r\n        fail();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass IndexedDbTransaction extends PersistenceTransaction {\r\n    constructor(simpleDbTransaction, currentSequenceNumber) {\r\n        super();\r\n        this.simpleDbTransaction = simpleDbTransaction;\r\n        this.currentSequenceNumber = currentSequenceNumber;\r\n    }\r\n}\r\nfunction getStore(txn, store) {\r\n    const indexedDbTransaction = debugCast(txn);\r\n    return SimpleDb.getStore(indexedDbTransaction.simpleDbTransaction, store);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction objectSize(obj) {\r\n    let count = 0;\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            count++;\r\n        }\r\n    }\r\n    return count;\r\n}\r\nfunction forEach(obj, fn) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\nfunction mapToArray(obj, fn) {\r\n    const result = [];\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            result.push(fn(obj[key], key, obj));\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction isEmpty(obj) {\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n// tree.\r\nclass SortedMap {\r\n    constructor(comparator, root) {\r\n        this.comparator = comparator;\r\n        this.root = root ? root : LLRBNode.EMPTY;\r\n    }\r\n    // Returns a copy of the map, with the specified key/value added or replaced.\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator, this.root\r\n            .insert(key, value, this.comparator)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    // Returns a copy of the map, with the specified key removed.\r\n    remove(key) {\r\n        return new SortedMap(this.comparator, this.root\r\n            .remove(key, this.comparator)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    // Returns the value of the node with the given key, or null.\r\n    get(key) {\r\n        let node = this.root;\r\n        while (!node.isEmpty()) {\r\n            const cmp = this.comparator(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\r\n    // exist.\r\n    indexOf(key) {\r\n        // Number of nodes that were pruned when descending right\r\n        let prunedNodes = 0;\r\n        let node = this.root;\r\n        while (!node.isEmpty()) {\r\n            const cmp = this.comparator(key, node.key);\r\n            if (cmp === 0) {\r\n                return prunedNodes + node.left.size;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else {\r\n                // Count all nodes left of the node plus the node itself\r\n                prunedNodes += node.left.size + 1;\r\n                node = node.right;\r\n            }\r\n        }\r\n        // Node not found\r\n        return -1;\r\n    }\r\n    isEmpty() {\r\n        return this.root.isEmpty();\r\n    }\r\n    // Returns the total number of nodes in the map.\r\n    get size() {\r\n        return this.root.size;\r\n    }\r\n    // Returns the minimum key in the map.\r\n    minKey() {\r\n        return this.root.minKey();\r\n    }\r\n    // Returns the maximum key in the map.\r\n    maxKey() {\r\n        return this.root.maxKey();\r\n    }\r\n    // Traverses the map in key order and calls the specified action function\r\n    // for each key/value pair. If action returns true, traversal is aborted.\r\n    // Returns the first truthy value returned by action, or the last falsey\r\n    // value returned by action.\r\n    inorderTraversal(action) {\r\n        return this.root.inorderTraversal(action);\r\n    }\r\n    forEach(fn) {\r\n        this.inorderTraversal((k, v) => {\r\n            fn(k, v);\r\n            return false;\r\n        });\r\n    }\r\n    toString() {\r\n        const descriptions = [];\r\n        this.inorderTraversal((k, v) => {\r\n            descriptions.push(`${k}:${v}`);\r\n            return false;\r\n        });\r\n        return `{${descriptions.join(', ')}}`;\r\n    }\r\n    // Traverses the map in reverse key order and calls the specified action\r\n    // function for each key/value pair. If action returns true, traversal is\r\n    // aborted.\r\n    // Returns the first truthy value returned by action, or the last falsey\r\n    // value returned by action.\r\n    reverseTraversal(action) {\r\n        return this.root.reverseTraversal(action);\r\n    }\r\n    // Returns an iterator over the SortedMap.\r\n    getIterator() {\r\n        return new SortedMapIterator(this.root, null, this.comparator, false);\r\n    }\r\n    getIteratorFrom(key) {\r\n        return new SortedMapIterator(this.root, key, this.comparator, false);\r\n    }\r\n    getReverseIterator() {\r\n        return new SortedMapIterator(this.root, null, this.comparator, true);\r\n    }\r\n    getReverseIteratorFrom(key) {\r\n        return new SortedMapIterator(this.root, key, this.comparator, true);\r\n    }\r\n} // end SortedMap\r\n// An iterator over an LLRBNode.\r\nclass SortedMapIterator {\r\n    constructor(node, startKey, comparator, isReverse) {\r\n        this.isReverse = isReverse;\r\n        this.nodeStack = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (startKey && isReverse) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack,\r\n                // but stop iterating;\r\n                this.nodeStack.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move\r\n                // to the next one\r\n                this.nodeStack.push(node);\r\n                if (this.isReverse) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        let node = this.nodeStack.pop();\r\n        const result = { key: node.key, value: node.value };\r\n        if (this.isReverse) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack[this.nodeStack.length - 1];\r\n        return { key: node.key, value: node.value };\r\n    }\r\n} // end SortedMapIterator\r\n// Represents a node in a Left-leaning Red-Black tree.\r\nclass LLRBNode {\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left = left != null ? left : LLRBNode.EMPTY;\r\n        this.right = right != null ? right : LLRBNode.EMPTY;\r\n        this.size = this.left.size + 1 + this.right.size;\r\n    }\r\n    // Returns a copy of the current node, optionally replacing pieces of it.\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    // Traverses the tree in key order and calls the specified action function\r\n    // for each node. If action returns true, traversal is aborted.\r\n    // Returns the first truthy value returned by action, or the last falsey\r\n    // value returned by action.\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    // Traverses the tree in reverse key order and calls the specified action\r\n    // function for each node. If action returns true, traversal is aborted.\r\n    // Returns the first truthy value returned by action, or the last falsey\r\n    // value returned by action.\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    // Returns the minimum node in the tree.\r\n    min() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min();\r\n        }\r\n    }\r\n    // Returns the maximum key in the tree.\r\n    minKey() {\r\n        return this.min().key;\r\n    }\r\n    // Returns the maximum key in the tree.\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    // Returns new tree, with the key/value added.\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp();\r\n    }\r\n    removeMin() {\r\n        if (this.left.isEmpty()) {\r\n            return LLRBNode.EMPTY;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed() && !n.left.left.isRed()) {\r\n            n = n.moveRedLeft();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin(), null);\r\n        return n.fixUp();\r\n    }\r\n    // Returns new tree, with the specified item removed.\r\n    remove(key, comparator) {\r\n        let smallest;\r\n        let n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\r\n                n = n.moveRedLeft();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed()) {\r\n                n = n.rotateRight();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\r\n                n = n.moveRedRight();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return LLRBNode.EMPTY;\r\n                }\r\n                else {\r\n                    smallest = n.right.min();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp();\r\n    }\r\n    isRed() {\r\n        return this.color;\r\n    }\r\n    // Returns new tree after performing any needed rotations.\r\n    fixUp() {\r\n        let n = this;\r\n        if (n.right.isRed() && !n.left.isRed()) {\r\n            n = n.rotateLeft();\r\n        }\r\n        if (n.left.isRed() && n.left.left.isRed()) {\r\n            n = n.rotateRight();\r\n        }\r\n        if (n.left.isRed() && n.right.isRed()) {\r\n            n = n.colorFlip();\r\n        }\r\n        return n;\r\n    }\r\n    moveRedLeft() {\r\n        let n = this.colorFlip();\r\n        if (n.right.left.isRed()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight());\r\n            n = n.rotateLeft();\r\n            n = n.colorFlip();\r\n        }\r\n        return n;\r\n    }\r\n    moveRedRight() {\r\n        let n = this.colorFlip();\r\n        if (n.left.left.isRed()) {\r\n            n = n.rotateRight();\r\n            n = n.colorFlip();\r\n        }\r\n        return n;\r\n    }\r\n    rotateLeft() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    rotateRight() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    colorFlip() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    // For testing.\r\n    checkMaxDepth() {\r\n        const blackDepth = this.check();\r\n        if (Math.pow(2.0, blackDepth) <= this.size + 1) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\r\n    // leaves is equal on both sides.  This function verifies that or asserts.\r\n    check() {\r\n        if (this.isRed() && this.left.isRed()) {\r\n            throw fail();\r\n        }\r\n        if (this.right.isRed()) {\r\n            throw fail();\r\n        }\r\n        const blackDepth = this.left.check();\r\n        if (blackDepth !== this.right.check()) {\r\n            throw fail();\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed() ? 0 : 1);\r\n        }\r\n    }\r\n} // end LLRBNode\r\n// Empty node is shared between all LLRB trees.\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nLLRBNode.EMPTY = null;\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n// Represents an empty node (a leaf node in the Red-Black Tree).\r\nclass LLRBEmptyNode {\r\n    constructor() {\r\n        this.size = 0;\r\n    }\r\n    get key() {\r\n        throw fail();\r\n    }\r\n    get value() {\r\n        throw fail();\r\n    }\r\n    get color() {\r\n        throw fail();\r\n    }\r\n    get left() {\r\n        throw fail();\r\n    }\r\n    get right() {\r\n        throw fail();\r\n    }\r\n    // Returns a copy of the current node.\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    // Returns a copy of the tree, with the specified key/value added.\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value);\r\n    }\r\n    // Returns a copy of the tree, with the specified key removed.\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    isRed() {\r\n        return false;\r\n    }\r\n    // For testing.\r\n    checkMaxDepth() {\r\n        return true;\r\n    }\r\n    check() {\r\n        return 0;\r\n    }\r\n} // end LLRBEmptyNode\r\nLLRBNode.EMPTY = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SortedSet is an immutable (copy-on-write) collection that holds elements\r\n * in order specified by the provided comparator.\r\n *\r\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\r\n * be equal!\r\n */\r\nclass SortedSet {\r\n    constructor(comparator) {\r\n        this.comparator = comparator;\r\n        this.data = new SortedMap(this.comparator);\r\n    }\r\n    has(elem) {\r\n        return this.data.get(elem) !== null;\r\n    }\r\n    first() {\r\n        return this.data.minKey();\r\n    }\r\n    last() {\r\n        return this.data.maxKey();\r\n    }\r\n    get size() {\r\n        return this.data.size;\r\n    }\r\n    indexOf(elem) {\r\n        return this.data.indexOf(elem);\r\n    }\r\n    /** Iterates elements in order defined by \"comparator\" */\r\n    forEach(cb) {\r\n        this.data.inorderTraversal((k, v) => {\r\n            cb(k);\r\n            return false;\r\n        });\r\n    }\r\n    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */\r\n    forEachInRange(range, cb) {\r\n        const iter = this.data.getIteratorFrom(range[0]);\r\n        while (iter.hasNext()) {\r\n            const elem = iter.getNext();\r\n            if (this.comparator(elem.key, range[1]) >= 0) {\r\n                return;\r\n            }\r\n            cb(elem.key);\r\n        }\r\n    }\r\n    /**\r\n     * Iterates over `elem`s such that: start &lt;= elem until false is returned.\r\n     */\r\n    forEachWhile(cb, start) {\r\n        let iter;\r\n        if (start !== undefined) {\r\n            iter = this.data.getIteratorFrom(start);\r\n        }\r\n        else {\r\n            iter = this.data.getIterator();\r\n        }\r\n        while (iter.hasNext()) {\r\n            const elem = iter.getNext();\r\n            const result = cb(elem.key);\r\n            if (!result) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    /** Finds the least element greater than or equal to `elem`. */\r\n    firstAfterOrEqual(elem) {\r\n        const iter = this.data.getIteratorFrom(elem);\r\n        return iter.hasNext() ? iter.getNext().key : null;\r\n    }\r\n    getIterator() {\r\n        return new SortedSetIterator(this.data.getIterator());\r\n    }\r\n    getIteratorFrom(key) {\r\n        return new SortedSetIterator(this.data.getIteratorFrom(key));\r\n    }\r\n    /** Inserts or updates an element */\r\n    add(elem) {\r\n        return this.copy(this.data.remove(elem).insert(elem, true));\r\n    }\r\n    /** Deletes an element */\r\n    delete(elem) {\r\n        if (!this.has(elem)) {\r\n            return this;\r\n        }\r\n        return this.copy(this.data.remove(elem));\r\n    }\r\n    isEmpty() {\r\n        return this.data.isEmpty();\r\n    }\r\n    unionWith(other) {\r\n        let result = this;\r\n        // Make sure `result` always refers to the larger one of the two sets.\r\n        if (result.size < other.size) {\r\n            result = other;\r\n            other = this;\r\n        }\r\n        other.forEach(elem => {\r\n            result = result.add(elem);\r\n        });\r\n        return result;\r\n    }\r\n    isEqual(other) {\r\n        if (!(other instanceof SortedSet)) {\r\n            return false;\r\n        }\r\n        if (this.size !== other.size) {\r\n            return false;\r\n        }\r\n        const thisIt = this.data.getIterator();\r\n        const otherIt = other.data.getIterator();\r\n        while (thisIt.hasNext()) {\r\n            const thisElem = thisIt.getNext().key;\r\n            const otherElem = otherIt.getNext().key;\r\n            if (this.comparator(thisElem, otherElem) !== 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    toArray() {\r\n        const res = [];\r\n        this.forEach(targetId => {\r\n            res.push(targetId);\r\n        });\r\n        return res;\r\n    }\r\n    toString() {\r\n        const result = [];\r\n        this.forEach(elem => result.push(elem));\r\n        return 'SortedSet(' + result.toString() + ')';\r\n    }\r\n    copy(data) {\r\n        const result = new SortedSet(this.comparator);\r\n        result.data = data;\r\n        return result;\r\n    }\r\n}\r\nclass SortedSetIterator {\r\n    constructor(iter) {\r\n        this.iter = iter;\r\n    }\r\n    getNext() {\r\n        return this.iter.getNext().key;\r\n    }\r\n    hasNext() {\r\n        return this.iter.hasNext();\r\n    }\r\n}\r\n/**\r\n * Compares two sorted sets for equality using their natural ordering. The\r\n * method computes the intersection and invokes `onAdd` for every element that\r\n * is in `after` but not `before`. `onRemove` is invoked for every element in\r\n * `before` but missing from `after`.\r\n *\r\n * The method creates a copy of both `before` and `after` and runs in O(n log\r\n * n), where n is the size of the two lists.\r\n *\r\n * @param before - The elements that exist in the original set.\r\n * @param after - The elements to diff against the original set.\r\n * @param comparator - The comparator for the elements in before and after.\r\n * @param onAdd - A function to invoke for every element that is part of `\r\n * after` but not `before`.\r\n * @param onRemove - A function to invoke for every element that is part of\r\n * `before` but not `after`.\r\n */\r\nfunction diffSortedSets(before, after, comparator, onAdd, onRemove) {\r\n    const beforeIt = before.getIterator();\r\n    const afterIt = after.getIterator();\r\n    let beforeValue = advanceIterator(beforeIt);\r\n    let afterValue = advanceIterator(afterIt);\r\n    // Walk through the two sets at the same time, using the ordering defined by\r\n    // `comparator`.\r\n    while (beforeValue || afterValue) {\r\n        let added = false;\r\n        let removed = false;\r\n        if (beforeValue && afterValue) {\r\n            const cmp = comparator(beforeValue, afterValue);\r\n            if (cmp < 0) {\r\n                // The element was removed if the next element in our ordered\r\n                // walkthrough is only in `before`.\r\n                removed = true;\r\n            }\r\n            else if (cmp > 0) {\r\n                // The element was added if the next element in our ordered walkthrough\r\n                // is only in `after`.\r\n                added = true;\r\n            }\r\n        }\r\n        else if (beforeValue != null) {\r\n            removed = true;\r\n        }\r\n        else {\r\n            added = true;\r\n        }\r\n        if (added) {\r\n            onAdd(afterValue);\r\n            afterValue = advanceIterator(afterIt);\r\n        }\r\n        else if (removed) {\r\n            onRemove(beforeValue);\r\n            beforeValue = advanceIterator(beforeIt);\r\n        }\r\n        else {\r\n            beforeValue = advanceIterator(beforeIt);\r\n            afterValue = advanceIterator(afterIt);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns the next element from the iterator or `undefined` if none available.\r\n */\r\nfunction advanceIterator(it) {\r\n    return it.hasNext() ? it.getNext() : undefined;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides a set of fields that can be used to partially patch a document.\r\n * FieldMask is used in conjunction with ObjectValue.\r\n * Examples:\r\n *   foo - Overwrites foo entirely with the provided value. If foo is not\r\n *         present in the companion ObjectValue, the field is deleted.\r\n *   foo.bar - Overwrites only the field bar of the object foo.\r\n *             If foo is not an object, foo is replaced with an object\r\n *             containing foo\r\n */\r\nclass FieldMask {\r\n    constructor(fields) {\r\n        this.fields = fields;\r\n        // TODO(dimond): validation of FieldMask\r\n        // Sort the field mask to support `FieldMask.isEqual()` and assert below.\r\n        fields.sort(FieldPath$1.comparator);\r\n    }\r\n    static empty() {\r\n        return new FieldMask([]);\r\n    }\r\n    /**\r\n     * Returns a new FieldMask object that is the result of adding all the given\r\n     * fields paths to this field mask.\r\n     */\r\n    unionWith(extraFields) {\r\n        let mergedMaskSet = new SortedSet(FieldPath$1.comparator);\r\n        for (const fieldPath of this.fields) {\r\n            mergedMaskSet = mergedMaskSet.add(fieldPath);\r\n        }\r\n        for (const fieldPath of extraFields) {\r\n            mergedMaskSet = mergedMaskSet.add(fieldPath);\r\n        }\r\n        return new FieldMask(mergedMaskSet.toArray());\r\n    }\r\n    /**\r\n     * Verifies that `fieldPath` is included by at least one field in this field\r\n     * mask.\r\n     *\r\n     * This is an O(n) operation, where `n` is the size of the field mask.\r\n     */\r\n    covers(fieldPath) {\r\n        for (const fieldMaskPath of this.fields) {\r\n            if (fieldMaskPath.isPrefixOf(fieldPath)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    isEqual(other) {\r\n        return arrayEquals(this.fields, other.fields, (l, r) => l.isEqual(r));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    // Note: We used to validate the base64 string here via a regular expression.\r\n    // This was removed to improve the performance of indexing.\r\n    return Buffer.from(encoded, 'base64').toString('binary');\r\n}\r\n/** Converts a binary string to a Base64 encoded string. */\r\nfunction encodeBase64(raw) {\r\n    return Buffer.from(raw, 'binary').toString('base64');\r\n}\r\n/** True if and only if the Base64 conversion functions are available. */\r\nfunction isBase64Available() {\r\n    return true;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Immutable class that represents a \"proto\" byte string.\r\n *\r\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\r\n * sent on the wire. This class abstracts away this differentiation by holding\r\n * the proto byte string in a common class that must be converted into a string\r\n * before being sent as a proto.\r\n * @internal\r\n */\r\nclass ByteString {\r\n    constructor(binaryString) {\r\n        this.binaryString = binaryString;\r\n    }\r\n    static fromBase64String(base64) {\r\n        const binaryString = decodeBase64(base64);\r\n        return new ByteString(binaryString);\r\n    }\r\n    static fromUint8Array(array) {\r\n        // TODO(indexing); Remove the copy of the byte string here as this method\r\n        // is frequently called during indexing.\r\n        const binaryString = binaryStringFromUint8Array(array);\r\n        return new ByteString(binaryString);\r\n    }\r\n    [Symbol.iterator]() {\r\n        let i = 0;\r\n        return {\r\n            next: () => {\r\n                if (i < this.binaryString.length) {\r\n                    return { value: this.binaryString.charCodeAt(i++), done: false };\r\n                }\r\n                else {\r\n                    return { value: undefined, done: true };\r\n                }\r\n            }\r\n        };\r\n    }\r\n    toBase64() {\r\n        return encodeBase64(this.binaryString);\r\n    }\r\n    toUint8Array() {\r\n        return uint8ArrayFromBinaryString(this.binaryString);\r\n    }\r\n    approximateByteSize() {\r\n        return this.binaryString.length * 2;\r\n    }\r\n    compareTo(other) {\r\n        return primitiveComparator(this.binaryString, other.binaryString);\r\n    }\r\n    isEqual(other) {\r\n        return this.binaryString === other.binaryString;\r\n    }\r\n}\r\nByteString.EMPTY_BYTE_STRING = new ByteString('');\r\n/**\r\n * Helper function to convert an Uint8array to a binary string.\r\n */\r\nfunction binaryStringFromUint8Array(array) {\r\n    let binaryString = '';\r\n    for (let i = 0; i < array.length; ++i) {\r\n        binaryString += String.fromCharCode(array[i]);\r\n    }\r\n    return binaryString;\r\n}\r\n/**\r\n * Helper function to convert a binary string to an Uint8Array.\r\n */\r\nfunction uint8ArrayFromBinaryString(binaryString) {\r\n    const buffer = new Uint8Array(binaryString.length);\r\n    for (let i = 0; i < binaryString.length; i++) {\r\n        buffer[i] = binaryString.charCodeAt(i);\r\n    }\r\n    return buffer;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\r\nconst ISO_TIMESTAMP_REG_EXP = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\r\n/**\r\n * Converts the possible Proto values for a timestamp value into a \"seconds and\r\n * nanos\" representation.\r\n */\r\nfunction normalizeTimestamp(date) {\r\n    hardAssert(!!date);\r\n    // The json interface (for the browser) will return an iso timestamp string,\r\n    // while the proto js library (for node) will return a\r\n    // google.protobuf.Timestamp instance.\r\n    if (typeof date === 'string') {\r\n        // The date string can have higher precision (nanos) than the Date class\r\n        // (millis), so we do some custom parsing here.\r\n        // Parse the nanos right out of the string.\r\n        let nanos = 0;\r\n        const fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\r\n        hardAssert(!!fraction);\r\n        if (fraction[1]) {\r\n            // Pad the fraction out to 9 digits (nanos).\r\n            let nanoStr = fraction[1];\r\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\r\n            nanos = Number(nanoStr);\r\n        }\r\n        // Parse the date to get the seconds.\r\n        const parsedDate = new Date(date);\r\n        const seconds = Math.floor(parsedDate.getTime() / 1000);\r\n        return { seconds, nanos };\r\n    }\r\n    else {\r\n        // TODO(b/37282237): Use strings for Proto3 timestamps\r\n        // assert(!this.options.useProto3Json,\r\n        //   'The timestamp instance format requires Proto JS.');\r\n        const seconds = normalizeNumber(date.seconds);\r\n        const nanos = normalizeNumber(date.nanos);\r\n        return { seconds, nanos };\r\n    }\r\n}\r\n/**\r\n * Converts the possible Proto types for numbers into a JavaScript number.\r\n * Returns 0 if the value is not numeric.\r\n */\r\nfunction normalizeNumber(value) {\r\n    // TODO(bjornick): Handle int64 greater than 53 bits.\r\n    if (typeof value === 'number') {\r\n        return value;\r\n    }\r\n    else if (typeof value === 'string') {\r\n        return Number(value);\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n/** Converts the possible Proto types for Blobs into a ByteString. */\r\nfunction normalizeByteString(blob) {\r\n    if (typeof blob === 'string') {\r\n        return ByteString.fromBase64String(blob);\r\n    }\r\n    else {\r\n        return ByteString.fromUint8Array(blob);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a locally-applied ServerTimestamp.\r\n *\r\n * Server Timestamps are backed by MapValues that contain an internal field\r\n * `__type__` with a value of `server_timestamp`. The previous value and local\r\n * write time are stored in its `__previous_value__` and `__local_write_time__`\r\n * fields respectively.\r\n *\r\n * Notes:\r\n * - ServerTimestampValue instances are created as the result of applying a\r\n *   transform. They can only exist in the local view of a document. Therefore\r\n *   they do not need to be parsed or serialized.\r\n * - When evaluated locally (e.g. for snapshot.data()), they by default\r\n *   evaluate to `null`. This behavior can be configured by passing custom\r\n *   FieldValueOptions to value().\r\n * - With respect to other ServerTimestampValues, they sort by their\r\n *   localWriteTime.\r\n */\r\nconst SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\r\nconst TYPE_KEY = '__type__';\r\nconst PREVIOUS_VALUE_KEY = '__previous_value__';\r\nconst LOCAL_WRITE_TIME_KEY = '__local_write_time__';\r\nfunction isServerTimestamp(value) {\r\n    var _a, _b;\r\n    const type = (_b = (((_a = value === null || value === void 0 ? void 0 : value.mapValue) === null || _a === void 0 ? void 0 : _a.fields) || {})[TYPE_KEY]) === null || _b === void 0 ? void 0 : _b.stringValue;\r\n    return type === SERVER_TIMESTAMP_SENTINEL;\r\n}\r\n/**\r\n * Creates a new ServerTimestamp proto value (using the internal format).\r\n */\r\nfunction serverTimestamp$1(localWriteTime, previousValue) {\r\n    const mapValue = {\r\n        fields: {\r\n            [TYPE_KEY]: {\r\n                stringValue: SERVER_TIMESTAMP_SENTINEL\r\n            },\r\n            [LOCAL_WRITE_TIME_KEY]: {\r\n                timestampValue: {\r\n                    seconds: localWriteTime.seconds,\r\n                    nanos: localWriteTime.nanoseconds\r\n                }\r\n            }\r\n        }\r\n    };\r\n    // We should avoid storing deeply nested server timestamp map values\r\n    // because we never use the intermediate \"previous values\".\r\n    // For example:\r\n    // previous: 42L, add: t1, result: t1 -> 42L\r\n    // previous: t1,  add: t2, result: t2 -> 42L (NOT t2 -> t1 -> 42L)\r\n    // previous: t2,  add: t3, result: t3 -> 42L (NOT t3 -> t2 -> t1 -> 42L)\r\n    // `getPreviousValue` recursively traverses server timestamps to find the\r\n    // least recent Value.\r\n    if (previousValue && isServerTimestamp(previousValue)) {\r\n        previousValue = getPreviousValue(previousValue);\r\n    }\r\n    if (previousValue) {\r\n        mapValue.fields[PREVIOUS_VALUE_KEY] = previousValue;\r\n    }\r\n    return { mapValue };\r\n}\r\n/**\r\n * Returns the value of the field before this ServerTimestamp was set.\r\n *\r\n * Preserving the previous values allows the user to display the last resoled\r\n * value until the backend responds with the timestamp.\r\n */\r\nfunction getPreviousValue(value) {\r\n    const previousValue = value.mapValue.fields[PREVIOUS_VALUE_KEY];\r\n    if (isServerTimestamp(previousValue)) {\r\n        return getPreviousValue(previousValue);\r\n    }\r\n    return previousValue;\r\n}\r\n/**\r\n * Returns the local time at which this timestamp was first set.\r\n */\r\nfunction getLocalWriteTime(value) {\r\n    const localWriteTime = normalizeTimestamp(value.mapValue.fields[LOCAL_WRITE_TIME_KEY].timestampValue);\r\n    return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass DatabaseInfo {\r\n    /**\r\n     * Constructs a DatabaseInfo using the provided host, databaseId and\r\n     * persistenceKey.\r\n     *\r\n     * @param databaseId - The database to use.\r\n     * @param appId - The Firebase App Id.\r\n     * @param persistenceKey - A unique identifier for this Firestore's local\r\n     * storage (used in conjunction with the databaseId).\r\n     * @param host - The Firestore backend host to connect to.\r\n     * @param ssl - Whether to use SSL when connecting.\r\n     * @param forceLongPolling - Whether to use the forceLongPolling option\r\n     * when using WebChannel as the network transport.\r\n     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\r\n     * option when using WebChannel as the network transport.\r\n     * @param longPollingOptions Options that configure long-polling.\r\n     * @param useFetchStreams Whether to use the Fetch API instead of\r\n     * XMLHTTPRequest\r\n     */\r\n    constructor(databaseId, appId, persistenceKey, host, ssl, forceLongPolling, autoDetectLongPolling, longPollingOptions, useFetchStreams) {\r\n        this.databaseId = databaseId;\r\n        this.appId = appId;\r\n        this.persistenceKey = persistenceKey;\r\n        this.host = host;\r\n        this.ssl = ssl;\r\n        this.forceLongPolling = forceLongPolling;\r\n        this.autoDetectLongPolling = autoDetectLongPolling;\r\n        this.longPollingOptions = longPollingOptions;\r\n        this.useFetchStreams = useFetchStreams;\r\n    }\r\n}\r\n/** The default database name for a project. */\r\nconst DEFAULT_DATABASE_NAME = '(default)';\r\n/**\r\n * Represents the database ID a Firestore client is associated with.\r\n * @internal\r\n */\r\nclass DatabaseId {\r\n    constructor(projectId, database) {\r\n        this.projectId = projectId;\r\n        this.database = database ? database : DEFAULT_DATABASE_NAME;\r\n    }\r\n    static empty() {\r\n        return new DatabaseId('', '');\r\n    }\r\n    get isDefaultDatabase() {\r\n        return this.database === DEFAULT_DATABASE_NAME;\r\n    }\r\n    isEqual(other) {\r\n        return (other instanceof DatabaseId &&\r\n            other.projectId === this.projectId &&\r\n            other.database === this.database);\r\n    }\r\n}\r\nfunction databaseIdFromApp(app, database) {\r\n    if (!Object.prototype.hasOwnProperty.apply(app.options, ['projectId'])) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\r\n    }\r\n    return new DatabaseId(app.options.projectId, database);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Sentinel value that sorts before any Mutation Batch ID. */\r\nconst BATCHID_UNKNOWN = -1;\r\n/**\r\n * Returns whether a variable is either undefined or null.\r\n */\r\nfunction isNullOrUndefined(value) {\r\n    return value === null || value === undefined;\r\n}\r\n/** Returns whether the value represents -0. */\r\nfunction isNegativeZero(value) {\r\n    // Detect if the value is -0.0. Based on polyfill from\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\r\n    return value === 0 && 1 / value === 1 / -0;\r\n}\r\n/**\r\n * Returns whether a value is an integer and in the safe integer range\r\n * @param value - The value to test for being an integer and in the safe range\r\n */\r\nfunction isSafeInteger(value) {\r\n    return (typeof value === 'number' &&\r\n        Number.isInteger(value) &&\r\n        !isNegativeZero(value) &&\r\n        value <= Number.MAX_SAFE_INTEGER &&\r\n        value >= Number.MIN_SAFE_INTEGER);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_VALUE_TYPE = '__max__';\r\nconst MAX_VALUE = {\r\n    mapValue: {\r\n        fields: {\r\n            '__type__': { stringValue: MAX_VALUE_TYPE }\r\n        }\r\n    }\r\n};\r\nconst MIN_VALUE = {\r\n    nullValue: 'NULL_VALUE'\r\n};\r\n/** Extracts the backend's type order for the provided value. */\r\nfunction typeOrder(value) {\r\n    if ('nullValue' in value) {\r\n        return 0 /* TypeOrder.NullValue */;\r\n    }\r\n    else if ('booleanValue' in value) {\r\n        return 1 /* TypeOrder.BooleanValue */;\r\n    }\r\n    else if ('integerValue' in value || 'doubleValue' in value) {\r\n        return 2 /* TypeOrder.NumberValue */;\r\n    }\r\n    else if ('timestampValue' in value) {\r\n        return 3 /* TypeOrder.TimestampValue */;\r\n    }\r\n    else if ('stringValue' in value) {\r\n        return 5 /* TypeOrder.StringValue */;\r\n    }\r\n    else if ('bytesValue' in value) {\r\n        return 6 /* TypeOrder.BlobValue */;\r\n    }\r\n    else if ('referenceValue' in value) {\r\n        return 7 /* TypeOrder.RefValue */;\r\n    }\r\n    else if ('geoPointValue' in value) {\r\n        return 8 /* TypeOrder.GeoPointValue */;\r\n    }\r\n    else if ('arrayValue' in value) {\r\n        return 9 /* TypeOrder.ArrayValue */;\r\n    }\r\n    else if ('mapValue' in value) {\r\n        if (isServerTimestamp(value)) {\r\n            return 4 /* TypeOrder.ServerTimestampValue */;\r\n        }\r\n        else if (isMaxValue(value)) {\r\n            return 9007199254740991 /* TypeOrder.MaxValue */;\r\n        }\r\n        return 10 /* TypeOrder.ObjectValue */;\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\n/** Tests `left` and `right` for equality based on the backend semantics. */\r\nfunction valueEquals(left, right) {\r\n    if (left === right) {\r\n        return true;\r\n    }\r\n    const leftType = typeOrder(left);\r\n    const rightType = typeOrder(right);\r\n    if (leftType !== rightType) {\r\n        return false;\r\n    }\r\n    switch (leftType) {\r\n        case 0 /* TypeOrder.NullValue */:\r\n            return true;\r\n        case 1 /* TypeOrder.BooleanValue */:\r\n            return left.booleanValue === right.booleanValue;\r\n        case 4 /* TypeOrder.ServerTimestampValue */:\r\n            return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\r\n        case 3 /* TypeOrder.TimestampValue */:\r\n            return timestampEquals(left, right);\r\n        case 5 /* TypeOrder.StringValue */:\r\n            return left.stringValue === right.stringValue;\r\n        case 6 /* TypeOrder.BlobValue */:\r\n            return blobEquals(left, right);\r\n        case 7 /* TypeOrder.RefValue */:\r\n            return left.referenceValue === right.referenceValue;\r\n        case 8 /* TypeOrder.GeoPointValue */:\r\n            return geoPointEquals(left, right);\r\n        case 2 /* TypeOrder.NumberValue */:\r\n            return numberEquals(left, right);\r\n        case 9 /* TypeOrder.ArrayValue */:\r\n            return arrayEquals(left.arrayValue.values || [], right.arrayValue.values || [], valueEquals);\r\n        case 10 /* TypeOrder.ObjectValue */:\r\n            return objectEquals(left, right);\r\n        case 9007199254740991 /* TypeOrder.MaxValue */:\r\n            return true;\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\nfunction timestampEquals(left, right) {\r\n    if (typeof left.timestampValue === 'string' &&\r\n        typeof right.timestampValue === 'string' &&\r\n        left.timestampValue.length === right.timestampValue.length) {\r\n        // Use string equality for ISO 8601 timestamps\r\n        return left.timestampValue === right.timestampValue;\r\n    }\r\n    const leftTimestamp = normalizeTimestamp(left.timestampValue);\r\n    const rightTimestamp = normalizeTimestamp(right.timestampValue);\r\n    return (leftTimestamp.seconds === rightTimestamp.seconds &&\r\n        leftTimestamp.nanos === rightTimestamp.nanos);\r\n}\r\nfunction geoPointEquals(left, right) {\r\n    return (normalizeNumber(left.geoPointValue.latitude) ===\r\n        normalizeNumber(right.geoPointValue.latitude) &&\r\n        normalizeNumber(left.geoPointValue.longitude) ===\r\n            normalizeNumber(right.geoPointValue.longitude));\r\n}\r\nfunction blobEquals(left, right) {\r\n    return normalizeByteString(left.bytesValue).isEqual(normalizeByteString(right.bytesValue));\r\n}\r\nfunction numberEquals(left, right) {\r\n    if ('integerValue' in left && 'integerValue' in right) {\r\n        return (normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue));\r\n    }\r\n    else if ('doubleValue' in left && 'doubleValue' in right) {\r\n        const n1 = normalizeNumber(left.doubleValue);\r\n        const n2 = normalizeNumber(right.doubleValue);\r\n        if (n1 === n2) {\r\n            return isNegativeZero(n1) === isNegativeZero(n2);\r\n        }\r\n        else {\r\n            return isNaN(n1) && isNaN(n2);\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction objectEquals(left, right) {\r\n    const leftMap = left.mapValue.fields || {};\r\n    const rightMap = right.mapValue.fields || {};\r\n    if (objectSize(leftMap) !== objectSize(rightMap)) {\r\n        return false;\r\n    }\r\n    for (const key in leftMap) {\r\n        if (leftMap.hasOwnProperty(key)) {\r\n            if (rightMap[key] === undefined ||\r\n                !valueEquals(leftMap[key], rightMap[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/** Returns true if the ArrayValue contains the specified element. */\r\nfunction arrayValueContains(haystack, needle) {\r\n    return ((haystack.values || []).find(v => valueEquals(v, needle)) !== undefined);\r\n}\r\nfunction valueCompare(left, right) {\r\n    if (left === right) {\r\n        return 0;\r\n    }\r\n    const leftType = typeOrder(left);\r\n    const rightType = typeOrder(right);\r\n    if (leftType !== rightType) {\r\n        return primitiveComparator(leftType, rightType);\r\n    }\r\n    switch (leftType) {\r\n        case 0 /* TypeOrder.NullValue */:\r\n        case 9007199254740991 /* TypeOrder.MaxValue */:\r\n            return 0;\r\n        case 1 /* TypeOrder.BooleanValue */:\r\n            return primitiveComparator(left.booleanValue, right.booleanValue);\r\n        case 2 /* TypeOrder.NumberValue */:\r\n            return compareNumbers(left, right);\r\n        case 3 /* TypeOrder.TimestampValue */:\r\n            return compareTimestamps(left.timestampValue, right.timestampValue);\r\n        case 4 /* TypeOrder.ServerTimestampValue */:\r\n            return compareTimestamps(getLocalWriteTime(left), getLocalWriteTime(right));\r\n        case 5 /* TypeOrder.StringValue */:\r\n            return primitiveComparator(left.stringValue, right.stringValue);\r\n        case 6 /* TypeOrder.BlobValue */:\r\n            return compareBlobs(left.bytesValue, right.bytesValue);\r\n        case 7 /* TypeOrder.RefValue */:\r\n            return compareReferences(left.referenceValue, right.referenceValue);\r\n        case 8 /* TypeOrder.GeoPointValue */:\r\n            return compareGeoPoints(left.geoPointValue, right.geoPointValue);\r\n        case 9 /* TypeOrder.ArrayValue */:\r\n            return compareArrays(left.arrayValue, right.arrayValue);\r\n        case 10 /* TypeOrder.ObjectValue */:\r\n            return compareMaps(left.mapValue, right.mapValue);\r\n        default:\r\n            throw fail();\r\n    }\r\n}\r\nfunction compareNumbers(left, right) {\r\n    const leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\r\n    const rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\r\n    if (leftNumber < rightNumber) {\r\n        return -1;\r\n    }\r\n    else if (leftNumber > rightNumber) {\r\n        return 1;\r\n    }\r\n    else if (leftNumber === rightNumber) {\r\n        return 0;\r\n    }\r\n    else {\r\n        // one or both are NaN.\r\n        if (isNaN(leftNumber)) {\r\n            return isNaN(rightNumber) ? 0 : -1;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n}\r\nfunction compareTimestamps(left, right) {\r\n    if (typeof left === 'string' &&\r\n        typeof right === 'string' &&\r\n        left.length === right.length) {\r\n        return primitiveComparator(left, right);\r\n    }\r\n    const leftTimestamp = normalizeTimestamp(left);\r\n    const rightTimestamp = normalizeTimestamp(right);\r\n    const comparison = primitiveComparator(leftTimestamp.seconds, rightTimestamp.seconds);\r\n    if (comparison !== 0) {\r\n        return comparison;\r\n    }\r\n    return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\r\n}\r\nfunction compareReferences(leftPath, rightPath) {\r\n    const leftSegments = leftPath.split('/');\r\n    const rightSegments = rightPath.split('/');\r\n    for (let i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\r\n        const comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\r\n        if (comparison !== 0) {\r\n            return comparison;\r\n        }\r\n    }\r\n    return primitiveComparator(leftSegments.length, rightSegments.length);\r\n}\r\nfunction compareGeoPoints(left, right) {\r\n    const comparison = primitiveComparator(normalizeNumber(left.latitude), normalizeNumber(right.latitude));\r\n    if (comparison !== 0) {\r\n        return comparison;\r\n    }\r\n    return primitiveComparator(normalizeNumber(left.longitude), normalizeNumber(right.longitude));\r\n}\r\nfunction compareBlobs(left, right) {\r\n    const leftBytes = normalizeByteString(left);\r\n    const rightBytes = normalizeByteString(right);\r\n    return leftBytes.compareTo(rightBytes);\r\n}\r\nfunction compareArrays(left, right) {\r\n    const leftArray = left.values || [];\r\n    const rightArray = right.values || [];\r\n    for (let i = 0; i < leftArray.length && i < rightArray.length; ++i) {\r\n        const compare = valueCompare(leftArray[i], rightArray[i]);\r\n        if (compare) {\r\n            return compare;\r\n        }\r\n    }\r\n    return primitiveComparator(leftArray.length, rightArray.length);\r\n}\r\nfunction compareMaps(left, right) {\r\n    if (left === MAX_VALUE.mapValue && right === MAX_VALUE.mapValue) {\r\n        return 0;\r\n    }\r\n    else if (left === MAX_VALUE.mapValue) {\r\n        return 1;\r\n    }\r\n    else if (right === MAX_VALUE.mapValue) {\r\n        return -1;\r\n    }\r\n    const leftMap = left.fields || {};\r\n    const leftKeys = Object.keys(leftMap);\r\n    const rightMap = right.fields || {};\r\n    const rightKeys = Object.keys(rightMap);\r\n    // Even though MapValues are likely sorted correctly based on their insertion\r\n    // order (e.g. when received from the backend), local modifications can bring\r\n    // elements out of order. We need to re-sort the elements to ensure that\r\n    // canonical IDs are independent of insertion order.\r\n    leftKeys.sort();\r\n    rightKeys.sort();\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\r\n        const keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\r\n        if (keyCompare !== 0) {\r\n            return keyCompare;\r\n        }\r\n        const compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\r\n        if (compare !== 0) {\r\n            return compare;\r\n        }\r\n    }\r\n    return primitiveComparator(leftKeys.length, rightKeys.length);\r\n}\r\n/**\r\n * Generates the canonical ID for the provided field value (as used in Target\r\n * serialization).\r\n */\r\nfunction canonicalId(value) {\r\n    return canonifyValue(value);\r\n}\r\nfunction canonifyValue(value) {\r\n    if ('nullValue' in value) {\r\n        return 'null';\r\n    }\r\n    else if ('booleanValue' in value) {\r\n        return '' + value.booleanValue;\r\n    }\r\n    else if ('integerValue' in value) {\r\n        return '' + value.integerValue;\r\n    }\r\n    else if ('doubleValue' in value) {\r\n        return '' + value.doubleValue;\r\n    }\r\n    else if ('timestampValue' in value) {\r\n        return canonifyTimestamp(value.timestampValue);\r\n    }\r\n    else if ('stringValue' in value) {\r\n        return value.stringValue;\r\n    }\r\n    else if ('bytesValue' in value) {\r\n        return canonifyByteString(value.bytesValue);\r\n    }\r\n    else if ('referenceValue' in value) {\r\n        return canonifyReference(value.referenceValue);\r\n    }\r\n    else if ('geoPointValue' in value) {\r\n        return canonifyGeoPoint(value.geoPointValue);\r\n    }\r\n    else if ('arrayValue' in value) {\r\n        return canonifyArray(value.arrayValue);\r\n    }\r\n    else if ('mapValue' in value) {\r\n        return canonifyMap(value.mapValue);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction canonifyByteString(byteString) {\r\n    return normalizeByteString(byteString).toBase64();\r\n}\r\nfunction canonifyTimestamp(timestamp) {\r\n    const normalizedTimestamp = normalizeTimestamp(timestamp);\r\n    return `time(${normalizedTimestamp.seconds},${normalizedTimestamp.nanos})`;\r\n}\r\nfunction canonifyGeoPoint(geoPoint) {\r\n    return `geo(${geoPoint.latitude},${geoPoint.longitude})`;\r\n}\r\nfunction canonifyReference(referenceValue) {\r\n    return DocumentKey.fromName(referenceValue).toString();\r\n}\r\nfunction canonifyMap(mapValue) {\r\n    // Iteration order in JavaScript is not guaranteed. To ensure that we generate\r\n    // matching canonical IDs for identical maps, we need to sort the keys.\r\n    const sortedKeys = Object.keys(mapValue.fields || {}).sort();\r\n    let result = '{';\r\n    let first = true;\r\n    for (const key of sortedKeys) {\r\n        if (!first) {\r\n            result += ',';\r\n        }\r\n        else {\r\n            first = false;\r\n        }\r\n        result += `${key}:${canonifyValue(mapValue.fields[key])}`;\r\n    }\r\n    return result + '}';\r\n}\r\nfunction canonifyArray(arrayValue) {\r\n    let result = '[';\r\n    let first = true;\r\n    for (const value of arrayValue.values || []) {\r\n        if (!first) {\r\n            result += ',';\r\n        }\r\n        else {\r\n            first = false;\r\n        }\r\n        result += canonifyValue(value);\r\n    }\r\n    return result + ']';\r\n}\r\n/**\r\n * Returns an approximate (and wildly inaccurate) in-memory size for the field\r\n * value.\r\n *\r\n * The memory size takes into account only the actual user data as it resides\r\n * in memory and ignores object overhead.\r\n */\r\nfunction estimateByteSize(value) {\r\n    switch (typeOrder(value)) {\r\n        case 0 /* TypeOrder.NullValue */:\r\n            return 4;\r\n        case 1 /* TypeOrder.BooleanValue */:\r\n            return 4;\r\n        case 2 /* TypeOrder.NumberValue */:\r\n            return 8;\r\n        case 3 /* TypeOrder.TimestampValue */:\r\n            // Timestamps are made up of two distinct numbers (seconds + nanoseconds)\r\n            return 16;\r\n        case 4 /* TypeOrder.ServerTimestampValue */:\r\n            const previousValue = getPreviousValue(value);\r\n            return previousValue ? 16 + estimateByteSize(previousValue) : 16;\r\n        case 5 /* TypeOrder.StringValue */:\r\n            // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures:\r\n            // \"JavaScript's String type is [...] a set of elements of 16-bit unsigned\r\n            // integer values\"\r\n            return value.stringValue.length * 2;\r\n        case 6 /* TypeOrder.BlobValue */:\r\n            return normalizeByteString(value.bytesValue).approximateByteSize();\r\n        case 7 /* TypeOrder.RefValue */:\r\n            return value.referenceValue.length;\r\n        case 8 /* TypeOrder.GeoPointValue */:\r\n            // GeoPoints are made up of two distinct numbers (latitude + longitude)\r\n            return 16;\r\n        case 9 /* TypeOrder.ArrayValue */:\r\n            return estimateArrayByteSize(value.arrayValue);\r\n        case 10 /* TypeOrder.ObjectValue */:\r\n            return estimateMapByteSize(value.mapValue);\r\n        default:\r\n            throw fail();\r\n    }\r\n}\r\nfunction estimateMapByteSize(mapValue) {\r\n    let size = 0;\r\n    forEach(mapValue.fields, (key, val) => {\r\n        size += key.length + estimateByteSize(val);\r\n    });\r\n    return size;\r\n}\r\nfunction estimateArrayByteSize(arrayValue) {\r\n    return (arrayValue.values || []).reduce((previousSize, value) => previousSize + estimateByteSize(value), 0);\r\n}\r\n/** Returns a reference value for the provided database and key. */\r\nfunction refValue(databaseId, key) {\r\n    return {\r\n        referenceValue: `projects/${databaseId.projectId}/databases/${databaseId.database}/documents/${key.path.canonicalString()}`\r\n    };\r\n}\r\n/** Returns true if `value` is an IntegerValue . */\r\nfunction isInteger(value) {\r\n    return !!value && 'integerValue' in value;\r\n}\r\n/** Returns true if `value` is a DoubleValue. */\r\nfunction isDouble(value) {\r\n    return !!value && 'doubleValue' in value;\r\n}\r\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\r\nfunction isNumber(value) {\r\n    return isInteger(value) || isDouble(value);\r\n}\r\n/** Returns true if `value` is an ArrayValue. */\r\nfunction isArray(value) {\r\n    return !!value && 'arrayValue' in value;\r\n}\r\n/** Returns true if `value` is a NullValue. */\r\nfunction isNullValue(value) {\r\n    return !!value && 'nullValue' in value;\r\n}\r\n/** Returns true if `value` is NaN. */\r\nfunction isNanValue(value) {\r\n    return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\r\n}\r\n/** Returns true if `value` is a MapValue. */\r\nfunction isMapValue(value) {\r\n    return !!value && 'mapValue' in value;\r\n}\r\n/** Creates a deep copy of `source`. */\r\nfunction deepClone(source) {\r\n    if (source.geoPointValue) {\r\n        return { geoPointValue: Object.assign({}, source.geoPointValue) };\r\n    }\r\n    else if (source.timestampValue &&\r\n        typeof source.timestampValue === 'object') {\r\n        return { timestampValue: Object.assign({}, source.timestampValue) };\r\n    }\r\n    else if (source.mapValue) {\r\n        const target = { mapValue: { fields: {} } };\r\n        forEach(source.mapValue.fields, (key, val) => (target.mapValue.fields[key] = deepClone(val)));\r\n        return target;\r\n    }\r\n    else if (source.arrayValue) {\r\n        const target = { arrayValue: { values: [] } };\r\n        for (let i = 0; i < (source.arrayValue.values || []).length; ++i) {\r\n            target.arrayValue.values[i] = deepClone(source.arrayValue.values[i]);\r\n        }\r\n        return target;\r\n    }\r\n    else {\r\n        return Object.assign({}, source);\r\n    }\r\n}\r\n/** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\r\nfunction isMaxValue(value) {\r\n    return ((((value.mapValue || {}).fields || {})['__type__'] || {}).stringValue ===\r\n        MAX_VALUE_TYPE);\r\n}\r\n/** Returns the lowest value for the given value type (inclusive). */\r\nfunction valuesGetLowerBound(value) {\r\n    if ('nullValue' in value) {\r\n        return MIN_VALUE;\r\n    }\r\n    else if ('booleanValue' in value) {\r\n        return { booleanValue: false };\r\n    }\r\n    else if ('integerValue' in value || 'doubleValue' in value) {\r\n        return { doubleValue: NaN };\r\n    }\r\n    else if ('timestampValue' in value) {\r\n        return { timestampValue: { seconds: Number.MIN_SAFE_INTEGER } };\r\n    }\r\n    else if ('stringValue' in value) {\r\n        return { stringValue: '' };\r\n    }\r\n    else if ('bytesValue' in value) {\r\n        return { bytesValue: '' };\r\n    }\r\n    else if ('referenceValue' in value) {\r\n        return refValue(DatabaseId.empty(), DocumentKey.empty());\r\n    }\r\n    else if ('geoPointValue' in value) {\r\n        return { geoPointValue: { latitude: -90, longitude: -180 } };\r\n    }\r\n    else if ('arrayValue' in value) {\r\n        return { arrayValue: {} };\r\n    }\r\n    else if ('mapValue' in value) {\r\n        return { mapValue: {} };\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\n/** Returns the largest value for the given value type (exclusive). */\r\nfunction valuesGetUpperBound(value) {\r\n    if ('nullValue' in value) {\r\n        return { booleanValue: false };\r\n    }\r\n    else if ('booleanValue' in value) {\r\n        return { doubleValue: NaN };\r\n    }\r\n    else if ('integerValue' in value || 'doubleValue' in value) {\r\n        return { timestampValue: { seconds: Number.MIN_SAFE_INTEGER } };\r\n    }\r\n    else if ('timestampValue' in value) {\r\n        return { stringValue: '' };\r\n    }\r\n    else if ('stringValue' in value) {\r\n        return { bytesValue: '' };\r\n    }\r\n    else if ('bytesValue' in value) {\r\n        return refValue(DatabaseId.empty(), DocumentKey.empty());\r\n    }\r\n    else if ('referenceValue' in value) {\r\n        return { geoPointValue: { latitude: -90, longitude: -180 } };\r\n    }\r\n    else if ('geoPointValue' in value) {\r\n        return { arrayValue: {} };\r\n    }\r\n    else if ('arrayValue' in value) {\r\n        return { mapValue: {} };\r\n    }\r\n    else if ('mapValue' in value) {\r\n        return MAX_VALUE;\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction lowerBoundCompare(left, right) {\r\n    const cmp = valueCompare(left.value, right.value);\r\n    if (cmp !== 0) {\r\n        return cmp;\r\n    }\r\n    if (left.inclusive && !right.inclusive) {\r\n        return -1;\r\n    }\r\n    else if (!left.inclusive && right.inclusive) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nfunction upperBoundCompare(left, right) {\r\n    const cmp = valueCompare(left.value, right.value);\r\n    if (cmp !== 0) {\r\n        return cmp;\r\n    }\r\n    if (left.inclusive && !right.inclusive) {\r\n        return 1;\r\n    }\r\n    else if (!left.inclusive && right.inclusive) {\r\n        return -1;\r\n    }\r\n    return 0;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\r\n * ability to add and remove fields (via the ObjectValueBuilder).\r\n */\r\nclass ObjectValue {\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n    static empty() {\r\n        return new ObjectValue({ mapValue: {} });\r\n    }\r\n    /**\r\n     * Returns the value at the given path or null.\r\n     *\r\n     * @param path - the path to search\r\n     * @returns The value at the path or null if the path is not set.\r\n     */\r\n    field(path) {\r\n        if (path.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            let currentLevel = this.value;\r\n            for (let i = 0; i < path.length - 1; ++i) {\r\n                currentLevel = (currentLevel.mapValue.fields || {})[path.get(i)];\r\n                if (!isMapValue(currentLevel)) {\r\n                    return null;\r\n                }\r\n            }\r\n            currentLevel = (currentLevel.mapValue.fields || {})[path.lastSegment()];\r\n            return currentLevel || null;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the field to the provided value.\r\n     *\r\n     * @param path - The field path to set.\r\n     * @param value - The value to set.\r\n     */\r\n    set(path, value) {\r\n        const fieldsMap = this.getFieldsMap(path.popLast());\r\n        fieldsMap[path.lastSegment()] = deepClone(value);\r\n    }\r\n    /**\r\n     * Sets the provided fields to the provided values.\r\n     *\r\n     * @param data - A map of fields to values (or null for deletes).\r\n     */\r\n    setAll(data) {\r\n        let parent = FieldPath$1.emptyPath();\r\n        let upserts = {};\r\n        let deletes = [];\r\n        data.forEach((value, path) => {\r\n            if (!parent.isImmediateParentOf(path)) {\r\n                // Insert the accumulated changes at this parent location\r\n                const fieldsMap = this.getFieldsMap(parent);\r\n                this.applyChanges(fieldsMap, upserts, deletes);\r\n                upserts = {};\r\n                deletes = [];\r\n                parent = path.popLast();\r\n            }\r\n            if (value) {\r\n                upserts[path.lastSegment()] = deepClone(value);\r\n            }\r\n            else {\r\n                deletes.push(path.lastSegment());\r\n            }\r\n        });\r\n        const fieldsMap = this.getFieldsMap(parent);\r\n        this.applyChanges(fieldsMap, upserts, deletes);\r\n    }\r\n    /**\r\n     * Removes the field at the specified path. If there is no field at the\r\n     * specified path, nothing is changed.\r\n     *\r\n     * @param path - The field path to remove.\r\n     */\r\n    delete(path) {\r\n        const nestedValue = this.field(path.popLast());\r\n        if (isMapValue(nestedValue) && nestedValue.mapValue.fields) {\r\n            delete nestedValue.mapValue.fields[path.lastSegment()];\r\n        }\r\n    }\r\n    isEqual(other) {\r\n        return valueEquals(this.value, other.value);\r\n    }\r\n    /**\r\n     * Returns the map that contains the leaf element of `path`. If the parent\r\n     * entry does not yet exist, or if it is not a map, a new map will be created.\r\n     */\r\n    getFieldsMap(path) {\r\n        let current = this.value;\r\n        if (!current.mapValue.fields) {\r\n            current.mapValue = { fields: {} };\r\n        }\r\n        for (let i = 0; i < path.length; ++i) {\r\n            let next = current.mapValue.fields[path.get(i)];\r\n            if (!isMapValue(next) || !next.mapValue.fields) {\r\n                next = { mapValue: { fields: {} } };\r\n                current.mapValue.fields[path.get(i)] = next;\r\n            }\r\n            current = next;\r\n        }\r\n        return current.mapValue.fields;\r\n    }\r\n    /**\r\n     * Modifies `fieldsMap` by adding, replacing or deleting the specified\r\n     * entries.\r\n     */\r\n    applyChanges(fieldsMap, inserts, deletes) {\r\n        forEach(inserts, (key, val) => (fieldsMap[key] = val));\r\n        for (const field of deletes) {\r\n            delete fieldsMap[field];\r\n        }\r\n    }\r\n    clone() {\r\n        return new ObjectValue(deepClone(this.value));\r\n    }\r\n}\r\n/**\r\n * Returns a FieldMask built from all fields in a MapValue.\r\n */\r\nfunction extractFieldMask(value) {\r\n    const fields = [];\r\n    forEach(value.fields, (key, value) => {\r\n        const currentPath = new FieldPath$1([key]);\r\n        if (isMapValue(value)) {\r\n            const nestedMask = extractFieldMask(value.mapValue);\r\n            const nestedFields = nestedMask.fields;\r\n            if (nestedFields.length === 0) {\r\n                // Preserve the empty map by adding it to the FieldMask.\r\n                fields.push(currentPath);\r\n            }\r\n            else {\r\n                // For nested and non-empty ObjectValues, add the FieldPath of the\r\n                // leaf nodes.\r\n                for (const nestedPath of nestedFields) {\r\n                    fields.push(currentPath.child(nestedPath));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // For nested and non-empty ObjectValues, add the FieldPath of the leaf\r\n            // nodes.\r\n            fields.push(currentPath);\r\n        }\r\n    });\r\n    return new FieldMask(fields);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a document in Firestore with a key, version, data and whether it\r\n * has local mutations applied to it.\r\n *\r\n * Documents can transition between states via `convertToFoundDocument()`,\r\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\r\n * not transition to one of these states even after all mutations have been\r\n * applied, `isValidDocument()` returns false and the document should be removed\r\n * from all views.\r\n */\r\nclass MutableDocument {\r\n    constructor(key, documentType, version, readTime, createTime, data, documentState) {\r\n        this.key = key;\r\n        this.documentType = documentType;\r\n        this.version = version;\r\n        this.readTime = readTime;\r\n        this.createTime = createTime;\r\n        this.data = data;\r\n        this.documentState = documentState;\r\n    }\r\n    /**\r\n     * Creates a document with no known version or data, but which can serve as\r\n     * base document for mutations.\r\n     */\r\n    static newInvalidDocument(documentKey) {\r\n        return new MutableDocument(documentKey, 0 /* DocumentType.INVALID */, \r\n        /* version */ SnapshotVersion.min(), \r\n        /* readTime */ SnapshotVersion.min(), \r\n        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\r\n    }\r\n    /**\r\n     * Creates a new document that is known to exist with the given data at the\r\n     * given version.\r\n     */\r\n    static newFoundDocument(documentKey, version, createTime, value) {\r\n        return new MutableDocument(documentKey, 1 /* DocumentType.FOUND_DOCUMENT */, \r\n        /* version */ version, \r\n        /* readTime */ SnapshotVersion.min(), \r\n        /* createTime */ createTime, value, 0 /* DocumentState.SYNCED */);\r\n    }\r\n    /** Creates a new document that is known to not exist at the given version. */\r\n    static newNoDocument(documentKey, version) {\r\n        return new MutableDocument(documentKey, 2 /* DocumentType.NO_DOCUMENT */, \r\n        /* version */ version, \r\n        /* readTime */ SnapshotVersion.min(), \r\n        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\r\n    }\r\n    /**\r\n     * Creates a new document that is known to exist at the given version but\r\n     * whose data is not known (e.g. a document that was updated without a known\r\n     * base document).\r\n     */\r\n    static newUnknownDocument(documentKey, version) {\r\n        return new MutableDocument(documentKey, 3 /* DocumentType.UNKNOWN_DOCUMENT */, \r\n        /* version */ version, \r\n        /* readTime */ SnapshotVersion.min(), \r\n        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);\r\n    }\r\n    /**\r\n     * Changes the document type to indicate that it exists and that its version\r\n     * and data are known.\r\n     */\r\n    convertToFoundDocument(version, value) {\r\n        // If a document is switching state from being an invalid or deleted\r\n        // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\r\n        // update from Watch or due to applying a local set mutation on top\r\n        // of a deleted document, our best guess about its createTime would be the\r\n        // version at which the document transitioned to a FOUND_DOCUMENT.\r\n        if (this.createTime.isEqual(SnapshotVersion.min()) &&\r\n            (this.documentType === 2 /* DocumentType.NO_DOCUMENT */ ||\r\n                this.documentType === 0 /* DocumentType.INVALID */)) {\r\n            this.createTime = version;\r\n        }\r\n        this.version = version;\r\n        this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */;\r\n        this.data = value;\r\n        this.documentState = 0 /* DocumentState.SYNCED */;\r\n        return this;\r\n    }\r\n    /**\r\n     * Changes the document type to indicate that it doesn't exist at the given\r\n     * version.\r\n     */\r\n    convertToNoDocument(version) {\r\n        this.version = version;\r\n        this.documentType = 2 /* DocumentType.NO_DOCUMENT */;\r\n        this.data = ObjectValue.empty();\r\n        this.documentState = 0 /* DocumentState.SYNCED */;\r\n        return this;\r\n    }\r\n    /**\r\n     * Changes the document type to indicate that it exists at a given version but\r\n     * that its data is not known (e.g. a document that was updated without a known\r\n     * base document).\r\n     */\r\n    convertToUnknownDocument(version) {\r\n        this.version = version;\r\n        this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */;\r\n        this.data = ObjectValue.empty();\r\n        this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */;\r\n        return this;\r\n    }\r\n    setHasCommittedMutations() {\r\n        this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */;\r\n        return this;\r\n    }\r\n    setHasLocalMutations() {\r\n        this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */;\r\n        this.version = SnapshotVersion.min();\r\n        return this;\r\n    }\r\n    setReadTime(readTime) {\r\n        this.readTime = readTime;\r\n        return this;\r\n    }\r\n    get hasLocalMutations() {\r\n        return this.documentState === 1 /* DocumentState.HAS_LOCAL_MUTATIONS */;\r\n    }\r\n    get hasCommittedMutations() {\r\n        return this.documentState === 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */;\r\n    }\r\n    get hasPendingWrites() {\r\n        return this.hasLocalMutations || this.hasCommittedMutations;\r\n    }\r\n    isValidDocument() {\r\n        return this.documentType !== 0 /* DocumentType.INVALID */;\r\n    }\r\n    isFoundDocument() {\r\n        return this.documentType === 1 /* DocumentType.FOUND_DOCUMENT */;\r\n    }\r\n    isNoDocument() {\r\n        return this.documentType === 2 /* DocumentType.NO_DOCUMENT */;\r\n    }\r\n    isUnknownDocument() {\r\n        return this.documentType === 3 /* DocumentType.UNKNOWN_DOCUMENT */;\r\n    }\r\n    isEqual(other) {\r\n        return (other instanceof MutableDocument &&\r\n            this.key.isEqual(other.key) &&\r\n            this.version.isEqual(other.version) &&\r\n            this.documentType === other.documentType &&\r\n            this.documentState === other.documentState &&\r\n            this.data.isEqual(other.data));\r\n    }\r\n    mutableCopy() {\r\n        return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\r\n    }\r\n    toString() {\r\n        return (`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, ` +\r\n            `{createTime: ${this.createTime}}), ` +\r\n            `{documentType: ${this.documentType}}), ` +\r\n            `{documentState: ${this.documentState}})`);\r\n    }\r\n}\r\n/**\r\n * Compares the value for field `field` in the provided documents. Throws if\r\n * the field does not exist in both documents.\r\n */\r\nfunction compareDocumentsByField(field, d1, d2) {\r\n    const v1 = d1.data.field(field);\r\n    const v2 = d2.data.field(field);\r\n    if (v1 !== null && v2 !== null) {\r\n        return valueCompare(v1, v2);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a bound of a query.\r\n *\r\n * The bound is specified with the given components representing a position and\r\n * whether it's just before or just after the position (relative to whatever the\r\n * query order is).\r\n *\r\n * The position represents a logical index position for a query. It's a prefix\r\n * of values for the (potentially implicit) order by clauses of a query.\r\n *\r\n * Bound provides a function to determine whether a document comes before or\r\n * after a bound. This is influenced by whether the position is just before or\r\n * just after the provided values.\r\n */\r\nclass Bound {\r\n    constructor(position, inclusive) {\r\n        this.position = position;\r\n        this.inclusive = inclusive;\r\n    }\r\n}\r\nfunction boundCompareToDocument(bound, orderBy, doc) {\r\n    let comparison = 0;\r\n    for (let i = 0; i < bound.position.length; i++) {\r\n        const orderByComponent = orderBy[i];\r\n        const component = bound.position[i];\r\n        if (orderByComponent.field.isKeyField()) {\r\n            comparison = DocumentKey.comparator(DocumentKey.fromName(component.referenceValue), doc.key);\r\n        }\r\n        else {\r\n            const docValue = doc.data.field(orderByComponent.field);\r\n            comparison = valueCompare(component, docValue);\r\n        }\r\n        if (orderByComponent.dir === \"desc\" /* Direction.DESCENDING */) {\r\n            comparison = comparison * -1;\r\n        }\r\n        if (comparison !== 0) {\r\n            break;\r\n        }\r\n    }\r\n    return comparison;\r\n}\r\n/**\r\n * Returns true if a document sorts after a bound using the provided sort\r\n * order.\r\n */\r\nfunction boundSortsAfterDocument(bound, orderBy, doc) {\r\n    const comparison = boundCompareToDocument(bound, orderBy, doc);\r\n    return bound.inclusive ? comparison >= 0 : comparison > 0;\r\n}\r\n/**\r\n * Returns true if a document sorts before a bound using the provided sort\r\n * order.\r\n */\r\nfunction boundSortsBeforeDocument(bound, orderBy, doc) {\r\n    const comparison = boundCompareToDocument(bound, orderBy, doc);\r\n    return bound.inclusive ? comparison <= 0 : comparison < 0;\r\n}\r\nfunction boundEquals(left, right) {\r\n    if (left === null) {\r\n        return right === null;\r\n    }\r\n    else if (right === null) {\r\n        return false;\r\n    }\r\n    if (left.inclusive !== right.inclusive ||\r\n        left.position.length !== right.position.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < left.position.length; i++) {\r\n        const leftPosition = left.position[i];\r\n        const rightPosition = right.position[i];\r\n        if (!valueEquals(leftPosition, rightPosition)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\r\n */\r\nclass OrderBy {\r\n    constructor(field, dir = \"asc\" /* Direction.ASCENDING */) {\r\n        this.field = field;\r\n        this.dir = dir;\r\n    }\r\n}\r\nfunction canonifyOrderBy(orderBy) {\r\n    // TODO(b/29183165): Make this collision robust.\r\n    return orderBy.field.canonicalString() + orderBy.dir;\r\n}\r\nfunction stringifyOrderBy(orderBy) {\r\n    return `${orderBy.field.canonicalString()} (${orderBy.dir})`;\r\n}\r\nfunction orderByEquals(left, right) {\r\n    return left.dir === right.dir && left.field.isEqual(right.field);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Filter {\r\n}\r\nclass FieldFilter extends Filter {\r\n    constructor(field, op, value) {\r\n        super();\r\n        this.field = field;\r\n        this.op = op;\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * Creates a filter based on the provided arguments.\r\n     */\r\n    static create(field, op, value) {\r\n        if (field.isKeyField()) {\r\n            if (op === \"in\" /* Operator.IN */ || op === \"not-in\" /* Operator.NOT_IN */) {\r\n                return this.createKeyFieldInFilter(field, op, value);\r\n            }\r\n            else {\r\n                return new KeyFieldFilter(field, op, value);\r\n            }\r\n        }\r\n        else if (op === \"array-contains\" /* Operator.ARRAY_CONTAINS */) {\r\n            return new ArrayContainsFilter(field, value);\r\n        }\r\n        else if (op === \"in\" /* Operator.IN */) {\r\n            return new InFilter(field, value);\r\n        }\r\n        else if (op === \"not-in\" /* Operator.NOT_IN */) {\r\n            return new NotInFilter(field, value);\r\n        }\r\n        else if (op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */) {\r\n            return new ArrayContainsAnyFilter(field, value);\r\n        }\r\n        else {\r\n            return new FieldFilter(field, op, value);\r\n        }\r\n    }\r\n    static createKeyFieldInFilter(field, op, value) {\r\n        return op === \"in\" /* Operator.IN */\r\n            ? new KeyFieldInFilter(field, value)\r\n            : new KeyFieldNotInFilter(field, value);\r\n    }\r\n    matches(doc) {\r\n        const other = doc.data.field(this.field);\r\n        // Types do not have to match in NOT_EQUAL filters.\r\n        if (this.op === \"!=\" /* Operator.NOT_EQUAL */) {\r\n            return (other !== null &&\r\n                this.matchesComparison(valueCompare(other, this.value)));\r\n        }\r\n        // Only compare types with matching backend order (such as double and int).\r\n        return (other !== null &&\r\n            typeOrder(this.value) === typeOrder(other) &&\r\n            this.matchesComparison(valueCompare(other, this.value)));\r\n    }\r\n    matchesComparison(comparison) {\r\n        switch (this.op) {\r\n            case \"<\" /* Operator.LESS_THAN */:\r\n                return comparison < 0;\r\n            case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */:\r\n                return comparison <= 0;\r\n            case \"==\" /* Operator.EQUAL */:\r\n                return comparison === 0;\r\n            case \"!=\" /* Operator.NOT_EQUAL */:\r\n                return comparison !== 0;\r\n            case \">\" /* Operator.GREATER_THAN */:\r\n                return comparison > 0;\r\n            case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */:\r\n                return comparison >= 0;\r\n            default:\r\n                return fail();\r\n        }\r\n    }\r\n    isInequality() {\r\n        return ([\r\n            \"<\" /* Operator.LESS_THAN */,\r\n            \"<=\" /* Operator.LESS_THAN_OR_EQUAL */,\r\n            \">\" /* Operator.GREATER_THAN */,\r\n            \">=\" /* Operator.GREATER_THAN_OR_EQUAL */,\r\n            \"!=\" /* Operator.NOT_EQUAL */,\r\n            \"not-in\" /* Operator.NOT_IN */\r\n        ].indexOf(this.op) >= 0);\r\n    }\r\n    getFlattenedFilters() {\r\n        return [this];\r\n    }\r\n    getFilters() {\r\n        return [this];\r\n    }\r\n    getFirstInequalityField() {\r\n        if (this.isInequality()) {\r\n            return this.field;\r\n        }\r\n        return null;\r\n    }\r\n}\r\nclass CompositeFilter extends Filter {\r\n    constructor(filters, op) {\r\n        super();\r\n        this.filters = filters;\r\n        this.op = op;\r\n        this.memoizedFlattenedFilters = null;\r\n    }\r\n    /**\r\n     * Creates a filter based on the provided arguments.\r\n     */\r\n    static create(filters, op) {\r\n        return new CompositeFilter(filters, op);\r\n    }\r\n    matches(doc) {\r\n        if (compositeFilterIsConjunction(this)) {\r\n            // For conjunctions, all filters must match, so return false if any filter doesn't match.\r\n            return this.filters.find(filter => !filter.matches(doc)) === undefined;\r\n        }\r\n        else {\r\n            // For disjunctions, at least one filter should match.\r\n            return this.filters.find(filter => filter.matches(doc)) !== undefined;\r\n        }\r\n    }\r\n    getFlattenedFilters() {\r\n        if (this.memoizedFlattenedFilters !== null) {\r\n            return this.memoizedFlattenedFilters;\r\n        }\r\n        this.memoizedFlattenedFilters = this.filters.reduce((result, subfilter) => {\r\n            return result.concat(subfilter.getFlattenedFilters());\r\n        }, []);\r\n        return this.memoizedFlattenedFilters;\r\n    }\r\n    // Returns a mutable copy of `this.filters`\r\n    getFilters() {\r\n        return Object.assign([], this.filters);\r\n    }\r\n    getFirstInequalityField() {\r\n        const found = this.findFirstMatchingFilter(filter => filter.isInequality());\r\n        if (found !== null) {\r\n            return found.field;\r\n        }\r\n        return null;\r\n    }\r\n    // Performs a depth-first search to find and return the first FieldFilter in the composite filter\r\n    // that satisfies the predicate. Returns `null` if none of the FieldFilters satisfy the\r\n    // predicate.\r\n    findFirstMatchingFilter(predicate) {\r\n        for (const fieldFilter of this.getFlattenedFilters()) {\r\n            if (predicate(fieldFilter)) {\r\n                return fieldFilter;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\nfunction compositeFilterIsConjunction(compositeFilter) {\r\n    return compositeFilter.op === \"and\" /* CompositeOperator.AND */;\r\n}\r\nfunction compositeFilterIsDisjunction(compositeFilter) {\r\n    return compositeFilter.op === \"or\" /* CompositeOperator.OR */;\r\n}\r\n/**\r\n * Returns true if this filter is a conjunction of field filters only. Returns false otherwise.\r\n */\r\nfunction compositeFilterIsFlatConjunction(compositeFilter) {\r\n    return (compositeFilterIsFlat(compositeFilter) &&\r\n        compositeFilterIsConjunction(compositeFilter));\r\n}\r\n/**\r\n * Returns true if this filter does not contain any composite filters. Returns false otherwise.\r\n */\r\nfunction compositeFilterIsFlat(compositeFilter) {\r\n    for (const filter of compositeFilter.filters) {\r\n        if (filter instanceof CompositeFilter) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction canonifyFilter(filter) {\r\n    if (filter instanceof FieldFilter) {\r\n        // TODO(b/29183165): Technically, this won't be unique if two values have\r\n        // the same description, such as the int 3 and the string \"3\". So we should\r\n        // add the types in here somehow, too.\r\n        return (filter.field.canonicalString() +\r\n            filter.op.toString() +\r\n            canonicalId(filter.value));\r\n    }\r\n    else if (compositeFilterIsFlatConjunction(filter)) {\r\n        // Older SDK versions use an implicit AND operation between their filters.\r\n        // In the new SDK versions, the developer may use an explicit AND filter.\r\n        // To stay consistent with the old usages, we add a special case to ensure\r\n        // the canonical ID for these two are the same. For example:\r\n        // `col.whereEquals(\"a\", 1).whereEquals(\"b\", 2)` should have the same\r\n        // canonical ID as `col.where(and(equals(\"a\",1), equals(\"b\",2)))`.\r\n        return filter.filters.map(filter => canonifyFilter(filter)).join(',');\r\n    }\r\n    else {\r\n        // filter instanceof CompositeFilter\r\n        const canonicalIdsString = filter.filters\r\n            .map(filter => canonifyFilter(filter))\r\n            .join(',');\r\n        return `${filter.op}(${canonicalIdsString})`;\r\n    }\r\n}\r\nfunction filterEquals(f1, f2) {\r\n    if (f1 instanceof FieldFilter) {\r\n        return fieldFilterEquals(f1, f2);\r\n    }\r\n    else if (f1 instanceof CompositeFilter) {\r\n        return compositeFilterEquals(f1, f2);\r\n    }\r\n    else {\r\n        fail();\r\n    }\r\n}\r\nfunction fieldFilterEquals(f1, f2) {\r\n    return (f2 instanceof FieldFilter &&\r\n        f1.op === f2.op &&\r\n        f1.field.isEqual(f2.field) &&\r\n        valueEquals(f1.value, f2.value));\r\n}\r\nfunction compositeFilterEquals(f1, f2) {\r\n    if (f2 instanceof CompositeFilter &&\r\n        f1.op === f2.op &&\r\n        f1.filters.length === f2.filters.length) {\r\n        const subFiltersMatch = f1.filters.reduce((result, f1Filter, index) => result && filterEquals(f1Filter, f2.filters[index]), true);\r\n        return subFiltersMatch;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Returns a new composite filter that contains all filter from\r\n * `compositeFilter` plus all the given filters in `otherFilters`.\r\n */\r\nfunction compositeFilterWithAddedFilters(compositeFilter, otherFilters) {\r\n    const mergedFilters = compositeFilter.filters.concat(otherFilters);\r\n    return CompositeFilter.create(mergedFilters, compositeFilter.op);\r\n}\r\n/** Returns a debug description for `filter`. */\r\nfunction stringifyFilter(filter) {\r\n    if (filter instanceof FieldFilter) {\r\n        return stringifyFieldFilter(filter);\r\n    }\r\n    else if (filter instanceof CompositeFilter) {\r\n        return stringifyCompositeFilter(filter);\r\n    }\r\n    else {\r\n        return 'Filter';\r\n    }\r\n}\r\nfunction stringifyCompositeFilter(filter) {\r\n    return (filter.op.toString() +\r\n        ` {` +\r\n        filter.getFilters().map(stringifyFilter).join(' ,') +\r\n        '}');\r\n}\r\nfunction stringifyFieldFilter(filter) {\r\n    return `${filter.field.canonicalString()} ${filter.op} ${canonicalId(filter.value)}`;\r\n}\r\n/** Filter that matches on key fields (i.e. '__name__'). */\r\nclass KeyFieldFilter extends FieldFilter {\r\n    constructor(field, op, value) {\r\n        super(field, op, value);\r\n        this.key = DocumentKey.fromName(value.referenceValue);\r\n    }\r\n    matches(doc) {\r\n        const comparison = DocumentKey.comparator(doc.key, this.key);\r\n        return this.matchesComparison(comparison);\r\n    }\r\n}\r\n/** Filter that matches on key fields within an array. */\r\nclass KeyFieldInFilter extends FieldFilter {\r\n    constructor(field, value) {\r\n        super(field, \"in\" /* Operator.IN */, value);\r\n        this.keys = extractDocumentKeysFromArrayValue(\"in\" /* Operator.IN */, value);\r\n    }\r\n    matches(doc) {\r\n        return this.keys.some(key => key.isEqual(doc.key));\r\n    }\r\n}\r\n/** Filter that matches on key fields not present within an array. */\r\nclass KeyFieldNotInFilter extends FieldFilter {\r\n    constructor(field, value) {\r\n        super(field, \"not-in\" /* Operator.NOT_IN */, value);\r\n        this.keys = extractDocumentKeysFromArrayValue(\"not-in\" /* Operator.NOT_IN */, value);\r\n    }\r\n    matches(doc) {\r\n        return !this.keys.some(key => key.isEqual(doc.key));\r\n    }\r\n}\r\nfunction extractDocumentKeysFromArrayValue(op, value) {\r\n    var _a;\r\n    return (((_a = value.arrayValue) === null || _a === void 0 ? void 0 : _a.values) || []).map(v => {\r\n        return DocumentKey.fromName(v.referenceValue);\r\n    });\r\n}\r\n/** A Filter that implements the array-contains operator. */\r\nclass ArrayContainsFilter extends FieldFilter {\r\n    constructor(field, value) {\r\n        super(field, \"array-contains\" /* Operator.ARRAY_CONTAINS */, value);\r\n    }\r\n    matches(doc) {\r\n        const other = doc.data.field(this.field);\r\n        return isArray(other) && arrayValueContains(other.arrayValue, this.value);\r\n    }\r\n}\r\n/** A Filter that implements the IN operator. */\r\nclass InFilter extends FieldFilter {\r\n    constructor(field, value) {\r\n        super(field, \"in\" /* Operator.IN */, value);\r\n    }\r\n    matches(doc) {\r\n        const other = doc.data.field(this.field);\r\n        return other !== null && arrayValueContains(this.value.arrayValue, other);\r\n    }\r\n}\r\n/** A Filter that implements the not-in operator. */\r\nclass NotInFilter extends FieldFilter {\r\n    constructor(field, value) {\r\n        super(field, \"not-in\" /* Operator.NOT_IN */, value);\r\n    }\r\n    matches(doc) {\r\n        if (arrayValueContains(this.value.arrayValue, { nullValue: 'NULL_VALUE' })) {\r\n            return false;\r\n        }\r\n        const other = doc.data.field(this.field);\r\n        return other !== null && !arrayValueContains(this.value.arrayValue, other);\r\n    }\r\n}\r\n/** A Filter that implements the array-contains-any operator. */\r\nclass ArrayContainsAnyFilter extends FieldFilter {\r\n    constructor(field, value) {\r\n        super(field, \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */, value);\r\n    }\r\n    matches(doc) {\r\n        const other = doc.data.field(this.field);\r\n        if (!isArray(other) || !other.arrayValue.values) {\r\n            return false;\r\n        }\r\n        return other.arrayValue.values.some(val => arrayValueContains(this.value.arrayValue, val));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Visible for testing\r\nclass TargetImpl {\r\n    constructor(path, collectionGroup = null, orderBy = [], filters = [], limit = null, startAt = null, endAt = null) {\r\n        this.path = path;\r\n        this.collectionGroup = collectionGroup;\r\n        this.orderBy = orderBy;\r\n        this.filters = filters;\r\n        this.limit = limit;\r\n        this.startAt = startAt;\r\n        this.endAt = endAt;\r\n        this.memoizedCanonicalId = null;\r\n    }\r\n}\r\n/**\r\n * Initializes a Target with a path and optional additional query constraints.\r\n * Path must currently be empty if this is a collection group query.\r\n *\r\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\r\n * using this factory method, because `Query` provides an implicit `orderBy`\r\n * property.\r\n */\r\nfunction newTarget(path, collectionGroup = null, orderBy = [], filters = [], limit = null, startAt = null, endAt = null) {\r\n    return new TargetImpl(path, collectionGroup, orderBy, filters, limit, startAt, endAt);\r\n}\r\nfunction canonifyTarget(target) {\r\n    const targetImpl = debugCast(target);\r\n    if (targetImpl.memoizedCanonicalId === null) {\r\n        let str = targetImpl.path.canonicalString();\r\n        if (targetImpl.collectionGroup !== null) {\r\n            str += '|cg:' + targetImpl.collectionGroup;\r\n        }\r\n        str += '|f:';\r\n        str += targetImpl.filters.map(f => canonifyFilter(f)).join(',');\r\n        str += '|ob:';\r\n        str += targetImpl.orderBy.map(o => canonifyOrderBy(o)).join(',');\r\n        if (!isNullOrUndefined(targetImpl.limit)) {\r\n            str += '|l:';\r\n            str += targetImpl.limit;\r\n        }\r\n        if (targetImpl.startAt) {\r\n            str += '|lb:';\r\n            str += targetImpl.startAt.inclusive ? 'b:' : 'a:';\r\n            str += targetImpl.startAt.position.map(p => canonicalId(p)).join(',');\r\n        }\r\n        if (targetImpl.endAt) {\r\n            str += '|ub:';\r\n            str += targetImpl.endAt.inclusive ? 'a:' : 'b:';\r\n            str += targetImpl.endAt.position.map(p => canonicalId(p)).join(',');\r\n        }\r\n        targetImpl.memoizedCanonicalId = str;\r\n    }\r\n    return targetImpl.memoizedCanonicalId;\r\n}\r\nfunction stringifyTarget(target) {\r\n    let str = target.path.canonicalString();\r\n    if (target.collectionGroup !== null) {\r\n        str += ' collectionGroup=' + target.collectionGroup;\r\n    }\r\n    if (target.filters.length > 0) {\r\n        str += `, filters: [${target.filters\r\n            .map(f => stringifyFilter(f))\r\n            .join(', ')}]`;\r\n    }\r\n    if (!isNullOrUndefined(target.limit)) {\r\n        str += ', limit: ' + target.limit;\r\n    }\r\n    if (target.orderBy.length > 0) {\r\n        str += `, orderBy: [${target.orderBy\r\n            .map(o => stringifyOrderBy(o))\r\n            .join(', ')}]`;\r\n    }\r\n    if (target.startAt) {\r\n        str += ', startAt: ';\r\n        str += target.startAt.inclusive ? 'b:' : 'a:';\r\n        str += target.startAt.position.map(p => canonicalId(p)).join(',');\r\n    }\r\n    if (target.endAt) {\r\n        str += ', endAt: ';\r\n        str += target.endAt.inclusive ? 'a:' : 'b:';\r\n        str += target.endAt.position.map(p => canonicalId(p)).join(',');\r\n    }\r\n    return `Target(${str})`;\r\n}\r\nfunction targetEquals(left, right) {\r\n    if (left.limit !== right.limit) {\r\n        return false;\r\n    }\r\n    if (left.orderBy.length !== right.orderBy.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < left.orderBy.length; i++) {\r\n        if (!orderByEquals(left.orderBy[i], right.orderBy[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    if (left.filters.length !== right.filters.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < left.filters.length; i++) {\r\n        if (!filterEquals(left.filters[i], right.filters[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    if (left.collectionGroup !== right.collectionGroup) {\r\n        return false;\r\n    }\r\n    if (!left.path.isEqual(right.path)) {\r\n        return false;\r\n    }\r\n    if (!boundEquals(left.startAt, right.startAt)) {\r\n        return false;\r\n    }\r\n    return boundEquals(left.endAt, right.endAt);\r\n}\r\nfunction targetIsDocumentTarget(target) {\r\n    return (DocumentKey.isDocumentKey(target.path) &&\r\n        target.collectionGroup === null &&\r\n        target.filters.length === 0);\r\n}\r\n/** Returns the field filters that target the given field path. */\r\nfunction targetGetFieldFiltersForPath(target, path) {\r\n    return target.filters.filter(f => f instanceof FieldFilter && f.field.isEqual(path));\r\n}\r\n/**\r\n * Returns the values that are used in ARRAY_CONTAINS or ARRAY_CONTAINS_ANY\r\n * filters. Returns `null` if there are no such filters.\r\n */\r\nfunction targetGetArrayValues(target, fieldIndex) {\r\n    const segment = fieldIndexGetArraySegment(fieldIndex);\r\n    if (segment === undefined) {\r\n        return null;\r\n    }\r\n    for (const fieldFilter of targetGetFieldFiltersForPath(target, segment.fieldPath)) {\r\n        switch (fieldFilter.op) {\r\n            case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */:\r\n                return fieldFilter.value.arrayValue.values || [];\r\n            case \"array-contains\" /* Operator.ARRAY_CONTAINS */:\r\n                return [fieldFilter.value];\r\n            // Remaining filters are not array filters.\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Returns the list of values that are used in != or NOT_IN filters. Returns\r\n * `null` if there are no such filters.\r\n */\r\nfunction targetGetNotInValues(target, fieldIndex) {\r\n    const values = new Map();\r\n    for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\r\n        for (const fieldFilter of targetGetFieldFiltersForPath(target, segment.fieldPath)) {\r\n            switch (fieldFilter.op) {\r\n                case \"==\" /* Operator.EQUAL */:\r\n                case \"in\" /* Operator.IN */:\r\n                    // Encode equality prefix, which is encoded in the index value before\r\n                    // the inequality (e.g. `a == 'a' && b != 'b'` is encoded to\r\n                    // `value != 'ab'`).\r\n                    values.set(segment.fieldPath.canonicalString(), fieldFilter.value);\r\n                    break;\r\n                case \"not-in\" /* Operator.NOT_IN */:\r\n                case \"!=\" /* Operator.NOT_EQUAL */:\r\n                    // NotIn/NotEqual is always a suffix. There cannot be any remaining\r\n                    // segments and hence we can return early here.\r\n                    values.set(segment.fieldPath.canonicalString(), fieldFilter.value);\r\n                    return Array.from(values.values());\r\n                // Remaining filters cannot be used as notIn bounds.\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Returns a lower bound of field values that can be used as a starting point to\r\n * scan the index defined by `fieldIndex`. Returns `MIN_VALUE` if no lower bound\r\n * exists.\r\n */\r\nfunction targetGetLowerBound(target, fieldIndex) {\r\n    const values = [];\r\n    let inclusive = true;\r\n    // For each segment, retrieve a lower bound if there is a suitable filter or\r\n    // startAt.\r\n    for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\r\n        const segmentBound = segment.kind === 0 /* IndexKind.ASCENDING */\r\n            ? targetGetAscendingBound(target, segment.fieldPath, target.startAt)\r\n            : targetGetDescendingBound(target, segment.fieldPath, target.startAt);\r\n        values.push(segmentBound.value);\r\n        inclusive && (inclusive = segmentBound.inclusive);\r\n    }\r\n    return new Bound(values, inclusive);\r\n}\r\n/**\r\n * Returns an upper bound of field values that can be used as an ending point\r\n * when scanning the index defined by `fieldIndex`. Returns `MAX_VALUE` if no\r\n * upper bound exists.\r\n */\r\nfunction targetGetUpperBound(target, fieldIndex) {\r\n    const values = [];\r\n    let inclusive = true;\r\n    // For each segment, retrieve an upper bound if there is a suitable filter or\r\n    // endAt.\r\n    for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\r\n        const segmentBound = segment.kind === 0 /* IndexKind.ASCENDING */\r\n            ? targetGetDescendingBound(target, segment.fieldPath, target.endAt)\r\n            : targetGetAscendingBound(target, segment.fieldPath, target.endAt);\r\n        values.push(segmentBound.value);\r\n        inclusive && (inclusive = segmentBound.inclusive);\r\n    }\r\n    return new Bound(values, inclusive);\r\n}\r\n/**\r\n * Returns the value to use as the lower bound for ascending index segment at\r\n * the provided `fieldPath` (or the upper bound for an descending segment).\r\n */\r\nfunction targetGetAscendingBound(target, fieldPath, bound) {\r\n    let value = MIN_VALUE;\r\n    let inclusive = true;\r\n    // Process all filters to find a value for the current field segment\r\n    for (const fieldFilter of targetGetFieldFiltersForPath(target, fieldPath)) {\r\n        let filterValue = MIN_VALUE;\r\n        let filterInclusive = true;\r\n        switch (fieldFilter.op) {\r\n            case \"<\" /* Operator.LESS_THAN */:\r\n            case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */:\r\n                filterValue = valuesGetLowerBound(fieldFilter.value);\r\n                break;\r\n            case \"==\" /* Operator.EQUAL */:\r\n            case \"in\" /* Operator.IN */:\r\n            case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */:\r\n                filterValue = fieldFilter.value;\r\n                break;\r\n            case \">\" /* Operator.GREATER_THAN */:\r\n                filterValue = fieldFilter.value;\r\n                filterInclusive = false;\r\n                break;\r\n            case \"!=\" /* Operator.NOT_EQUAL */:\r\n            case \"not-in\" /* Operator.NOT_IN */:\r\n                filterValue = MIN_VALUE;\r\n                break;\r\n            // Remaining filters cannot be used as lower bounds.\r\n        }\r\n        if (lowerBoundCompare({ value, inclusive }, { value: filterValue, inclusive: filterInclusive }) < 0) {\r\n            value = filterValue;\r\n            inclusive = filterInclusive;\r\n        }\r\n    }\r\n    // If there is an additional bound, compare the values against the existing\r\n    // range to see if we can narrow the scope.\r\n    if (bound !== null) {\r\n        for (let i = 0; i < target.orderBy.length; ++i) {\r\n            const orderBy = target.orderBy[i];\r\n            if (orderBy.field.isEqual(fieldPath)) {\r\n                const cursorValue = bound.position[i];\r\n                if (lowerBoundCompare({ value, inclusive }, { value: cursorValue, inclusive: bound.inclusive }) < 0) {\r\n                    value = cursorValue;\r\n                    inclusive = bound.inclusive;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return { value, inclusive };\r\n}\r\n/**\r\n * Returns the value to use as the upper bound for ascending index segment at\r\n * the provided `fieldPath` (or the lower bound for a descending segment).\r\n */\r\nfunction targetGetDescendingBound(target, fieldPath, bound) {\r\n    let value = MAX_VALUE;\r\n    let inclusive = true;\r\n    // Process all filters to find a value for the current field segment\r\n    for (const fieldFilter of targetGetFieldFiltersForPath(target, fieldPath)) {\r\n        let filterValue = MAX_VALUE;\r\n        let filterInclusive = true;\r\n        switch (fieldFilter.op) {\r\n            case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */:\r\n            case \">\" /* Operator.GREATER_THAN */:\r\n                filterValue = valuesGetUpperBound(fieldFilter.value);\r\n                filterInclusive = false;\r\n                break;\r\n            case \"==\" /* Operator.EQUAL */:\r\n            case \"in\" /* Operator.IN */:\r\n            case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */:\r\n                filterValue = fieldFilter.value;\r\n                break;\r\n            case \"<\" /* Operator.LESS_THAN */:\r\n                filterValue = fieldFilter.value;\r\n                filterInclusive = false;\r\n                break;\r\n            case \"!=\" /* Operator.NOT_EQUAL */:\r\n            case \"not-in\" /* Operator.NOT_IN */:\r\n                filterValue = MAX_VALUE;\r\n                break;\r\n            // Remaining filters cannot be used as upper bounds.\r\n        }\r\n        if (upperBoundCompare({ value, inclusive }, { value: filterValue, inclusive: filterInclusive }) > 0) {\r\n            value = filterValue;\r\n            inclusive = filterInclusive;\r\n        }\r\n    }\r\n    // If there is an additional bound, compare the values against the existing\r\n    // range to see if we can narrow the scope.\r\n    if (bound !== null) {\r\n        for (let i = 0; i < target.orderBy.length; ++i) {\r\n            const orderBy = target.orderBy[i];\r\n            if (orderBy.field.isEqual(fieldPath)) {\r\n                const cursorValue = bound.position[i];\r\n                if (upperBoundCompare({ value, inclusive }, { value: cursorValue, inclusive: bound.inclusive }) > 0) {\r\n                    value = cursorValue;\r\n                    inclusive = bound.inclusive;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return { value, inclusive };\r\n}\r\n/** Returns the number of segments of a perfect index for this target. */\r\nfunction targetGetSegmentCount(target) {\r\n    let fields = new SortedSet(FieldPath$1.comparator);\r\n    let hasArraySegment = false;\r\n    for (const filter of target.filters) {\r\n        for (const subFilter of filter.getFlattenedFilters()) {\r\n            // __name__ is not an explicit segment of any index, so we don't need to\r\n            // count it.\r\n            if (subFilter.field.isKeyField()) {\r\n                continue;\r\n            }\r\n            // ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filters must be counted separately.\r\n            // For instance, it is possible to have an index for \"a ARRAY a ASC\". Even\r\n            // though these are on the same field, they should be counted as two\r\n            // separate segments in an index.\r\n            if (subFilter.op === \"array-contains\" /* Operator.ARRAY_CONTAINS */ ||\r\n                subFilter.op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */) {\r\n                hasArraySegment = true;\r\n            }\r\n            else {\r\n                fields = fields.add(subFilter.field);\r\n            }\r\n        }\r\n    }\r\n    for (const orderBy of target.orderBy) {\r\n        // __name__ is not an explicit segment of any index, so we don't need to\r\n        // count it.\r\n        if (!orderBy.field.isKeyField()) {\r\n            fields = fields.add(orderBy.field);\r\n        }\r\n    }\r\n    return fields.size + (hasArraySegment ? 1 : 0);\r\n}\r\nfunction targetHasLimit(target) {\r\n    return target.limit !== null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Query encapsulates all the query attributes we support in the SDK. It can\r\n * be run against the LocalStore, as well as be converted to a `Target` to\r\n * query the RemoteStore results.\r\n *\r\n * Visible for testing.\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * Initializes a Query with a path and optional additional query constraints.\r\n     * Path must currently be empty if this is a collection group query.\r\n     */\r\n    constructor(path, collectionGroup = null, explicitOrderBy = [], filters = [], limit = null, limitType = \"F\" /* LimitType.First */, startAt = null, endAt = null) {\r\n        this.path = path;\r\n        this.collectionGroup = collectionGroup;\r\n        this.explicitOrderBy = explicitOrderBy;\r\n        this.filters = filters;\r\n        this.limit = limit;\r\n        this.limitType = limitType;\r\n        this.startAt = startAt;\r\n        this.endAt = endAt;\r\n        this.memoizedOrderBy = null;\r\n        // The corresponding `Target` of this `Query` instance.\r\n        this.memoizedTarget = null;\r\n        if (this.startAt) ;\r\n        if (this.endAt) ;\r\n    }\r\n}\r\n/** Creates a new Query instance with the options provided. */\r\nfunction newQuery(path, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt) {\r\n    return new QueryImpl(path, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt);\r\n}\r\n/** Creates a new Query for a query that matches all documents at `path` */\r\nfunction newQueryForPath(path) {\r\n    return new QueryImpl(path);\r\n}\r\n/**\r\n * Helper to convert a collection group query into a collection query at a\r\n * specific path. This is used when executing collection group queries, since\r\n * we have to split the query into a set of collection queries at multiple\r\n * paths.\r\n */\r\nfunction asCollectionQueryAtPath(query, path) {\r\n    return new QueryImpl(path, \r\n    /*collectionGroup=*/ null, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, query.startAt, query.endAt);\r\n}\r\n/**\r\n * Returns true if this query does not specify any query constraints that\r\n * could remove results.\r\n */\r\nfunction queryMatchesAllDocuments(query) {\r\n    return (query.filters.length === 0 &&\r\n        query.limit === null &&\r\n        query.startAt == null &&\r\n        query.endAt == null &&\r\n        (query.explicitOrderBy.length === 0 ||\r\n            (query.explicitOrderBy.length === 1 &&\r\n                query.explicitOrderBy[0].field.isKeyField())));\r\n}\r\nfunction getFirstOrderByField(query) {\r\n    return query.explicitOrderBy.length > 0\r\n        ? query.explicitOrderBy[0].field\r\n        : null;\r\n}\r\nfunction getInequalityFilterField(query) {\r\n    for (const filter of query.filters) {\r\n        const result = filter.getFirstInequalityField();\r\n        if (result !== null) {\r\n            return result;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Creates a new Query for a collection group query that matches all documents\r\n * within the provided collection group.\r\n */\r\nfunction newQueryForCollectionGroup(collectionId) {\r\n    return new QueryImpl(ResourcePath.emptyPath(), collectionId);\r\n}\r\n/**\r\n * Returns whether the query matches a single document by path (rather than a\r\n * collection).\r\n */\r\nfunction isDocumentQuery$1(query) {\r\n    return (DocumentKey.isDocumentKey(query.path) &&\r\n        query.collectionGroup === null &&\r\n        query.filters.length === 0);\r\n}\r\n/**\r\n * Returns whether the query matches a collection group rather than a specific\r\n * collection.\r\n */\r\nfunction isCollectionGroupQuery(query) {\r\n    return query.collectionGroup !== null;\r\n}\r\n/**\r\n * Returns the implicit order by constraint that is used to execute the Query,\r\n * which can be different from the order by constraints the user provided (e.g.\r\n * the SDK and backend always orders by `__name__`).\r\n */\r\nfunction queryOrderBy(query) {\r\n    const queryImpl = debugCast(query);\r\n    if (queryImpl.memoizedOrderBy === null) {\r\n        queryImpl.memoizedOrderBy = [];\r\n        const inequalityField = getInequalityFilterField(queryImpl);\r\n        const firstOrderByField = getFirstOrderByField(queryImpl);\r\n        if (inequalityField !== null && firstOrderByField === null) {\r\n            // In order to implicitly add key ordering, we must also add the\r\n            // inequality filter field for it to be a valid query.\r\n            // Note that the default inequality field and key ordering is ascending.\r\n            if (!inequalityField.isKeyField()) {\r\n                queryImpl.memoizedOrderBy.push(new OrderBy(inequalityField));\r\n            }\r\n            queryImpl.memoizedOrderBy.push(new OrderBy(FieldPath$1.keyField(), \"asc\" /* Direction.ASCENDING */));\r\n        }\r\n        else {\r\n            let foundKeyOrdering = false;\r\n            for (const orderBy of queryImpl.explicitOrderBy) {\r\n                queryImpl.memoizedOrderBy.push(orderBy);\r\n                if (orderBy.field.isKeyField()) {\r\n                    foundKeyOrdering = true;\r\n                }\r\n            }\r\n            if (!foundKeyOrdering) {\r\n                // The order of the implicit key ordering always matches the last\r\n                // explicit order by\r\n                const lastDirection = queryImpl.explicitOrderBy.length > 0\r\n                    ? queryImpl.explicitOrderBy[queryImpl.explicitOrderBy.length - 1]\r\n                        .dir\r\n                    : \"asc\" /* Direction.ASCENDING */;\r\n                queryImpl.memoizedOrderBy.push(new OrderBy(FieldPath$1.keyField(), lastDirection));\r\n            }\r\n        }\r\n    }\r\n    return queryImpl.memoizedOrderBy;\r\n}\r\n/**\r\n * Converts this `Query` instance to it's corresponding `Target` representation.\r\n */\r\nfunction queryToTarget(query) {\r\n    const queryImpl = debugCast(query);\r\n    if (!queryImpl.memoizedTarget) {\r\n        if (queryImpl.limitType === \"F\" /* LimitType.First */) {\r\n            queryImpl.memoizedTarget = newTarget(queryImpl.path, queryImpl.collectionGroup, queryOrderBy(queryImpl), queryImpl.filters, queryImpl.limit, queryImpl.startAt, queryImpl.endAt);\r\n        }\r\n        else {\r\n            // Flip the orderBy directions since we want the last results\r\n            const orderBys = [];\r\n            for (const orderBy of queryOrderBy(queryImpl)) {\r\n                const dir = orderBy.dir === \"desc\" /* Direction.DESCENDING */\r\n                    ? \"asc\" /* Direction.ASCENDING */\r\n                    : \"desc\" /* Direction.DESCENDING */;\r\n                orderBys.push(new OrderBy(orderBy.field, dir));\r\n            }\r\n            // We need to swap the cursors to match the now-flipped query ordering.\r\n            const startAt = queryImpl.endAt\r\n                ? new Bound(queryImpl.endAt.position, queryImpl.endAt.inclusive)\r\n                : null;\r\n            const endAt = queryImpl.startAt\r\n                ? new Bound(queryImpl.startAt.position, queryImpl.startAt.inclusive)\r\n                : null;\r\n            // Now return as a LimitType.First query.\r\n            queryImpl.memoizedTarget = newTarget(queryImpl.path, queryImpl.collectionGroup, orderBys, queryImpl.filters, queryImpl.limit, startAt, endAt);\r\n        }\r\n    }\r\n    return queryImpl.memoizedTarget;\r\n}\r\nfunction queryWithAddedFilter(query, filter) {\r\n    filter.getFirstInequalityField();\r\n    getInequalityFilterField(query);\r\n    const newFilters = query.filters.concat([filter]);\r\n    return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), newFilters, query.limit, query.limitType, query.startAt, query.endAt);\r\n}\r\nfunction queryWithAddedOrderBy(query, orderBy) {\r\n    // TODO(dimond): validate that orderBy does not list the same key twice.\r\n    const newOrderBy = query.explicitOrderBy.concat([orderBy]);\r\n    return new QueryImpl(query.path, query.collectionGroup, newOrderBy, query.filters.slice(), query.limit, query.limitType, query.startAt, query.endAt);\r\n}\r\nfunction queryWithLimit(query, limit, limitType) {\r\n    return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), limit, limitType, query.startAt, query.endAt);\r\n}\r\nfunction queryWithStartAt(query, bound) {\r\n    return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, bound, query.endAt);\r\n}\r\nfunction queryWithEndAt(query, bound) {\r\n    return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, query.startAt, bound);\r\n}\r\nfunction queryEquals(left, right) {\r\n    return (targetEquals(queryToTarget(left), queryToTarget(right)) &&\r\n        left.limitType === right.limitType);\r\n}\r\n// TODO(b/29183165): This is used to get a unique string from a query to, for\r\n// example, use as a dictionary key, but the implementation is subject to\r\n// collisions. Make it collision-free.\r\nfunction canonifyQuery(query) {\r\n    return `${canonifyTarget(queryToTarget(query))}|lt:${query.limitType}`;\r\n}\r\nfunction stringifyQuery(query) {\r\n    return `Query(target=${stringifyTarget(queryToTarget(query))}; limitType=${query.limitType})`;\r\n}\r\n/** Returns whether `doc` matches the constraints of `query`. */\r\nfunction queryMatches(query, doc) {\r\n    return (doc.isFoundDocument() &&\r\n        queryMatchesPathAndCollectionGroup(query, doc) &&\r\n        queryMatchesOrderBy(query, doc) &&\r\n        queryMatchesFilters(query, doc) &&\r\n        queryMatchesBounds(query, doc));\r\n}\r\nfunction queryMatchesPathAndCollectionGroup(query, doc) {\r\n    const docPath = doc.key.path;\r\n    if (query.collectionGroup !== null) {\r\n        // NOTE: this.path is currently always empty since we don't expose Collection\r\n        // Group queries rooted at a document path yet.\r\n        return (doc.key.hasCollectionId(query.collectionGroup) &&\r\n            query.path.isPrefixOf(docPath));\r\n    }\r\n    else if (DocumentKey.isDocumentKey(query.path)) {\r\n        // exact match for document queries\r\n        return query.path.isEqual(docPath);\r\n    }\r\n    else {\r\n        // shallow ancestor queries by default\r\n        return query.path.isImmediateParentOf(docPath);\r\n    }\r\n}\r\n/**\r\n * A document must have a value for every ordering clause in order to show up\r\n * in the results.\r\n */\r\nfunction queryMatchesOrderBy(query, doc) {\r\n    // We must use `queryOrderBy()` to get the list of all orderBys (both implicit and explicit).\r\n    // Note that for OR queries, orderBy applies to all disjunction terms and implicit orderBys must\r\n    // be taken into account. For example, the query \"a > 1 || b==1\" has an implicit \"orderBy a\" due\r\n    // to the inequality, and is evaluated as \"a > 1 orderBy a || b==1 orderBy a\".\r\n    // A document with content of {b:1} matches the filters, but does not match the orderBy because\r\n    // it's missing the field 'a'.\r\n    for (const orderBy of queryOrderBy(query)) {\r\n        // order by key always matches\r\n        if (!orderBy.field.isKeyField() && doc.data.field(orderBy.field) === null) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction queryMatchesFilters(query, doc) {\r\n    for (const filter of query.filters) {\r\n        if (!filter.matches(doc)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/** Makes sure a document is within the bounds, if provided. */\r\nfunction queryMatchesBounds(query, doc) {\r\n    if (query.startAt &&\r\n        !boundSortsBeforeDocument(query.startAt, queryOrderBy(query), doc)) {\r\n        return false;\r\n    }\r\n    if (query.endAt &&\r\n        !boundSortsAfterDocument(query.endAt, queryOrderBy(query), doc)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Returns the collection group that this query targets.\r\n *\r\n * PORTING NOTE: This is only used in the Web SDK to facilitate multi-tab\r\n * synchronization for query results.\r\n */\r\nfunction queryCollectionGroup(query) {\r\n    return (query.collectionGroup ||\r\n        (query.path.length % 2 === 1\r\n            ? query.path.lastSegment()\r\n            : query.path.get(query.path.length - 2)));\r\n}\r\n/**\r\n * Returns a new comparator function that can be used to compare two documents\r\n * based on the Query's ordering constraint.\r\n */\r\nfunction newQueryComparator(query) {\r\n    return (d1, d2) => {\r\n        let comparedOnKeyField = false;\r\n        for (const orderBy of queryOrderBy(query)) {\r\n            const comp = compareDocs(orderBy, d1, d2);\r\n            if (comp !== 0) {\r\n                return comp;\r\n            }\r\n            comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\r\n        }\r\n        return 0;\r\n    };\r\n}\r\nfunction compareDocs(orderBy, d1, d2) {\r\n    const comparison = orderBy.field.isKeyField()\r\n        ? DocumentKey.comparator(d1.key, d2.key)\r\n        : compareDocumentsByField(orderBy.field, d1, d2);\r\n    switch (orderBy.dir) {\r\n        case \"asc\" /* Direction.ASCENDING */:\r\n            return comparison;\r\n        case \"desc\" /* Direction.DESCENDING */:\r\n            return -1 * comparison;\r\n        default:\r\n            return fail();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A map implementation that uses objects as keys. Objects must have an\r\n * associated equals function and must be immutable. Entries in the map are\r\n * stored together with the key being produced from the mapKeyFn. This map\r\n * automatically handles collisions of keys.\r\n */\r\nclass ObjectMap {\r\n    constructor(mapKeyFn, equalsFn) {\r\n        this.mapKeyFn = mapKeyFn;\r\n        this.equalsFn = equalsFn;\r\n        /**\r\n         * The inner map for a key/value pair. Due to the possibility of collisions we\r\n         * keep a list of entries that we do a linear search through to find an actual\r\n         * match. Note that collisions should be rare, so we still expect near\r\n         * constant time lookups in practice.\r\n         */\r\n        this.inner = {};\r\n        /** The number of entries stored in the map */\r\n        this.innerSize = 0;\r\n    }\r\n    /** Get a value for this key, or undefined if it does not exist. */\r\n    get(key) {\r\n        const id = this.mapKeyFn(key);\r\n        const matches = this.inner[id];\r\n        if (matches === undefined) {\r\n            return undefined;\r\n        }\r\n        for (const [otherKey, value] of matches) {\r\n            if (this.equalsFn(otherKey, key)) {\r\n                return value;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    has(key) {\r\n        return this.get(key) !== undefined;\r\n    }\r\n    /** Put this key and value in the map. */\r\n    set(key, value) {\r\n        const id = this.mapKeyFn(key);\r\n        const matches = this.inner[id];\r\n        if (matches === undefined) {\r\n            this.inner[id] = [[key, value]];\r\n            this.innerSize++;\r\n            return;\r\n        }\r\n        for (let i = 0; i < matches.length; i++) {\r\n            if (this.equalsFn(matches[i][0], key)) {\r\n                // This is updating an existing entry and does not increase `innerSize`.\r\n                matches[i] = [key, value];\r\n                return;\r\n            }\r\n        }\r\n        matches.push([key, value]);\r\n        this.innerSize++;\r\n    }\r\n    /**\r\n     * Remove this key from the map. Returns a boolean if anything was deleted.\r\n     */\r\n    delete(key) {\r\n        const id = this.mapKeyFn(key);\r\n        const matches = this.inner[id];\r\n        if (matches === undefined) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < matches.length; i++) {\r\n            if (this.equalsFn(matches[i][0], key)) {\r\n                if (matches.length === 1) {\r\n                    delete this.inner[id];\r\n                }\r\n                else {\r\n                    matches.splice(i, 1);\r\n                }\r\n                this.innerSize--;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    forEach(fn) {\r\n        forEach(this.inner, (_, entries) => {\r\n            for (const [k, v] of entries) {\r\n                fn(k, v);\r\n            }\r\n        });\r\n    }\r\n    isEmpty() {\r\n        return isEmpty(this.inner);\r\n    }\r\n    size() {\r\n        return this.innerSize;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst EMPTY_MUTABLE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\r\nfunction mutableDocumentMap() {\r\n    return EMPTY_MUTABLE_DOCUMENT_MAP;\r\n}\r\nconst EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\r\nfunction documentMap(...docs) {\r\n    let map = EMPTY_DOCUMENT_MAP;\r\n    for (const doc of docs) {\r\n        map = map.insert(doc.key, doc);\r\n    }\r\n    return map;\r\n}\r\nfunction newOverlayedDocumentMap() {\r\n    return newDocumentKeyMap();\r\n}\r\nfunction convertOverlayedDocumentMapToDocumentMap(collection) {\r\n    let documents = EMPTY_DOCUMENT_MAP;\r\n    collection.forEach((k, v) => (documents = documents.insert(k, v.overlayedDocument)));\r\n    return documents;\r\n}\r\nfunction newOverlayMap() {\r\n    return newDocumentKeyMap();\r\n}\r\nfunction newMutationMap() {\r\n    return newDocumentKeyMap();\r\n}\r\nfunction newDocumentKeyMap() {\r\n    return new ObjectMap(key => key.toString(), (l, r) => l.isEqual(r));\r\n}\r\nconst EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);\r\nfunction documentVersionMap() {\r\n    return EMPTY_DOCUMENT_VERSION_MAP;\r\n}\r\nconst EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\r\nfunction documentKeySet(...keys) {\r\n    let set = EMPTY_DOCUMENT_KEY_SET;\r\n    for (const key of keys) {\r\n        set = set.add(key);\r\n    }\r\n    return set;\r\n}\r\nconst EMPTY_TARGET_ID_SET = new SortedSet(primitiveComparator);\r\nfunction targetIdSet() {\r\n    return EMPTY_TARGET_ID_SET;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns an DoubleValue for `value` that is encoded based the serializer's\r\n * `useProto3Json` setting.\r\n */\r\nfunction toDouble(serializer, value) {\r\n    if (serializer.useProto3Json) {\r\n        if (isNaN(value)) {\r\n            return { doubleValue: 'NaN' };\r\n        }\r\n        else if (value === Infinity) {\r\n            return { doubleValue: 'Infinity' };\r\n        }\r\n        else if (value === -Infinity) {\r\n            return { doubleValue: '-Infinity' };\r\n        }\r\n    }\r\n    return { doubleValue: isNegativeZero(value) ? '-0' : value };\r\n}\r\n/**\r\n * Returns an IntegerValue for `value`.\r\n */\r\nfunction toInteger(value) {\r\n    return { integerValue: '' + value };\r\n}\r\n/**\r\n * Returns a value for a number that's appropriate to put into a proto.\r\n * The return value is an IntegerValue if it can safely represent the value,\r\n * otherwise a DoubleValue is returned.\r\n */\r\nfunction toNumber(serializer, value) {\r\n    return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Used to represent a field transform on a mutation. */\r\nclass TransformOperation {\r\n    constructor() {\r\n        // Make sure that the structural type of `TransformOperation` is unique.\r\n        // See https://github.com/microsoft/TypeScript/issues/5451\r\n        this._ = undefined;\r\n    }\r\n}\r\n/**\r\n * Computes the local transform result against the provided `previousValue`,\r\n * optionally using the provided localWriteTime.\r\n */\r\nfunction applyTransformOperationToLocalView(transform, previousValue, localWriteTime) {\r\n    if (transform instanceof ServerTimestampTransform) {\r\n        return serverTimestamp$1(localWriteTime, previousValue);\r\n    }\r\n    else if (transform instanceof ArrayUnionTransformOperation) {\r\n        return applyArrayUnionTransformOperation(transform, previousValue);\r\n    }\r\n    else if (transform instanceof ArrayRemoveTransformOperation) {\r\n        return applyArrayRemoveTransformOperation(transform, previousValue);\r\n    }\r\n    else {\r\n        return applyNumericIncrementTransformOperationToLocalView(transform, previousValue);\r\n    }\r\n}\r\n/**\r\n * Computes a final transform result after the transform has been acknowledged\r\n * by the server, potentially using the server-provided transformResult.\r\n */\r\nfunction applyTransformOperationToRemoteDocument(transform, previousValue, transformResult) {\r\n    // The server just sends null as the transform result for array operations,\r\n    // so we have to calculate a result the same as we do for local\r\n    // applications.\r\n    if (transform instanceof ArrayUnionTransformOperation) {\r\n        return applyArrayUnionTransformOperation(transform, previousValue);\r\n    }\r\n    else if (transform instanceof ArrayRemoveTransformOperation) {\r\n        return applyArrayRemoveTransformOperation(transform, previousValue);\r\n    }\r\n    return transformResult;\r\n}\r\n/**\r\n * If this transform operation is not idempotent, returns the base value to\r\n * persist for this transform. If a base value is returned, the transform\r\n * operation is always applied to this base value, even if document has\r\n * already been updated.\r\n *\r\n * Base values provide consistent behavior for non-idempotent transforms and\r\n * allow us to return the same latency-compensated value even if the backend\r\n * has already applied the transform operation. The base value is null for\r\n * idempotent transforms, as they can be re-played even if the backend has\r\n * already applied them.\r\n *\r\n * @returns a base value to store along with the mutation, or null for\r\n * idempotent transforms.\r\n */\r\nfunction computeTransformOperationBaseValue(transform, previousValue) {\r\n    if (transform instanceof NumericIncrementTransformOperation) {\r\n        return isNumber(previousValue) ? previousValue : { integerValue: 0 };\r\n    }\r\n    return null;\r\n}\r\nfunction transformOperationEquals(left, right) {\r\n    if (left instanceof ArrayUnionTransformOperation &&\r\n        right instanceof ArrayUnionTransformOperation) {\r\n        return arrayEquals(left.elements, right.elements, valueEquals);\r\n    }\r\n    else if (left instanceof ArrayRemoveTransformOperation &&\r\n        right instanceof ArrayRemoveTransformOperation) {\r\n        return arrayEquals(left.elements, right.elements, valueEquals);\r\n    }\r\n    else if (left instanceof NumericIncrementTransformOperation &&\r\n        right instanceof NumericIncrementTransformOperation) {\r\n        return valueEquals(left.operand, right.operand);\r\n    }\r\n    return (left instanceof ServerTimestampTransform &&\r\n        right instanceof ServerTimestampTransform);\r\n}\r\n/** Transforms a value into a server-generated timestamp. */\r\nclass ServerTimestampTransform extends TransformOperation {\r\n}\r\n/** Transforms an array value via a union operation. */\r\nclass ArrayUnionTransformOperation extends TransformOperation {\r\n    constructor(elements) {\r\n        super();\r\n        this.elements = elements;\r\n    }\r\n}\r\nfunction applyArrayUnionTransformOperation(transform, previousValue) {\r\n    const values = coercedFieldValuesArray(previousValue);\r\n    for (const toUnion of transform.elements) {\r\n        if (!values.some(element => valueEquals(element, toUnion))) {\r\n            values.push(toUnion);\r\n        }\r\n    }\r\n    return { arrayValue: { values } };\r\n}\r\n/** Transforms an array value via a remove operation. */\r\nclass ArrayRemoveTransformOperation extends TransformOperation {\r\n    constructor(elements) {\r\n        super();\r\n        this.elements = elements;\r\n    }\r\n}\r\nfunction applyArrayRemoveTransformOperation(transform, previousValue) {\r\n    let values = coercedFieldValuesArray(previousValue);\r\n    for (const toRemove of transform.elements) {\r\n        values = values.filter(element => !valueEquals(element, toRemove));\r\n    }\r\n    return { arrayValue: { values } };\r\n}\r\n/**\r\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\r\n * transforms. Converts all field values to integers or doubles, but unlike the\r\n * backend does not cap integer values at 2^63. Instead, JavaScript number\r\n * arithmetic is used and precision loss can occur for values greater than 2^53.\r\n */\r\nclass NumericIncrementTransformOperation extends TransformOperation {\r\n    constructor(serializer, operand) {\r\n        super();\r\n        this.serializer = serializer;\r\n        this.operand = operand;\r\n    }\r\n}\r\nfunction applyNumericIncrementTransformOperationToLocalView(transform, previousValue) {\r\n    // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\r\n    // precision and resolves overflows by reducing precision, we do not\r\n    // manually cap overflows at 2^63.\r\n    const baseValue = computeTransformOperationBaseValue(transform, previousValue);\r\n    const sum = asNumber(baseValue) + asNumber(transform.operand);\r\n    if (isInteger(baseValue) && isInteger(transform.operand)) {\r\n        return toInteger(sum);\r\n    }\r\n    else {\r\n        return toDouble(transform.serializer, sum);\r\n    }\r\n}\r\nfunction asNumber(value) {\r\n    return normalizeNumber(value.integerValue || value.doubleValue);\r\n}\r\nfunction coercedFieldValuesArray(value) {\r\n    return isArray(value) && value.arrayValue.values\r\n        ? value.arrayValue.values.slice()\r\n        : [];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** A field path and the TransformOperation to perform upon it. */\r\nclass FieldTransform {\r\n    constructor(field, transform) {\r\n        this.field = field;\r\n        this.transform = transform;\r\n    }\r\n}\r\nfunction fieldTransformEquals(left, right) {\r\n    return (left.field.isEqual(right.field) &&\r\n        transformOperationEquals(left.transform, right.transform));\r\n}\r\nfunction fieldTransformsAreEqual(left, right) {\r\n    if (left === undefined && right === undefined) {\r\n        return true;\r\n    }\r\n    if (left && right) {\r\n        return arrayEquals(left, right, (l, r) => fieldTransformEquals(l, r));\r\n    }\r\n    return false;\r\n}\r\n/** The result of successfully applying a mutation to the backend. */\r\nclass MutationResult {\r\n    constructor(\r\n    /**\r\n     * The version at which the mutation was committed:\r\n     *\r\n     * - For most operations, this is the updateTime in the WriteResult.\r\n     * - For deletes, the commitTime of the WriteResponse (because deletes are\r\n     *   not stored and have no updateTime).\r\n     *\r\n     * Note that these versions can be different: No-op writes will not change\r\n     * the updateTime even though the commitTime advances.\r\n     */\r\n    version, \r\n    /**\r\n     * The resulting fields returned from the backend after a mutation\r\n     * containing field transforms has been committed. Contains one FieldValue\r\n     * for each FieldTransform that was in the mutation.\r\n     *\r\n     * Will be empty if the mutation did not contain any field transforms.\r\n     */\r\n    transformResults) {\r\n        this.version = version;\r\n        this.transformResults = transformResults;\r\n    }\r\n}\r\n/**\r\n * Encodes a precondition for a mutation. This follows the model that the\r\n * backend accepts with the special case of an explicit \"empty\" precondition\r\n * (meaning no precondition).\r\n */\r\nclass Precondition {\r\n    constructor(updateTime, exists) {\r\n        this.updateTime = updateTime;\r\n        this.exists = exists;\r\n    }\r\n    /** Creates a new empty Precondition. */\r\n    static none() {\r\n        return new Precondition();\r\n    }\r\n    /** Creates a new Precondition with an exists flag. */\r\n    static exists(exists) {\r\n        return new Precondition(undefined, exists);\r\n    }\r\n    /** Creates a new Precondition based on a version a document exists at. */\r\n    static updateTime(version) {\r\n        return new Precondition(version);\r\n    }\r\n    /** Returns whether this Precondition is empty. */\r\n    get isNone() {\r\n        return this.updateTime === undefined && this.exists === undefined;\r\n    }\r\n    isEqual(other) {\r\n        return (this.exists === other.exists &&\r\n            (this.updateTime\r\n                ? !!other.updateTime && this.updateTime.isEqual(other.updateTime)\r\n                : !other.updateTime));\r\n    }\r\n}\r\n/** Returns true if the preconditions is valid for the given document. */\r\nfunction preconditionIsValidForDocument(precondition, document) {\r\n    if (precondition.updateTime !== undefined) {\r\n        return (document.isFoundDocument() &&\r\n            document.version.isEqual(precondition.updateTime));\r\n    }\r\n    else if (precondition.exists !== undefined) {\r\n        return precondition.exists === document.isFoundDocument();\r\n    }\r\n    else {\r\n        return true;\r\n    }\r\n}\r\n/**\r\n * A mutation describes a self-contained change to a document. Mutations can\r\n * create, replace, delete, and update subsets of documents.\r\n *\r\n * Mutations not only act on the value of the document but also its version.\r\n *\r\n * For local mutations (mutations that haven't been committed yet), we preserve\r\n * the existing version for Set and Patch mutations. For Delete mutations, we\r\n * reset the version to 0.\r\n *\r\n * Here's the expected transition table.\r\n *\r\n * MUTATION           APPLIED TO            RESULTS IN\r\n *\r\n * SetMutation        Document(v3)          Document(v3)\r\n * SetMutation        NoDocument(v3)        Document(v0)\r\n * SetMutation        InvalidDocument(v0)   Document(v0)\r\n * PatchMutation      Document(v3)          Document(v3)\r\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\r\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\r\n * DeleteMutation     Document(v3)          NoDocument(v0)\r\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\r\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\r\n *\r\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\r\n * the resulting version for Set and Patch mutations. As deletes have no\r\n * explicit update time, we use the commitTime of the WriteResponse for\r\n * Delete mutations.\r\n *\r\n * If a mutation is acknowledged by the backend but fails the precondition check\r\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\r\n * the updated version.\r\n *\r\n * Field transforms are used only with Patch and Set Mutations. We use the\r\n * `updateTransforms` message to store transforms, rather than the `transforms`s\r\n * messages.\r\n *\r\n * ## Subclassing Notes\r\n *\r\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\r\n * applyToLocalView() to implement the actual behavior of applying the mutation\r\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\r\n * example).\r\n */\r\nclass Mutation {\r\n}\r\n/**\r\n * A utility method to calculate a `Mutation` representing the overlay from the\r\n * final state of the document, and a `FieldMask` representing the fields that\r\n * are mutated by the local mutations.\r\n */\r\nfunction calculateOverlayMutation(doc, mask) {\r\n    if (!doc.hasLocalMutations || (mask && mask.fields.length === 0)) {\r\n        return null;\r\n    }\r\n    // mask is null when sets or deletes are applied to the current document.\r\n    if (mask === null) {\r\n        if (doc.isNoDocument()) {\r\n            return new DeleteMutation(doc.key, Precondition.none());\r\n        }\r\n        else {\r\n            return new SetMutation(doc.key, doc.data, Precondition.none());\r\n        }\r\n    }\r\n    else {\r\n        const docValue = doc.data;\r\n        const patchValue = ObjectValue.empty();\r\n        let maskSet = new SortedSet(FieldPath$1.comparator);\r\n        for (let path of mask.fields) {\r\n            if (!maskSet.has(path)) {\r\n                let value = docValue.field(path);\r\n                // If we are deleting a nested field, we take the immediate parent as\r\n                // the mask used to construct the resulting mutation.\r\n                // Justification: Nested fields can create parent fields implicitly. If\r\n                // only a leaf entry is deleted in later mutations, the parent field\r\n                // should still remain, but we may have lost this information.\r\n                // Consider mutation (foo.bar 1), then mutation (foo.bar delete()).\r\n                // This leaves the final result (foo, {}). Despite the fact that `doc`\r\n                // has the correct result, `foo` is not in `mask`, and the resulting\r\n                // mutation would miss `foo`.\r\n                if (value === null && path.length > 1) {\r\n                    path = path.popLast();\r\n                    value = docValue.field(path);\r\n                }\r\n                if (value === null) {\r\n                    patchValue.delete(path);\r\n                }\r\n                else {\r\n                    patchValue.set(path, value);\r\n                }\r\n                maskSet = maskSet.add(path);\r\n            }\r\n        }\r\n        return new PatchMutation(doc.key, patchValue, new FieldMask(maskSet.toArray()), Precondition.none());\r\n    }\r\n}\r\n/**\r\n * Applies this mutation to the given document for the purposes of computing a\r\n * new remote document. If the input document doesn't match the expected state\r\n * (e.g. it is invalid or outdated), the document type may transition to\r\n * unknown.\r\n *\r\n * @param mutation - The mutation to apply.\r\n * @param document - The document to mutate. The input document can be an\r\n *     invalid document if the client has no knowledge of the pre-mutation state\r\n *     of the document.\r\n * @param mutationResult - The result of applying the mutation from the backend.\r\n */\r\nfunction mutationApplyToRemoteDocument(mutation, document, mutationResult) {\r\n    if (mutation instanceof SetMutation) {\r\n        setMutationApplyToRemoteDocument(mutation, document, mutationResult);\r\n    }\r\n    else if (mutation instanceof PatchMutation) {\r\n        patchMutationApplyToRemoteDocument(mutation, document, mutationResult);\r\n    }\r\n    else {\r\n        deleteMutationApplyToRemoteDocument(mutation, document, mutationResult);\r\n    }\r\n}\r\n/**\r\n * Applies this mutation to the given document for the purposes of computing\r\n * the new local view of a document. If the input document doesn't match the\r\n * expected state, the document is not modified.\r\n *\r\n * @param mutation - The mutation to apply.\r\n * @param document - The document to mutate. The input document can be an\r\n *     invalid document if the client has no knowledge of the pre-mutation state\r\n *     of the document.\r\n * @param previousMask - The fields that have been updated before applying this mutation.\r\n * @param localWriteTime - A timestamp indicating the local write time of the\r\n *     batch this mutation is a part of.\r\n * @returns A `FieldMask` representing the fields that are changed by applying this mutation.\r\n */\r\nfunction mutationApplyToLocalView(mutation, document, previousMask, localWriteTime) {\r\n    if (mutation instanceof SetMutation) {\r\n        return setMutationApplyToLocalView(mutation, document, previousMask, localWriteTime);\r\n    }\r\n    else if (mutation instanceof PatchMutation) {\r\n        return patchMutationApplyToLocalView(mutation, document, previousMask, localWriteTime);\r\n    }\r\n    else {\r\n        return deleteMutationApplyToLocalView(mutation, document, previousMask);\r\n    }\r\n}\r\n/**\r\n * If this mutation is not idempotent, returns the base value to persist with\r\n * this mutation. If a base value is returned, the mutation is always applied\r\n * to this base value, even if document has already been updated.\r\n *\r\n * The base value is a sparse object that consists of only the document\r\n * fields for which this mutation contains a non-idempotent transformation\r\n * (e.g. a numeric increment). The provided value guarantees consistent\r\n * behavior for non-idempotent transforms and allow us to return the same\r\n * latency-compensated value even if the backend has already applied the\r\n * mutation. The base value is null for idempotent mutations, as they can be\r\n * re-played even if the backend has already applied them.\r\n *\r\n * @returns a base value to store along with the mutation, or null for\r\n * idempotent mutations.\r\n */\r\nfunction mutationExtractBaseValue(mutation, document) {\r\n    let baseObject = null;\r\n    for (const fieldTransform of mutation.fieldTransforms) {\r\n        const existingValue = document.data.field(fieldTransform.field);\r\n        const coercedValue = computeTransformOperationBaseValue(fieldTransform.transform, existingValue || null);\r\n        if (coercedValue != null) {\r\n            if (baseObject === null) {\r\n                baseObject = ObjectValue.empty();\r\n            }\r\n            baseObject.set(fieldTransform.field, coercedValue);\r\n        }\r\n    }\r\n    return baseObject ? baseObject : null;\r\n}\r\nfunction mutationEquals(left, right) {\r\n    if (left.type !== right.type) {\r\n        return false;\r\n    }\r\n    if (!left.key.isEqual(right.key)) {\r\n        return false;\r\n    }\r\n    if (!left.precondition.isEqual(right.precondition)) {\r\n        return false;\r\n    }\r\n    if (!fieldTransformsAreEqual(left.fieldTransforms, right.fieldTransforms)) {\r\n        return false;\r\n    }\r\n    if (left.type === 0 /* MutationType.Set */) {\r\n        return left.value.isEqual(right.value);\r\n    }\r\n    if (left.type === 1 /* MutationType.Patch */) {\r\n        return (left.data.isEqual(right.data) &&\r\n            left.fieldMask.isEqual(right.fieldMask));\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * A mutation that creates or replaces the document at the given key with the\r\n * object value contents.\r\n */\r\nclass SetMutation extends Mutation {\r\n    constructor(key, value, precondition, fieldTransforms = []) {\r\n        super();\r\n        this.key = key;\r\n        this.value = value;\r\n        this.precondition = precondition;\r\n        this.fieldTransforms = fieldTransforms;\r\n        this.type = 0 /* MutationType.Set */;\r\n    }\r\n    getFieldMask() {\r\n        return null;\r\n    }\r\n}\r\nfunction setMutationApplyToRemoteDocument(mutation, document, mutationResult) {\r\n    // Unlike setMutationApplyToLocalView, if we're applying a mutation to a\r\n    // remote document the server has accepted the mutation so the precondition\r\n    // must have held.\r\n    const newData = mutation.value.clone();\r\n    const transformResults = serverTransformResults(mutation.fieldTransforms, document, mutationResult.transformResults);\r\n    newData.setAll(transformResults);\r\n    document\r\n        .convertToFoundDocument(mutationResult.version, newData)\r\n        .setHasCommittedMutations();\r\n}\r\nfunction setMutationApplyToLocalView(mutation, document, previousMask, localWriteTime) {\r\n    if (!preconditionIsValidForDocument(mutation.precondition, document)) {\r\n        // The mutation failed to apply (e.g. a document ID created with add()\r\n        // caused a name collision).\r\n        return previousMask;\r\n    }\r\n    const newData = mutation.value.clone();\r\n    const transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document);\r\n    newData.setAll(transformResults);\r\n    document\r\n        .convertToFoundDocument(document.version, newData)\r\n        .setHasLocalMutations();\r\n    return null; // SetMutation overwrites all fields.\r\n}\r\n/**\r\n * A mutation that modifies fields of the document at the given key with the\r\n * given values. The values are applied through a field mask:\r\n *\r\n *  * When a field is in both the mask and the values, the corresponding field\r\n *    is updated.\r\n *  * When a field is in neither the mask nor the values, the corresponding\r\n *    field is unmodified.\r\n *  * When a field is in the mask but not in the values, the corresponding field\r\n *    is deleted.\r\n *  * When a field is not in the mask but is in the values, the values map is\r\n *    ignored.\r\n */\r\nclass PatchMutation extends Mutation {\r\n    constructor(key, data, fieldMask, precondition, fieldTransforms = []) {\r\n        super();\r\n        this.key = key;\r\n        this.data = data;\r\n        this.fieldMask = fieldMask;\r\n        this.precondition = precondition;\r\n        this.fieldTransforms = fieldTransforms;\r\n        this.type = 1 /* MutationType.Patch */;\r\n    }\r\n    getFieldMask() {\r\n        return this.fieldMask;\r\n    }\r\n}\r\nfunction patchMutationApplyToRemoteDocument(mutation, document, mutationResult) {\r\n    if (!preconditionIsValidForDocument(mutation.precondition, document)) {\r\n        // Since the mutation was not rejected, we know that the precondition\r\n        // matched on the backend. We therefore must not have the expected version\r\n        // of the document in our cache and convert to an UnknownDocument with a\r\n        // known updateTime.\r\n        document.convertToUnknownDocument(mutationResult.version);\r\n        return;\r\n    }\r\n    const transformResults = serverTransformResults(mutation.fieldTransforms, document, mutationResult.transformResults);\r\n    const newData = document.data;\r\n    newData.setAll(getPatch(mutation));\r\n    newData.setAll(transformResults);\r\n    document\r\n        .convertToFoundDocument(mutationResult.version, newData)\r\n        .setHasCommittedMutations();\r\n}\r\nfunction patchMutationApplyToLocalView(mutation, document, previousMask, localWriteTime) {\r\n    if (!preconditionIsValidForDocument(mutation.precondition, document)) {\r\n        return previousMask;\r\n    }\r\n    const transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document);\r\n    const newData = document.data;\r\n    newData.setAll(getPatch(mutation));\r\n    newData.setAll(transformResults);\r\n    document\r\n        .convertToFoundDocument(document.version, newData)\r\n        .setHasLocalMutations();\r\n    if (previousMask === null) {\r\n        return null;\r\n    }\r\n    return previousMask\r\n        .unionWith(mutation.fieldMask.fields)\r\n        .unionWith(mutation.fieldTransforms.map(transform => transform.field));\r\n}\r\n/**\r\n * Returns a FieldPath/Value map with the content of the PatchMutation.\r\n */\r\nfunction getPatch(mutation) {\r\n    const result = new Map();\r\n    mutation.fieldMask.fields.forEach(fieldPath => {\r\n        if (!fieldPath.isEmpty()) {\r\n            const newValue = mutation.data.field(fieldPath);\r\n            result.set(fieldPath, newValue);\r\n        }\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * Creates a list of \"transform results\" (a transform result is a field value\r\n * representing the result of applying a transform) for use after a mutation\r\n * containing transforms has been acknowledged by the server.\r\n *\r\n * @param fieldTransforms - The field transforms to apply the result to.\r\n * @param mutableDocument - The current state of the document after applying all\r\n * previous mutations.\r\n * @param serverTransformResults - The transform results received by the server.\r\n * @returns The transform results list.\r\n */\r\nfunction serverTransformResults(fieldTransforms, mutableDocument, serverTransformResults) {\r\n    const transformResults = new Map();\r\n    hardAssert(fieldTransforms.length === serverTransformResults.length);\r\n    for (let i = 0; i < serverTransformResults.length; i++) {\r\n        const fieldTransform = fieldTransforms[i];\r\n        const transform = fieldTransform.transform;\r\n        const previousValue = mutableDocument.data.field(fieldTransform.field);\r\n        transformResults.set(fieldTransform.field, applyTransformOperationToRemoteDocument(transform, previousValue, serverTransformResults[i]));\r\n    }\r\n    return transformResults;\r\n}\r\n/**\r\n * Creates a list of \"transform results\" (a transform result is a field value\r\n * representing the result of applying a transform) for use when applying a\r\n * transform locally.\r\n *\r\n * @param fieldTransforms - The field transforms to apply the result to.\r\n * @param localWriteTime - The local time of the mutation (used to\r\n *     generate ServerTimestampValues).\r\n * @param mutableDocument - The document to apply transforms on.\r\n * @returns The transform results list.\r\n */\r\nfunction localTransformResults(fieldTransforms, localWriteTime, mutableDocument) {\r\n    const transformResults = new Map();\r\n    for (const fieldTransform of fieldTransforms) {\r\n        const transform = fieldTransform.transform;\r\n        const previousValue = mutableDocument.data.field(fieldTransform.field);\r\n        transformResults.set(fieldTransform.field, applyTransformOperationToLocalView(transform, previousValue, localWriteTime));\r\n    }\r\n    return transformResults;\r\n}\r\n/** A mutation that deletes the document at the given key. */\r\nclass DeleteMutation extends Mutation {\r\n    constructor(key, precondition) {\r\n        super();\r\n        this.key = key;\r\n        this.precondition = precondition;\r\n        this.type = 2 /* MutationType.Delete */;\r\n        this.fieldTransforms = [];\r\n    }\r\n    getFieldMask() {\r\n        return null;\r\n    }\r\n}\r\nfunction deleteMutationApplyToRemoteDocument(mutation, document, mutationResult) {\r\n    // Unlike applyToLocalView, if we're applying a mutation to a remote\r\n    // document the server has accepted the mutation so the precondition must\r\n    // have held.\r\n    document\r\n        .convertToNoDocument(mutationResult.version)\r\n        .setHasCommittedMutations();\r\n}\r\nfunction deleteMutationApplyToLocalView(mutation, document, previousMask) {\r\n    if (preconditionIsValidForDocument(mutation.precondition, document)) {\r\n        document.convertToNoDocument(document.version).setHasLocalMutations();\r\n        return null;\r\n    }\r\n    return previousMask;\r\n}\r\n/**\r\n * A mutation that verifies the existence of the document at the given key with\r\n * the provided precondition.\r\n *\r\n * The `verify` operation is only used in Transactions, and this class serves\r\n * primarily to facilitate serialization into protos.\r\n */\r\nclass VerifyMutation extends Mutation {\r\n    constructor(key, precondition) {\r\n        super();\r\n        this.key = key;\r\n        this.precondition = precondition;\r\n        this.type = 3 /* MutationType.Verify */;\r\n        this.fieldTransforms = [];\r\n    }\r\n    getFieldMask() {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A batch of mutations that will be sent as one unit to the backend.\r\n */\r\nclass MutationBatch {\r\n    /**\r\n     * @param batchId - The unique ID of this mutation batch.\r\n     * @param localWriteTime - The original write time of this mutation.\r\n     * @param baseMutations - Mutations that are used to populate the base\r\n     * values when this mutation is applied locally. This can be used to locally\r\n     * overwrite values that are persisted in the remote document cache. Base\r\n     * mutations are never sent to the backend.\r\n     * @param mutations - The user-provided mutations in this mutation batch.\r\n     * User-provided mutations are applied both locally and remotely on the\r\n     * backend.\r\n     */\r\n    constructor(batchId, localWriteTime, baseMutations, mutations) {\r\n        this.batchId = batchId;\r\n        this.localWriteTime = localWriteTime;\r\n        this.baseMutations = baseMutations;\r\n        this.mutations = mutations;\r\n    }\r\n    /**\r\n     * Applies all the mutations in this MutationBatch to the specified document\r\n     * to compute the state of the remote document\r\n     *\r\n     * @param document - The document to apply mutations to.\r\n     * @param batchResult - The result of applying the MutationBatch to the\r\n     * backend.\r\n     */\r\n    applyToRemoteDocument(document, batchResult) {\r\n        const mutationResults = batchResult.mutationResults;\r\n        for (let i = 0; i < this.mutations.length; i++) {\r\n            const mutation = this.mutations[i];\r\n            if (mutation.key.isEqual(document.key)) {\r\n                const mutationResult = mutationResults[i];\r\n                mutationApplyToRemoteDocument(mutation, document, mutationResult);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Computes the local view of a document given all the mutations in this\r\n     * batch.\r\n     *\r\n     * @param document - The document to apply mutations to.\r\n     * @param mutatedFields - Fields that have been updated before applying this mutation batch.\r\n     * @returns A `FieldMask` representing all the fields that are mutated.\r\n     */\r\n    applyToLocalView(document, mutatedFields) {\r\n        // First, apply the base state. This allows us to apply non-idempotent\r\n        // transform against a consistent set of values.\r\n        for (const mutation of this.baseMutations) {\r\n            if (mutation.key.isEqual(document.key)) {\r\n                mutatedFields = mutationApplyToLocalView(mutation, document, mutatedFields, this.localWriteTime);\r\n            }\r\n        }\r\n        // Second, apply all user-provided mutations.\r\n        for (const mutation of this.mutations) {\r\n            if (mutation.key.isEqual(document.key)) {\r\n                mutatedFields = mutationApplyToLocalView(mutation, document, mutatedFields, this.localWriteTime);\r\n            }\r\n        }\r\n        return mutatedFields;\r\n    }\r\n    /**\r\n     * Computes the local view for all provided documents given the mutations in\r\n     * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to\r\n     * replace all the mutation applications.\r\n     */\r\n    applyToLocalDocumentSet(documentMap, documentsWithoutRemoteVersion) {\r\n        // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations\r\n        // directly (as done in `applyToLocalView()`), we can reduce the complexity\r\n        // to O(n).\r\n        const overlays = newMutationMap();\r\n        this.mutations.forEach(m => {\r\n            const overlayedDocument = documentMap.get(m.key);\r\n            // TODO(mutabledocuments): This method should take a MutableDocumentMap\r\n            // and we should remove this cast.\r\n            const mutableDocument = overlayedDocument.overlayedDocument;\r\n            let mutatedFields = this.applyToLocalView(mutableDocument, overlayedDocument.mutatedFields);\r\n            // Set mutatedFields to null if the document is only from local mutations.\r\n            // This creates a Set or Delete mutation, instead of trying to create a\r\n            // patch mutation as the overlay.\r\n            mutatedFields = documentsWithoutRemoteVersion.has(m.key)\r\n                ? null\r\n                : mutatedFields;\r\n            const overlay = calculateOverlayMutation(mutableDocument, mutatedFields);\r\n            if (overlay !== null) {\r\n                overlays.set(m.key, overlay);\r\n            }\r\n            if (!mutableDocument.isValidDocument()) {\r\n                mutableDocument.convertToNoDocument(SnapshotVersion.min());\r\n            }\r\n        });\r\n        return overlays;\r\n    }\r\n    keys() {\r\n        return this.mutations.reduce((keys, m) => keys.add(m.key), documentKeySet());\r\n    }\r\n    isEqual(other) {\r\n        return (this.batchId === other.batchId &&\r\n            arrayEquals(this.mutations, other.mutations, (l, r) => mutationEquals(l, r)) &&\r\n            arrayEquals(this.baseMutations, other.baseMutations, (l, r) => mutationEquals(l, r)));\r\n    }\r\n}\r\n/** The result of applying a mutation batch to the backend. */\r\nclass MutationBatchResult {\r\n    constructor(batch, commitVersion, mutationResults, \r\n    /**\r\n     * A pre-computed mapping from each mutated document to the resulting\r\n     * version.\r\n     */\r\n    docVersions) {\r\n        this.batch = batch;\r\n        this.commitVersion = commitVersion;\r\n        this.mutationResults = mutationResults;\r\n        this.docVersions = docVersions;\r\n    }\r\n    /**\r\n     * Creates a new MutationBatchResult for the given batch and results. There\r\n     * must be one result for each mutation in the batch. This static factory\r\n     * caches a document=&gt;version mapping (docVersions).\r\n     */\r\n    static from(batch, commitVersion, results) {\r\n        hardAssert(batch.mutations.length === results.length);\r\n        let versionMap = documentVersionMap();\r\n        const mutations = batch.mutations;\r\n        for (let i = 0; i < mutations.length; i++) {\r\n            versionMap = versionMap.insert(mutations[i].key, results[i].version);\r\n        }\r\n        return new MutationBatchResult(batch, commitVersion, results, versionMap);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Representation of an overlay computed by Firestore.\r\n *\r\n * Holds information about a mutation and the largest batch id in Firestore when\r\n * the mutation was created.\r\n */\r\nclass Overlay {\r\n    constructor(largestBatchId, mutation) {\r\n        this.largestBatchId = largestBatchId;\r\n        this.mutation = mutation;\r\n    }\r\n    getKey() {\r\n        return this.mutation.key;\r\n    }\r\n    isEqual(other) {\r\n        return other !== null && this.mutation === other.mutation;\r\n    }\r\n    toString() {\r\n        return `Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistenceFilter {\r\n    constructor(count, unchangedNames) {\r\n        this.count = count;\r\n        this.unchangedNames = unchangedNames;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error Codes describing the different ways GRPC can fail. These are copied\r\n * directly from GRPC's sources here:\r\n *\r\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\r\n *\r\n * Important! The names of these identifiers matter because the string forms\r\n * are used for reverse lookups from the webchannel stream. Do NOT change the\r\n * names of these identifiers or change this into a const enum.\r\n */\r\nvar RpcCode;\r\n(function (RpcCode) {\r\n    RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\r\n    RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\r\n    RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\r\n    RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\r\n    RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\r\n    RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\r\n    RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\r\n    RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\r\n    RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\r\n    RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\r\n    RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\r\n    RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\r\n    RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\r\n    RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\r\n    RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\r\n    RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\r\n    RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\r\n})(RpcCode || (RpcCode = {}));\r\n/**\r\n * Determines whether an error code represents a permanent error when received\r\n * in response to a non-write operation.\r\n *\r\n * See isPermanentWriteError for classifying write errors.\r\n */\r\nfunction isPermanentError(code) {\r\n    switch (code) {\r\n        case Code.OK:\r\n            return fail();\r\n        case Code.CANCELLED:\r\n        case Code.UNKNOWN:\r\n        case Code.DEADLINE_EXCEEDED:\r\n        case Code.RESOURCE_EXHAUSTED:\r\n        case Code.INTERNAL:\r\n        case Code.UNAVAILABLE:\r\n        // Unauthenticated means something went wrong with our token and we need\r\n        // to retry with new credentials which will happen automatically.\r\n        case Code.UNAUTHENTICATED:\r\n            return false;\r\n        case Code.INVALID_ARGUMENT:\r\n        case Code.NOT_FOUND:\r\n        case Code.ALREADY_EXISTS:\r\n        case Code.PERMISSION_DENIED:\r\n        case Code.FAILED_PRECONDITION:\r\n        // Aborted might be retried in some scenarios, but that is dependant on\r\n        // the context and should handled individually by the calling code.\r\n        // See https://cloud.google.com/apis/design/errors.\r\n        case Code.ABORTED:\r\n        case Code.OUT_OF_RANGE:\r\n        case Code.UNIMPLEMENTED:\r\n        case Code.DATA_LOSS:\r\n            return true;\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\n/**\r\n * Determines whether an error code represents a permanent error when received\r\n * in response to a write operation.\r\n *\r\n * Write operations must be handled specially because as of b/119437764, ABORTED\r\n * errors on the write stream should be retried too (even though ABORTED errors\r\n * are not generally retryable).\r\n *\r\n * Note that during the initial handshake on the write stream an ABORTED error\r\n * signals that we should discard our stream token (i.e. it is permanent). This\r\n * means a handshake error should be classified with isPermanentError, above.\r\n */\r\nfunction isPermanentWriteError(code) {\r\n    return isPermanentError(code) && code !== Code.ABORTED;\r\n}\r\n/**\r\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\r\n * are not the same as HTTP status codes.\r\n *\r\n * @returns The Code equivalent to the given GRPC status code. Fails if there\r\n *     is no match.\r\n */\r\nfunction mapCodeFromRpcCode(code) {\r\n    if (code === undefined) {\r\n        // This shouldn't normally happen, but in certain error cases (like trying\r\n        // to send invalid proto messages) we may get an error with no GRPC code.\r\n        logError('GRPC error has no .code');\r\n        return Code.UNKNOWN;\r\n    }\r\n    switch (code) {\r\n        case RpcCode.OK:\r\n            return Code.OK;\r\n        case RpcCode.CANCELLED:\r\n            return Code.CANCELLED;\r\n        case RpcCode.UNKNOWN:\r\n            return Code.UNKNOWN;\r\n        case RpcCode.DEADLINE_EXCEEDED:\r\n            return Code.DEADLINE_EXCEEDED;\r\n        case RpcCode.RESOURCE_EXHAUSTED:\r\n            return Code.RESOURCE_EXHAUSTED;\r\n        case RpcCode.INTERNAL:\r\n            return Code.INTERNAL;\r\n        case RpcCode.UNAVAILABLE:\r\n            return Code.UNAVAILABLE;\r\n        case RpcCode.UNAUTHENTICATED:\r\n            return Code.UNAUTHENTICATED;\r\n        case RpcCode.INVALID_ARGUMENT:\r\n            return Code.INVALID_ARGUMENT;\r\n        case RpcCode.NOT_FOUND:\r\n            return Code.NOT_FOUND;\r\n        case RpcCode.ALREADY_EXISTS:\r\n            return Code.ALREADY_EXISTS;\r\n        case RpcCode.PERMISSION_DENIED:\r\n            return Code.PERMISSION_DENIED;\r\n        case RpcCode.FAILED_PRECONDITION:\r\n            return Code.FAILED_PRECONDITION;\r\n        case RpcCode.ABORTED:\r\n            return Code.ABORTED;\r\n        case RpcCode.OUT_OF_RANGE:\r\n            return Code.OUT_OF_RANGE;\r\n        case RpcCode.UNIMPLEMENTED:\r\n            return Code.UNIMPLEMENTED;\r\n        case RpcCode.DATA_LOSS:\r\n            return Code.DATA_LOSS;\r\n        default:\r\n            return fail();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An error encountered while decoding base64 string.\r\n */\r\nclass Base64DecodeError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = 'Base64DecodeError';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Manages \"testing hooks\", hooks into the internals of the SDK to verify\r\n * internal state and events during integration tests. Do not use this class\r\n * except for testing purposes.\r\n *\r\n * There are two ways to retrieve the global singleton instance of this class:\r\n * 1. The `instance` property, which returns null if the global singleton\r\n *      instance has not been created. Use this property if the caller should\r\n *      \"do nothing\" if there are no testing hooks registered, such as when\r\n *      delivering an event to notify registered callbacks.\r\n * 2. The `getOrCreateInstance()` method, which creates the global singleton\r\n *      instance if it has not been created. Use this method if the instance is\r\n *      needed to, for example, register a callback.\r\n *\r\n * @internal\r\n */\r\nclass TestingHooks {\r\n    constructor() {\r\n        this.onExistenceFilterMismatchCallbacks = new Map();\r\n    }\r\n    /**\r\n     * Returns the singleton instance of this class, or null if it has not been\r\n     * initialized.\r\n     */\r\n    static get instance() {\r\n        return gTestingHooksSingletonInstance;\r\n    }\r\n    /**\r\n     * Returns the singleton instance of this class, creating it if is has never\r\n     * been created before.\r\n     */\r\n    static getOrCreateInstance() {\r\n        if (gTestingHooksSingletonInstance === null) {\r\n            gTestingHooksSingletonInstance = new TestingHooks();\r\n        }\r\n        return gTestingHooksSingletonInstance;\r\n    }\r\n    /**\r\n     * Registers a callback to be notified when an existence filter mismatch\r\n     * occurs in the Watch listen stream.\r\n     *\r\n     * The relative order in which callbacks are notified is unspecified; do not\r\n     * rely on any particular ordering. If a given callback is registered multiple\r\n     * times then it will be notified multiple times, once per registration.\r\n     *\r\n     * @param callback the callback to invoke upon existence filter mismatch.\r\n     *\r\n     * @return a function that, when called, unregisters the given callback; only\r\n     * the first invocation of the returned function does anything; all subsequent\r\n     * invocations do nothing.\r\n     */\r\n    onExistenceFilterMismatch(callback) {\r\n        const key = Symbol();\r\n        this.onExistenceFilterMismatchCallbacks.set(key, callback);\r\n        return () => this.onExistenceFilterMismatchCallbacks.delete(key);\r\n    }\r\n    /**\r\n     * Invokes all currently-registered `onExistenceFilterMismatch` callbacks.\r\n     * @param info Information about the existence filter mismatch.\r\n     */\r\n    notifyOnExistenceFilterMismatch(info) {\r\n        this.onExistenceFilterMismatchCallbacks.forEach(callback => callback(info));\r\n    }\r\n}\r\n/** The global singleton instance of `TestingHooks`. */\r\nlet gTestingHooksSingletonInstance = null;\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An instance of the Platform's 'TextEncoder' implementation.\r\n */\r\nfunction newTextEncoder() {\r\n    return new TextEncoder();\r\n}\r\n/**\r\n * An instance of the Platform's 'TextDecoder' implementation.\r\n */\r\nfunction newTextDecoder() {\r\n    return new TextDecoder('utf-8');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_64_BIT_UNSIGNED_INTEGER = new Integer([0xffffffff, 0xffffffff], 0);\r\n// Hash a string using md5 hashing algorithm.\r\nfunction getMd5HashValue(value) {\r\n    const encodedValue = newTextEncoder().encode(value);\r\n    const md5 = new Md5();\r\n    md5.update(encodedValue);\r\n    return new Uint8Array(md5.digest());\r\n}\r\n// Interpret the 16 bytes array as two 64-bit unsigned integers, encoded using\r\n// 2’s complement using little endian.\r\nfunction get64BitUints(Bytes) {\r\n    const dataView = new DataView(Bytes.buffer);\r\n    const chunk1 = dataView.getUint32(0, /* littleEndian= */ true);\r\n    const chunk2 = dataView.getUint32(4, /* littleEndian= */ true);\r\n    const chunk3 = dataView.getUint32(8, /* littleEndian= */ true);\r\n    const chunk4 = dataView.getUint32(12, /* littleEndian= */ true);\r\n    const integer1 = new Integer([chunk1, chunk2], 0);\r\n    const integer2 = new Integer([chunk3, chunk4], 0);\r\n    return [integer1, integer2];\r\n}\r\nclass BloomFilter {\r\n    constructor(bitmap, padding, hashCount) {\r\n        this.bitmap = bitmap;\r\n        this.padding = padding;\r\n        this.hashCount = hashCount;\r\n        if (padding < 0 || padding >= 8) {\r\n            throw new BloomFilterError(`Invalid padding: ${padding}`);\r\n        }\r\n        if (hashCount < 0) {\r\n            throw new BloomFilterError(`Invalid hash count: ${hashCount}`);\r\n        }\r\n        if (bitmap.length > 0 && this.hashCount === 0) {\r\n            // Only empty bloom filter can have 0 hash count.\r\n            throw new BloomFilterError(`Invalid hash count: ${hashCount}`);\r\n        }\r\n        if (bitmap.length === 0 && padding !== 0) {\r\n            // Empty bloom filter should have 0 padding.\r\n            throw new BloomFilterError(`Invalid padding when bitmap length is 0: ${padding}`);\r\n        }\r\n        this.bitCount = bitmap.length * 8 - padding;\r\n        // Set the bit count in Integer to avoid repetition in mightContain().\r\n        this.bitCountInInteger = Integer.fromNumber(this.bitCount);\r\n    }\r\n    // Calculate the ith hash value based on the hashed 64bit integers,\r\n    // and calculate its corresponding bit index in the bitmap to be checked.\r\n    getBitIndex(num1, num2, hashIndex) {\r\n        // Calculate hashed value h(i) = h1 + (i * h2).\r\n        let hashValue = num1.add(num2.multiply(Integer.fromNumber(hashIndex)));\r\n        // Wrap if hash value overflow 64bit.\r\n        if (hashValue.compare(MAX_64_BIT_UNSIGNED_INTEGER) === 1) {\r\n            hashValue = new Integer([hashValue.getBits(0), hashValue.getBits(1)], 0);\r\n        }\r\n        return hashValue.modulo(this.bitCountInInteger).toNumber();\r\n    }\r\n    // Return whether the bit on the given index in the bitmap is set to 1.\r\n    isBitSet(index) {\r\n        // To retrieve bit n, calculate: (bitmap[n / 8] & (0x01 << (n % 8))).\r\n        const byte = this.bitmap[Math.floor(index / 8)];\r\n        const offset = index % 8;\r\n        return (byte & (0x01 << offset)) !== 0;\r\n    }\r\n    mightContain(value) {\r\n        // Empty bitmap should always return false on membership check.\r\n        if (this.bitCount === 0) {\r\n            return false;\r\n        }\r\n        const md5HashedValue = getMd5HashValue(value);\r\n        const [hash1, hash2] = get64BitUints(md5HashedValue);\r\n        for (let i = 0; i < this.hashCount; i++) {\r\n            const index = this.getBitIndex(hash1, hash2, i);\r\n            if (!this.isBitSet(index)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /** Create bloom filter for testing purposes only. */\r\n    static create(bitCount, hashCount, contains) {\r\n        const padding = bitCount % 8 === 0 ? 0 : 8 - (bitCount % 8);\r\n        const bitmap = new Uint8Array(Math.ceil(bitCount / 8));\r\n        const bloomFilter = new BloomFilter(bitmap, padding, hashCount);\r\n        contains.forEach(item => bloomFilter.insert(item));\r\n        return bloomFilter;\r\n    }\r\n    insert(value) {\r\n        if (this.bitCount === 0) {\r\n            return;\r\n        }\r\n        const md5HashedValue = getMd5HashValue(value);\r\n        const [hash1, hash2] = get64BitUints(md5HashedValue);\r\n        for (let i = 0; i < this.hashCount; i++) {\r\n            const index = this.getBitIndex(hash1, hash2, i);\r\n            this.setBit(index);\r\n        }\r\n    }\r\n    setBit(index) {\r\n        const indexOfByte = Math.floor(index / 8);\r\n        const offset = index % 8;\r\n        this.bitmap[indexOfByte] |= 0x01 << offset;\r\n    }\r\n}\r\nclass BloomFilterError extends Error {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = 'BloomFilterError';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event from the RemoteStore. It is split into targetChanges (changes to the\r\n * state or the set of documents in our watched targets) and documentUpdates\r\n * (changes to the actual documents).\r\n */\r\nclass RemoteEvent {\r\n    constructor(\r\n    /**\r\n     * The snapshot version this event brings us up to, or MIN if not set.\r\n     */\r\n    snapshotVersion, \r\n    /**\r\n     * A map from target to changes to the target. See TargetChange.\r\n     */\r\n    targetChanges, \r\n    /**\r\n     * A map of targets that is known to be inconsistent, and the purpose for\r\n     * re-listening. Listens for these targets should be re-established without\r\n     * resume tokens.\r\n     */\r\n    targetMismatches, \r\n    /**\r\n     * A set of which documents have changed or been deleted, along with the\r\n     * doc's new values (if not deleted).\r\n     */\r\n    documentUpdates, \r\n    /**\r\n     * A set of which document updates are due only to limbo resolution targets.\r\n     */\r\n    resolvedLimboDocuments) {\r\n        this.snapshotVersion = snapshotVersion;\r\n        this.targetChanges = targetChanges;\r\n        this.targetMismatches = targetMismatches;\r\n        this.documentUpdates = documentUpdates;\r\n        this.resolvedLimboDocuments = resolvedLimboDocuments;\r\n    }\r\n    /**\r\n     * HACK: Views require RemoteEvents in order to determine whether the view is\r\n     * CURRENT, but secondary tabs don't receive remote events. So this method is\r\n     * used to create a synthesized RemoteEvent that can be used to apply a\r\n     * CURRENT status change to a View, for queries executed in a different tab.\r\n     */\r\n    // PORTING NOTE: Multi-tab only\r\n    static createSynthesizedRemoteEventForCurrentChange(targetId, current, resumeToken) {\r\n        const targetChanges = new Map();\r\n        targetChanges.set(targetId, TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current, resumeToken));\r\n        return new RemoteEvent(SnapshotVersion.min(), targetChanges, new SortedMap(primitiveComparator), mutableDocumentMap(), documentKeySet());\r\n    }\r\n}\r\n/**\r\n * A TargetChange specifies the set of changes for a specific target as part of\r\n * a RemoteEvent. These changes track which documents are added, modified or\r\n * removed, as well as the target's resume token and whether the target is\r\n * marked CURRENT.\r\n * The actual changes *to* documents are not part of the TargetChange since\r\n * documents may be part of multiple targets.\r\n */\r\nclass TargetChange {\r\n    constructor(\r\n    /**\r\n     * An opaque, server-assigned token that allows watching a query to be resumed\r\n     * after disconnecting without retransmitting all the data that matches the\r\n     * query. The resume token essentially identifies a point in time from which\r\n     * the server should resume sending results.\r\n     */\r\n    resumeToken, \r\n    /**\r\n     * The \"current\" (synced) status of this target. Note that \"current\"\r\n     * has special meaning in the RPC protocol that implies that a target is\r\n     * both up-to-date and consistent with the rest of the watch stream.\r\n     */\r\n    current, \r\n    /**\r\n     * The set of documents that were newly assigned to this target as part of\r\n     * this remote event.\r\n     */\r\n    addedDocuments, \r\n    /**\r\n     * The set of documents that were already assigned to this target but received\r\n     * an update during this remote event.\r\n     */\r\n    modifiedDocuments, \r\n    /**\r\n     * The set of documents that were removed from this target as part of this\r\n     * remote event.\r\n     */\r\n    removedDocuments) {\r\n        this.resumeToken = resumeToken;\r\n        this.current = current;\r\n        this.addedDocuments = addedDocuments;\r\n        this.modifiedDocuments = modifiedDocuments;\r\n        this.removedDocuments = removedDocuments;\r\n    }\r\n    /**\r\n     * This method is used to create a synthesized TargetChanges that can be used to\r\n     * apply a CURRENT status change to a View (for queries executed in a different\r\n     * tab) or for new queries (to raise snapshots with correct CURRENT status).\r\n     */\r\n    static createSynthesizedTargetChangeForCurrentChange(targetId, current, resumeToken) {\r\n        return new TargetChange(resumeToken, current, documentKeySet(), documentKeySet(), documentKeySet());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a changed document and a list of target ids to which this change\r\n * applies.\r\n *\r\n * If document has been deleted NoDocument will be provided.\r\n */\r\nclass DocumentWatchChange {\r\n    constructor(\r\n    /** The new document applies to all of these targets. */\r\n    updatedTargetIds, \r\n    /** The new document is removed from all of these targets. */\r\n    removedTargetIds, \r\n    /** The key of the document for this change. */\r\n    key, \r\n    /**\r\n     * The new document or NoDocument if it was deleted. Is null if the\r\n     * document went out of view without the server sending a new document.\r\n     */\r\n    newDoc) {\r\n        this.updatedTargetIds = updatedTargetIds;\r\n        this.removedTargetIds = removedTargetIds;\r\n        this.key = key;\r\n        this.newDoc = newDoc;\r\n    }\r\n}\r\nclass ExistenceFilterChange {\r\n    constructor(targetId, existenceFilter) {\r\n        this.targetId = targetId;\r\n        this.existenceFilter = existenceFilter;\r\n    }\r\n}\r\nclass WatchTargetChange {\r\n    constructor(\r\n    /** What kind of change occurred to the watch target. */\r\n    state, \r\n    /** The target IDs that were added/removed/set. */\r\n    targetIds, \r\n    /**\r\n     * An opaque, server-assigned token that allows watching a target to be\r\n     * resumed after disconnecting without retransmitting all the data that\r\n     * matches the target. The resume token essentially identifies a point in\r\n     * time from which the server should resume sending results.\r\n     */\r\n    resumeToken = ByteString.EMPTY_BYTE_STRING, \r\n    /** An RPC error indicating why the watch failed. */\r\n    cause = null) {\r\n        this.state = state;\r\n        this.targetIds = targetIds;\r\n        this.resumeToken = resumeToken;\r\n        this.cause = cause;\r\n    }\r\n}\r\n/** Tracks the internal state of a Watch target. */\r\nclass TargetState {\r\n    constructor() {\r\n        /**\r\n         * The number of pending responses (adds or removes) that we are waiting on.\r\n         * We only consider targets active that have no pending responses.\r\n         */\r\n        this.pendingResponses = 0;\r\n        /**\r\n         * Keeps track of the document changes since the last raised snapshot.\r\n         *\r\n         * These changes are continuously updated as we receive document updates and\r\n         * always reflect the current set of changes against the last issued snapshot.\r\n         */\r\n        this.documentChanges = snapshotChangesMap();\r\n        /** See public getters for explanations of these fields. */\r\n        this._resumeToken = ByteString.EMPTY_BYTE_STRING;\r\n        this._current = false;\r\n        /**\r\n         * Whether this target state should be included in the next snapshot. We\r\n         * initialize to true so that newly-added targets are included in the next\r\n         * RemoteEvent.\r\n         */\r\n        this._hasPendingChanges = true;\r\n    }\r\n    /**\r\n     * Whether this target has been marked 'current'.\r\n     *\r\n     * 'Current' has special meaning in the RPC protocol: It implies that the\r\n     * Watch backend has sent us all changes up to the point at which the target\r\n     * was added and that the target is consistent with the rest of the watch\r\n     * stream.\r\n     */\r\n    get current() {\r\n        return this._current;\r\n    }\r\n    /** The last resume token sent to us for this target. */\r\n    get resumeToken() {\r\n        return this._resumeToken;\r\n    }\r\n    /** Whether this target has pending target adds or target removes. */\r\n    get isPending() {\r\n        return this.pendingResponses !== 0;\r\n    }\r\n    /** Whether we have modified any state that should trigger a snapshot. */\r\n    get hasPendingChanges() {\r\n        return this._hasPendingChanges;\r\n    }\r\n    /**\r\n     * Applies the resume token to the TargetChange, but only when it has a new\r\n     * value. Empty resumeTokens are discarded.\r\n     */\r\n    updateResumeToken(resumeToken) {\r\n        if (resumeToken.approximateByteSize() > 0) {\r\n            this._hasPendingChanges = true;\r\n            this._resumeToken = resumeToken;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a target change from the current set of changes.\r\n     *\r\n     * To reset the document changes after raising this snapshot, call\r\n     * `clearPendingChanges()`.\r\n     */\r\n    toTargetChange() {\r\n        let addedDocuments = documentKeySet();\r\n        let modifiedDocuments = documentKeySet();\r\n        let removedDocuments = documentKeySet();\r\n        this.documentChanges.forEach((key, changeType) => {\r\n            switch (changeType) {\r\n                case 0 /* ChangeType.Added */:\r\n                    addedDocuments = addedDocuments.add(key);\r\n                    break;\r\n                case 2 /* ChangeType.Modified */:\r\n                    modifiedDocuments = modifiedDocuments.add(key);\r\n                    break;\r\n                case 1 /* ChangeType.Removed */:\r\n                    removedDocuments = removedDocuments.add(key);\r\n                    break;\r\n                default:\r\n                    fail();\r\n            }\r\n        });\r\n        return new TargetChange(this._resumeToken, this._current, addedDocuments, modifiedDocuments, removedDocuments);\r\n    }\r\n    /**\r\n     * Resets the document changes and sets `hasPendingChanges` to false.\r\n     */\r\n    clearPendingChanges() {\r\n        this._hasPendingChanges = false;\r\n        this.documentChanges = snapshotChangesMap();\r\n    }\r\n    addDocumentChange(key, changeType) {\r\n        this._hasPendingChanges = true;\r\n        this.documentChanges = this.documentChanges.insert(key, changeType);\r\n    }\r\n    removeDocumentChange(key) {\r\n        this._hasPendingChanges = true;\r\n        this.documentChanges = this.documentChanges.remove(key);\r\n    }\r\n    recordPendingTargetRequest() {\r\n        this.pendingResponses += 1;\r\n    }\r\n    recordTargetResponse() {\r\n        this.pendingResponses -= 1;\r\n    }\r\n    markCurrent() {\r\n        this._hasPendingChanges = true;\r\n        this._current = true;\r\n    }\r\n}\r\nconst LOG_TAG$g = 'WatchChangeAggregator';\r\n/**\r\n * A helper class to accumulate watch changes into a RemoteEvent.\r\n */\r\nclass WatchChangeAggregator {\r\n    constructor(metadataProvider) {\r\n        this.metadataProvider = metadataProvider;\r\n        /** The internal state of all tracked targets. */\r\n        this.targetStates = new Map();\r\n        /** Keeps track of the documents to update since the last raised snapshot. */\r\n        this.pendingDocumentUpdates = mutableDocumentMap();\r\n        /** A mapping of document keys to their set of target IDs. */\r\n        this.pendingDocumentTargetMapping = documentTargetMap();\r\n        /**\r\n         * A map of targets with existence filter mismatches. These targets are\r\n         * known to be inconsistent and their listens needs to be re-established by\r\n         * RemoteStore.\r\n         */\r\n        this.pendingTargetResets = new SortedMap(primitiveComparator);\r\n    }\r\n    /**\r\n     * Processes and adds the DocumentWatchChange to the current set of changes.\r\n     */\r\n    handleDocumentChange(docChange) {\r\n        for (const targetId of docChange.updatedTargetIds) {\r\n            if (docChange.newDoc && docChange.newDoc.isFoundDocument()) {\r\n                this.addDocumentToTarget(targetId, docChange.newDoc);\r\n            }\r\n            else {\r\n                this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\r\n            }\r\n        }\r\n        for (const targetId of docChange.removedTargetIds) {\r\n            this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\r\n        }\r\n    }\r\n    /** Processes and adds the WatchTargetChange to the current set of changes. */\r\n    handleTargetChange(targetChange) {\r\n        this.forEachTarget(targetChange, targetId => {\r\n            const targetState = this.ensureTargetState(targetId);\r\n            switch (targetChange.state) {\r\n                case 0 /* WatchTargetChangeState.NoChange */:\r\n                    if (this.isActiveTarget(targetId)) {\r\n                        targetState.updateResumeToken(targetChange.resumeToken);\r\n                    }\r\n                    break;\r\n                case 1 /* WatchTargetChangeState.Added */:\r\n                    // We need to decrement the number of pending acks needed from watch\r\n                    // for this targetId.\r\n                    targetState.recordTargetResponse();\r\n                    if (!targetState.isPending) {\r\n                        // We have a freshly added target, so we need to reset any state\r\n                        // that we had previously. This can happen e.g. when remove and add\r\n                        // back a target for existence filter mismatches.\r\n                        targetState.clearPendingChanges();\r\n                    }\r\n                    targetState.updateResumeToken(targetChange.resumeToken);\r\n                    break;\r\n                case 2 /* WatchTargetChangeState.Removed */:\r\n                    // We need to keep track of removed targets to we can post-filter and\r\n                    // remove any target changes.\r\n                    // We need to decrement the number of pending acks needed from watch\r\n                    // for this targetId.\r\n                    targetState.recordTargetResponse();\r\n                    if (!targetState.isPending) {\r\n                        this.removeTarget(targetId);\r\n                    }\r\n                    break;\r\n                case 3 /* WatchTargetChangeState.Current */:\r\n                    if (this.isActiveTarget(targetId)) {\r\n                        targetState.markCurrent();\r\n                        targetState.updateResumeToken(targetChange.resumeToken);\r\n                    }\r\n                    break;\r\n                case 4 /* WatchTargetChangeState.Reset */:\r\n                    if (this.isActiveTarget(targetId)) {\r\n                        // Reset the target and synthesizes removes for all existing\r\n                        // documents. The backend will re-add any documents that still\r\n                        // match the target before it sends the next global snapshot.\r\n                        this.resetTarget(targetId);\r\n                        targetState.updateResumeToken(targetChange.resumeToken);\r\n                    }\r\n                    break;\r\n                default:\r\n                    fail();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Iterates over all targetIds that the watch change applies to: either the\r\n     * targetIds explicitly listed in the change or the targetIds of all currently\r\n     * active targets.\r\n     */\r\n    forEachTarget(targetChange, fn) {\r\n        if (targetChange.targetIds.length > 0) {\r\n            targetChange.targetIds.forEach(fn);\r\n        }\r\n        else {\r\n            this.targetStates.forEach((_, targetId) => {\r\n                if (this.isActiveTarget(targetId)) {\r\n                    fn(targetId);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Handles existence filters and synthesizes deletes for filter mismatches.\r\n     * Targets that are invalidated by filter mismatches are added to\r\n     * `pendingTargetResets`.\r\n     */\r\n    handleExistenceFilter(watchChange) {\r\n        var _a;\r\n        const targetId = watchChange.targetId;\r\n        const expectedCount = watchChange.existenceFilter.count;\r\n        const targetData = this.targetDataForActiveTarget(targetId);\r\n        if (targetData) {\r\n            const target = targetData.target;\r\n            if (targetIsDocumentTarget(target)) {\r\n                if (expectedCount === 0) {\r\n                    // The existence filter told us the document does not exist. We deduce\r\n                    // that this document does not exist and apply a deleted document to\r\n                    // our updates. Without applying this deleted document there might be\r\n                    // another query that will raise this document as part of a snapshot\r\n                    // until it is resolved, essentially exposing inconsistency between\r\n                    // queries.\r\n                    const key = new DocumentKey(target.path);\r\n                    this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, SnapshotVersion.min()));\r\n                }\r\n                else {\r\n                    hardAssert(expectedCount === 1);\r\n                }\r\n            }\r\n            else {\r\n                const currentSize = this.getCurrentDocumentCountForTarget(targetId);\r\n                // Existence filter mismatch. Mark the documents as being in limbo, and\r\n                // raise a snapshot with `isFromCache:true`.\r\n                if (currentSize !== expectedCount) {\r\n                    // Apply bloom filter to identify and mark removed documents.\r\n                    const status = this.applyBloomFilter(watchChange, currentSize);\r\n                    if (status !== 0 /* BloomFilterApplicationStatus.Success */) {\r\n                        // If bloom filter application fails, we reset the mapping and\r\n                        // trigger re-run of the query.\r\n                        this.resetTarget(targetId);\r\n                        const purpose = status === 2 /* BloomFilterApplicationStatus.FalsePositive */\r\n                            ? \"TargetPurposeExistenceFilterMismatchBloom\" /* TargetPurpose.ExistenceFilterMismatchBloom */\r\n                            : \"TargetPurposeExistenceFilterMismatch\" /* TargetPurpose.ExistenceFilterMismatch */;\r\n                        this.pendingTargetResets = this.pendingTargetResets.insert(targetId, purpose);\r\n                    }\r\n                    (_a = TestingHooks.instance) === null || _a === void 0 ? void 0 : _a.notifyOnExistenceFilterMismatch(createExistenceFilterMismatchInfoForTestingHooks(status, currentSize, watchChange.existenceFilter));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Apply bloom filter to remove the deleted documents, and return the\r\n     * application status.\r\n     */\r\n    applyBloomFilter(watchChange, currentCount) {\r\n        const { unchangedNames, count: expectedCount } = watchChange.existenceFilter;\r\n        if (!unchangedNames || !unchangedNames.bits) {\r\n            return 1 /* BloomFilterApplicationStatus.Skipped */;\r\n        }\r\n        const { bits: { bitmap = '', padding = 0 }, hashCount = 0 } = unchangedNames;\r\n        let normalizedBitmap;\r\n        try {\r\n            normalizedBitmap = normalizeByteString(bitmap).toUint8Array();\r\n        }\r\n        catch (err) {\r\n            if (err instanceof Base64DecodeError) {\r\n                logWarn('Decoding the base64 bloom filter in existence filter failed (' +\r\n                    err.message +\r\n                    '); ignoring the bloom filter and falling back to full re-query.');\r\n                return 1 /* BloomFilterApplicationStatus.Skipped */;\r\n            }\r\n            else {\r\n                throw err;\r\n            }\r\n        }\r\n        let bloomFilter;\r\n        try {\r\n            // BloomFilter throws error if the inputs are invalid.\r\n            bloomFilter = new BloomFilter(normalizedBitmap, padding, hashCount);\r\n        }\r\n        catch (err) {\r\n            if (err instanceof BloomFilterError) {\r\n                logWarn('BloomFilter error: ', err);\r\n            }\r\n            else {\r\n                logWarn('Applying bloom filter failed: ', err);\r\n            }\r\n            return 1 /* BloomFilterApplicationStatus.Skipped */;\r\n        }\r\n        if (bloomFilter.bitCount === 0) {\r\n            return 1 /* BloomFilterApplicationStatus.Skipped */;\r\n        }\r\n        const removedDocumentCount = this.filterRemovedDocuments(watchChange.targetId, bloomFilter);\r\n        if (expectedCount !== currentCount - removedDocumentCount) {\r\n            return 2 /* BloomFilterApplicationStatus.FalsePositive */;\r\n        }\r\n        return 0 /* BloomFilterApplicationStatus.Success */;\r\n    }\r\n    /**\r\n     * Filter out removed documents based on bloom filter membership result and\r\n     * return number of documents removed.\r\n     */\r\n    filterRemovedDocuments(targetId, bloomFilter) {\r\n        const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\r\n        let removalCount = 0;\r\n        existingKeys.forEach(key => {\r\n            const databaseId = this.metadataProvider.getDatabaseId();\r\n            const documentPath = `projects/${databaseId.projectId}/databases/${databaseId.database}/documents/${key.path.canonicalString()}`;\r\n            if (!bloomFilter.mightContain(documentPath)) {\r\n                this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/ null);\r\n                removalCount++;\r\n            }\r\n        });\r\n        return removalCount;\r\n    }\r\n    /**\r\n     * Converts the currently accumulated state into a remote event at the\r\n     * provided snapshot version. Resets the accumulated changes before returning.\r\n     */\r\n    createRemoteEvent(snapshotVersion) {\r\n        const targetChanges = new Map();\r\n        this.targetStates.forEach((targetState, targetId) => {\r\n            const targetData = this.targetDataForActiveTarget(targetId);\r\n            if (targetData) {\r\n                if (targetState.current && targetIsDocumentTarget(targetData.target)) {\r\n                    // Document queries for document that don't exist can produce an empty\r\n                    // result set. To update our local cache, we synthesize a document\r\n                    // delete if we have not previously received the document. This\r\n                    // resolves the limbo state of the document, removing it from\r\n                    // limboDocumentRefs.\r\n                    //\r\n                    // TODO(dimond): Ideally we would have an explicit lookup target\r\n                    // instead resulting in an explicit delete message and we could\r\n                    // remove this special logic.\r\n                    const key = new DocumentKey(targetData.target.path);\r\n                    if (this.pendingDocumentUpdates.get(key) === null &&\r\n                        !this.targetContainsDocument(targetId, key)) {\r\n                        this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, snapshotVersion));\r\n                    }\r\n                }\r\n                if (targetState.hasPendingChanges) {\r\n                    targetChanges.set(targetId, targetState.toTargetChange());\r\n                    targetState.clearPendingChanges();\r\n                }\r\n            }\r\n        });\r\n        let resolvedLimboDocuments = documentKeySet();\r\n        // We extract the set of limbo-only document updates as the GC logic\r\n        // special-cases documents that do not appear in the target cache.\r\n        //\r\n        // TODO(gsoltis): Expand on this comment once GC is available in the JS\r\n        // client.\r\n        this.pendingDocumentTargetMapping.forEach((key, targets) => {\r\n            let isOnlyLimboTarget = true;\r\n            targets.forEachWhile(targetId => {\r\n                const targetData = this.targetDataForActiveTarget(targetId);\r\n                if (targetData &&\r\n                    targetData.purpose !== \"TargetPurposeLimboResolution\" /* TargetPurpose.LimboResolution */) {\r\n                    isOnlyLimboTarget = false;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            if (isOnlyLimboTarget) {\r\n                resolvedLimboDocuments = resolvedLimboDocuments.add(key);\r\n            }\r\n        });\r\n        this.pendingDocumentUpdates.forEach((_, doc) => doc.setReadTime(snapshotVersion));\r\n        const remoteEvent = new RemoteEvent(snapshotVersion, targetChanges, this.pendingTargetResets, this.pendingDocumentUpdates, resolvedLimboDocuments);\r\n        this.pendingDocumentUpdates = mutableDocumentMap();\r\n        this.pendingDocumentTargetMapping = documentTargetMap();\r\n        this.pendingTargetResets = new SortedMap(primitiveComparator);\r\n        return remoteEvent;\r\n    }\r\n    /**\r\n     * Adds the provided document to the internal list of document updates and\r\n     * its document key to the given target's mapping.\r\n     */\r\n    // Visible for testing.\r\n    addDocumentToTarget(targetId, document) {\r\n        if (!this.isActiveTarget(targetId)) {\r\n            return;\r\n        }\r\n        const changeType = this.targetContainsDocument(targetId, document.key)\r\n            ? 2 /* ChangeType.Modified */\r\n            : 0 /* ChangeType.Added */;\r\n        const targetState = this.ensureTargetState(targetId);\r\n        targetState.addDocumentChange(document.key, changeType);\r\n        this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(document.key, document);\r\n        this.pendingDocumentTargetMapping =\r\n            this.pendingDocumentTargetMapping.insert(document.key, this.ensureDocumentTargetMapping(document.key).add(targetId));\r\n    }\r\n    /**\r\n     * Removes the provided document from the target mapping. If the\r\n     * document no longer matches the target, but the document's state is still\r\n     * known (e.g. we know that the document was deleted or we received the change\r\n     * that caused the filter mismatch), the new document can be provided\r\n     * to update the remote document cache.\r\n     */\r\n    // Visible for testing.\r\n    removeDocumentFromTarget(targetId, key, updatedDocument) {\r\n        if (!this.isActiveTarget(targetId)) {\r\n            return;\r\n        }\r\n        const targetState = this.ensureTargetState(targetId);\r\n        if (this.targetContainsDocument(targetId, key)) {\r\n            targetState.addDocumentChange(key, 1 /* ChangeType.Removed */);\r\n        }\r\n        else {\r\n            // The document may have entered and left the target before we raised a\r\n            // snapshot, so we can just ignore the change.\r\n            targetState.removeDocumentChange(key);\r\n        }\r\n        this.pendingDocumentTargetMapping =\r\n            this.pendingDocumentTargetMapping.insert(key, this.ensureDocumentTargetMapping(key).delete(targetId));\r\n        if (updatedDocument) {\r\n            this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(key, updatedDocument);\r\n        }\r\n    }\r\n    removeTarget(targetId) {\r\n        this.targetStates.delete(targetId);\r\n    }\r\n    /**\r\n     * Returns the current count of documents in the target. This includes both\r\n     * the number of documents that the LocalStore considers to be part of the\r\n     * target as well as any accumulated changes.\r\n     */\r\n    getCurrentDocumentCountForTarget(targetId) {\r\n        const targetState = this.ensureTargetState(targetId);\r\n        const targetChange = targetState.toTargetChange();\r\n        return (this.metadataProvider.getRemoteKeysForTarget(targetId).size +\r\n            targetChange.addedDocuments.size -\r\n            targetChange.removedDocuments.size);\r\n    }\r\n    /**\r\n     * Increment the number of acks needed from watch before we can consider the\r\n     * server to be 'in-sync' with the client's active targets.\r\n     */\r\n    recordPendingTargetRequest(targetId) {\r\n        // For each request we get we need to record we need a response for it.\r\n        const targetState = this.ensureTargetState(targetId);\r\n        targetState.recordPendingTargetRequest();\r\n    }\r\n    ensureTargetState(targetId) {\r\n        let result = this.targetStates.get(targetId);\r\n        if (!result) {\r\n            result = new TargetState();\r\n            this.targetStates.set(targetId, result);\r\n        }\r\n        return result;\r\n    }\r\n    ensureDocumentTargetMapping(key) {\r\n        let targetMapping = this.pendingDocumentTargetMapping.get(key);\r\n        if (!targetMapping) {\r\n            targetMapping = new SortedSet(primitiveComparator);\r\n            this.pendingDocumentTargetMapping =\r\n                this.pendingDocumentTargetMapping.insert(key, targetMapping);\r\n        }\r\n        return targetMapping;\r\n    }\r\n    /**\r\n     * Verifies that the user is still interested in this target (by calling\r\n     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs\r\n     * from watch.\r\n     */\r\n    isActiveTarget(targetId) {\r\n        const targetActive = this.targetDataForActiveTarget(targetId) !== null;\r\n        if (!targetActive) {\r\n            logDebug(LOG_TAG$g, 'Detected inactive target', targetId);\r\n        }\r\n        return targetActive;\r\n    }\r\n    /**\r\n     * Returns the TargetData for an active target (i.e. a target that the user\r\n     * is still interested in that has no outstanding target change requests).\r\n     */\r\n    targetDataForActiveTarget(targetId) {\r\n        const targetState = this.targetStates.get(targetId);\r\n        return targetState && targetState.isPending\r\n            ? null\r\n            : this.metadataProvider.getTargetDataForTarget(targetId);\r\n    }\r\n    /**\r\n     * Resets the state of a Watch target to its initial state (e.g. sets\r\n     * 'current' to false, clears the resume token and removes its target mapping\r\n     * from all documents).\r\n     */\r\n    resetTarget(targetId) {\r\n        this.targetStates.set(targetId, new TargetState());\r\n        // Trigger removal for any documents currently mapped to this target.\r\n        // These removals will be part of the initial snapshot if Watch does not\r\n        // resend these documents.\r\n        const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\r\n        existingKeys.forEach(key => {\r\n            this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/ null);\r\n        });\r\n    }\r\n    /**\r\n     * Returns whether the LocalStore considers the document to be part of the\r\n     * specified target.\r\n     */\r\n    targetContainsDocument(targetId, key) {\r\n        const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\r\n        return existingKeys.has(key);\r\n    }\r\n}\r\nfunction documentTargetMap() {\r\n    return new SortedMap(DocumentKey.comparator);\r\n}\r\nfunction snapshotChangesMap() {\r\n    return new SortedMap(DocumentKey.comparator);\r\n}\r\nfunction createExistenceFilterMismatchInfoForTestingHooks(status, localCacheCount, existenceFilter) {\r\n    var _a, _b, _c, _d, _e, _f;\r\n    const result = {\r\n        localCacheCount,\r\n        existenceFilterCount: existenceFilter.count\r\n    };\r\n    const unchangedNames = existenceFilter.unchangedNames;\r\n    if (unchangedNames) {\r\n        result.bloomFilter = {\r\n            applied: status === 0 /* BloomFilterApplicationStatus.Success */,\r\n            hashCount: (_a = unchangedNames === null || unchangedNames === void 0 ? void 0 : unchangedNames.hashCount) !== null && _a !== void 0 ? _a : 0,\r\n            bitmapLength: (_d = (_c = (_b = unchangedNames === null || unchangedNames === void 0 ? void 0 : unchangedNames.bits) === null || _b === void 0 ? void 0 : _b.bitmap) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0,\r\n            padding: (_f = (_e = unchangedNames === null || unchangedNames === void 0 ? void 0 : unchangedNames.bits) === null || _e === void 0 ? void 0 : _e.padding) !== null && _f !== void 0 ? _f : 0\r\n        };\r\n    }\r\n    return result;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DIRECTIONS = (() => {\r\n    const dirs = {};\r\n    dirs[\"asc\" /* Direction.ASCENDING */] = 'ASCENDING';\r\n    dirs[\"desc\" /* Direction.DESCENDING */] = 'DESCENDING';\r\n    return dirs;\r\n})();\r\nconst OPERATORS = (() => {\r\n    const ops = {};\r\n    ops[\"<\" /* Operator.LESS_THAN */] = 'LESS_THAN';\r\n    ops[\"<=\" /* Operator.LESS_THAN_OR_EQUAL */] = 'LESS_THAN_OR_EQUAL';\r\n    ops[\">\" /* Operator.GREATER_THAN */] = 'GREATER_THAN';\r\n    ops[\">=\" /* Operator.GREATER_THAN_OR_EQUAL */] = 'GREATER_THAN_OR_EQUAL';\r\n    ops[\"==\" /* Operator.EQUAL */] = 'EQUAL';\r\n    ops[\"!=\" /* Operator.NOT_EQUAL */] = 'NOT_EQUAL';\r\n    ops[\"array-contains\" /* Operator.ARRAY_CONTAINS */] = 'ARRAY_CONTAINS';\r\n    ops[\"in\" /* Operator.IN */] = 'IN';\r\n    ops[\"not-in\" /* Operator.NOT_IN */] = 'NOT_IN';\r\n    ops[\"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */] = 'ARRAY_CONTAINS_ANY';\r\n    return ops;\r\n})();\r\nconst COMPOSITE_OPERATORS = (() => {\r\n    const ops = {};\r\n    ops[\"and\" /* CompositeOperator.AND */] = 'AND';\r\n    ops[\"or\" /* CompositeOperator.OR */] = 'OR';\r\n    return ops;\r\n})();\r\nfunction assertPresent(value, description) {\r\n}\r\n/**\r\n * This class generates JsonObject values for the Datastore API suitable for\r\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\r\n *\r\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\r\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\r\n * format.\r\n *\r\n * For a description of the Proto3 JSON format check\r\n * https://developers.google.com/protocol-buffers/docs/proto3#json\r\n *\r\n * TODO(klimt): We can remove the databaseId argument if we keep the full\r\n * resource name in documents.\r\n */\r\nclass JsonProtoSerializer {\r\n    constructor(databaseId, useProto3Json) {\r\n        this.databaseId = databaseId;\r\n        this.useProto3Json = useProto3Json;\r\n    }\r\n}\r\nfunction fromRpcStatus(status) {\r\n    const code = status.code === undefined ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);\r\n    return new FirestoreError(code, status.message || '');\r\n}\r\n/**\r\n * Returns a value for a number (or null) that's appropriate to put into\r\n * a google.protobuf.Int32Value proto.\r\n * DO NOT USE THIS FOR ANYTHING ELSE.\r\n * This method cheats. It's typed as returning \"number\" because that's what\r\n * our generated proto interfaces say Int32Value must be. But GRPC actually\r\n * expects a { value: <number> } struct.\r\n */\r\nfunction toInt32Proto(serializer, val) {\r\n    if (serializer.useProto3Json || isNullOrUndefined(val)) {\r\n        return val;\r\n    }\r\n    else {\r\n        return { value: val };\r\n    }\r\n}\r\n/**\r\n * Returns a number (or null) from a google.protobuf.Int32Value proto.\r\n */\r\nfunction fromInt32Proto(val) {\r\n    let result;\r\n    if (typeof val === 'object') {\r\n        result = val.value;\r\n    }\r\n    else {\r\n        result = val;\r\n    }\r\n    return isNullOrUndefined(result) ? null : result;\r\n}\r\n/**\r\n * Returns a value for a Date that's appropriate to put into a proto.\r\n */\r\nfunction toTimestamp(serializer, timestamp) {\r\n    if (serializer.useProto3Json) {\r\n        // Serialize to ISO-8601 date format, but with full nano resolution.\r\n        // Since JS Date has only millis, let's only use it for the seconds and\r\n        // then manually add the fractions to the end.\r\n        const jsDateStr = new Date(timestamp.seconds * 1000).toISOString();\r\n        // Remove .xxx frac part and Z in the end.\r\n        const strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', '');\r\n        // Pad the fraction out to 9 digits (nanos).\r\n        const nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\r\n        return `${strUntilSeconds}.${nanoStr}Z`;\r\n    }\r\n    else {\r\n        return {\r\n            seconds: '' + timestamp.seconds,\r\n            nanos: timestamp.nanoseconds\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        };\r\n    }\r\n}\r\nfunction fromTimestamp(date) {\r\n    const timestamp = normalizeTimestamp(date);\r\n    return new Timestamp(timestamp.seconds, timestamp.nanos);\r\n}\r\n/**\r\n * Returns a value for bytes that's appropriate to put in a proto.\r\n *\r\n * Visible for testing.\r\n */\r\nfunction toBytes(serializer, bytes) {\r\n    if (serializer.useProto3Json) {\r\n        return bytes.toBase64();\r\n    }\r\n    else {\r\n        return bytes.toUint8Array();\r\n    }\r\n}\r\n/**\r\n * Returns a ByteString based on the proto string value.\r\n */\r\nfunction fromBytes(serializer, value) {\r\n    if (serializer.useProto3Json) {\r\n        hardAssert(value === undefined || typeof value === 'string');\r\n        return ByteString.fromBase64String(value ? value : '');\r\n    }\r\n    else {\r\n        hardAssert(value === undefined || value instanceof Uint8Array);\r\n        return ByteString.fromUint8Array(value ? value : new Uint8Array());\r\n    }\r\n}\r\nfunction toVersion(serializer, version) {\r\n    return toTimestamp(serializer, version.toTimestamp());\r\n}\r\nfunction fromVersion(version) {\r\n    hardAssert(!!version);\r\n    return SnapshotVersion.fromTimestamp(fromTimestamp(version));\r\n}\r\nfunction toResourceName(databaseId, path) {\r\n    return fullyQualifiedPrefixPath(databaseId)\r\n        .child('documents')\r\n        .child(path)\r\n        .canonicalString();\r\n}\r\nfunction fromResourceName(name) {\r\n    const resource = ResourcePath.fromString(name);\r\n    hardAssert(isValidResourceName(resource));\r\n    return resource;\r\n}\r\nfunction toName(serializer, key) {\r\n    return toResourceName(serializer.databaseId, key.path);\r\n}\r\nfunction fromName(serializer, name) {\r\n    const resource = fromResourceName(name);\r\n    if (resource.get(1) !== serializer.databaseId.projectId) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Tried to deserialize key from different project: ' +\r\n            resource.get(1) +\r\n            ' vs ' +\r\n            serializer.databaseId.projectId);\r\n    }\r\n    if (resource.get(3) !== serializer.databaseId.database) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Tried to deserialize key from different database: ' +\r\n            resource.get(3) +\r\n            ' vs ' +\r\n            serializer.databaseId.database);\r\n    }\r\n    return new DocumentKey(extractLocalPathFromResourceName(resource));\r\n}\r\nfunction toQueryPath(serializer, path) {\r\n    return toResourceName(serializer.databaseId, path);\r\n}\r\nfunction fromQueryPath(name) {\r\n    const resourceName = fromResourceName(name);\r\n    // In v1beta1 queries for collections at the root did not have a trailing\r\n    // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\r\n    // ability to read the v1beta1 form for compatibility with queries persisted\r\n    // in the local target cache.\r\n    if (resourceName.length === 4) {\r\n        return ResourcePath.emptyPath();\r\n    }\r\n    return extractLocalPathFromResourceName(resourceName);\r\n}\r\nfunction getEncodedDatabaseId(serializer) {\r\n    const path = new ResourcePath([\r\n        'projects',\r\n        serializer.databaseId.projectId,\r\n        'databases',\r\n        serializer.databaseId.database\r\n    ]);\r\n    return path.canonicalString();\r\n}\r\nfunction fullyQualifiedPrefixPath(databaseId) {\r\n    return new ResourcePath([\r\n        'projects',\r\n        databaseId.projectId,\r\n        'databases',\r\n        databaseId.database\r\n    ]);\r\n}\r\nfunction extractLocalPathFromResourceName(resourceName) {\r\n    hardAssert(resourceName.length > 4 && resourceName.get(4) === 'documents');\r\n    return resourceName.popFirst(5);\r\n}\r\n/** Creates a Document proto from key and fields (but no create/update time) */\r\nfunction toMutationDocument(serializer, key, fields) {\r\n    return {\r\n        name: toName(serializer, key),\r\n        fields: fields.value.mapValue.fields\r\n    };\r\n}\r\nfunction toDocument(serializer, document) {\r\n    return {\r\n        name: toName(serializer, document.key),\r\n        fields: document.data.value.mapValue.fields,\r\n        updateTime: toTimestamp(serializer, document.version.toTimestamp()),\r\n        createTime: toTimestamp(serializer, document.createTime.toTimestamp())\r\n    };\r\n}\r\nfunction fromDocument(serializer, document, hasCommittedMutations) {\r\n    const key = fromName(serializer, document.name);\r\n    const version = fromVersion(document.updateTime);\r\n    // If we read a document from persistence that is missing createTime, it's due\r\n    // to older SDK versions not storing this information. In such cases, we'll\r\n    // set the createTime to zero. This can be removed in the long term.\r\n    const createTime = document.createTime\r\n        ? fromVersion(document.createTime)\r\n        : SnapshotVersion.min();\r\n    const data = new ObjectValue({ mapValue: { fields: document.fields } });\r\n    const result = MutableDocument.newFoundDocument(key, version, createTime, data);\r\n    if (hasCommittedMutations) {\r\n        result.setHasCommittedMutations();\r\n    }\r\n    return hasCommittedMutations ? result.setHasCommittedMutations() : result;\r\n}\r\nfunction fromFound(serializer, doc) {\r\n    hardAssert(!!doc.found);\r\n    assertPresent(doc.found.name);\r\n    assertPresent(doc.found.updateTime);\r\n    const key = fromName(serializer, doc.found.name);\r\n    const version = fromVersion(doc.found.updateTime);\r\n    const createTime = doc.found.createTime\r\n        ? fromVersion(doc.found.createTime)\r\n        : SnapshotVersion.min();\r\n    const data = new ObjectValue({ mapValue: { fields: doc.found.fields } });\r\n    return MutableDocument.newFoundDocument(key, version, createTime, data);\r\n}\r\nfunction fromMissing(serializer, result) {\r\n    hardAssert(!!result.missing);\r\n    hardAssert(!!result.readTime);\r\n    const key = fromName(serializer, result.missing);\r\n    const version = fromVersion(result.readTime);\r\n    return MutableDocument.newNoDocument(key, version);\r\n}\r\nfunction fromBatchGetDocumentsResponse(serializer, result) {\r\n    if ('found' in result) {\r\n        return fromFound(serializer, result);\r\n    }\r\n    else if ('missing' in result) {\r\n        return fromMissing(serializer, result);\r\n    }\r\n    return fail();\r\n}\r\nfunction fromWatchChange(serializer, change) {\r\n    let watchChange;\r\n    if ('targetChange' in change) {\r\n        assertPresent(change.targetChange);\r\n        // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\r\n        // if unset\r\n        const state = fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\r\n        const targetIds = change.targetChange.targetIds || [];\r\n        const resumeToken = fromBytes(serializer, change.targetChange.resumeToken);\r\n        const causeProto = change.targetChange.cause;\r\n        const cause = causeProto && fromRpcStatus(causeProto);\r\n        watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);\r\n    }\r\n    else if ('documentChange' in change) {\r\n        assertPresent(change.documentChange);\r\n        const entityChange = change.documentChange;\r\n        assertPresent(entityChange.document);\r\n        assertPresent(entityChange.document.name);\r\n        assertPresent(entityChange.document.updateTime);\r\n        const key = fromName(serializer, entityChange.document.name);\r\n        const version = fromVersion(entityChange.document.updateTime);\r\n        const createTime = entityChange.document.createTime\r\n            ? fromVersion(entityChange.document.createTime)\r\n            : SnapshotVersion.min();\r\n        const data = new ObjectValue({\r\n            mapValue: { fields: entityChange.document.fields }\r\n        });\r\n        const doc = MutableDocument.newFoundDocument(key, version, createTime, data);\r\n        const updatedTargetIds = entityChange.targetIds || [];\r\n        const removedTargetIds = entityChange.removedTargetIds || [];\r\n        watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);\r\n    }\r\n    else if ('documentDelete' in change) {\r\n        assertPresent(change.documentDelete);\r\n        const docDelete = change.documentDelete;\r\n        assertPresent(docDelete.document);\r\n        const key = fromName(serializer, docDelete.document);\r\n        const version = docDelete.readTime\r\n            ? fromVersion(docDelete.readTime)\r\n            : SnapshotVersion.min();\r\n        const doc = MutableDocument.newNoDocument(key, version);\r\n        const removedTargetIds = docDelete.removedTargetIds || [];\r\n        watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\r\n    }\r\n    else if ('documentRemove' in change) {\r\n        assertPresent(change.documentRemove);\r\n        const docRemove = change.documentRemove;\r\n        assertPresent(docRemove.document);\r\n        const key = fromName(serializer, docRemove.document);\r\n        const removedTargetIds = docRemove.removedTargetIds || [];\r\n        watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\r\n    }\r\n    else if ('filter' in change) {\r\n        // TODO(dimond): implement existence filter parsing with strategy.\r\n        assertPresent(change.filter);\r\n        const filter = change.filter;\r\n        assertPresent(filter.targetId);\r\n        const { count = 0, unchangedNames } = filter;\r\n        const existenceFilter = new ExistenceFilter(count, unchangedNames);\r\n        const targetId = filter.targetId;\r\n        watchChange = new ExistenceFilterChange(targetId, existenceFilter);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n    return watchChange;\r\n}\r\nfunction fromWatchTargetChangeState(state) {\r\n    if (state === 'NO_CHANGE') {\r\n        return 0 /* WatchTargetChangeState.NoChange */;\r\n    }\r\n    else if (state === 'ADD') {\r\n        return 1 /* WatchTargetChangeState.Added */;\r\n    }\r\n    else if (state === 'REMOVE') {\r\n        return 2 /* WatchTargetChangeState.Removed */;\r\n    }\r\n    else if (state === 'CURRENT') {\r\n        return 3 /* WatchTargetChangeState.Current */;\r\n    }\r\n    else if (state === 'RESET') {\r\n        return 4 /* WatchTargetChangeState.Reset */;\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction versionFromListenResponse(change) {\r\n    // We have only reached a consistent snapshot for the entire stream if there\r\n    // is a read_time set and it applies to all targets (i.e. the list of\r\n    // targets is empty). The backend is guaranteed to send such responses.\r\n    if (!('targetChange' in change)) {\r\n        return SnapshotVersion.min();\r\n    }\r\n    const targetChange = change.targetChange;\r\n    if (targetChange.targetIds && targetChange.targetIds.length) {\r\n        return SnapshotVersion.min();\r\n    }\r\n    if (!targetChange.readTime) {\r\n        return SnapshotVersion.min();\r\n    }\r\n    return fromVersion(targetChange.readTime);\r\n}\r\nfunction toMutation(serializer, mutation) {\r\n    let result;\r\n    if (mutation instanceof SetMutation) {\r\n        result = {\r\n            update: toMutationDocument(serializer, mutation.key, mutation.value)\r\n        };\r\n    }\r\n    else if (mutation instanceof DeleteMutation) {\r\n        result = { delete: toName(serializer, mutation.key) };\r\n    }\r\n    else if (mutation instanceof PatchMutation) {\r\n        result = {\r\n            update: toMutationDocument(serializer, mutation.key, mutation.data),\r\n            updateMask: toDocumentMask(mutation.fieldMask)\r\n        };\r\n    }\r\n    else if (mutation instanceof VerifyMutation) {\r\n        result = {\r\n            verify: toName(serializer, mutation.key)\r\n        };\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n    if (mutation.fieldTransforms.length > 0) {\r\n        result.updateTransforms = mutation.fieldTransforms.map(transform => toFieldTransform(serializer, transform));\r\n    }\r\n    if (!mutation.precondition.isNone) {\r\n        result.currentDocument = toPrecondition(serializer, mutation.precondition);\r\n    }\r\n    return result;\r\n}\r\nfunction fromMutation(serializer, proto) {\r\n    const precondition = proto.currentDocument\r\n        ? fromPrecondition(proto.currentDocument)\r\n        : Precondition.none();\r\n    const fieldTransforms = proto.updateTransforms\r\n        ? proto.updateTransforms.map(transform => fromFieldTransform(serializer, transform))\r\n        : [];\r\n    if (proto.update) {\r\n        assertPresent(proto.update.name);\r\n        const key = fromName(serializer, proto.update.name);\r\n        const value = new ObjectValue({\r\n            mapValue: { fields: proto.update.fields }\r\n        });\r\n        if (proto.updateMask) {\r\n            const fieldMask = fromDocumentMask(proto.updateMask);\r\n            return new PatchMutation(key, value, fieldMask, precondition, fieldTransforms);\r\n        }\r\n        else {\r\n            return new SetMutation(key, value, precondition, fieldTransforms);\r\n        }\r\n    }\r\n    else if (proto.delete) {\r\n        const key = fromName(serializer, proto.delete);\r\n        return new DeleteMutation(key, precondition);\r\n    }\r\n    else if (proto.verify) {\r\n        const key = fromName(serializer, proto.verify);\r\n        return new VerifyMutation(key, precondition);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction toPrecondition(serializer, precondition) {\r\n    if (precondition.updateTime !== undefined) {\r\n        return {\r\n            updateTime: toVersion(serializer, precondition.updateTime)\r\n        };\r\n    }\r\n    else if (precondition.exists !== undefined) {\r\n        return { exists: precondition.exists };\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction fromPrecondition(precondition) {\r\n    if (precondition.updateTime !== undefined) {\r\n        return Precondition.updateTime(fromVersion(precondition.updateTime));\r\n    }\r\n    else if (precondition.exists !== undefined) {\r\n        return Precondition.exists(precondition.exists);\r\n    }\r\n    else {\r\n        return Precondition.none();\r\n    }\r\n}\r\nfunction fromWriteResult(proto, commitTime) {\r\n    // NOTE: Deletes don't have an updateTime.\r\n    let version = proto.updateTime\r\n        ? fromVersion(proto.updateTime)\r\n        : fromVersion(commitTime);\r\n    if (version.isEqual(SnapshotVersion.min())) {\r\n        // The Firestore Emulator currently returns an update time of 0 for\r\n        // deletes of non-existing documents (rather than null). This breaks the\r\n        // test \"get deleted doc while offline with source=cache\" as NoDocuments\r\n        // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\r\n        // TODO(#2149): Remove this when Emulator is fixed\r\n        version = fromVersion(commitTime);\r\n    }\r\n    return new MutationResult(version, proto.transformResults || []);\r\n}\r\nfunction fromWriteResults(protos, commitTime) {\r\n    if (protos && protos.length > 0) {\r\n        hardAssert(commitTime !== undefined);\r\n        return protos.map(proto => fromWriteResult(proto, commitTime));\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction toFieldTransform(serializer, fieldTransform) {\r\n    const transform = fieldTransform.transform;\r\n    if (transform instanceof ServerTimestampTransform) {\r\n        return {\r\n            fieldPath: fieldTransform.field.canonicalString(),\r\n            setToServerValue: 'REQUEST_TIME'\r\n        };\r\n    }\r\n    else if (transform instanceof ArrayUnionTransformOperation) {\r\n        return {\r\n            fieldPath: fieldTransform.field.canonicalString(),\r\n            appendMissingElements: {\r\n                values: transform.elements\r\n            }\r\n        };\r\n    }\r\n    else if (transform instanceof ArrayRemoveTransformOperation) {\r\n        return {\r\n            fieldPath: fieldTransform.field.canonicalString(),\r\n            removeAllFromArray: {\r\n                values: transform.elements\r\n            }\r\n        };\r\n    }\r\n    else if (transform instanceof NumericIncrementTransformOperation) {\r\n        return {\r\n            fieldPath: fieldTransform.field.canonicalString(),\r\n            increment: transform.operand\r\n        };\r\n    }\r\n    else {\r\n        throw fail();\r\n    }\r\n}\r\nfunction fromFieldTransform(serializer, proto) {\r\n    let transform = null;\r\n    if ('setToServerValue' in proto) {\r\n        hardAssert(proto.setToServerValue === 'REQUEST_TIME');\r\n        transform = new ServerTimestampTransform();\r\n    }\r\n    else if ('appendMissingElements' in proto) {\r\n        const values = proto.appendMissingElements.values || [];\r\n        transform = new ArrayUnionTransformOperation(values);\r\n    }\r\n    else if ('removeAllFromArray' in proto) {\r\n        const values = proto.removeAllFromArray.values || [];\r\n        transform = new ArrayRemoveTransformOperation(values);\r\n    }\r\n    else if ('increment' in proto) {\r\n        transform = new NumericIncrementTransformOperation(serializer, proto.increment);\r\n    }\r\n    else {\r\n        fail();\r\n    }\r\n    const fieldPath = FieldPath$1.fromServerFormat(proto.fieldPath);\r\n    return new FieldTransform(fieldPath, transform);\r\n}\r\nfunction toDocumentsTarget(serializer, target) {\r\n    return { documents: [toQueryPath(serializer, target.path)] };\r\n}\r\nfunction fromDocumentsTarget(documentsTarget) {\r\n    const count = documentsTarget.documents.length;\r\n    hardAssert(count === 1);\r\n    const name = documentsTarget.documents[0];\r\n    return queryToTarget(newQueryForPath(fromQueryPath(name)));\r\n}\r\nfunction toQueryTarget(serializer, target) {\r\n    // Dissect the path into parent, collectionId, and optional key filter.\r\n    const result = { structuredQuery: {} };\r\n    const path = target.path;\r\n    if (target.collectionGroup !== null) {\r\n        result.parent = toQueryPath(serializer, path);\r\n        result.structuredQuery.from = [\r\n            {\r\n                collectionId: target.collectionGroup,\r\n                allDescendants: true\r\n            }\r\n        ];\r\n    }\r\n    else {\r\n        result.parent = toQueryPath(serializer, path.popLast());\r\n        result.structuredQuery.from = [{ collectionId: path.lastSegment() }];\r\n    }\r\n    const where = toFilters(target.filters);\r\n    if (where) {\r\n        result.structuredQuery.where = where;\r\n    }\r\n    const orderBy = toOrder(target.orderBy);\r\n    if (orderBy) {\r\n        result.structuredQuery.orderBy = orderBy;\r\n    }\r\n    const limit = toInt32Proto(serializer, target.limit);\r\n    if (limit !== null) {\r\n        result.structuredQuery.limit = limit;\r\n    }\r\n    if (target.startAt) {\r\n        result.structuredQuery.startAt = toStartAtCursor(target.startAt);\r\n    }\r\n    if (target.endAt) {\r\n        result.structuredQuery.endAt = toEndAtCursor(target.endAt);\r\n    }\r\n    return result;\r\n}\r\nfunction toRunAggregationQueryRequest(serializer, target, aggregates) {\r\n    const queryTarget = toQueryTarget(serializer, target);\r\n    const aliasMap = {};\r\n    const aggregations = [];\r\n    let aggregationNum = 0;\r\n    aggregates.forEach(aggregate => {\r\n        // Map all client-side aliases to a unique short-form\r\n        // alias. This avoids issues with client-side aliases that\r\n        // exceed the 1500-byte string size limit.\r\n        const serverAlias = `aggregate_${aggregationNum++}`;\r\n        aliasMap[serverAlias] = aggregate.alias;\r\n        if (aggregate.aggregateType === 'count') {\r\n            aggregations.push({\r\n                alias: serverAlias,\r\n                count: {}\r\n            });\r\n        }\r\n        else if (aggregate.aggregateType === 'avg') {\r\n            aggregations.push({\r\n                alias: serverAlias,\r\n                avg: {\r\n                    field: toFieldPathReference(aggregate.fieldPath)\r\n                }\r\n            });\r\n        }\r\n        else if (aggregate.aggregateType === 'sum') {\r\n            aggregations.push({\r\n                alias: serverAlias,\r\n                sum: {\r\n                    field: toFieldPathReference(aggregate.fieldPath)\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return {\r\n        request: {\r\n            structuredAggregationQuery: {\r\n                aggregations,\r\n                structuredQuery: queryTarget.structuredQuery\r\n            },\r\n            parent: queryTarget.parent\r\n        },\r\n        aliasMap\r\n    };\r\n}\r\nfunction convertQueryTargetToQuery(target) {\r\n    let path = fromQueryPath(target.parent);\r\n    const query = target.structuredQuery;\r\n    const fromCount = query.from ? query.from.length : 0;\r\n    let collectionGroup = null;\r\n    if (fromCount > 0) {\r\n        hardAssert(fromCount === 1);\r\n        const from = query.from[0];\r\n        if (from.allDescendants) {\r\n            collectionGroup = from.collectionId;\r\n        }\r\n        else {\r\n            path = path.child(from.collectionId);\r\n        }\r\n    }\r\n    let filterBy = [];\r\n    if (query.where) {\r\n        filterBy = fromFilters(query.where);\r\n    }\r\n    let orderBy = [];\r\n    if (query.orderBy) {\r\n        orderBy = fromOrder(query.orderBy);\r\n    }\r\n    let limit = null;\r\n    if (query.limit) {\r\n        limit = fromInt32Proto(query.limit);\r\n    }\r\n    let startAt = null;\r\n    if (query.startAt) {\r\n        startAt = fromStartAtCursor(query.startAt);\r\n    }\r\n    let endAt = null;\r\n    if (query.endAt) {\r\n        endAt = fromEndAtCursor(query.endAt);\r\n    }\r\n    return newQuery(path, collectionGroup, orderBy, filterBy, limit, \"F\" /* LimitType.First */, startAt, endAt);\r\n}\r\nfunction fromQueryTarget(target) {\r\n    return queryToTarget(convertQueryTargetToQuery(target));\r\n}\r\nfunction toListenRequestLabels(serializer, targetData) {\r\n    const value = toLabel(targetData.purpose);\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    else {\r\n        return {\r\n            'goog-listen-tags': value\r\n        };\r\n    }\r\n}\r\nfunction toLabel(purpose) {\r\n    switch (purpose) {\r\n        case \"TargetPurposeListen\" /* TargetPurpose.Listen */:\r\n            return null;\r\n        case \"TargetPurposeExistenceFilterMismatch\" /* TargetPurpose.ExistenceFilterMismatch */:\r\n            return 'existence-filter-mismatch';\r\n        case \"TargetPurposeExistenceFilterMismatchBloom\" /* TargetPurpose.ExistenceFilterMismatchBloom */:\r\n            return 'existence-filter-mismatch-bloom';\r\n        case \"TargetPurposeLimboResolution\" /* TargetPurpose.LimboResolution */:\r\n            return 'limbo-document';\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\nfunction toTarget(serializer, targetData) {\r\n    let result;\r\n    const target = targetData.target;\r\n    if (targetIsDocumentTarget(target)) {\r\n        result = { documents: toDocumentsTarget(serializer, target) };\r\n    }\r\n    else {\r\n        result = { query: toQueryTarget(serializer, target) };\r\n    }\r\n    result.targetId = targetData.targetId;\r\n    if (targetData.resumeToken.approximateByteSize() > 0) {\r\n        result.resumeToken = toBytes(serializer, targetData.resumeToken);\r\n        const expectedCount = toInt32Proto(serializer, targetData.expectedCount);\r\n        if (expectedCount !== null) {\r\n            result.expectedCount = expectedCount;\r\n        }\r\n    }\r\n    else if (targetData.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {\r\n        // TODO(wuandy): Consider removing above check because it is most likely true.\r\n        // Right now, many tests depend on this behaviour though (leaving min() out\r\n        // of serialization).\r\n        result.readTime = toTimestamp(serializer, targetData.snapshotVersion.toTimestamp());\r\n        const expectedCount = toInt32Proto(serializer, targetData.expectedCount);\r\n        if (expectedCount !== null) {\r\n            result.expectedCount = expectedCount;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction toFilters(filters) {\r\n    if (filters.length === 0) {\r\n        return;\r\n    }\r\n    return toFilter(CompositeFilter.create(filters, \"and\" /* CompositeOperator.AND */));\r\n}\r\nfunction fromFilters(filter) {\r\n    const result = fromFilter(filter);\r\n    if (result instanceof CompositeFilter &&\r\n        compositeFilterIsFlatConjunction(result)) {\r\n        return result.getFilters();\r\n    }\r\n    return [result];\r\n}\r\nfunction fromFilter(filter) {\r\n    if (filter.unaryFilter !== undefined) {\r\n        return fromUnaryFilter(filter);\r\n    }\r\n    else if (filter.fieldFilter !== undefined) {\r\n        return fromFieldFilter(filter);\r\n    }\r\n    else if (filter.compositeFilter !== undefined) {\r\n        return fromCompositeFilter(filter);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction toOrder(orderBys) {\r\n    if (orderBys.length === 0) {\r\n        return;\r\n    }\r\n    return orderBys.map(order => toPropertyOrder(order));\r\n}\r\nfunction fromOrder(orderBys) {\r\n    return orderBys.map(order => fromPropertyOrder(order));\r\n}\r\nfunction toStartAtCursor(cursor) {\r\n    return {\r\n        before: cursor.inclusive,\r\n        values: cursor.position\r\n    };\r\n}\r\nfunction toEndAtCursor(cursor) {\r\n    return {\r\n        before: !cursor.inclusive,\r\n        values: cursor.position\r\n    };\r\n}\r\nfunction fromStartAtCursor(cursor) {\r\n    const inclusive = !!cursor.before;\r\n    const position = cursor.values || [];\r\n    return new Bound(position, inclusive);\r\n}\r\nfunction fromEndAtCursor(cursor) {\r\n    const inclusive = !cursor.before;\r\n    const position = cursor.values || [];\r\n    return new Bound(position, inclusive);\r\n}\r\n// visible for testing\r\nfunction toDirection(dir) {\r\n    return DIRECTIONS[dir];\r\n}\r\n// visible for testing\r\nfunction fromDirection(dir) {\r\n    switch (dir) {\r\n        case 'ASCENDING':\r\n            return \"asc\" /* Direction.ASCENDING */;\r\n        case 'DESCENDING':\r\n            return \"desc\" /* Direction.DESCENDING */;\r\n        default:\r\n            return undefined;\r\n    }\r\n}\r\n// visible for testing\r\nfunction toOperatorName(op) {\r\n    return OPERATORS[op];\r\n}\r\nfunction toCompositeOperatorName(op) {\r\n    return COMPOSITE_OPERATORS[op];\r\n}\r\nfunction fromOperatorName(op) {\r\n    switch (op) {\r\n        case 'EQUAL':\r\n            return \"==\" /* Operator.EQUAL */;\r\n        case 'NOT_EQUAL':\r\n            return \"!=\" /* Operator.NOT_EQUAL */;\r\n        case 'GREATER_THAN':\r\n            return \">\" /* Operator.GREATER_THAN */;\r\n        case 'GREATER_THAN_OR_EQUAL':\r\n            return \">=\" /* Operator.GREATER_THAN_OR_EQUAL */;\r\n        case 'LESS_THAN':\r\n            return \"<\" /* Operator.LESS_THAN */;\r\n        case 'LESS_THAN_OR_EQUAL':\r\n            return \"<=\" /* Operator.LESS_THAN_OR_EQUAL */;\r\n        case 'ARRAY_CONTAINS':\r\n            return \"array-contains\" /* Operator.ARRAY_CONTAINS */;\r\n        case 'IN':\r\n            return \"in\" /* Operator.IN */;\r\n        case 'NOT_IN':\r\n            return \"not-in\" /* Operator.NOT_IN */;\r\n        case 'ARRAY_CONTAINS_ANY':\r\n            return \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */;\r\n        case 'OPERATOR_UNSPECIFIED':\r\n            return fail();\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\nfunction fromCompositeOperatorName(op) {\r\n    switch (op) {\r\n        case 'AND':\r\n            return \"and\" /* CompositeOperator.AND */;\r\n        case 'OR':\r\n            return \"or\" /* CompositeOperator.OR */;\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\nfunction toFieldPathReference(path) {\r\n    return { fieldPath: path.canonicalString() };\r\n}\r\nfunction fromFieldPathReference(fieldReference) {\r\n    return FieldPath$1.fromServerFormat(fieldReference.fieldPath);\r\n}\r\n// visible for testing\r\nfunction toPropertyOrder(orderBy) {\r\n    return {\r\n        field: toFieldPathReference(orderBy.field),\r\n        direction: toDirection(orderBy.dir)\r\n    };\r\n}\r\nfunction fromPropertyOrder(orderBy) {\r\n    return new OrderBy(fromFieldPathReference(orderBy.field), fromDirection(orderBy.direction));\r\n}\r\n// visible for testing\r\nfunction toFilter(filter) {\r\n    if (filter instanceof FieldFilter) {\r\n        return toUnaryOrFieldFilter(filter);\r\n    }\r\n    else if (filter instanceof CompositeFilter) {\r\n        return toCompositeFilter(filter);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\nfunction toCompositeFilter(filter) {\r\n    const protos = filter.getFilters().map(filter => toFilter(filter));\r\n    if (protos.length === 1) {\r\n        return protos[0];\r\n    }\r\n    return {\r\n        compositeFilter: {\r\n            op: toCompositeOperatorName(filter.op),\r\n            filters: protos\r\n        }\r\n    };\r\n}\r\nfunction toUnaryOrFieldFilter(filter) {\r\n    if (filter.op === \"==\" /* Operator.EQUAL */) {\r\n        if (isNanValue(filter.value)) {\r\n            return {\r\n                unaryFilter: {\r\n                    field: toFieldPathReference(filter.field),\r\n                    op: 'IS_NAN'\r\n                }\r\n            };\r\n        }\r\n        else if (isNullValue(filter.value)) {\r\n            return {\r\n                unaryFilter: {\r\n                    field: toFieldPathReference(filter.field),\r\n                    op: 'IS_NULL'\r\n                }\r\n            };\r\n        }\r\n    }\r\n    else if (filter.op === \"!=\" /* Operator.NOT_EQUAL */) {\r\n        if (isNanValue(filter.value)) {\r\n            return {\r\n                unaryFilter: {\r\n                    field: toFieldPathReference(filter.field),\r\n                    op: 'IS_NOT_NAN'\r\n                }\r\n            };\r\n        }\r\n        else if (isNullValue(filter.value)) {\r\n            return {\r\n                unaryFilter: {\r\n                    field: toFieldPathReference(filter.field),\r\n                    op: 'IS_NOT_NULL'\r\n                }\r\n            };\r\n        }\r\n    }\r\n    return {\r\n        fieldFilter: {\r\n            field: toFieldPathReference(filter.field),\r\n            op: toOperatorName(filter.op),\r\n            value: filter.value\r\n        }\r\n    };\r\n}\r\nfunction fromUnaryFilter(filter) {\r\n    switch (filter.unaryFilter.op) {\r\n        case 'IS_NAN':\r\n            const nanField = fromFieldPathReference(filter.unaryFilter.field);\r\n            return FieldFilter.create(nanField, \"==\" /* Operator.EQUAL */, {\r\n                doubleValue: NaN\r\n            });\r\n        case 'IS_NULL':\r\n            const nullField = fromFieldPathReference(filter.unaryFilter.field);\r\n            return FieldFilter.create(nullField, \"==\" /* Operator.EQUAL */, {\r\n                nullValue: 'NULL_VALUE'\r\n            });\r\n        case 'IS_NOT_NAN':\r\n            const notNanField = fromFieldPathReference(filter.unaryFilter.field);\r\n            return FieldFilter.create(notNanField, \"!=\" /* Operator.NOT_EQUAL */, {\r\n                doubleValue: NaN\r\n            });\r\n        case 'IS_NOT_NULL':\r\n            const notNullField = fromFieldPathReference(filter.unaryFilter.field);\r\n            return FieldFilter.create(notNullField, \"!=\" /* Operator.NOT_EQUAL */, {\r\n                nullValue: 'NULL_VALUE'\r\n            });\r\n        case 'OPERATOR_UNSPECIFIED':\r\n            return fail();\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\nfunction fromFieldFilter(filter) {\r\n    return FieldFilter.create(fromFieldPathReference(filter.fieldFilter.field), fromOperatorName(filter.fieldFilter.op), filter.fieldFilter.value);\r\n}\r\nfunction fromCompositeFilter(filter) {\r\n    return CompositeFilter.create(filter.compositeFilter.filters.map(filter => fromFilter(filter)), fromCompositeOperatorName(filter.compositeFilter.op));\r\n}\r\nfunction toDocumentMask(fieldMask) {\r\n    const canonicalFields = [];\r\n    fieldMask.fields.forEach(field => canonicalFields.push(field.canonicalString()));\r\n    return {\r\n        fieldPaths: canonicalFields\r\n    };\r\n}\r\nfunction fromDocumentMask(proto) {\r\n    const paths = proto.fieldPaths || [];\r\n    return new FieldMask(paths.map(path => FieldPath$1.fromServerFormat(path)));\r\n}\r\nfunction isValidResourceName(path) {\r\n    // Resource names have at least 4 components (project ID, database ID)\r\n    return (path.length >= 4 &&\r\n        path.get(0) === 'projects' &&\r\n        path.get(2) === 'databases');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable set of metadata that the local store tracks for each target.\r\n */\r\nclass TargetData {\r\n    constructor(\r\n    /** The target being listened to. */\r\n    target, \r\n    /**\r\n     * The target ID to which the target corresponds; Assigned by the\r\n     * LocalStore for user listens and by the SyncEngine for limbo watches.\r\n     */\r\n    targetId, \r\n    /** The purpose of the target. */\r\n    purpose, \r\n    /**\r\n     * The sequence number of the last transaction during which this target data\r\n     * was modified.\r\n     */\r\n    sequenceNumber, \r\n    /** The latest snapshot version seen for this target. */\r\n    snapshotVersion = SnapshotVersion.min(), \r\n    /**\r\n     * The maximum snapshot version at which the associated view\r\n     * contained no limbo documents.\r\n     */\r\n    lastLimboFreeSnapshotVersion = SnapshotVersion.min(), \r\n    /**\r\n     * An opaque, server-assigned token that allows watching a target to be\r\n     * resumed after disconnecting without retransmitting all the data that\r\n     * matches the target. The resume token essentially identifies a point in\r\n     * time from which the server should resume sending results.\r\n     */\r\n    resumeToken = ByteString.EMPTY_BYTE_STRING, \r\n    /**\r\n     * The number of documents that last matched the query at the resume token or\r\n     * read time. Documents are counted only when making a listen request with\r\n     * resume token or read time, otherwise, keep it null.\r\n     */\r\n    expectedCount = null) {\r\n        this.target = target;\r\n        this.targetId = targetId;\r\n        this.purpose = purpose;\r\n        this.sequenceNumber = sequenceNumber;\r\n        this.snapshotVersion = snapshotVersion;\r\n        this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;\r\n        this.resumeToken = resumeToken;\r\n        this.expectedCount = expectedCount;\r\n    }\r\n    /** Creates a new target data instance with an updated sequence number. */\r\n    withSequenceNumber(sequenceNumber) {\r\n        return new TargetData(this.target, this.targetId, this.purpose, sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);\r\n    }\r\n    /**\r\n     * Creates a new target data instance with an updated resume token and\r\n     * snapshot version.\r\n     */\r\n    withResumeToken(resumeToken, snapshotVersion) {\r\n        return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, snapshotVersion, this.lastLimboFreeSnapshotVersion, resumeToken, \r\n        /* expectedCount= */ null);\r\n    }\r\n    /**\r\n     * Creates a new target data instance with an updated expected count.\r\n     */\r\n    withExpectedCount(expectedCount) {\r\n        return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, expectedCount);\r\n    }\r\n    /**\r\n     * Creates a new target data instance with an updated last limbo free\r\n     * snapshot version number.\r\n     */\r\n    withLastLimboFreeSnapshotVersion(lastLimboFreeSnapshotVersion) {\r\n        return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Serializer for values stored in the LocalStore. */\r\nclass LocalSerializer {\r\n    constructor(remoteSerializer) {\r\n        this.remoteSerializer = remoteSerializer;\r\n    }\r\n}\r\n/** Decodes a remote document from storage locally to a Document. */\r\nfunction fromDbRemoteDocument(localSerializer, remoteDoc) {\r\n    let doc;\r\n    if (remoteDoc.document) {\r\n        doc = fromDocument(localSerializer.remoteSerializer, remoteDoc.document, !!remoteDoc.hasCommittedMutations);\r\n    }\r\n    else if (remoteDoc.noDocument) {\r\n        const key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\r\n        const version = fromDbTimestamp(remoteDoc.noDocument.readTime);\r\n        doc = MutableDocument.newNoDocument(key, version);\r\n        if (remoteDoc.hasCommittedMutations) {\r\n            doc.setHasCommittedMutations();\r\n        }\r\n    }\r\n    else if (remoteDoc.unknownDocument) {\r\n        const key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);\r\n        const version = fromDbTimestamp(remoteDoc.unknownDocument.version);\r\n        doc = MutableDocument.newUnknownDocument(key, version);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n    if (remoteDoc.readTime) {\r\n        doc.setReadTime(fromDbTimestampKey(remoteDoc.readTime));\r\n    }\r\n    return doc;\r\n}\r\n/** Encodes a document for storage locally. */\r\nfunction toDbRemoteDocument(localSerializer, document) {\r\n    const key = document.key;\r\n    const remoteDoc = {\r\n        prefixPath: key.getCollectionPath().popLast().toArray(),\r\n        collectionGroup: key.collectionGroup,\r\n        documentId: key.path.lastSegment(),\r\n        readTime: toDbTimestampKey(document.readTime),\r\n        hasCommittedMutations: document.hasCommittedMutations\r\n    };\r\n    if (document.isFoundDocument()) {\r\n        remoteDoc.document = toDocument(localSerializer.remoteSerializer, document);\r\n    }\r\n    else if (document.isNoDocument()) {\r\n        remoteDoc.noDocument = {\r\n            path: key.path.toArray(),\r\n            readTime: toDbTimestamp(document.version)\r\n        };\r\n    }\r\n    else if (document.isUnknownDocument()) {\r\n        remoteDoc.unknownDocument = {\r\n            path: key.path.toArray(),\r\n            version: toDbTimestamp(document.version)\r\n        };\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n    return remoteDoc;\r\n}\r\nfunction toDbTimestampKey(snapshotVersion) {\r\n    const timestamp = snapshotVersion.toTimestamp();\r\n    return [timestamp.seconds, timestamp.nanoseconds];\r\n}\r\nfunction fromDbTimestampKey(dbTimestampKey) {\r\n    const timestamp = new Timestamp(dbTimestampKey[0], dbTimestampKey[1]);\r\n    return SnapshotVersion.fromTimestamp(timestamp);\r\n}\r\nfunction toDbTimestamp(snapshotVersion) {\r\n    const timestamp = snapshotVersion.toTimestamp();\r\n    return { seconds: timestamp.seconds, nanoseconds: timestamp.nanoseconds };\r\n}\r\nfunction fromDbTimestamp(dbTimestamp) {\r\n    const timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);\r\n    return SnapshotVersion.fromTimestamp(timestamp);\r\n}\r\n/** Encodes a batch of mutations into a DbMutationBatch for local storage. */\r\nfunction toDbMutationBatch(localSerializer, userId, batch) {\r\n    const serializedBaseMutations = batch.baseMutations.map(m => toMutation(localSerializer.remoteSerializer, m));\r\n    const serializedMutations = batch.mutations.map(m => toMutation(localSerializer.remoteSerializer, m));\r\n    return {\r\n        userId,\r\n        batchId: batch.batchId,\r\n        localWriteTimeMs: batch.localWriteTime.toMillis(),\r\n        baseMutations: serializedBaseMutations,\r\n        mutations: serializedMutations\r\n    };\r\n}\r\n/** Decodes a DbMutationBatch into a MutationBatch */\r\nfunction fromDbMutationBatch(localSerializer, dbBatch) {\r\n    const baseMutations = (dbBatch.baseMutations || []).map(m => fromMutation(localSerializer.remoteSerializer, m));\r\n    // Squash old transform mutations into existing patch or set mutations.\r\n    // The replacement of representing `transforms` with `update_transforms`\r\n    // on the SDK means that old `transform` mutations stored in IndexedDB need\r\n    // to be updated to `update_transforms`.\r\n    // TODO(b/174608374): Remove this code once we perform a schema migration.\r\n    for (let i = 0; i < dbBatch.mutations.length - 1; ++i) {\r\n        const currentMutation = dbBatch.mutations[i];\r\n        const hasTransform = i + 1 < dbBatch.mutations.length &&\r\n            dbBatch.mutations[i + 1].transform !== undefined;\r\n        if (hasTransform) {\r\n            const transformMutation = dbBatch.mutations[i + 1];\r\n            currentMutation.updateTransforms =\r\n                transformMutation.transform.fieldTransforms;\r\n            dbBatch.mutations.splice(i + 1, 1);\r\n            ++i;\r\n        }\r\n    }\r\n    const mutations = dbBatch.mutations.map(m => fromMutation(localSerializer.remoteSerializer, m));\r\n    const timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);\r\n    return new MutationBatch(dbBatch.batchId, timestamp, baseMutations, mutations);\r\n}\r\n/** Decodes a DbTarget into TargetData */\r\nfunction fromDbTarget(dbTarget) {\r\n    const version = fromDbTimestamp(dbTarget.readTime);\r\n    const lastLimboFreeSnapshotVersion = dbTarget.lastLimboFreeSnapshotVersion !== undefined\r\n        ? fromDbTimestamp(dbTarget.lastLimboFreeSnapshotVersion)\r\n        : SnapshotVersion.min();\r\n    let target;\r\n    if (isDocumentQuery(dbTarget.query)) {\r\n        target = fromDocumentsTarget(dbTarget.query);\r\n    }\r\n    else {\r\n        target = fromQueryTarget(dbTarget.query);\r\n    }\r\n    return new TargetData(target, dbTarget.targetId, \"TargetPurposeListen\" /* TargetPurpose.Listen */, dbTarget.lastListenSequenceNumber, version, lastLimboFreeSnapshotVersion, ByteString.fromBase64String(dbTarget.resumeToken));\r\n}\r\n/** Encodes TargetData into a DbTarget for storage locally. */\r\nfunction toDbTarget(localSerializer, targetData) {\r\n    const dbTimestamp = toDbTimestamp(targetData.snapshotVersion);\r\n    const dbLastLimboFreeTimestamp = toDbTimestamp(targetData.lastLimboFreeSnapshotVersion);\r\n    let queryProto;\r\n    if (targetIsDocumentTarget(targetData.target)) {\r\n        queryProto = toDocumentsTarget(localSerializer.remoteSerializer, targetData.target);\r\n    }\r\n    else {\r\n        queryProto = toQueryTarget(localSerializer.remoteSerializer, targetData.target);\r\n    }\r\n    // We can't store the resumeToken as a ByteString in IndexedDb, so we\r\n    // convert it to a base64 string for storage.\r\n    const resumeToken = targetData.resumeToken.toBase64();\r\n    // lastListenSequenceNumber is always 0 until we do real GC.\r\n    return {\r\n        targetId: targetData.targetId,\r\n        canonicalId: canonifyTarget(targetData.target),\r\n        readTime: dbTimestamp,\r\n        resumeToken,\r\n        lastListenSequenceNumber: targetData.sequenceNumber,\r\n        lastLimboFreeSnapshotVersion: dbLastLimboFreeTimestamp,\r\n        query: queryProto\r\n    };\r\n}\r\n/**\r\n * A helper function for figuring out what kind of query has been stored.\r\n */\r\nfunction isDocumentQuery(dbQuery) {\r\n    return dbQuery.documents !== undefined;\r\n}\r\n/** Encodes a DbBundle to a BundleMetadata object. */\r\nfunction fromDbBundle(dbBundle) {\r\n    return {\r\n        id: dbBundle.bundleId,\r\n        createTime: fromDbTimestamp(dbBundle.createTime),\r\n        version: dbBundle.version\r\n    };\r\n}\r\n/** Encodes a BundleMetadata to a DbBundle. */\r\nfunction toDbBundle(metadata) {\r\n    return {\r\n        bundleId: metadata.id,\r\n        createTime: toDbTimestamp(fromVersion(metadata.createTime)),\r\n        version: metadata.version\r\n    };\r\n}\r\n/** Encodes a DbNamedQuery to a NamedQuery. */\r\nfunction fromDbNamedQuery(dbNamedQuery) {\r\n    return {\r\n        name: dbNamedQuery.name,\r\n        query: fromBundledQuery(dbNamedQuery.bundledQuery),\r\n        readTime: fromDbTimestamp(dbNamedQuery.readTime)\r\n    };\r\n}\r\n/** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */\r\nfunction toDbNamedQuery(query) {\r\n    return {\r\n        name: query.name,\r\n        readTime: toDbTimestamp(fromVersion(query.readTime)),\r\n        bundledQuery: query.bundledQuery\r\n    };\r\n}\r\n/**\r\n * Encodes a `BundledQuery` from bundle proto to a Query object.\r\n *\r\n * This reconstructs the original query used to build the bundle being loaded,\r\n * including features exists only in SDKs (for example: limit-to-last).\r\n */\r\nfunction fromBundledQuery(bundledQuery) {\r\n    const query = convertQueryTargetToQuery({\r\n        parent: bundledQuery.parent,\r\n        structuredQuery: bundledQuery.structuredQuery\r\n    });\r\n    if (bundledQuery.limitType === 'LAST') {\r\n        return queryWithLimit(query, query.limit, \"L\" /* LimitType.Last */);\r\n    }\r\n    return query;\r\n}\r\n/** Encodes a NamedQuery proto object to a NamedQuery model object. */\r\nfunction fromProtoNamedQuery(namedQuery) {\r\n    return {\r\n        name: namedQuery.name,\r\n        query: fromBundledQuery(namedQuery.bundledQuery),\r\n        readTime: fromVersion(namedQuery.readTime)\r\n    };\r\n}\r\n/** Decodes a BundleMetadata proto into a BundleMetadata object. */\r\nfunction fromBundleMetadata(metadata) {\r\n    return {\r\n        id: metadata.id,\r\n        version: metadata.version,\r\n        createTime: fromVersion(metadata.createTime)\r\n    };\r\n}\r\n/** Encodes a DbDocumentOverlay object to an Overlay model object. */\r\nfunction fromDbDocumentOverlay(localSerializer, dbDocumentOverlay) {\r\n    return new Overlay(dbDocumentOverlay.largestBatchId, fromMutation(localSerializer.remoteSerializer, dbDocumentOverlay.overlayMutation));\r\n}\r\n/** Decodes an Overlay model object into a DbDocumentOverlay object. */\r\nfunction toDbDocumentOverlay(localSerializer, userId, overlay) {\r\n    const [_, collectionPath, documentId] = toDbDocumentOverlayKey(userId, overlay.mutation.key);\r\n    return {\r\n        userId,\r\n        collectionPath,\r\n        documentId,\r\n        collectionGroup: overlay.mutation.key.getCollectionGroup(),\r\n        largestBatchId: overlay.largestBatchId,\r\n        overlayMutation: toMutation(localSerializer.remoteSerializer, overlay.mutation)\r\n    };\r\n}\r\n/**\r\n * Returns the DbDocumentOverlayKey corresponding to the given user and\r\n * document key.\r\n */\r\nfunction toDbDocumentOverlayKey(userId, docKey) {\r\n    const docId = docKey.path.lastSegment();\r\n    const collectionPath = encodeResourcePath(docKey.path.popLast());\r\n    return [userId, collectionPath, docId];\r\n}\r\nfunction toDbIndexConfiguration(index) {\r\n    return {\r\n        indexId: index.indexId,\r\n        collectionGroup: index.collectionGroup,\r\n        fields: index.fields.map(s => [s.fieldPath.canonicalString(), s.kind])\r\n    };\r\n}\r\nfunction fromDbIndexConfiguration(index, state) {\r\n    const decodedState = state\r\n        ? new IndexState(state.sequenceNumber, new IndexOffset(fromDbTimestamp(state.readTime), new DocumentKey(decodeResourcePath(state.documentKey)), state.largestBatchId))\r\n        : IndexState.empty();\r\n    const decodedSegments = index.fields.map(([fieldPath, kind]) => new IndexSegment(FieldPath$1.fromServerFormat(fieldPath), kind));\r\n    return new FieldIndex(index.indexId, index.collectionGroup, decodedSegments, decodedState);\r\n}\r\nfunction toDbIndexState(indexId, user, sequenceNumber, offset) {\r\n    return {\r\n        indexId,\r\n        uid: user.uid || '',\r\n        sequenceNumber,\r\n        readTime: toDbTimestamp(offset.readTime),\r\n        documentKey: encodeResourcePath(offset.documentKey.path),\r\n        largestBatchId: offset.largestBatchId\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass IndexedDbBundleCache {\r\n    getBundleMetadata(transaction, bundleId) {\r\n        return bundlesStore(transaction)\r\n            .get(bundleId)\r\n            .next(bundle => {\r\n            if (bundle) {\r\n                return fromDbBundle(bundle);\r\n            }\r\n            return undefined;\r\n        });\r\n    }\r\n    saveBundleMetadata(transaction, bundleMetadata) {\r\n        return bundlesStore(transaction).put(toDbBundle(bundleMetadata));\r\n    }\r\n    getNamedQuery(transaction, queryName) {\r\n        return namedQueriesStore(transaction)\r\n            .get(queryName)\r\n            .next(query => {\r\n            if (query) {\r\n                return fromDbNamedQuery(query);\r\n            }\r\n            return undefined;\r\n        });\r\n    }\r\n    saveNamedQuery(transaction, query) {\r\n        return namedQueriesStore(transaction).put(toDbNamedQuery(query));\r\n    }\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the bundles object store.\r\n */\r\nfunction bundlesStore(txn) {\r\n    return getStore(txn, DbBundleStore);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the namedQueries object store.\r\n */\r\nfunction namedQueriesStore(txn) {\r\n    return getStore(txn, DbNamedQueryStore);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implementation of DocumentOverlayCache using IndexedDb.\r\n */\r\nclass IndexedDbDocumentOverlayCache {\r\n    /**\r\n     * @param serializer - The document serializer.\r\n     * @param userId - The userId for which we are accessing overlays.\r\n     */\r\n    constructor(serializer, userId) {\r\n        this.serializer = serializer;\r\n        this.userId = userId;\r\n    }\r\n    static forUser(serializer, user) {\r\n        const userId = user.uid || '';\r\n        return new IndexedDbDocumentOverlayCache(serializer, userId);\r\n    }\r\n    getOverlay(transaction, key) {\r\n        return documentOverlayStore(transaction)\r\n            .get(toDbDocumentOverlayKey(this.userId, key))\r\n            .next(dbOverlay => {\r\n            if (dbOverlay) {\r\n                return fromDbDocumentOverlay(this.serializer, dbOverlay);\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n    getOverlays(transaction, keys) {\r\n        const result = newOverlayMap();\r\n        return PersistencePromise.forEach(keys, (key) => {\r\n            return this.getOverlay(transaction, key).next(overlay => {\r\n                if (overlay !== null) {\r\n                    result.set(key, overlay);\r\n                }\r\n            });\r\n        }).next(() => result);\r\n    }\r\n    saveOverlays(transaction, largestBatchId, overlays) {\r\n        const promises = [];\r\n        overlays.forEach((_, mutation) => {\r\n            const overlay = new Overlay(largestBatchId, mutation);\r\n            promises.push(this.saveOverlay(transaction, overlay));\r\n        });\r\n        return PersistencePromise.waitFor(promises);\r\n    }\r\n    removeOverlaysForBatchId(transaction, documentKeys, batchId) {\r\n        const collectionPaths = new Set();\r\n        // Get the set of unique collection paths.\r\n        documentKeys.forEach(key => collectionPaths.add(encodeResourcePath(key.getCollectionPath())));\r\n        const promises = [];\r\n        collectionPaths.forEach(collectionPath => {\r\n            const range = IDBKeyRange.bound([this.userId, collectionPath, batchId], [this.userId, collectionPath, batchId + 1], \r\n            /*lowerOpen=*/ false, \r\n            /*upperOpen=*/ true);\r\n            promises.push(documentOverlayStore(transaction).deleteAll(DbDocumentOverlayCollectionPathOverlayIndex, range));\r\n        });\r\n        return PersistencePromise.waitFor(promises);\r\n    }\r\n    getOverlaysForCollection(transaction, collection, sinceBatchId) {\r\n        const result = newOverlayMap();\r\n        const collectionPath = encodeResourcePath(collection);\r\n        // We want batch IDs larger than `sinceBatchId`, and so the lower bound\r\n        // is not inclusive.\r\n        const range = IDBKeyRange.bound([this.userId, collectionPath, sinceBatchId], [this.userId, collectionPath, Number.POSITIVE_INFINITY], \r\n        /*lowerOpen=*/ true);\r\n        return documentOverlayStore(transaction)\r\n            .loadAll(DbDocumentOverlayCollectionPathOverlayIndex, range)\r\n            .next(dbOverlays => {\r\n            for (const dbOverlay of dbOverlays) {\r\n                const overlay = fromDbDocumentOverlay(this.serializer, dbOverlay);\r\n                result.set(overlay.getKey(), overlay);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    getOverlaysForCollectionGroup(transaction, collectionGroup, sinceBatchId, count) {\r\n        const result = newOverlayMap();\r\n        let currentBatchId = undefined;\r\n        // We want batch IDs larger than `sinceBatchId`, and so the lower bound\r\n        // is not inclusive.\r\n        const range = IDBKeyRange.bound([this.userId, collectionGroup, sinceBatchId], [this.userId, collectionGroup, Number.POSITIVE_INFINITY], \r\n        /*lowerOpen=*/ true);\r\n        return documentOverlayStore(transaction)\r\n            .iterate({\r\n            index: DbDocumentOverlayCollectionGroupOverlayIndex,\r\n            range\r\n        }, (_, dbOverlay, control) => {\r\n            // We do not want to return partial batch overlays, even if the size\r\n            // of the result set exceeds the given `count` argument. Therefore, we\r\n            // continue to aggregate results even after the result size exceeds\r\n            // `count` if there are more overlays from the `currentBatchId`.\r\n            const overlay = fromDbDocumentOverlay(this.serializer, dbOverlay);\r\n            if (result.size() < count ||\r\n                overlay.largestBatchId === currentBatchId) {\r\n                result.set(overlay.getKey(), overlay);\r\n                currentBatchId = overlay.largestBatchId;\r\n            }\r\n            else {\r\n                control.done();\r\n            }\r\n        })\r\n            .next(() => result);\r\n    }\r\n    saveOverlay(transaction, overlay) {\r\n        return documentOverlayStore(transaction).put(toDbDocumentOverlay(this.serializer, this.userId, overlay));\r\n    }\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the document overlay object store.\r\n */\r\nfunction documentOverlayStore(txn) {\r\n    return getStore(txn, DbDocumentOverlayStore);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Note: This code is copied from the backend. Code that is not used by\r\n// Firestore was removed.\r\nconst INDEX_TYPE_NULL = 5;\r\nconst INDEX_TYPE_BOOLEAN = 10;\r\nconst INDEX_TYPE_NAN = 13;\r\nconst INDEX_TYPE_NUMBER = 15;\r\nconst INDEX_TYPE_TIMESTAMP = 20;\r\nconst INDEX_TYPE_STRING = 25;\r\nconst INDEX_TYPE_BLOB = 30;\r\nconst INDEX_TYPE_REFERENCE = 37;\r\nconst INDEX_TYPE_GEOPOINT = 45;\r\nconst INDEX_TYPE_ARRAY = 50;\r\nconst INDEX_TYPE_MAP = 55;\r\nconst INDEX_TYPE_REFERENCE_SEGMENT = 60;\r\n// A terminator that indicates that a truncatable value was not truncated.\r\n// This must be smaller than all other type labels.\r\nconst NOT_TRUNCATED = 2;\r\n/** Firestore index value writer.  */\r\nclass FirestoreIndexValueWriter {\r\n    constructor() { }\r\n    // The write methods below short-circuit writing terminators for values\r\n    // containing a (terminating) truncated value.\r\n    //\r\n    // As an example, consider the resulting encoding for:\r\n    //\r\n    // [\"bar\", [2, \"foo\"]] -> (STRING, \"bar\", TERM, ARRAY, NUMBER, 2, STRING, \"foo\", TERM, TERM, TERM)\r\n    // [\"bar\", [2, truncated(\"foo\")]] -> (STRING, \"bar\", TERM, ARRAY, NUMBER, 2, STRING, \"foo\", TRUNC)\r\n    // [\"bar\", truncated([\"foo\"])] -> (STRING, \"bar\", TERM, ARRAY. STRING, \"foo\", TERM, TRUNC)\r\n    /** Writes an index value.  */\r\n    writeIndexValue(value, encoder) {\r\n        this.writeIndexValueAux(value, encoder);\r\n        // Write separator to split index values\r\n        // (see go/firestore-storage-format#encodings).\r\n        encoder.writeInfinity();\r\n    }\r\n    writeIndexValueAux(indexValue, encoder) {\r\n        if ('nullValue' in indexValue) {\r\n            this.writeValueTypeLabel(encoder, INDEX_TYPE_NULL);\r\n        }\r\n        else if ('booleanValue' in indexValue) {\r\n            this.writeValueTypeLabel(encoder, INDEX_TYPE_BOOLEAN);\r\n            encoder.writeNumber(indexValue.booleanValue ? 1 : 0);\r\n        }\r\n        else if ('integerValue' in indexValue) {\r\n            this.writeValueTypeLabel(encoder, INDEX_TYPE_NUMBER);\r\n            encoder.writeNumber(normalizeNumber(indexValue.integerValue));\r\n        }\r\n        else if ('doubleValue' in indexValue) {\r\n            const n = normalizeNumber(indexValue.doubleValue);\r\n            if (isNaN(n)) {\r\n                this.writeValueTypeLabel(encoder, INDEX_TYPE_NAN);\r\n            }\r\n            else {\r\n                this.writeValueTypeLabel(encoder, INDEX_TYPE_NUMBER);\r\n                if (isNegativeZero(n)) {\r\n                    // -0.0, 0 and 0.0 are all considered the same\r\n                    encoder.writeNumber(0.0);\r\n                }\r\n                else {\r\n                    encoder.writeNumber(n);\r\n                }\r\n            }\r\n        }\r\n        else if ('timestampValue' in indexValue) {\r\n            const timestamp = indexValue.timestampValue;\r\n            this.writeValueTypeLabel(encoder, INDEX_TYPE_TIMESTAMP);\r\n            if (typeof timestamp === 'string') {\r\n                encoder.writeString(timestamp);\r\n            }\r\n            else {\r\n                encoder.writeString(`${timestamp.seconds || ''}`);\r\n                encoder.writeNumber(timestamp.nanos || 0);\r\n            }\r\n        }\r\n        else if ('stringValue' in indexValue) {\r\n            this.writeIndexString(indexValue.stringValue, encoder);\r\n            this.writeTruncationMarker(encoder);\r\n        }\r\n        else if ('bytesValue' in indexValue) {\r\n            this.writeValueTypeLabel(encoder, INDEX_TYPE_BLOB);\r\n            encoder.writeBytes(normalizeByteString(indexValue.bytesValue));\r\n            this.writeTruncationMarker(encoder);\r\n        }\r\n        else if ('referenceValue' in indexValue) {\r\n            this.writeIndexEntityRef(indexValue.referenceValue, encoder);\r\n        }\r\n        else if ('geoPointValue' in indexValue) {\r\n            const geoPoint = indexValue.geoPointValue;\r\n            this.writeValueTypeLabel(encoder, INDEX_TYPE_GEOPOINT);\r\n            encoder.writeNumber(geoPoint.latitude || 0);\r\n            encoder.writeNumber(geoPoint.longitude || 0);\r\n        }\r\n        else if ('mapValue' in indexValue) {\r\n            if (isMaxValue(indexValue)) {\r\n                this.writeValueTypeLabel(encoder, Number.MAX_SAFE_INTEGER);\r\n            }\r\n            else {\r\n                this.writeIndexMap(indexValue.mapValue, encoder);\r\n                this.writeTruncationMarker(encoder);\r\n            }\r\n        }\r\n        else if ('arrayValue' in indexValue) {\r\n            this.writeIndexArray(indexValue.arrayValue, encoder);\r\n            this.writeTruncationMarker(encoder);\r\n        }\r\n        else {\r\n            fail();\r\n        }\r\n    }\r\n    writeIndexString(stringIndexValue, encoder) {\r\n        this.writeValueTypeLabel(encoder, INDEX_TYPE_STRING);\r\n        this.writeUnlabeledIndexString(stringIndexValue, encoder);\r\n    }\r\n    writeUnlabeledIndexString(stringIndexValue, encoder) {\r\n        encoder.writeString(stringIndexValue);\r\n    }\r\n    writeIndexMap(mapIndexValue, encoder) {\r\n        const map = mapIndexValue.fields || {};\r\n        this.writeValueTypeLabel(encoder, INDEX_TYPE_MAP);\r\n        for (const key of Object.keys(map)) {\r\n            this.writeIndexString(key, encoder);\r\n            this.writeIndexValueAux(map[key], encoder);\r\n        }\r\n    }\r\n    writeIndexArray(arrayIndexValue, encoder) {\r\n        const values = arrayIndexValue.values || [];\r\n        this.writeValueTypeLabel(encoder, INDEX_TYPE_ARRAY);\r\n        for (const element of values) {\r\n            this.writeIndexValueAux(element, encoder);\r\n        }\r\n    }\r\n    writeIndexEntityRef(referenceValue, encoder) {\r\n        this.writeValueTypeLabel(encoder, INDEX_TYPE_REFERENCE);\r\n        const path = DocumentKey.fromName(referenceValue).path;\r\n        path.forEach(segment => {\r\n            this.writeValueTypeLabel(encoder, INDEX_TYPE_REFERENCE_SEGMENT);\r\n            this.writeUnlabeledIndexString(segment, encoder);\r\n        });\r\n    }\r\n    writeValueTypeLabel(encoder, typeOrder) {\r\n        encoder.writeNumber(typeOrder);\r\n    }\r\n    writeTruncationMarker(encoder) {\r\n        // While the SDK does not implement truncation, the truncation marker is\r\n        // used to terminate all variable length values (which are strings, bytes,\r\n        // references, arrays and maps).\r\n        encoder.writeNumber(NOT_TRUNCATED);\r\n    }\r\n}\r\nFirestoreIndexValueWriter.INSTANCE = new FirestoreIndexValueWriter();\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law | agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES | CONDITIONS OF ANY KIND, either express | implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** These constants are taken from the backend. */\r\nconst MIN_SURROGATE = '\\uD800';\r\nconst MAX_SURROGATE = '\\uDBFF';\r\nconst ESCAPE1 = 0x00;\r\nconst NULL_BYTE = 0xff; // Combined with ESCAPE1\r\nconst SEPARATOR = 0x01; // Combined with ESCAPE1\r\nconst ESCAPE2 = 0xff;\r\nconst INFINITY = 0xff; // Combined with ESCAPE2\r\nconst FF_BYTE = 0x00; // Combined with ESCAPE2\r\nconst LONG_SIZE = 64;\r\nconst BYTE_SIZE = 8;\r\n/**\r\n * The default size of the buffer. This is arbitrary, but likely larger than\r\n * most index values so that less copies of the underlying buffer will be made.\r\n * For large values, a single copy will made to double the buffer length.\r\n */\r\nconst DEFAULT_BUFFER_SIZE = 1024;\r\n/** Converts a JavaScript number to a byte array (using big endian encoding). */\r\nfunction doubleToLongBits(value) {\r\n    const dv = new DataView(new ArrayBuffer(8));\r\n    dv.setFloat64(0, value, /* littleEndian= */ false);\r\n    return new Uint8Array(dv.buffer);\r\n}\r\n/**\r\n * Counts the number of zeros in a byte.\r\n *\r\n * Visible for testing.\r\n */\r\nfunction numberOfLeadingZerosInByte(x) {\r\n    if (x === 0) {\r\n        return 8;\r\n    }\r\n    let zeros = 0;\r\n    if (x >> 4 === 0) {\r\n        // Test if the first four bits are zero.\r\n        zeros += 4;\r\n        x = x << 4;\r\n    }\r\n    if (x >> 6 === 0) {\r\n        // Test if the first two (or next two) bits are zero.\r\n        zeros += 2;\r\n        x = x << 2;\r\n    }\r\n    if (x >> 7 === 0) {\r\n        // Test if the remaining bit is zero.\r\n        zeros += 1;\r\n    }\r\n    return zeros;\r\n}\r\n/** Counts the number of leading zeros in the given byte array. */\r\nfunction numberOfLeadingZeros(bytes) {\r\n    let leadingZeros = 0;\r\n    for (let i = 0; i < 8; ++i) {\r\n        const zeros = numberOfLeadingZerosInByte(bytes[i] & 0xff);\r\n        leadingZeros += zeros;\r\n        if (zeros !== 8) {\r\n            break;\r\n        }\r\n    }\r\n    return leadingZeros;\r\n}\r\n/**\r\n * Returns the number of bytes required to store \"value\". Leading zero bytes\r\n * are skipped.\r\n */\r\nfunction unsignedNumLength(value) {\r\n    // This is just the number of bytes for the unsigned representation of the number.\r\n    const numBits = LONG_SIZE - numberOfLeadingZeros(value);\r\n    return Math.ceil(numBits / BYTE_SIZE);\r\n}\r\n/**\r\n * OrderedCodeWriter is a minimal-allocation implementation of the writing\r\n * behavior defined by the backend.\r\n *\r\n * The code is ported from its Java counterpart.\r\n */\r\nclass OrderedCodeWriter {\r\n    constructor() {\r\n        this.buffer = new Uint8Array(DEFAULT_BUFFER_SIZE);\r\n        this.position = 0;\r\n    }\r\n    writeBytesAscending(value) {\r\n        const it = value[Symbol.iterator]();\r\n        let byte = it.next();\r\n        while (!byte.done) {\r\n            this.writeByteAscending(byte.value);\r\n            byte = it.next();\r\n        }\r\n        this.writeSeparatorAscending();\r\n    }\r\n    writeBytesDescending(value) {\r\n        const it = value[Symbol.iterator]();\r\n        let byte = it.next();\r\n        while (!byte.done) {\r\n            this.writeByteDescending(byte.value);\r\n            byte = it.next();\r\n        }\r\n        this.writeSeparatorDescending();\r\n    }\r\n    /** Writes utf8 bytes into this byte sequence, ascending. */\r\n    writeUtf8Ascending(sequence) {\r\n        for (const c of sequence) {\r\n            const charCode = c.charCodeAt(0);\r\n            if (charCode < 0x80) {\r\n                this.writeByteAscending(charCode);\r\n            }\r\n            else if (charCode < 0x800) {\r\n                this.writeByteAscending((0x0f << 6) | (charCode >>> 6));\r\n                this.writeByteAscending(0x80 | (0x3f & charCode));\r\n            }\r\n            else if (c < MIN_SURROGATE || MAX_SURROGATE < c) {\r\n                this.writeByteAscending((0x0f << 5) | (charCode >>> 12));\r\n                this.writeByteAscending(0x80 | (0x3f & (charCode >>> 6)));\r\n                this.writeByteAscending(0x80 | (0x3f & charCode));\r\n            }\r\n            else {\r\n                const codePoint = c.codePointAt(0);\r\n                this.writeByteAscending((0x0f << 4) | (codePoint >>> 18));\r\n                this.writeByteAscending(0x80 | (0x3f & (codePoint >>> 12)));\r\n                this.writeByteAscending(0x80 | (0x3f & (codePoint >>> 6)));\r\n                this.writeByteAscending(0x80 | (0x3f & codePoint));\r\n            }\r\n        }\r\n        this.writeSeparatorAscending();\r\n    }\r\n    /** Writes utf8 bytes into this byte sequence, descending */\r\n    writeUtf8Descending(sequence) {\r\n        for (const c of sequence) {\r\n            const charCode = c.charCodeAt(0);\r\n            if (charCode < 0x80) {\r\n                this.writeByteDescending(charCode);\r\n            }\r\n            else if (charCode < 0x800) {\r\n                this.writeByteDescending((0x0f << 6) | (charCode >>> 6));\r\n                this.writeByteDescending(0x80 | (0x3f & charCode));\r\n            }\r\n            else if (c < MIN_SURROGATE || MAX_SURROGATE < c) {\r\n                this.writeByteDescending((0x0f << 5) | (charCode >>> 12));\r\n                this.writeByteDescending(0x80 | (0x3f & (charCode >>> 6)));\r\n                this.writeByteDescending(0x80 | (0x3f & charCode));\r\n            }\r\n            else {\r\n                const codePoint = c.codePointAt(0);\r\n                this.writeByteDescending((0x0f << 4) | (codePoint >>> 18));\r\n                this.writeByteDescending(0x80 | (0x3f & (codePoint >>> 12)));\r\n                this.writeByteDescending(0x80 | (0x3f & (codePoint >>> 6)));\r\n                this.writeByteDescending(0x80 | (0x3f & codePoint));\r\n            }\r\n        }\r\n        this.writeSeparatorDescending();\r\n    }\r\n    writeNumberAscending(val) {\r\n        // Values are encoded with a single byte length prefix, followed by the\r\n        // actual value in big-endian format with leading 0 bytes dropped.\r\n        const value = this.toOrderedBits(val);\r\n        const len = unsignedNumLength(value);\r\n        this.ensureAvailable(1 + len);\r\n        this.buffer[this.position++] = len & 0xff; // Write the length\r\n        for (let i = value.length - len; i < value.length; ++i) {\r\n            this.buffer[this.position++] = value[i] & 0xff;\r\n        }\r\n    }\r\n    writeNumberDescending(val) {\r\n        // Values are encoded with a single byte length prefix, followed by the\r\n        // inverted value in big-endian format with leading 0 bytes dropped.\r\n        const value = this.toOrderedBits(val);\r\n        const len = unsignedNumLength(value);\r\n        this.ensureAvailable(1 + len);\r\n        this.buffer[this.position++] = ~(len & 0xff); // Write the length\r\n        for (let i = value.length - len; i < value.length; ++i) {\r\n            this.buffer[this.position++] = ~(value[i] & 0xff);\r\n        }\r\n    }\r\n    /**\r\n     * Writes the \"infinity\" byte sequence that sorts after all other byte\r\n     * sequences written in ascending order.\r\n     */\r\n    writeInfinityAscending() {\r\n        this.writeEscapedByteAscending(ESCAPE2);\r\n        this.writeEscapedByteAscending(INFINITY);\r\n    }\r\n    /**\r\n     * Writes the \"infinity\" byte sequence that sorts before all other byte\r\n     * sequences written in descending order.\r\n     */\r\n    writeInfinityDescending() {\r\n        this.writeEscapedByteDescending(ESCAPE2);\r\n        this.writeEscapedByteDescending(INFINITY);\r\n    }\r\n    /**\r\n     * Resets the buffer such that it is the same as when it was newly\r\n     * constructed.\r\n     */\r\n    reset() {\r\n        this.position = 0;\r\n    }\r\n    seed(encodedBytes) {\r\n        this.ensureAvailable(encodedBytes.length);\r\n        this.buffer.set(encodedBytes, this.position);\r\n        this.position += encodedBytes.length;\r\n    }\r\n    /** Makes a copy of the encoded bytes in this buffer.  */\r\n    encodedBytes() {\r\n        return this.buffer.slice(0, this.position);\r\n    }\r\n    /**\r\n     * Encodes `val` into an encoding so that the order matches the IEEE 754\r\n     * floating-point comparison results with the following exceptions:\r\n     *   -0.0 < 0.0\r\n     *   all non-NaN < NaN\r\n     *   NaN = NaN\r\n     */\r\n    toOrderedBits(val) {\r\n        const value = doubleToLongBits(val);\r\n        // Check if the first bit is set. We use a bit mask since value[0] is\r\n        // encoded as a number from 0 to 255.\r\n        const isNegative = (value[0] & 0x80) !== 0;\r\n        // Revert the two complement to get natural ordering\r\n        value[0] ^= isNegative ? 0xff : 0x80;\r\n        for (let i = 1; i < value.length; ++i) {\r\n            value[i] ^= isNegative ? 0xff : 0x00;\r\n        }\r\n        return value;\r\n    }\r\n    /** Writes a single byte ascending to the buffer. */\r\n    writeByteAscending(b) {\r\n        const masked = b & 0xff;\r\n        if (masked === ESCAPE1) {\r\n            this.writeEscapedByteAscending(ESCAPE1);\r\n            this.writeEscapedByteAscending(NULL_BYTE);\r\n        }\r\n        else if (masked === ESCAPE2) {\r\n            this.writeEscapedByteAscending(ESCAPE2);\r\n            this.writeEscapedByteAscending(FF_BYTE);\r\n        }\r\n        else {\r\n            this.writeEscapedByteAscending(masked);\r\n        }\r\n    }\r\n    /** Writes a single byte descending to the buffer.  */\r\n    writeByteDescending(b) {\r\n        const masked = b & 0xff;\r\n        if (masked === ESCAPE1) {\r\n            this.writeEscapedByteDescending(ESCAPE1);\r\n            this.writeEscapedByteDescending(NULL_BYTE);\r\n        }\r\n        else if (masked === ESCAPE2) {\r\n            this.writeEscapedByteDescending(ESCAPE2);\r\n            this.writeEscapedByteDescending(FF_BYTE);\r\n        }\r\n        else {\r\n            this.writeEscapedByteDescending(b);\r\n        }\r\n    }\r\n    writeSeparatorAscending() {\r\n        this.writeEscapedByteAscending(ESCAPE1);\r\n        this.writeEscapedByteAscending(SEPARATOR);\r\n    }\r\n    writeSeparatorDescending() {\r\n        this.writeEscapedByteDescending(ESCAPE1);\r\n        this.writeEscapedByteDescending(SEPARATOR);\r\n    }\r\n    writeEscapedByteAscending(b) {\r\n        this.ensureAvailable(1);\r\n        this.buffer[this.position++] = b;\r\n    }\r\n    writeEscapedByteDescending(b) {\r\n        this.ensureAvailable(1);\r\n        this.buffer[this.position++] = ~b;\r\n    }\r\n    ensureAvailable(bytes) {\r\n        const minCapacity = bytes + this.position;\r\n        if (minCapacity <= this.buffer.length) {\r\n            return;\r\n        }\r\n        // Try doubling.\r\n        let newLength = this.buffer.length * 2;\r\n        // Still not big enough? Just allocate the right size.\r\n        if (newLength < minCapacity) {\r\n            newLength = minCapacity;\r\n        }\r\n        // Create the new buffer.\r\n        const newBuffer = new Uint8Array(newLength);\r\n        newBuffer.set(this.buffer); // copy old data\r\n        this.buffer = newBuffer;\r\n    }\r\n}\n\nclass AscendingIndexByteEncoder {\r\n    constructor(orderedCode) {\r\n        this.orderedCode = orderedCode;\r\n    }\r\n    writeBytes(value) {\r\n        this.orderedCode.writeBytesAscending(value);\r\n    }\r\n    writeString(value) {\r\n        this.orderedCode.writeUtf8Ascending(value);\r\n    }\r\n    writeNumber(value) {\r\n        this.orderedCode.writeNumberAscending(value);\r\n    }\r\n    writeInfinity() {\r\n        this.orderedCode.writeInfinityAscending();\r\n    }\r\n}\r\nclass DescendingIndexByteEncoder {\r\n    constructor(orderedCode) {\r\n        this.orderedCode = orderedCode;\r\n    }\r\n    writeBytes(value) {\r\n        this.orderedCode.writeBytesDescending(value);\r\n    }\r\n    writeString(value) {\r\n        this.orderedCode.writeUtf8Descending(value);\r\n    }\r\n    writeNumber(value) {\r\n        this.orderedCode.writeNumberDescending(value);\r\n    }\r\n    writeInfinity() {\r\n        this.orderedCode.writeInfinityDescending();\r\n    }\r\n}\r\n/**\r\n * Implements `DirectionalIndexByteEncoder` using `OrderedCodeWriter` for the\r\n * actual encoding.\r\n */\r\nclass IndexByteEncoder {\r\n    constructor() {\r\n        this.orderedCode = new OrderedCodeWriter();\r\n        this.ascending = new AscendingIndexByteEncoder(this.orderedCode);\r\n        this.descending = new DescendingIndexByteEncoder(this.orderedCode);\r\n    }\r\n    seed(encodedBytes) {\r\n        this.orderedCode.seed(encodedBytes);\r\n    }\r\n    forKind(kind) {\r\n        return kind === 0 /* IndexKind.ASCENDING */ ? this.ascending : this.descending;\r\n    }\r\n    encodedBytes() {\r\n        return this.orderedCode.encodedBytes();\r\n    }\r\n    reset() {\r\n        this.orderedCode.reset();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Represents an index entry saved by the SDK in persisted storage. */\r\nclass IndexEntry {\r\n    constructor(indexId, documentKey, arrayValue, directionalValue) {\r\n        this.indexId = indexId;\r\n        this.documentKey = documentKey;\r\n        this.arrayValue = arrayValue;\r\n        this.directionalValue = directionalValue;\r\n    }\r\n    /**\r\n     * Returns an IndexEntry entry that sorts immediately after the current\r\n     * directional value.\r\n     */\r\n    successor() {\r\n        const currentLength = this.directionalValue.length;\r\n        const newLength = currentLength === 0 || this.directionalValue[currentLength - 1] === 255\r\n            ? currentLength + 1\r\n            : currentLength;\r\n        const successor = new Uint8Array(newLength);\r\n        successor.set(this.directionalValue, 0);\r\n        if (newLength !== currentLength) {\r\n            successor.set([0], this.directionalValue.length);\r\n        }\r\n        else {\r\n            ++successor[successor.length - 1];\r\n        }\r\n        return new IndexEntry(this.indexId, this.documentKey, this.arrayValue, successor);\r\n    }\r\n}\r\nfunction indexEntryComparator(left, right) {\r\n    let cmp = left.indexId - right.indexId;\r\n    if (cmp !== 0) {\r\n        return cmp;\r\n    }\r\n    cmp = compareByteArrays(left.arrayValue, right.arrayValue);\r\n    if (cmp !== 0) {\r\n        return cmp;\r\n    }\r\n    cmp = compareByteArrays(left.directionalValue, right.directionalValue);\r\n    if (cmp !== 0) {\r\n        return cmp;\r\n    }\r\n    return DocumentKey.comparator(left.documentKey, right.documentKey);\r\n}\r\nfunction compareByteArrays(left, right) {\r\n    for (let i = 0; i < left.length && i < right.length; ++i) {\r\n        const compare = left[i] - right[i];\r\n        if (compare !== 0) {\r\n            return compare;\r\n        }\r\n    }\r\n    return left.length - right.length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light query planner for Firestore.\r\n *\r\n * This class matches a `FieldIndex` against a Firestore Query `Target`. It\r\n * determines whether a given index can be used to serve the specified target.\r\n *\r\n * The following table showcases some possible index configurations:\r\n *\r\n * Query                                               | Index\r\n * -----------------------------------------------------------------------------\r\n * where('a', '==', 'a').where('b', '==', 'b')         | a ASC, b DESC\r\n * where('a', '==', 'a').where('b', '==', 'b')         | a ASC\r\n * where('a', '==', 'a').where('b', '==', 'b')         | b DESC\r\n * where('a', '>=', 'a').orderBy('a')                  | a ASC\r\n * where('a', '>=', 'a').orderBy('a', 'desc')          | a DESC\r\n * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC, b ASC\r\n * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC\r\n * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS, b ASCENDING\r\n * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS\r\n */\r\nclass TargetIndexMatcher {\r\n    constructor(target) {\r\n        this.collectionId =\r\n            target.collectionGroup != null\r\n                ? target.collectionGroup\r\n                : target.path.lastSegment();\r\n        this.orderBys = target.orderBy;\r\n        this.equalityFilters = [];\r\n        for (const filter of target.filters) {\r\n            const fieldFilter = filter;\r\n            if (fieldFilter.isInequality()) {\r\n                this.inequalityFilter = fieldFilter;\r\n            }\r\n            else {\r\n                this.equalityFilters.push(fieldFilter);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns whether the index can be used to serve the TargetIndexMatcher's\r\n     * target.\r\n     *\r\n     * An index is considered capable of serving the target when:\r\n     * - The target uses all index segments for its filters and orderBy clauses.\r\n     *   The target can have additional filter and orderBy clauses, but not\r\n     *   fewer.\r\n     * - If an ArrayContains/ArrayContainsAnyfilter is used, the index must also\r\n     *   have a corresponding `CONTAINS` segment.\r\n     * - All directional index segments can be mapped to the target as a series of\r\n     *   equality filters, a single inequality filter and a series of orderBy\r\n     *   clauses.\r\n     * - The segments that represent the equality filters may appear out of order.\r\n     * - The optional segment for the inequality filter must appear after all\r\n     *   equality segments.\r\n     * - The segments that represent that orderBy clause of the target must appear\r\n     *   in order after all equality and inequality segments. Single orderBy\r\n     *   clauses cannot be skipped, but a continuous orderBy suffix may be\r\n     *   omitted.\r\n     */\r\n    servedByIndex(index) {\r\n        hardAssert(index.collectionGroup === this.collectionId);\r\n        // If there is an array element, find a matching filter.\r\n        const arraySegment = fieldIndexGetArraySegment(index);\r\n        if (arraySegment !== undefined &&\r\n            !this.hasMatchingEqualityFilter(arraySegment)) {\r\n            return false;\r\n        }\r\n        const segments = fieldIndexGetDirectionalSegments(index);\r\n        let equalitySegments = new Set();\r\n        let segmentIndex = 0;\r\n        let orderBysIndex = 0;\r\n        // Process all equalities first. Equalities can appear out of order.\r\n        for (; segmentIndex < segments.length; ++segmentIndex) {\r\n            // We attempt to greedily match all segments to equality filters. If a\r\n            // filter matches an index segment, we can mark the segment as used.\r\n            if (this.hasMatchingEqualityFilter(segments[segmentIndex])) {\r\n                equalitySegments = equalitySegments.add(segments[segmentIndex].fieldPath.canonicalString());\r\n            }\r\n            else {\r\n                // If we cannot find a matching filter, we need to verify whether the\r\n                // remaining segments map to the target's inequality and its orderBy\r\n                // clauses.\r\n                break;\r\n            }\r\n        }\r\n        // If we already have processed all segments, all segments are used to serve\r\n        // the equality filters and we do not need to map any segments to the\r\n        // target's inequality and orderBy clauses.\r\n        if (segmentIndex === segments.length) {\r\n            return true;\r\n        }\r\n        if (this.inequalityFilter !== undefined) {\r\n            // If there is an inequality filter and the field was not in one of the\r\n            // equality filters above, the next segment must match both the filter\r\n            // and the first orderBy clause.\r\n            if (!equalitySegments.has(this.inequalityFilter.field.canonicalString())) {\r\n                const segment = segments[segmentIndex];\r\n                if (!this.matchesFilter(this.inequalityFilter, segment) ||\r\n                    !this.matchesOrderBy(this.orderBys[orderBysIndex++], segment)) {\r\n                    return false;\r\n                }\r\n            }\r\n            ++segmentIndex;\r\n        }\r\n        // All remaining segments need to represent the prefix of the target's\r\n        // orderBy.\r\n        for (; segmentIndex < segments.length; ++segmentIndex) {\r\n            const segment = segments[segmentIndex];\r\n            if (orderBysIndex >= this.orderBys.length ||\r\n                !this.matchesOrderBy(this.orderBys[orderBysIndex++], segment)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    hasMatchingEqualityFilter(segment) {\r\n        for (const filter of this.equalityFilters) {\r\n            if (this.matchesFilter(filter, segment)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    matchesFilter(filter, segment) {\r\n        if (filter === undefined || !filter.field.isEqual(segment.fieldPath)) {\r\n            return false;\r\n        }\r\n        const isArrayOperator = filter.op === \"array-contains\" /* Operator.ARRAY_CONTAINS */ ||\r\n            filter.op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */;\r\n        return (segment.kind === 2 /* IndexKind.CONTAINS */) === isArrayOperator;\r\n    }\r\n    matchesOrderBy(orderBy, segment) {\r\n        if (!orderBy.field.isEqual(segment.fieldPath)) {\r\n            return false;\r\n        }\r\n        return ((segment.kind === 0 /* IndexKind.ASCENDING */ &&\r\n            orderBy.dir === \"asc\" /* Direction.ASCENDING */) ||\r\n            (segment.kind === 1 /* IndexKind.DESCENDING */ &&\r\n                orderBy.dir === \"desc\" /* Direction.DESCENDING */));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides utility functions that help with boolean logic transformations needed for handling\r\n * complex filters used in queries.\r\n */\r\n/**\r\n * The `in` filter is only a syntactic sugar over a disjunction of equalities. For instance: `a in\r\n * [1,2,3]` is in fact `a==1 || a==2 || a==3`. This method expands any `in` filter in the given\r\n * input into a disjunction of equality filters and returns the expanded filter.\r\n */\r\nfunction computeInExpansion(filter) {\r\n    var _a, _b;\r\n    hardAssert(filter instanceof FieldFilter || filter instanceof CompositeFilter);\r\n    if (filter instanceof FieldFilter) {\r\n        if (filter instanceof InFilter) {\r\n            const expandedFilters = ((_b = (_a = filter.value.arrayValue) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.map(value => FieldFilter.create(filter.field, \"==\" /* Operator.EQUAL */, value))) || [];\r\n            return CompositeFilter.create(expandedFilters, \"or\" /* CompositeOperator.OR */);\r\n        }\r\n        else {\r\n            // We have reached other kinds of field filters.\r\n            return filter;\r\n        }\r\n    }\r\n    // We have a composite filter.\r\n    const expandedFilters = filter.filters.map(subfilter => computeInExpansion(subfilter));\r\n    return CompositeFilter.create(expandedFilters, filter.op);\r\n}\r\n/**\r\n * Given a composite filter, returns the list of terms in its disjunctive normal form.\r\n *\r\n * <p>Each element in the return value is one term of the resulting DNF. For instance: For the\r\n * input: (A || B) && C, the DNF form is: (A && C) || (B && C), and the return value is a list\r\n * with two elements: a composite filter that performs (A && C), and a composite filter that\r\n * performs (B && C).\r\n *\r\n * @param filter the composite filter to calculate DNF transform for.\r\n * @return the terms in the DNF transform.\r\n */\r\nfunction getDnfTerms(filter) {\r\n    if (filter.getFilters().length === 0) {\r\n        return [];\r\n    }\r\n    const result = computeDistributedNormalForm(computeInExpansion(filter));\r\n    hardAssert(isDisjunctiveNormalForm(result));\r\n    if (isSingleFieldFilter(result) || isFlatConjunction(result)) {\r\n        return [result];\r\n    }\r\n    return result.getFilters();\r\n}\r\n/** Returns true if the given filter is a single field filter. e.g. (a == 10). */\r\nfunction isSingleFieldFilter(filter) {\r\n    return filter instanceof FieldFilter;\r\n}\r\n/**\r\n * Returns true if the given filter is the conjunction of one or more field filters. e.g. (a == 10\r\n * && b == 20)\r\n */\r\nfunction isFlatConjunction(filter) {\r\n    return (filter instanceof CompositeFilter &&\r\n        compositeFilterIsFlatConjunction(filter));\r\n}\r\n/**\r\n * Returns whether or not the given filter is in disjunctive normal form (DNF).\r\n *\r\n * <p>In boolean logic, a disjunctive normal form (DNF) is a canonical normal form of a logical\r\n * formula consisting of a disjunction of conjunctions; it can also be described as an OR of ANDs.\r\n *\r\n * <p>For more info, visit: https://en.wikipedia.org/wiki/Disjunctive_normal_form\r\n */\r\nfunction isDisjunctiveNormalForm(filter) {\r\n    return (isSingleFieldFilter(filter) ||\r\n        isFlatConjunction(filter) ||\r\n        isDisjunctionOfFieldFiltersAndFlatConjunctions(filter));\r\n}\r\n/**\r\n * Returns true if the given filter is the disjunction of one or more \"flat conjunctions\" and\r\n * field filters. e.g. (a == 10) || (b==20 && c==30)\r\n */\r\nfunction isDisjunctionOfFieldFiltersAndFlatConjunctions(filter) {\r\n    if (filter instanceof CompositeFilter) {\r\n        if (compositeFilterIsDisjunction(filter)) {\r\n            for (const subFilter of filter.getFilters()) {\r\n                if (!isSingleFieldFilter(subFilter) && !isFlatConjunction(subFilter)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction computeDistributedNormalForm(filter) {\r\n    hardAssert(filter instanceof FieldFilter || filter instanceof CompositeFilter);\r\n    if (filter instanceof FieldFilter) {\r\n        return filter;\r\n    }\r\n    if (filter.filters.length === 1) {\r\n        return computeDistributedNormalForm(filter.filters[0]);\r\n    }\r\n    // Compute DNF for each of the subfilters first\r\n    const result = filter.filters.map(subfilter => computeDistributedNormalForm(subfilter));\r\n    let newFilter = CompositeFilter.create(result, filter.op);\r\n    newFilter = applyAssociation(newFilter);\r\n    if (isDisjunctiveNormalForm(newFilter)) {\r\n        return newFilter;\r\n    }\r\n    hardAssert(newFilter instanceof CompositeFilter);\r\n    hardAssert(compositeFilterIsConjunction(newFilter));\r\n    hardAssert(newFilter.filters.length > 1);\r\n    return newFilter.filters.reduce((runningResult, filter) => applyDistribution(runningResult, filter));\r\n}\r\nfunction applyDistribution(lhs, rhs) {\r\n    hardAssert(lhs instanceof FieldFilter || lhs instanceof CompositeFilter);\r\n    hardAssert(rhs instanceof FieldFilter || rhs instanceof CompositeFilter);\r\n    let result;\r\n    if (lhs instanceof FieldFilter) {\r\n        if (rhs instanceof FieldFilter) {\r\n            // FieldFilter FieldFilter\r\n            result = applyDistributionFieldFilters(lhs, rhs);\r\n        }\r\n        else {\r\n            // FieldFilter CompositeFilter\r\n            result = applyDistributionFieldAndCompositeFilters(lhs, rhs);\r\n        }\r\n    }\r\n    else {\r\n        if (rhs instanceof FieldFilter) {\r\n            // CompositeFilter FieldFilter\r\n            result = applyDistributionFieldAndCompositeFilters(rhs, lhs);\r\n        }\r\n        else {\r\n            // CompositeFilter CompositeFilter\r\n            result = applyDistributionCompositeFilters(lhs, rhs);\r\n        }\r\n    }\r\n    return applyAssociation(result);\r\n}\r\nfunction applyDistributionFieldFilters(lhs, rhs) {\r\n    // Conjunction distribution for two field filters is the conjunction of them.\r\n    return CompositeFilter.create([lhs, rhs], \"and\" /* CompositeOperator.AND */);\r\n}\r\nfunction applyDistributionCompositeFilters(lhs, rhs) {\r\n    hardAssert(lhs.filters.length > 0 && rhs.filters.length > 0);\r\n    // There are four cases:\r\n    // (A & B) & (C & D) --> (A & B & C & D)\r\n    // (A & B) & (C | D) --> (A & B & C) | (A & B & D)\r\n    // (A | B) & (C & D) --> (C & D & A) | (C & D & B)\r\n    // (A | B) & (C | D) --> (A & C) | (A & D) | (B & C) | (B & D)\r\n    // Case 1 is a merge.\r\n    if (compositeFilterIsConjunction(lhs) && compositeFilterIsConjunction(rhs)) {\r\n        return compositeFilterWithAddedFilters(lhs, rhs.getFilters());\r\n    }\r\n    // Case 2,3,4 all have at least one side (lhs or rhs) that is a disjunction. In all three cases\r\n    // we should take each element of the disjunction and distribute it over the other side, and\r\n    // return the disjunction of the distribution results.\r\n    const disjunctionSide = compositeFilterIsDisjunction(lhs) ? lhs : rhs;\r\n    const otherSide = compositeFilterIsDisjunction(lhs) ? rhs : lhs;\r\n    const results = disjunctionSide.filters.map(subfilter => applyDistribution(subfilter, otherSide));\r\n    return CompositeFilter.create(results, \"or\" /* CompositeOperator.OR */);\r\n}\r\nfunction applyDistributionFieldAndCompositeFilters(fieldFilter, compositeFilter) {\r\n    // There are two cases:\r\n    // A & (B & C) --> (A & B & C)\r\n    // A & (B | C) --> (A & B) | (A & C)\r\n    if (compositeFilterIsConjunction(compositeFilter)) {\r\n        // Case 1\r\n        return compositeFilterWithAddedFilters(compositeFilter, fieldFilter.getFilters());\r\n    }\r\n    else {\r\n        // Case 2\r\n        const newFilters = compositeFilter.filters.map(subfilter => applyDistribution(fieldFilter, subfilter));\r\n        return CompositeFilter.create(newFilters, \"or\" /* CompositeOperator.OR */);\r\n    }\r\n}\r\n/**\r\n * Applies the associativity property to the given filter and returns the resulting filter.\r\n *\r\n * <ul>\r\n *   <li>A | (B | C) == (A | B) | C == (A | B | C)\r\n *   <li>A & (B & C) == (A & B) & C == (A & B & C)\r\n * </ul>\r\n *\r\n * <p>For more info, visit: https://en.wikipedia.org/wiki/Associative_property#Propositional_logic\r\n */\r\nfunction applyAssociation(filter) {\r\n    hardAssert(filter instanceof FieldFilter || filter instanceof CompositeFilter);\r\n    if (filter instanceof FieldFilter) {\r\n        return filter;\r\n    }\r\n    const filters = filter.getFilters();\r\n    // If the composite filter only contains 1 filter, apply associativity to it.\r\n    if (filters.length === 1) {\r\n        return applyAssociation(filters[0]);\r\n    }\r\n    // Associativity applied to a flat composite filter results is itself.\r\n    if (compositeFilterIsFlat(filter)) {\r\n        return filter;\r\n    }\r\n    // First apply associativity to all subfilters. This will in turn recursively apply\r\n    // associativity to all nested composite filters and field filters.\r\n    const updatedFilters = filters.map(subfilter => applyAssociation(subfilter));\r\n    // For composite subfilters that perform the same kind of logical operation as `compositeFilter`\r\n    // take out their filters and add them to `compositeFilter`. For example:\r\n    // compositeFilter = (A | (B | C | D))\r\n    // compositeSubfilter = (B | C | D)\r\n    // Result: (A | B | C | D)\r\n    // Note that the `compositeSubfilter` has been eliminated, and its filters (B, C, D) have been\r\n    // added to the top-level \"compositeFilter\".\r\n    const newSubfilters = [];\r\n    updatedFilters.forEach(subfilter => {\r\n        if (subfilter instanceof FieldFilter) {\r\n            newSubfilters.push(subfilter);\r\n        }\r\n        else if (subfilter instanceof CompositeFilter) {\r\n            if (subfilter.op === filter.op) {\r\n                // compositeFilter: (A | (B | C))\r\n                // compositeSubfilter: (B | C)\r\n                // Result: (A | B | C)\r\n                newSubfilters.push(...subfilter.filters);\r\n            }\r\n            else {\r\n                // compositeFilter: (A | (B & C))\r\n                // compositeSubfilter: (B & C)\r\n                // Result: (A | (B & C))\r\n                newSubfilters.push(subfilter);\r\n            }\r\n        }\r\n    });\r\n    if (newSubfilters.length === 1) {\r\n        return newSubfilters[0];\r\n    }\r\n    return CompositeFilter.create(newSubfilters, filter.op);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory implementation of IndexManager.\r\n */\r\nclass MemoryIndexManager {\r\n    constructor() {\r\n        this.collectionParentIndex = new MemoryCollectionParentIndex();\r\n    }\r\n    addToCollectionParentIndex(transaction, collectionPath) {\r\n        this.collectionParentIndex.add(collectionPath);\r\n        return PersistencePromise.resolve();\r\n    }\r\n    getCollectionParents(transaction, collectionId) {\r\n        return PersistencePromise.resolve(this.collectionParentIndex.getEntries(collectionId));\r\n    }\r\n    addFieldIndex(transaction, index) {\r\n        // Field indices are not supported with memory persistence.\r\n        return PersistencePromise.resolve();\r\n    }\r\n    deleteFieldIndex(transaction, index) {\r\n        // Field indices are not supported with memory persistence.\r\n        return PersistencePromise.resolve();\r\n    }\r\n    getDocumentsMatchingTarget(transaction, target) {\r\n        // Field indices are not supported with memory persistence.\r\n        return PersistencePromise.resolve(null);\r\n    }\r\n    getIndexType(transaction, target) {\r\n        // Field indices are not supported with memory persistence.\r\n        return PersistencePromise.resolve(0 /* IndexType.NONE */);\r\n    }\r\n    getFieldIndexes(transaction, collectionGroup) {\r\n        // Field indices are not supported with memory persistence.\r\n        return PersistencePromise.resolve([]);\r\n    }\r\n    getNextCollectionGroupToUpdate(transaction) {\r\n        // Field indices are not supported with memory persistence.\r\n        return PersistencePromise.resolve(null);\r\n    }\r\n    getMinOffset(transaction, target) {\r\n        return PersistencePromise.resolve(IndexOffset.min());\r\n    }\r\n    getMinOffsetFromCollectionGroup(transaction, collectionGroup) {\r\n        return PersistencePromise.resolve(IndexOffset.min());\r\n    }\r\n    updateCollectionGroup(transaction, collectionGroup, offset) {\r\n        // Field indices are not supported with memory persistence.\r\n        return PersistencePromise.resolve();\r\n    }\r\n    updateIndexEntries(transaction, documents) {\r\n        // Field indices are not supported with memory persistence.\r\n        return PersistencePromise.resolve();\r\n    }\r\n}\r\n/**\r\n * Internal implementation of the collection-parent index exposed by MemoryIndexManager.\r\n * Also used for in-memory caching by IndexedDbIndexManager and initial index population\r\n * in indexeddb_schema.ts\r\n */\r\nclass MemoryCollectionParentIndex {\r\n    constructor() {\r\n        this.index = {};\r\n    }\r\n    // Returns false if the entry already existed.\r\n    add(collectionPath) {\r\n        const collectionId = collectionPath.lastSegment();\r\n        const parentPath = collectionPath.popLast();\r\n        const existingParents = this.index[collectionId] ||\r\n            new SortedSet(ResourcePath.comparator);\r\n        const added = !existingParents.has(parentPath);\r\n        this.index[collectionId] = existingParents.add(parentPath);\r\n        return added;\r\n    }\r\n    has(collectionPath) {\r\n        const collectionId = collectionPath.lastSegment();\r\n        const parentPath = collectionPath.popLast();\r\n        const existingParents = this.index[collectionId];\r\n        return existingParents && existingParents.has(parentPath);\r\n    }\r\n    getEntries(collectionId) {\r\n        const parentPaths = this.index[collectionId] ||\r\n            new SortedSet(ResourcePath.comparator);\r\n        return parentPaths.toArray();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$f = 'IndexedDbIndexManager';\r\nconst EMPTY_VALUE = new Uint8Array(0);\r\n/**\r\n * A persisted implementation of IndexManager.\r\n *\r\n * PORTING NOTE: Unlike iOS and Android, the Web SDK does not memoize index\r\n * data as it supports multi-tab access.\r\n */\r\nclass IndexedDbIndexManager {\r\n    constructor(user, databaseId) {\r\n        this.user = user;\r\n        this.databaseId = databaseId;\r\n        /**\r\n         * An in-memory copy of the index entries we've already written since the SDK\r\n         * launched. Used to avoid re-writing the same entry repeatedly.\r\n         *\r\n         * This is *NOT* a complete cache of what's in persistence and so can never be\r\n         * used to satisfy reads.\r\n         */\r\n        this.collectionParentsCache = new MemoryCollectionParentIndex();\r\n        /**\r\n         * Maps from a target to its equivalent list of sub-targets. Each sub-target\r\n         * contains only one term from the target's disjunctive normal form (DNF).\r\n         */\r\n        this.targetToDnfSubTargets = new ObjectMap(t => canonifyTarget(t), (l, r) => targetEquals(l, r));\r\n        this.uid = user.uid || '';\r\n    }\r\n    /**\r\n     * Adds a new entry to the collection parent index.\r\n     *\r\n     * Repeated calls for the same collectionPath should be avoided within a\r\n     * transaction as IndexedDbIndexManager only caches writes once a transaction\r\n     * has been committed.\r\n     */\r\n    addToCollectionParentIndex(transaction, collectionPath) {\r\n        if (!this.collectionParentsCache.has(collectionPath)) {\r\n            const collectionId = collectionPath.lastSegment();\r\n            const parentPath = collectionPath.popLast();\r\n            transaction.addOnCommittedListener(() => {\r\n                // Add the collection to the in memory cache only if the transaction was\r\n                // successfully committed.\r\n                this.collectionParentsCache.add(collectionPath);\r\n            });\r\n            const collectionParent = {\r\n                collectionId,\r\n                parent: encodeResourcePath(parentPath)\r\n            };\r\n            return collectionParentsStore(transaction).put(collectionParent);\r\n        }\r\n        return PersistencePromise.resolve();\r\n    }\r\n    getCollectionParents(transaction, collectionId) {\r\n        const parentPaths = [];\r\n        const range = IDBKeyRange.bound([collectionId, ''], [immediateSuccessor(collectionId), ''], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true);\r\n        return collectionParentsStore(transaction)\r\n            .loadAll(range)\r\n            .next(entries => {\r\n            for (const entry of entries) {\r\n                // This collectionId guard shouldn't be necessary (and isn't as long\r\n                // as we're running in a real browser), but there's a bug in\r\n                // indexeddbshim that breaks our range in our tests running in node:\r\n                // https://github.com/axemclion/IndexedDBShim/issues/334\r\n                if (entry.collectionId !== collectionId) {\r\n                    break;\r\n                }\r\n                parentPaths.push(decodeResourcePath(entry.parent));\r\n            }\r\n            return parentPaths;\r\n        });\r\n    }\r\n    addFieldIndex(transaction, index) {\r\n        // TODO(indexing): Verify that the auto-incrementing index ID works in\r\n        // Safari & Firefox.\r\n        const indexes = indexConfigurationStore(transaction);\r\n        const dbIndex = toDbIndexConfiguration(index);\r\n        delete dbIndex.indexId; // `indexId` is auto-populated by IndexedDb\r\n        const result = indexes.add(dbIndex);\r\n        if (index.indexState) {\r\n            const states = indexStateStore(transaction);\r\n            return result.next(indexId => {\r\n                states.put(toDbIndexState(indexId, this.user, index.indexState.sequenceNumber, index.indexState.offset));\r\n            });\r\n        }\r\n        else {\r\n            return result.next();\r\n        }\r\n    }\r\n    deleteFieldIndex(transaction, index) {\r\n        const indexes = indexConfigurationStore(transaction);\r\n        const states = indexStateStore(transaction);\r\n        const entries = indexEntriesStore(transaction);\r\n        return indexes\r\n            .delete(index.indexId)\r\n            .next(() => states.delete(IDBKeyRange.bound([index.indexId], [index.indexId + 1], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true)))\r\n            .next(() => entries.delete(IDBKeyRange.bound([index.indexId], [index.indexId + 1], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true)));\r\n    }\r\n    getDocumentsMatchingTarget(transaction, target) {\r\n        const indexEntries = indexEntriesStore(transaction);\r\n        let canServeTarget = true;\r\n        const indexes = new Map();\r\n        return PersistencePromise.forEach(this.getSubTargets(target), (subTarget) => {\r\n            return this.getFieldIndex(transaction, subTarget).next(index => {\r\n                canServeTarget && (canServeTarget = !!index);\r\n                indexes.set(subTarget, index);\r\n            });\r\n        }).next(() => {\r\n            if (!canServeTarget) {\r\n                return PersistencePromise.resolve(null);\r\n            }\r\n            else {\r\n                let existingKeys = documentKeySet();\r\n                const result = [];\r\n                return PersistencePromise.forEach(indexes, (index, subTarget) => {\r\n                    logDebug(LOG_TAG$f, `Using index ${fieldIndexToString(index)} to execute ${canonifyTarget(target)}`);\r\n                    const arrayValues = targetGetArrayValues(subTarget, index);\r\n                    const notInValues = targetGetNotInValues(subTarget, index);\r\n                    const lowerBound = targetGetLowerBound(subTarget, index);\r\n                    const upperBound = targetGetUpperBound(subTarget, index);\r\n                    const lowerBoundEncoded = this.encodeBound(index, subTarget, lowerBound);\r\n                    const upperBoundEncoded = this.encodeBound(index, subTarget, upperBound);\r\n                    const notInEncoded = this.encodeValues(index, subTarget, notInValues);\r\n                    const indexRanges = this.generateIndexRanges(index.indexId, arrayValues, lowerBoundEncoded, lowerBound.inclusive, upperBoundEncoded, upperBound.inclusive, notInEncoded);\r\n                    return PersistencePromise.forEach(indexRanges, (indexRange) => {\r\n                        return indexEntries\r\n                            .loadFirst(indexRange, target.limit)\r\n                            .next(entries => {\r\n                            entries.forEach(entry => {\r\n                                const documentKey = DocumentKey.fromSegments(entry.documentKey);\r\n                                if (!existingKeys.has(documentKey)) {\r\n                                    existingKeys = existingKeys.add(documentKey);\r\n                                    result.push(documentKey);\r\n                                }\r\n                            });\r\n                        });\r\n                    });\r\n                }).next(() => result);\r\n            }\r\n        });\r\n    }\r\n    getSubTargets(target) {\r\n        let subTargets = this.targetToDnfSubTargets.get(target);\r\n        if (subTargets) {\r\n            return subTargets;\r\n        }\r\n        if (target.filters.length === 0) {\r\n            subTargets = [target];\r\n        }\r\n        else {\r\n            // There is an implicit AND operation between all the filters stored in the target\r\n            const dnf = getDnfTerms(CompositeFilter.create(target.filters, \"and\" /* CompositeOperator.AND */));\r\n            subTargets = dnf.map(term => newTarget(target.path, target.collectionGroup, target.orderBy, term.getFilters(), target.limit, target.startAt, target.endAt));\r\n        }\r\n        this.targetToDnfSubTargets.set(target, subTargets);\r\n        return subTargets;\r\n    }\r\n    /**\r\n     * Constructs a key range query on `DbIndexEntryStore` that unions all\r\n     * bounds.\r\n     */\r\n    generateIndexRanges(indexId, arrayValues, lowerBounds, lowerBoundInclusive, upperBounds, upperBoundInclusive, notInValues) {\r\n        // The number of total index scans we union together. This is similar to a\r\n        // distributed normal form, but adapted for array values. We create a single\r\n        // index range per value in an ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filter\r\n        // combined with the values from the query bounds.\r\n        const totalScans = (arrayValues != null ? arrayValues.length : 1) *\r\n            Math.max(lowerBounds.length, upperBounds.length);\r\n        const scansPerArrayElement = totalScans / (arrayValues != null ? arrayValues.length : 1);\r\n        const indexRanges = [];\r\n        for (let i = 0; i < totalScans; ++i) {\r\n            const arrayValue = arrayValues\r\n                ? this.encodeSingleElement(arrayValues[i / scansPerArrayElement])\r\n                : EMPTY_VALUE;\r\n            const lowerBound = this.generateLowerBound(indexId, arrayValue, lowerBounds[i % scansPerArrayElement], lowerBoundInclusive);\r\n            const upperBound = this.generateUpperBound(indexId, arrayValue, upperBounds[i % scansPerArrayElement], upperBoundInclusive);\r\n            const notInBound = notInValues.map(notIn => this.generateLowerBound(indexId, arrayValue, notIn, \r\n            /* inclusive= */ true));\r\n            indexRanges.push(...this.createRange(lowerBound, upperBound, notInBound));\r\n        }\r\n        return indexRanges;\r\n    }\r\n    /** Generates the lower bound for `arrayValue` and `directionalValue`. */\r\n    generateLowerBound(indexId, arrayValue, directionalValue, inclusive) {\r\n        const entry = new IndexEntry(indexId, DocumentKey.empty(), arrayValue, directionalValue);\r\n        return inclusive ? entry : entry.successor();\r\n    }\r\n    /** Generates the upper bound for `arrayValue` and `directionalValue`. */\r\n    generateUpperBound(indexId, arrayValue, directionalValue, inclusive) {\r\n        const entry = new IndexEntry(indexId, DocumentKey.empty(), arrayValue, directionalValue);\r\n        return inclusive ? entry.successor() : entry;\r\n    }\r\n    getFieldIndex(transaction, target) {\r\n        const targetIndexMatcher = new TargetIndexMatcher(target);\r\n        const collectionGroup = target.collectionGroup != null\r\n            ? target.collectionGroup\r\n            : target.path.lastSegment();\r\n        return this.getFieldIndexes(transaction, collectionGroup).next(indexes => {\r\n            // Return the index with the most number of segments.\r\n            let index = null;\r\n            for (const candidate of indexes) {\r\n                const matches = targetIndexMatcher.servedByIndex(candidate);\r\n                if (matches &&\r\n                    (!index || candidate.fields.length > index.fields.length)) {\r\n                    index = candidate;\r\n                }\r\n            }\r\n            return index;\r\n        });\r\n    }\r\n    getIndexType(transaction, target) {\r\n        let indexType = 2 /* IndexType.FULL */;\r\n        const subTargets = this.getSubTargets(target);\r\n        return PersistencePromise.forEach(subTargets, (target) => {\r\n            return this.getFieldIndex(transaction, target).next(index => {\r\n                if (!index) {\r\n                    indexType = 0 /* IndexType.NONE */;\r\n                }\r\n                else if (indexType !== 0 /* IndexType.NONE */ &&\r\n                    index.fields.length < targetGetSegmentCount(target)) {\r\n                    indexType = 1 /* IndexType.PARTIAL */;\r\n                }\r\n            });\r\n        }).next(() => {\r\n            // OR queries have more than one sub-target (one sub-target per DNF term). We currently consider\r\n            // OR queries that have a `limit` to have a partial index. For such queries we perform sorting\r\n            // and apply the limit in memory as a post-processing step.\r\n            if (targetHasLimit(target) &&\r\n                subTargets.length > 1 &&\r\n                indexType === 2 /* IndexType.FULL */) {\r\n                return 1 /* IndexType.PARTIAL */;\r\n            }\r\n            return indexType;\r\n        });\r\n    }\r\n    /**\r\n     * Returns the byte encoded form of the directional values in the field index.\r\n     * Returns `null` if the document does not have all fields specified in the\r\n     * index.\r\n     */\r\n    encodeDirectionalElements(fieldIndex, document) {\r\n        const encoder = new IndexByteEncoder();\r\n        for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\r\n            const field = document.data.field(segment.fieldPath);\r\n            if (field == null) {\r\n                return null;\r\n            }\r\n            const directionalEncoder = encoder.forKind(segment.kind);\r\n            FirestoreIndexValueWriter.INSTANCE.writeIndexValue(field, directionalEncoder);\r\n        }\r\n        return encoder.encodedBytes();\r\n    }\r\n    /** Encodes a single value to the ascending index format. */\r\n    encodeSingleElement(value) {\r\n        const encoder = new IndexByteEncoder();\r\n        FirestoreIndexValueWriter.INSTANCE.writeIndexValue(value, encoder.forKind(0 /* IndexKind.ASCENDING */));\r\n        return encoder.encodedBytes();\r\n    }\r\n    /**\r\n     * Returns an encoded form of the document key that sorts based on the key\r\n     * ordering of the field index.\r\n     */\r\n    encodeDirectionalKey(fieldIndex, documentKey) {\r\n        const encoder = new IndexByteEncoder();\r\n        FirestoreIndexValueWriter.INSTANCE.writeIndexValue(refValue(this.databaseId, documentKey), encoder.forKind(fieldIndexGetKeyOrder(fieldIndex)));\r\n        return encoder.encodedBytes();\r\n    }\r\n    /**\r\n     * Encodes the given field values according to the specification in `target`.\r\n     * For IN queries, a list of possible values is returned.\r\n     */\r\n    encodeValues(fieldIndex, target, values) {\r\n        if (values === null) {\r\n            return [];\r\n        }\r\n        let encoders = [];\r\n        encoders.push(new IndexByteEncoder());\r\n        let valueIdx = 0;\r\n        for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\r\n            const value = values[valueIdx++];\r\n            for (const encoder of encoders) {\r\n                if (this.isInFilter(target, segment.fieldPath) && isArray(value)) {\r\n                    encoders = this.expandIndexValues(encoders, segment, value);\r\n                }\r\n                else {\r\n                    const directionalEncoder = encoder.forKind(segment.kind);\r\n                    FirestoreIndexValueWriter.INSTANCE.writeIndexValue(value, directionalEncoder);\r\n                }\r\n            }\r\n        }\r\n        return this.getEncodedBytes(encoders);\r\n    }\r\n    /**\r\n     * Encodes the given bounds according to the specification in `target`. For IN\r\n     * queries, a list of possible values is returned.\r\n     */\r\n    encodeBound(fieldIndex, target, bound) {\r\n        return this.encodeValues(fieldIndex, target, bound.position);\r\n    }\r\n    /** Returns the byte representation for the provided encoders. */\r\n    getEncodedBytes(encoders) {\r\n        const result = [];\r\n        for (let i = 0; i < encoders.length; ++i) {\r\n            result[i] = encoders[i].encodedBytes();\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Creates a separate encoder for each element of an array.\r\n     *\r\n     * The method appends each value to all existing encoders (e.g. filter(\"a\",\r\n     * \"==\", \"a1\").filter(\"b\", \"in\", [\"b1\", \"b2\"]) becomes [\"a1,b1\", \"a1,b2\"]). A\r\n     * list of new encoders is returned.\r\n     */\r\n    expandIndexValues(encoders, segment, value) {\r\n        const prefixes = [...encoders];\r\n        const results = [];\r\n        for (const arrayElement of value.arrayValue.values || []) {\r\n            for (const prefix of prefixes) {\r\n                const clonedEncoder = new IndexByteEncoder();\r\n                clonedEncoder.seed(prefix.encodedBytes());\r\n                FirestoreIndexValueWriter.INSTANCE.writeIndexValue(arrayElement, clonedEncoder.forKind(segment.kind));\r\n                results.push(clonedEncoder);\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n    isInFilter(target, fieldPath) {\r\n        return !!target.filters.find(f => f instanceof FieldFilter &&\r\n            f.field.isEqual(fieldPath) &&\r\n            (f.op === \"in\" /* Operator.IN */ || f.op === \"not-in\" /* Operator.NOT_IN */));\r\n    }\r\n    getFieldIndexes(transaction, collectionGroup) {\r\n        const indexes = indexConfigurationStore(transaction);\r\n        const states = indexStateStore(transaction);\r\n        return (collectionGroup\r\n            ? indexes.loadAll(DbIndexConfigurationCollectionGroupIndex, IDBKeyRange.bound(collectionGroup, collectionGroup))\r\n            : indexes.loadAll()).next(indexConfigs => {\r\n            const result = [];\r\n            return PersistencePromise.forEach(indexConfigs, (indexConfig) => {\r\n                return states\r\n                    .get([indexConfig.indexId, this.uid])\r\n                    .next(indexState => {\r\n                    result.push(fromDbIndexConfiguration(indexConfig, indexState));\r\n                });\r\n            }).next(() => result);\r\n        });\r\n    }\r\n    getNextCollectionGroupToUpdate(transaction) {\r\n        return this.getFieldIndexes(transaction).next(indexes => {\r\n            if (indexes.length === 0) {\r\n                return null;\r\n            }\r\n            indexes.sort((l, r) => {\r\n                const cmp = l.indexState.sequenceNumber - r.indexState.sequenceNumber;\r\n                return cmp !== 0\r\n                    ? cmp\r\n                    : primitiveComparator(l.collectionGroup, r.collectionGroup);\r\n            });\r\n            return indexes[0].collectionGroup;\r\n        });\r\n    }\r\n    updateCollectionGroup(transaction, collectionGroup, offset) {\r\n        const indexes = indexConfigurationStore(transaction);\r\n        const states = indexStateStore(transaction);\r\n        return this.getNextSequenceNumber(transaction).next(nextSequenceNumber => indexes\r\n            .loadAll(DbIndexConfigurationCollectionGroupIndex, IDBKeyRange.bound(collectionGroup, collectionGroup))\r\n            .next(configs => PersistencePromise.forEach(configs, (config) => states.put(toDbIndexState(config.indexId, this.user, nextSequenceNumber, offset)))));\r\n    }\r\n    updateIndexEntries(transaction, documents) {\r\n        // Porting Note: `getFieldIndexes()` on Web does not cache index lookups as\r\n        // it could be used across different IndexedDB transactions. As any cached\r\n        // data might be invalidated by other multi-tab clients, we can only trust\r\n        // data within a single IndexedDB transaction. We therefore add a cache\r\n        // here.\r\n        const memoizedIndexes = new Map();\r\n        return PersistencePromise.forEach(documents, (key, doc) => {\r\n            const memoizedCollectionIndexes = memoizedIndexes.get(key.collectionGroup);\r\n            const fieldIndexes = memoizedCollectionIndexes\r\n                ? PersistencePromise.resolve(memoizedCollectionIndexes)\r\n                : this.getFieldIndexes(transaction, key.collectionGroup);\r\n            return fieldIndexes.next(fieldIndexes => {\r\n                memoizedIndexes.set(key.collectionGroup, fieldIndexes);\r\n                return PersistencePromise.forEach(fieldIndexes, (fieldIndex) => {\r\n                    return this.getExistingIndexEntries(transaction, key, fieldIndex).next(existingEntries => {\r\n                        const newEntries = this.computeIndexEntries(doc, fieldIndex);\r\n                        if (!existingEntries.isEqual(newEntries)) {\r\n                            return this.updateEntries(transaction, doc, fieldIndex, existingEntries, newEntries);\r\n                        }\r\n                        return PersistencePromise.resolve();\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n    addIndexEntry(transaction, document, fieldIndex, indexEntry) {\r\n        const indexEntries = indexEntriesStore(transaction);\r\n        return indexEntries.put({\r\n            indexId: indexEntry.indexId,\r\n            uid: this.uid,\r\n            arrayValue: indexEntry.arrayValue,\r\n            directionalValue: indexEntry.directionalValue,\r\n            orderedDocumentKey: this.encodeDirectionalKey(fieldIndex, document.key),\r\n            documentKey: document.key.path.toArray()\r\n        });\r\n    }\r\n    deleteIndexEntry(transaction, document, fieldIndex, indexEntry) {\r\n        const indexEntries = indexEntriesStore(transaction);\r\n        return indexEntries.delete([\r\n            indexEntry.indexId,\r\n            this.uid,\r\n            indexEntry.arrayValue,\r\n            indexEntry.directionalValue,\r\n            this.encodeDirectionalKey(fieldIndex, document.key),\r\n            document.key.path.toArray()\r\n        ]);\r\n    }\r\n    getExistingIndexEntries(transaction, documentKey, fieldIndex) {\r\n        const indexEntries = indexEntriesStore(transaction);\r\n        let results = new SortedSet(indexEntryComparator);\r\n        return indexEntries\r\n            .iterate({\r\n            index: DbIndexEntryDocumentKeyIndex,\r\n            range: IDBKeyRange.only([\r\n                fieldIndex.indexId,\r\n                this.uid,\r\n                this.encodeDirectionalKey(fieldIndex, documentKey)\r\n            ])\r\n        }, (_, entry) => {\r\n            results = results.add(new IndexEntry(fieldIndex.indexId, documentKey, entry.arrayValue, entry.directionalValue));\r\n        })\r\n            .next(() => results);\r\n    }\r\n    /** Creates the index entries for the given document. */\r\n    computeIndexEntries(document, fieldIndex) {\r\n        let results = new SortedSet(indexEntryComparator);\r\n        const directionalValue = this.encodeDirectionalElements(fieldIndex, document);\r\n        if (directionalValue == null) {\r\n            return results;\r\n        }\r\n        const arraySegment = fieldIndexGetArraySegment(fieldIndex);\r\n        if (arraySegment != null) {\r\n            const value = document.data.field(arraySegment.fieldPath);\r\n            if (isArray(value)) {\r\n                for (const arrayValue of value.arrayValue.values || []) {\r\n                    results = results.add(new IndexEntry(fieldIndex.indexId, document.key, this.encodeSingleElement(arrayValue), directionalValue));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            results = results.add(new IndexEntry(fieldIndex.indexId, document.key, EMPTY_VALUE, directionalValue));\r\n        }\r\n        return results;\r\n    }\r\n    /**\r\n     * Updates the index entries for the provided document by deleting entries\r\n     * that are no longer referenced in `newEntries` and adding all newly added\r\n     * entries.\r\n     */\r\n    updateEntries(transaction, document, fieldIndex, existingEntries, newEntries) {\r\n        logDebug(LOG_TAG$f, \"Updating index entries for document '%s'\", document.key);\r\n        const promises = [];\r\n        diffSortedSets(existingEntries, newEntries, indexEntryComparator, \r\n        /* onAdd= */ entry => {\r\n            promises.push(this.addIndexEntry(transaction, document, fieldIndex, entry));\r\n        }, \r\n        /* onRemove= */ entry => {\r\n            promises.push(this.deleteIndexEntry(transaction, document, fieldIndex, entry));\r\n        });\r\n        return PersistencePromise.waitFor(promises);\r\n    }\r\n    getNextSequenceNumber(transaction) {\r\n        let nextSequenceNumber = 1;\r\n        const states = indexStateStore(transaction);\r\n        return states\r\n            .iterate({\r\n            index: DbIndexStateSequenceNumberIndex,\r\n            reverse: true,\r\n            range: IDBKeyRange.upperBound([this.uid, Number.MAX_SAFE_INTEGER])\r\n        }, (_, state, controller) => {\r\n            controller.done();\r\n            nextSequenceNumber = state.sequenceNumber + 1;\r\n        })\r\n            .next(() => nextSequenceNumber);\r\n    }\r\n    /**\r\n     * Returns a new set of IDB ranges that splits the existing range and excludes\r\n     * any values that match the `notInValue` from these ranges. As an example,\r\n     * '[foo > 2 && foo != 3]` becomes  `[foo > 2 && < 3, foo > 3]`.\r\n     */\r\n    createRange(lower, upper, notInValues) {\r\n        // The notIn values need to be sorted and unique so that we can return a\r\n        // sorted set of non-overlapping ranges.\r\n        notInValues = notInValues\r\n            .sort((l, r) => indexEntryComparator(l, r))\r\n            .filter((el, i, values) => !i || indexEntryComparator(el, values[i - 1]) !== 0);\r\n        const bounds = [];\r\n        bounds.push(lower);\r\n        for (const notInValue of notInValues) {\r\n            const cmpToLower = indexEntryComparator(notInValue, lower);\r\n            const cmpToUpper = indexEntryComparator(notInValue, upper);\r\n            if (cmpToLower === 0) {\r\n                // `notInValue` is the lower bound. We therefore need to raise the bound\r\n                // to the next value.\r\n                bounds[0] = lower.successor();\r\n            }\r\n            else if (cmpToLower > 0 && cmpToUpper < 0) {\r\n                // `notInValue` is in the middle of the range\r\n                bounds.push(notInValue);\r\n                bounds.push(notInValue.successor());\r\n            }\r\n            else if (cmpToUpper > 0) {\r\n                // `notInValue` (and all following values) are out of the range\r\n                break;\r\n            }\r\n        }\r\n        bounds.push(upper);\r\n        const ranges = [];\r\n        for (let i = 0; i < bounds.length; i += 2) {\r\n            // If we encounter two bounds that will create an unmatchable key range,\r\n            // then we return an empty set of key ranges.\r\n            if (this.isRangeMatchable(bounds[i], bounds[i + 1])) {\r\n                return [];\r\n            }\r\n            const lowerBound = [\r\n                bounds[i].indexId,\r\n                this.uid,\r\n                bounds[i].arrayValue,\r\n                bounds[i].directionalValue,\r\n                EMPTY_VALUE,\r\n                []\r\n            ];\r\n            const upperBound = [\r\n                bounds[i + 1].indexId,\r\n                this.uid,\r\n                bounds[i + 1].arrayValue,\r\n                bounds[i + 1].directionalValue,\r\n                EMPTY_VALUE,\r\n                []\r\n            ];\r\n            ranges.push(IDBKeyRange.bound(lowerBound, upperBound));\r\n        }\r\n        return ranges;\r\n    }\r\n    isRangeMatchable(lowerBound, upperBound) {\r\n        // If lower bound is greater than the upper bound, then the key\r\n        // range can never be matched.\r\n        return indexEntryComparator(lowerBound, upperBound) > 0;\r\n    }\r\n    getMinOffsetFromCollectionGroup(transaction, collectionGroup) {\r\n        return this.getFieldIndexes(transaction, collectionGroup).next(getMinOffsetFromFieldIndexes);\r\n    }\r\n    getMinOffset(transaction, target) {\r\n        return PersistencePromise.mapArray(this.getSubTargets(target), (subTarget) => this.getFieldIndex(transaction, subTarget).next(index => index ? index : fail())).next(getMinOffsetFromFieldIndexes);\r\n    }\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the collectionParents\r\n * document store.\r\n */\r\nfunction collectionParentsStore(txn) {\r\n    return getStore(txn, DbCollectionParentStore);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the index entry object store.\r\n */\r\nfunction indexEntriesStore(txn) {\r\n    return getStore(txn, DbIndexEntryStore);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the index configuration object store.\r\n */\r\nfunction indexConfigurationStore(txn) {\r\n    return getStore(txn, DbIndexConfigurationStore);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the index state object store.\r\n */\r\nfunction indexStateStore(txn) {\r\n    return getStore(txn, DbIndexStateStore);\r\n}\r\nfunction getMinOffsetFromFieldIndexes(fieldIndexes) {\r\n    hardAssert(fieldIndexes.length !== 0);\r\n    let minOffset = fieldIndexes[0].indexState.offset;\r\n    let maxBatchId = minOffset.largestBatchId;\r\n    for (let i = 1; i < fieldIndexes.length; i++) {\r\n        const newOffset = fieldIndexes[i].indexState.offset;\r\n        if (indexOffsetComparator(newOffset, minOffset) < 0) {\r\n            minOffset = newOffset;\r\n        }\r\n        if (maxBatchId < newOffset.largestBatchId) {\r\n            maxBatchId = newOffset.largestBatchId;\r\n        }\r\n    }\r\n    return new IndexOffset(minOffset.readTime, minOffset.documentKey, maxBatchId);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Delete a mutation batch and the associated document mutations.\r\n * @returns A PersistencePromise of the document mutations that were removed.\r\n */\r\nfunction removeMutationBatch(txn, userId, batch) {\r\n    const mutationStore = txn.store(DbMutationBatchStore);\r\n    const indexTxn = txn.store(DbDocumentMutationStore);\r\n    const promises = [];\r\n    const range = IDBKeyRange.only(batch.batchId);\r\n    let numDeleted = 0;\r\n    const removePromise = mutationStore.iterate({ range }, (key, value, control) => {\r\n        numDeleted++;\r\n        return control.delete();\r\n    });\r\n    promises.push(removePromise.next(() => {\r\n        hardAssert(numDeleted === 1);\r\n    }));\r\n    const removedDocuments = [];\r\n    for (const mutation of batch.mutations) {\r\n        const indexKey = newDbDocumentMutationKey(userId, mutation.key.path, batch.batchId);\r\n        promises.push(indexTxn.delete(indexKey));\r\n        removedDocuments.push(mutation.key);\r\n    }\r\n    return PersistencePromise.waitFor(promises).next(() => removedDocuments);\r\n}\r\n/**\r\n * Returns an approximate size for the given document.\r\n */\r\nfunction dbDocumentSize(doc) {\r\n    if (!doc) {\r\n        return 0;\r\n    }\r\n    let value;\r\n    if (doc.document) {\r\n        value = doc.document;\r\n    }\r\n    else if (doc.unknownDocument) {\r\n        value = doc.unknownDocument;\r\n    }\r\n    else if (doc.noDocument) {\r\n        value = doc.noDocument;\r\n    }\r\n    else {\r\n        throw fail();\r\n    }\r\n    return JSON.stringify(value).length;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** A mutation queue for a specific user, backed by IndexedDB. */\r\nclass IndexedDbMutationQueue {\r\n    constructor(\r\n    /**\r\n     * The normalized userId (e.g. null UID => \"\" userId) used to store /\r\n     * retrieve mutations.\r\n     */\r\n    userId, serializer, indexManager, referenceDelegate) {\r\n        this.userId = userId;\r\n        this.serializer = serializer;\r\n        this.indexManager = indexManager;\r\n        this.referenceDelegate = referenceDelegate;\r\n        /**\r\n         * Caches the document keys for pending mutation batches. If the mutation\r\n         * has been removed from IndexedDb, the cached value may continue to\r\n         * be used to retrieve the batch's document keys. To remove a cached value\r\n         * locally, `removeCachedMutationKeys()` should be invoked either directly\r\n         * or through `removeMutationBatches()`.\r\n         *\r\n         * With multi-tab, when the primary client acknowledges or rejects a mutation,\r\n         * this cache is used by secondary clients to invalidate the local\r\n         * view of the documents that were previously affected by the mutation.\r\n         */\r\n        // PORTING NOTE: Multi-tab only.\r\n        this.documentKeysByBatchId = {};\r\n    }\r\n    /**\r\n     * Creates a new mutation queue for the given user.\r\n     * @param user - The user for which to create a mutation queue.\r\n     * @param serializer - The serializer to use when persisting to IndexedDb.\r\n     */\r\n    static forUser(user, serializer, indexManager, referenceDelegate) {\r\n        // TODO(mcg): Figure out what constraints there are on userIDs\r\n        // In particular, are there any reserved characters? are empty ids allowed?\r\n        // For the moment store these together in the same mutations table assuming\r\n        // that empty userIDs aren't allowed.\r\n        hardAssert(user.uid !== '');\r\n        const userId = user.isAuthenticated() ? user.uid : '';\r\n        return new IndexedDbMutationQueue(userId, serializer, indexManager, referenceDelegate);\r\n    }\r\n    checkEmpty(transaction) {\r\n        let empty = true;\r\n        const range = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);\r\n        return mutationsStore(transaction)\r\n            .iterate({ index: DbMutationBatchUserMutationsIndex, range }, (key, value, control) => {\r\n            empty = false;\r\n            control.done();\r\n        })\r\n            .next(() => empty);\r\n    }\r\n    addMutationBatch(transaction, localWriteTime, baseMutations, mutations) {\r\n        const documentStore = documentMutationsStore(transaction);\r\n        const mutationStore = mutationsStore(transaction);\r\n        // The IndexedDb implementation in Chrome (and Firefox) does not handle\r\n        // compound indices that include auto-generated keys correctly. To ensure\r\n        // that the index entry is added correctly in all browsers, we perform two\r\n        // writes: The first write is used to retrieve the next auto-generated Batch\r\n        // ID, and the second write populates the index and stores the actual\r\n        // mutation batch.\r\n        // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972\r\n        // We write an empty object to obtain key\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return mutationStore.add({}).next(batchId => {\r\n            hardAssert(typeof batchId === 'number');\r\n            const batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);\r\n            const dbBatch = toDbMutationBatch(this.serializer, this.userId, batch);\r\n            const promises = [];\r\n            let collectionParents = new SortedSet((l, r) => primitiveComparator(l.canonicalString(), r.canonicalString()));\r\n            for (const mutation of mutations) {\r\n                const indexKey = newDbDocumentMutationKey(this.userId, mutation.key.path, batchId);\r\n                collectionParents = collectionParents.add(mutation.key.path.popLast());\r\n                promises.push(mutationStore.put(dbBatch));\r\n                promises.push(documentStore.put(indexKey, DbDocumentMutationPlaceholder));\r\n            }\r\n            collectionParents.forEach(parent => {\r\n                promises.push(this.indexManager.addToCollectionParentIndex(transaction, parent));\r\n            });\r\n            transaction.addOnCommittedListener(() => {\r\n                this.documentKeysByBatchId[batchId] = batch.keys();\r\n            });\r\n            return PersistencePromise.waitFor(promises).next(() => batch);\r\n        });\r\n    }\r\n    lookupMutationBatch(transaction, batchId) {\r\n        return mutationsStore(transaction)\r\n            .get(batchId)\r\n            .next(dbBatch => {\r\n            if (dbBatch) {\r\n                hardAssert(dbBatch.userId === this.userId);\r\n                return fromDbMutationBatch(this.serializer, dbBatch);\r\n            }\r\n            return null;\r\n        });\r\n    }\r\n    /**\r\n     * Returns the document keys for the mutation batch with the given batchId.\r\n     * For primary clients, this method returns `null` after\r\n     * `removeMutationBatches()` has been called. Secondary clients return a\r\n     * cached result until `removeCachedMutationKeys()` is invoked.\r\n     */\r\n    // PORTING NOTE: Multi-tab only.\r\n    lookupMutationKeys(transaction, batchId) {\r\n        if (this.documentKeysByBatchId[batchId]) {\r\n            return PersistencePromise.resolve(this.documentKeysByBatchId[batchId]);\r\n        }\r\n        else {\r\n            return this.lookupMutationBatch(transaction, batchId).next(batch => {\r\n                if (batch) {\r\n                    const keys = batch.keys();\r\n                    this.documentKeysByBatchId[batchId] = keys;\r\n                    return keys;\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    getNextMutationBatchAfterBatchId(transaction, batchId) {\r\n        const nextBatchId = batchId + 1;\r\n        const range = IDBKeyRange.lowerBound([this.userId, nextBatchId]);\r\n        let foundBatch = null;\r\n        return mutationsStore(transaction)\r\n            .iterate({ index: DbMutationBatchUserMutationsIndex, range }, (key, dbBatch, control) => {\r\n            if (dbBatch.userId === this.userId) {\r\n                hardAssert(dbBatch.batchId >= nextBatchId);\r\n                foundBatch = fromDbMutationBatch(this.serializer, dbBatch);\r\n            }\r\n            control.done();\r\n        })\r\n            .next(() => foundBatch);\r\n    }\r\n    getHighestUnacknowledgedBatchId(transaction) {\r\n        const range = IDBKeyRange.upperBound([\r\n            this.userId,\r\n            Number.POSITIVE_INFINITY\r\n        ]);\r\n        let batchId = BATCHID_UNKNOWN;\r\n        return mutationsStore(transaction)\r\n            .iterate({ index: DbMutationBatchUserMutationsIndex, range, reverse: true }, (key, dbBatch, control) => {\r\n            batchId = dbBatch.batchId;\r\n            control.done();\r\n        })\r\n            .next(() => batchId);\r\n    }\r\n    getAllMutationBatches(transaction) {\r\n        const range = IDBKeyRange.bound([this.userId, BATCHID_UNKNOWN], [this.userId, Number.POSITIVE_INFINITY]);\r\n        return mutationsStore(transaction)\r\n            .loadAll(DbMutationBatchUserMutationsIndex, range)\r\n            .next(dbBatches => dbBatches.map(dbBatch => fromDbMutationBatch(this.serializer, dbBatch)));\r\n    }\r\n    getAllMutationBatchesAffectingDocumentKey(transaction, documentKey) {\r\n        // Scan the document-mutation index starting with a prefix starting with\r\n        // the given documentKey.\r\n        const indexPrefix = newDbDocumentMutationPrefixForPath(this.userId, documentKey.path);\r\n        const indexStart = IDBKeyRange.lowerBound(indexPrefix);\r\n        const results = [];\r\n        return documentMutationsStore(transaction)\r\n            .iterate({ range: indexStart }, (indexKey, _, control) => {\r\n            const [userID, encodedPath, batchId] = indexKey;\r\n            // Only consider rows matching exactly the specific key of\r\n            // interest. Note that because we order by path first, and we\r\n            // order terminators before path separators, we'll encounter all\r\n            // the index rows for documentKey contiguously. In particular, all\r\n            // the rows for documentKey will occur before any rows for\r\n            // documents nested in a subcollection beneath documentKey so we\r\n            // can stop as soon as we hit any such row.\r\n            const path = decodeResourcePath(encodedPath);\r\n            if (userID !== this.userId || !documentKey.path.isEqual(path)) {\r\n                control.done();\r\n                return;\r\n            }\r\n            // Look up the mutation batch in the store.\r\n            return mutationsStore(transaction)\r\n                .get(batchId)\r\n                .next(mutation => {\r\n                if (!mutation) {\r\n                    throw fail();\r\n                }\r\n                hardAssert(mutation.userId === this.userId);\r\n                results.push(fromDbMutationBatch(this.serializer, mutation));\r\n            });\r\n        })\r\n            .next(() => results);\r\n    }\r\n    getAllMutationBatchesAffectingDocumentKeys(transaction, documentKeys) {\r\n        let uniqueBatchIDs = new SortedSet(primitiveComparator);\r\n        const promises = [];\r\n        documentKeys.forEach(documentKey => {\r\n            const indexStart = newDbDocumentMutationPrefixForPath(this.userId, documentKey.path);\r\n            const range = IDBKeyRange.lowerBound(indexStart);\r\n            const promise = documentMutationsStore(transaction).iterate({ range }, (indexKey, _, control) => {\r\n                const [userID, encodedPath, batchID] = indexKey;\r\n                // Only consider rows matching exactly the specific key of\r\n                // interest. Note that because we order by path first, and we\r\n                // order terminators before path separators, we'll encounter all\r\n                // the index rows for documentKey contiguously. In particular, all\r\n                // the rows for documentKey will occur before any rows for\r\n                // documents nested in a subcollection beneath documentKey so we\r\n                // can stop as soon as we hit any such row.\r\n                const path = decodeResourcePath(encodedPath);\r\n                if (userID !== this.userId || !documentKey.path.isEqual(path)) {\r\n                    control.done();\r\n                    return;\r\n                }\r\n                uniqueBatchIDs = uniqueBatchIDs.add(batchID);\r\n            });\r\n            promises.push(promise);\r\n        });\r\n        return PersistencePromise.waitFor(promises).next(() => this.lookupMutationBatches(transaction, uniqueBatchIDs));\r\n    }\r\n    getAllMutationBatchesAffectingQuery(transaction, query) {\r\n        const queryPath = query.path;\r\n        const immediateChildrenLength = queryPath.length + 1;\r\n        // TODO(mcg): Actually implement a single-collection query\r\n        //\r\n        // This is actually executing an ancestor query, traversing the whole\r\n        // subtree below the collection which can be horrifically inefficient for\r\n        // some structures. The right way to solve this is to implement the full\r\n        // value index, but that's not in the cards in the near future so this is\r\n        // the best we can do for the moment.\r\n        //\r\n        // Since we don't yet index the actual properties in the mutations, our\r\n        // current approach is to just return all mutation batches that affect\r\n        // documents in the collection being queried.\r\n        const indexPrefix = newDbDocumentMutationPrefixForPath(this.userId, queryPath);\r\n        const indexStart = IDBKeyRange.lowerBound(indexPrefix);\r\n        // Collect up unique batchIDs encountered during a scan of the index. Use a\r\n        // SortedSet to accumulate batch IDs so they can be traversed in order in a\r\n        // scan of the main table.\r\n        let uniqueBatchIDs = new SortedSet(primitiveComparator);\r\n        return documentMutationsStore(transaction)\r\n            .iterate({ range: indexStart }, (indexKey, _, control) => {\r\n            const [userID, encodedPath, batchID] = indexKey;\r\n            const path = decodeResourcePath(encodedPath);\r\n            if (userID !== this.userId || !queryPath.isPrefixOf(path)) {\r\n                control.done();\r\n                return;\r\n            }\r\n            // Rows with document keys more than one segment longer than the\r\n            // query path can't be matches. For example, a query on 'rooms'\r\n            // can't match the document /rooms/abc/messages/xyx.\r\n            // TODO(mcg): we'll need a different scanner when we implement\r\n            // ancestor queries.\r\n            if (path.length !== immediateChildrenLength) {\r\n                return;\r\n            }\r\n            uniqueBatchIDs = uniqueBatchIDs.add(batchID);\r\n        })\r\n            .next(() => this.lookupMutationBatches(transaction, uniqueBatchIDs));\r\n    }\r\n    lookupMutationBatches(transaction, batchIDs) {\r\n        const results = [];\r\n        const promises = [];\r\n        // TODO(rockwood): Implement this using iterate.\r\n        batchIDs.forEach(batchId => {\r\n            promises.push(mutationsStore(transaction)\r\n                .get(batchId)\r\n                .next(mutation => {\r\n                if (mutation === null) {\r\n                    throw fail();\r\n                }\r\n                hardAssert(mutation.userId === this.userId);\r\n                results.push(fromDbMutationBatch(this.serializer, mutation));\r\n            }));\r\n        });\r\n        return PersistencePromise.waitFor(promises).next(() => results);\r\n    }\r\n    removeMutationBatch(transaction, batch) {\r\n        return removeMutationBatch(transaction.simpleDbTransaction, this.userId, batch).next(removedDocuments => {\r\n            transaction.addOnCommittedListener(() => {\r\n                this.removeCachedMutationKeys(batch.batchId);\r\n            });\r\n            return PersistencePromise.forEach(removedDocuments, (key) => {\r\n                return this.referenceDelegate.markPotentiallyOrphaned(transaction, key);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Clears the cached keys for a mutation batch. This method should be\r\n     * called by secondary clients after they process mutation updates.\r\n     *\r\n     * Note that this method does not have to be called from primary clients as\r\n     * the corresponding cache entries are cleared when an acknowledged or\r\n     * rejected batch is removed from the mutation queue.\r\n     */\r\n    // PORTING NOTE: Multi-tab only\r\n    removeCachedMutationKeys(batchId) {\r\n        delete this.documentKeysByBatchId[batchId];\r\n    }\r\n    performConsistencyCheck(txn) {\r\n        return this.checkEmpty(txn).next(empty => {\r\n            if (!empty) {\r\n                return PersistencePromise.resolve();\r\n            }\r\n            // Verify that there are no entries in the documentMutations index if\r\n            // the queue is empty.\r\n            const startRange = IDBKeyRange.lowerBound(newDbDocumentMutationPrefixForUser(this.userId));\r\n            const danglingMutationReferences = [];\r\n            return documentMutationsStore(txn)\r\n                .iterate({ range: startRange }, (key, _, control) => {\r\n                const userID = key[0];\r\n                if (userID !== this.userId) {\r\n                    control.done();\r\n                    return;\r\n                }\r\n                else {\r\n                    const path = decodeResourcePath(key[1]);\r\n                    danglingMutationReferences.push(path);\r\n                }\r\n            })\r\n                .next(() => {\r\n                hardAssert(danglingMutationReferences.length === 0);\r\n            });\r\n        });\r\n    }\r\n    containsKey(txn, key) {\r\n        return mutationQueueContainsKey(txn, this.userId, key);\r\n    }\r\n    // PORTING NOTE: Multi-tab only (state is held in memory in other clients).\r\n    /** Returns the mutation queue's metadata from IndexedDb. */\r\n    getMutationQueueMetadata(transaction) {\r\n        return mutationQueuesStore(transaction)\r\n            .get(this.userId)\r\n            .next((metadata) => {\r\n            return (metadata || {\r\n                userId: this.userId,\r\n                lastAcknowledgedBatchId: BATCHID_UNKNOWN,\r\n                lastStreamToken: ''\r\n            });\r\n        });\r\n    }\r\n}\r\n/**\r\n * @returns true if the mutation queue for the given user contains a pending\r\n *         mutation for the given key.\r\n */\r\nfunction mutationQueueContainsKey(txn, userId, key) {\r\n    const indexKey = newDbDocumentMutationPrefixForPath(userId, key.path);\r\n    const encodedPath = indexKey[1];\r\n    const startRange = IDBKeyRange.lowerBound(indexKey);\r\n    let containsKey = false;\r\n    return documentMutationsStore(txn)\r\n        .iterate({ range: startRange, keysOnly: true }, (key, value, control) => {\r\n        const [userID, keyPath, /*batchID*/ _] = key;\r\n        if (userID === userId && keyPath === encodedPath) {\r\n            containsKey = true;\r\n        }\r\n        control.done();\r\n    })\r\n        .next(() => containsKey);\r\n}\r\n/** Returns true if any mutation queue contains the given document. */\r\nfunction mutationQueuesContainKey(txn, docKey) {\r\n    let found = false;\r\n    return mutationQueuesStore(txn)\r\n        .iterateSerial(userId => {\r\n        return mutationQueueContainsKey(txn, userId, docKey).next(containsKey => {\r\n            if (containsKey) {\r\n                found = true;\r\n            }\r\n            return PersistencePromise.resolve(!containsKey);\r\n        });\r\n    })\r\n        .next(() => found);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the mutations object store.\r\n */\r\nfunction mutationsStore(txn) {\r\n    return getStore(txn, DbMutationBatchStore);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\r\n */\r\nfunction documentMutationsStore(txn) {\r\n    return getStore(txn, DbDocumentMutationStore);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\r\n */\r\nfunction mutationQueuesStore(txn) {\r\n    return getStore(txn, DbMutationQueueStore);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Offset to ensure non-overlapping target ids. */\r\nconst OFFSET = 2;\r\n/**\r\n * Generates monotonically increasing target IDs for sending targets to the\r\n * watch stream.\r\n *\r\n * The client constructs two generators, one for the target cache, and one for\r\n * for the sync engine (to generate limbo documents targets). These\r\n * generators produce non-overlapping IDs (by using even and odd IDs\r\n * respectively).\r\n *\r\n * By separating the target ID space, the query cache can generate target IDs\r\n * that persist across client restarts, while sync engine can independently\r\n * generate in-memory target IDs that are transient and can be reused after a\r\n * restart.\r\n */\r\nclass TargetIdGenerator {\r\n    constructor(lastId) {\r\n        this.lastId = lastId;\r\n    }\r\n    next() {\r\n        this.lastId += OFFSET;\r\n        return this.lastId;\r\n    }\r\n    static forTargetCache() {\r\n        // The target cache generator must return '2' in its first call to `next()`\r\n        // as there is no differentiation in the protocol layer between an unset\r\n        // number and the number '0'. If we were to sent a target with target ID\r\n        // '0', the backend would consider it unset and replace it with its own ID.\r\n        return new TargetIdGenerator(2 - OFFSET);\r\n    }\r\n    static forSyncEngine() {\r\n        // Sync engine assigns target IDs for limbo document detection.\r\n        return new TargetIdGenerator(1 - OFFSET);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass IndexedDbTargetCache {\r\n    constructor(referenceDelegate, serializer) {\r\n        this.referenceDelegate = referenceDelegate;\r\n        this.serializer = serializer;\r\n    }\r\n    // PORTING NOTE: We don't cache global metadata for the target cache, since\r\n    // some of it (in particular `highestTargetId`) can be modified by secondary\r\n    // tabs. We could perhaps be more granular (and e.g. still cache\r\n    // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go\r\n    // to IndexedDb whenever we need to read metadata. We can revisit if it turns\r\n    // out to have a meaningful performance impact.\r\n    allocateTargetId(transaction) {\r\n        return this.retrieveMetadata(transaction).next(metadata => {\r\n            const targetIdGenerator = new TargetIdGenerator(metadata.highestTargetId);\r\n            metadata.highestTargetId = targetIdGenerator.next();\r\n            return this.saveMetadata(transaction, metadata).next(() => metadata.highestTargetId);\r\n        });\r\n    }\r\n    getLastRemoteSnapshotVersion(transaction) {\r\n        return this.retrieveMetadata(transaction).next(metadata => {\r\n            return SnapshotVersion.fromTimestamp(new Timestamp(metadata.lastRemoteSnapshotVersion.seconds, metadata.lastRemoteSnapshotVersion.nanoseconds));\r\n        });\r\n    }\r\n    getHighestSequenceNumber(transaction) {\r\n        return this.retrieveMetadata(transaction).next(targetGlobal => targetGlobal.highestListenSequenceNumber);\r\n    }\r\n    setTargetsMetadata(transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {\r\n        return this.retrieveMetadata(transaction).next(metadata => {\r\n            metadata.highestListenSequenceNumber = highestListenSequenceNumber;\r\n            if (lastRemoteSnapshotVersion) {\r\n                metadata.lastRemoteSnapshotVersion =\r\n                    lastRemoteSnapshotVersion.toTimestamp();\r\n            }\r\n            if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {\r\n                metadata.highestListenSequenceNumber = highestListenSequenceNumber;\r\n            }\r\n            return this.saveMetadata(transaction, metadata);\r\n        });\r\n    }\r\n    addTargetData(transaction, targetData) {\r\n        return this.saveTargetData(transaction, targetData).next(() => {\r\n            return this.retrieveMetadata(transaction).next(metadata => {\r\n                metadata.targetCount += 1;\r\n                this.updateMetadataFromTargetData(targetData, metadata);\r\n                return this.saveMetadata(transaction, metadata);\r\n            });\r\n        });\r\n    }\r\n    updateTargetData(transaction, targetData) {\r\n        return this.saveTargetData(transaction, targetData);\r\n    }\r\n    removeTargetData(transaction, targetData) {\r\n        return this.removeMatchingKeysForTargetId(transaction, targetData.targetId)\r\n            .next(() => targetsStore(transaction).delete(targetData.targetId))\r\n            .next(() => this.retrieveMetadata(transaction))\r\n            .next(metadata => {\r\n            hardAssert(metadata.targetCount > 0);\r\n            metadata.targetCount -= 1;\r\n            return this.saveMetadata(transaction, metadata);\r\n        });\r\n    }\r\n    /**\r\n     * Drops any targets with sequence number less than or equal to the upper bound, excepting those\r\n     * present in `activeTargetIds`. Document associations for the removed targets are also removed.\r\n     * Returns the number of targets removed.\r\n     */\r\n    removeTargets(txn, upperBound, activeTargetIds) {\r\n        let count = 0;\r\n        const promises = [];\r\n        return targetsStore(txn)\r\n            .iterate((key, value) => {\r\n            const targetData = fromDbTarget(value);\r\n            if (targetData.sequenceNumber <= upperBound &&\r\n                activeTargetIds.get(targetData.targetId) === null) {\r\n                count++;\r\n                promises.push(this.removeTargetData(txn, targetData));\r\n            }\r\n        })\r\n            .next(() => PersistencePromise.waitFor(promises))\r\n            .next(() => count);\r\n    }\r\n    /**\r\n     * Call provided function with each `TargetData` that we have cached.\r\n     */\r\n    forEachTarget(txn, f) {\r\n        return targetsStore(txn).iterate((key, value) => {\r\n            const targetData = fromDbTarget(value);\r\n            f(targetData);\r\n        });\r\n    }\r\n    retrieveMetadata(transaction) {\r\n        return globalTargetStore(transaction)\r\n            .get(DbTargetGlobalKey)\r\n            .next(metadata => {\r\n            hardAssert(metadata !== null);\r\n            return metadata;\r\n        });\r\n    }\r\n    saveMetadata(transaction, metadata) {\r\n        return globalTargetStore(transaction).put(DbTargetGlobalKey, metadata);\r\n    }\r\n    saveTargetData(transaction, targetData) {\r\n        return targetsStore(transaction).put(toDbTarget(this.serializer, targetData));\r\n    }\r\n    /**\r\n     * In-place updates the provided metadata to account for values in the given\r\n     * TargetData. Saving is done separately. Returns true if there were any\r\n     * changes to the metadata.\r\n     */\r\n    updateMetadataFromTargetData(targetData, metadata) {\r\n        let updated = false;\r\n        if (targetData.targetId > metadata.highestTargetId) {\r\n            metadata.highestTargetId = targetData.targetId;\r\n            updated = true;\r\n        }\r\n        if (targetData.sequenceNumber > metadata.highestListenSequenceNumber) {\r\n            metadata.highestListenSequenceNumber = targetData.sequenceNumber;\r\n            updated = true;\r\n        }\r\n        return updated;\r\n    }\r\n    getTargetCount(transaction) {\r\n        return this.retrieveMetadata(transaction).next(metadata => metadata.targetCount);\r\n    }\r\n    getTargetData(transaction, target) {\r\n        // Iterating by the canonicalId may yield more than one result because\r\n        // canonicalId values are not required to be unique per target. This query\r\n        // depends on the queryTargets index to be efficient.\r\n        const canonicalId = canonifyTarget(target);\r\n        const range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\r\n        let result = null;\r\n        return targetsStore(transaction)\r\n            .iterate({ range, index: DbTargetQueryTargetsIndexName }, (key, value, control) => {\r\n            const found = fromDbTarget(value);\r\n            // After finding a potential match, check that the target is\r\n            // actually equal to the requested target.\r\n            if (targetEquals(target, found.target)) {\r\n                result = found;\r\n                control.done();\r\n            }\r\n        })\r\n            .next(() => result);\r\n    }\r\n    addMatchingKeys(txn, keys, targetId) {\r\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\r\n        // IndexedDb.\r\n        const promises = [];\r\n        const store = documentTargetStore(txn);\r\n        keys.forEach(key => {\r\n            const path = encodeResourcePath(key.path);\r\n            promises.push(store.put({ targetId, path }));\r\n            promises.push(this.referenceDelegate.addReference(txn, targetId, key));\r\n        });\r\n        return PersistencePromise.waitFor(promises);\r\n    }\r\n    removeMatchingKeys(txn, keys, targetId) {\r\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\r\n        // IndexedDb.\r\n        const store = documentTargetStore(txn);\r\n        return PersistencePromise.forEach(keys, (key) => {\r\n            const path = encodeResourcePath(key.path);\r\n            return PersistencePromise.waitFor([\r\n                store.delete([targetId, path]),\r\n                this.referenceDelegate.removeReference(txn, targetId, key)\r\n            ]);\r\n        });\r\n    }\r\n    removeMatchingKeysForTargetId(txn, targetId) {\r\n        const store = documentTargetStore(txn);\r\n        const range = IDBKeyRange.bound([targetId], [targetId + 1], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true);\r\n        return store.delete(range);\r\n    }\r\n    getMatchingKeysForTargetId(txn, targetId) {\r\n        const range = IDBKeyRange.bound([targetId], [targetId + 1], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true);\r\n        const store = documentTargetStore(txn);\r\n        let result = documentKeySet();\r\n        return store\r\n            .iterate({ range, keysOnly: true }, (key, _, control) => {\r\n            const path = decodeResourcePath(key[1]);\r\n            const docKey = new DocumentKey(path);\r\n            result = result.add(docKey);\r\n        })\r\n            .next(() => result);\r\n    }\r\n    containsKey(txn, key) {\r\n        const path = encodeResourcePath(key.path);\r\n        const range = IDBKeyRange.bound([path], [immediateSuccessor(path)], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true);\r\n        let count = 0;\r\n        return documentTargetStore(txn)\r\n            .iterate({\r\n            index: DbTargetDocumentDocumentTargetsIndex,\r\n            keysOnly: true,\r\n            range\r\n        }, ([targetId, path], _, control) => {\r\n            // Having a sentinel row for a document does not count as containing that document;\r\n            // For the target cache, containing the document means the document is part of some\r\n            // target.\r\n            if (targetId !== 0) {\r\n                count++;\r\n                control.done();\r\n            }\r\n        })\r\n            .next(() => count > 0);\r\n    }\r\n    /**\r\n     * Looks up a TargetData entry by target ID.\r\n     *\r\n     * @param targetId - The target ID of the TargetData entry to look up.\r\n     * @returns The cached TargetData entry, or null if the cache has no entry for\r\n     * the target.\r\n     */\r\n    // PORTING NOTE: Multi-tab only.\r\n    getTargetDataForTarget(transaction, targetId) {\r\n        return targetsStore(transaction)\r\n            .get(targetId)\r\n            .next(found => {\r\n            if (found) {\r\n                return fromDbTarget(found);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the queries object store.\r\n */\r\nfunction targetsStore(txn) {\r\n    return getStore(txn, DbTargetStore);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the target globals object store.\r\n */\r\nfunction globalTargetStore(txn) {\r\n    return getStore(txn, DbTargetGlobalStore);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the document target object store.\r\n */\r\nfunction documentTargetStore(txn) {\r\n    return getStore(txn, DbTargetDocumentStore);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst GC_DID_NOT_RUN = {\r\n    didRun: false,\r\n    sequenceNumbersCollected: 0,\r\n    targetsRemoved: 0,\r\n    documentsRemoved: 0\r\n};\r\nconst LRU_COLLECTION_DISABLED = -1;\r\nconst LRU_DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;\r\nclass LruParams {\r\n    constructor(\r\n    // When we attempt to collect, we will only do so if the cache size is greater than this\r\n    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.\r\n    cacheSizeCollectionThreshold, \r\n    // The percentage of sequence numbers that we will attempt to collect\r\n    percentileToCollect, \r\n    // A cap on the total number of sequence numbers that will be collected. This prevents\r\n    // us from collecting a huge number of sequence numbers if the cache has grown very large.\r\n    maximumSequenceNumbersToCollect) {\r\n        this.cacheSizeCollectionThreshold = cacheSizeCollectionThreshold;\r\n        this.percentileToCollect = percentileToCollect;\r\n        this.maximumSequenceNumbersToCollect = maximumSequenceNumbersToCollect;\r\n    }\r\n    static withCacheSize(cacheSize) {\r\n        return new LruParams(cacheSize, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);\r\n    }\r\n}\r\nLruParams.DEFAULT_COLLECTION_PERCENTILE = 10;\r\nLruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;\r\nLruParams.DEFAULT = new LruParams(LRU_DEFAULT_CACHE_SIZE_BYTES, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);\r\nLruParams.DISABLED = new LruParams(LRU_COLLECTION_DISABLED, 0, 0);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$e = 'LruGarbageCollector';\r\nconst LRU_MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;\r\n/** How long we wait to try running LRU GC after SDK initialization. */\r\nconst INITIAL_GC_DELAY_MS = 1 * 60 * 1000;\r\n/** Minimum amount of time between GC checks, after the first one. */\r\nconst REGULAR_GC_DELAY_MS = 5 * 60 * 1000;\r\nfunction bufferEntryComparator([aSequence, aIndex], [bSequence, bIndex]) {\r\n    const seqCmp = primitiveComparator(aSequence, bSequence);\r\n    if (seqCmp === 0) {\r\n        // This order doesn't matter, but we can bias against churn by sorting\r\n        // entries created earlier as less than newer entries.\r\n        return primitiveComparator(aIndex, bIndex);\r\n    }\r\n    else {\r\n        return seqCmp;\r\n    }\r\n}\r\n/**\r\n * Used to calculate the nth sequence number. Keeps a rolling buffer of the\r\n * lowest n values passed to `addElement`, and finally reports the largest of\r\n * them in `maxValue`.\r\n */\r\nclass RollingSequenceNumberBuffer {\r\n    constructor(maxElements) {\r\n        this.maxElements = maxElements;\r\n        this.buffer = new SortedSet(bufferEntryComparator);\r\n        this.previousIndex = 0;\r\n    }\r\n    nextIndex() {\r\n        return ++this.previousIndex;\r\n    }\r\n    addElement(sequenceNumber) {\r\n        const entry = [sequenceNumber, this.nextIndex()];\r\n        if (this.buffer.size < this.maxElements) {\r\n            this.buffer = this.buffer.add(entry);\r\n        }\r\n        else {\r\n            const highestValue = this.buffer.last();\r\n            if (bufferEntryComparator(entry, highestValue) < 0) {\r\n                this.buffer = this.buffer.delete(highestValue).add(entry);\r\n            }\r\n        }\r\n    }\r\n    get maxValue() {\r\n        // Guaranteed to be non-empty. If we decide we are not collecting any\r\n        // sequence numbers, nthSequenceNumber below short-circuits. If we have\r\n        // decided that we are collecting n sequence numbers, it's because n is some\r\n        // percentage of the existing sequence numbers. That means we should never\r\n        // be in a situation where we are collecting sequence numbers but don't\r\n        // actually have any.\r\n        return this.buffer.last()[0];\r\n    }\r\n}\r\n/**\r\n * This class is responsible for the scheduling of LRU garbage collection. It handles checking\r\n * whether or not GC is enabled, as well as which delay to use before the next run.\r\n */\r\nclass LruScheduler {\r\n    constructor(garbageCollector, asyncQueue, localStore) {\r\n        this.garbageCollector = garbageCollector;\r\n        this.asyncQueue = asyncQueue;\r\n        this.localStore = localStore;\r\n        this.gcTask = null;\r\n    }\r\n    start() {\r\n        if (this.garbageCollector.params.cacheSizeCollectionThreshold !==\r\n            LRU_COLLECTION_DISABLED) {\r\n            this.scheduleGC(INITIAL_GC_DELAY_MS);\r\n        }\r\n    }\r\n    stop() {\r\n        if (this.gcTask) {\r\n            this.gcTask.cancel();\r\n            this.gcTask = null;\r\n        }\r\n    }\r\n    get started() {\r\n        return this.gcTask !== null;\r\n    }\r\n    scheduleGC(delay) {\r\n        logDebug(LOG_TAG$e, `Garbage collection scheduled in ${delay}ms`);\r\n        this.gcTask = this.asyncQueue.enqueueAfterDelay(\"lru_garbage_collection\" /* TimerId.LruGarbageCollection */, delay, async () => {\r\n            this.gcTask = null;\r\n            try {\r\n                await this.localStore.collectGarbage(this.garbageCollector);\r\n            }\r\n            catch (e) {\r\n                if (isIndexedDbTransactionError(e)) {\r\n                    logDebug(LOG_TAG$e, 'Ignoring IndexedDB error during garbage collection: ', e);\r\n                }\r\n                else {\r\n                    await ignoreIfPrimaryLeaseLoss(e);\r\n                }\r\n            }\r\n            await this.scheduleGC(REGULAR_GC_DELAY_MS);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Implements the steps for LRU garbage collection.\r\n */\r\nclass LruGarbageCollectorImpl {\r\n    constructor(delegate, params) {\r\n        this.delegate = delegate;\r\n        this.params = params;\r\n    }\r\n    calculateTargetCount(txn, percentile) {\r\n        return this.delegate.getSequenceNumberCount(txn).next(targetCount => {\r\n            return Math.floor((percentile / 100.0) * targetCount);\r\n        });\r\n    }\r\n    nthSequenceNumber(txn, n) {\r\n        if (n === 0) {\r\n            return PersistencePromise.resolve(ListenSequence.INVALID);\r\n        }\r\n        const buffer = new RollingSequenceNumberBuffer(n);\r\n        return this.delegate\r\n            .forEachTarget(txn, target => buffer.addElement(target.sequenceNumber))\r\n            .next(() => {\r\n            return this.delegate.forEachOrphanedDocumentSequenceNumber(txn, sequenceNumber => buffer.addElement(sequenceNumber));\r\n        })\r\n            .next(() => buffer.maxValue);\r\n    }\r\n    removeTargets(txn, upperBound, activeTargetIds) {\r\n        return this.delegate.removeTargets(txn, upperBound, activeTargetIds);\r\n    }\r\n    removeOrphanedDocuments(txn, upperBound) {\r\n        return this.delegate.removeOrphanedDocuments(txn, upperBound);\r\n    }\r\n    collect(txn, activeTargetIds) {\r\n        if (this.params.cacheSizeCollectionThreshold === LRU_COLLECTION_DISABLED) {\r\n            logDebug('LruGarbageCollector', 'Garbage collection skipped; disabled');\r\n            return PersistencePromise.resolve(GC_DID_NOT_RUN);\r\n        }\r\n        return this.getCacheSize(txn).next(cacheSize => {\r\n            if (cacheSize < this.params.cacheSizeCollectionThreshold) {\r\n                logDebug('LruGarbageCollector', `Garbage collection skipped; Cache size ${cacheSize} ` +\r\n                    `is lower than threshold ${this.params.cacheSizeCollectionThreshold}`);\r\n                return GC_DID_NOT_RUN;\r\n            }\r\n            else {\r\n                return this.runGarbageCollection(txn, activeTargetIds);\r\n            }\r\n        });\r\n    }\r\n    getCacheSize(txn) {\r\n        return this.delegate.getCacheSize(txn);\r\n    }\r\n    runGarbageCollection(txn, activeTargetIds) {\r\n        let upperBoundSequenceNumber;\r\n        let sequenceNumbersToCollect, targetsRemoved;\r\n        // Timestamps for various pieces of the process\r\n        let countedTargetsTs, foundUpperBoundTs, removedTargetsTs, removedDocumentsTs;\r\n        const startTs = Date.now();\r\n        return this.calculateTargetCount(txn, this.params.percentileToCollect)\r\n            .next(sequenceNumbers => {\r\n            // Cap at the configured max\r\n            if (sequenceNumbers > this.params.maximumSequenceNumbersToCollect) {\r\n                logDebug('LruGarbageCollector', 'Capping sequence numbers to collect down ' +\r\n                    `to the maximum of ${this.params.maximumSequenceNumbersToCollect} ` +\r\n                    `from ${sequenceNumbers}`);\r\n                sequenceNumbersToCollect =\r\n                    this.params.maximumSequenceNumbersToCollect;\r\n            }\r\n            else {\r\n                sequenceNumbersToCollect = sequenceNumbers;\r\n            }\r\n            countedTargetsTs = Date.now();\r\n            return this.nthSequenceNumber(txn, sequenceNumbersToCollect);\r\n        })\r\n            .next(upperBound => {\r\n            upperBoundSequenceNumber = upperBound;\r\n            foundUpperBoundTs = Date.now();\r\n            return this.removeTargets(txn, upperBoundSequenceNumber, activeTargetIds);\r\n        })\r\n            .next(numTargetsRemoved => {\r\n            targetsRemoved = numTargetsRemoved;\r\n            removedTargetsTs = Date.now();\r\n            return this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);\r\n        })\r\n            .next(documentsRemoved => {\r\n            removedDocumentsTs = Date.now();\r\n            if (getLogLevel() <= LogLevel.DEBUG) {\r\n                const desc = 'LRU Garbage Collection\\n' +\r\n                    `\\tCounted targets in ${countedTargetsTs - startTs}ms\\n` +\r\n                    `\\tDetermined least recently used ${sequenceNumbersToCollect} in ` +\r\n                    `${foundUpperBoundTs - countedTargetsTs}ms\\n` +\r\n                    `\\tRemoved ${targetsRemoved} targets in ` +\r\n                    `${removedTargetsTs - foundUpperBoundTs}ms\\n` +\r\n                    `\\tRemoved ${documentsRemoved} documents in ` +\r\n                    `${removedDocumentsTs - removedTargetsTs}ms\\n` +\r\n                    `Total Duration: ${removedDocumentsTs - startTs}ms`;\r\n                logDebug('LruGarbageCollector', desc);\r\n            }\r\n            return PersistencePromise.resolve({\r\n                didRun: true,\r\n                sequenceNumbersCollected: sequenceNumbersToCollect,\r\n                targetsRemoved,\r\n                documentsRemoved\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction newLruGarbageCollector(delegate, params) {\r\n    return new LruGarbageCollectorImpl(delegate, params);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Provides LRU functionality for IndexedDB persistence. */\r\nclass IndexedDbLruDelegateImpl {\r\n    constructor(db, params) {\r\n        this.db = db;\r\n        this.garbageCollector = newLruGarbageCollector(this, params);\r\n    }\r\n    getSequenceNumberCount(txn) {\r\n        const docCountPromise = this.orphanedDocumentCount(txn);\r\n        const targetCountPromise = this.db.getTargetCache().getTargetCount(txn);\r\n        return targetCountPromise.next(targetCount => docCountPromise.next(docCount => targetCount + docCount));\r\n    }\r\n    orphanedDocumentCount(txn) {\r\n        let orphanedCount = 0;\r\n        return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\r\n            orphanedCount++;\r\n        }).next(() => orphanedCount);\r\n    }\r\n    forEachTarget(txn, f) {\r\n        return this.db.getTargetCache().forEachTarget(txn, f);\r\n    }\r\n    forEachOrphanedDocumentSequenceNumber(txn, f) {\r\n        return this.forEachOrphanedDocument(txn, (docKey, sequenceNumber) => f(sequenceNumber));\r\n    }\r\n    addReference(txn, targetId, key) {\r\n        return writeSentinelKey(txn, key);\r\n    }\r\n    removeReference(txn, targetId, key) {\r\n        return writeSentinelKey(txn, key);\r\n    }\r\n    removeTargets(txn, upperBound, activeTargetIds) {\r\n        return this.db.getTargetCache().removeTargets(txn, upperBound, activeTargetIds);\r\n    }\r\n    markPotentiallyOrphaned(txn, key) {\r\n        return writeSentinelKey(txn, key);\r\n    }\r\n    /**\r\n     * Returns true if anything would prevent this document from being garbage\r\n     * collected, given that the document in question is not present in any\r\n     * targets and has a sequence number less than or equal to the upper bound for\r\n     * the collection run.\r\n     */\r\n    isPinned(txn, docKey) {\r\n        return mutationQueuesContainKey(txn, docKey);\r\n    }\r\n    removeOrphanedDocuments(txn, upperBound) {\r\n        const documentCache = this.db.getRemoteDocumentCache();\r\n        const changeBuffer = documentCache.newChangeBuffer();\r\n        const promises = [];\r\n        let documentCount = 0;\r\n        const iteration = this.forEachOrphanedDocument(txn, (docKey, sequenceNumber) => {\r\n            if (sequenceNumber <= upperBound) {\r\n                const p = this.isPinned(txn, docKey).next(isPinned => {\r\n                    if (!isPinned) {\r\n                        documentCount++;\r\n                        // Our size accounting requires us to read all documents before\r\n                        // removing them.\r\n                        return changeBuffer.getEntry(txn, docKey).next(() => {\r\n                            changeBuffer.removeEntry(docKey, SnapshotVersion.min());\r\n                            return documentTargetStore(txn).delete(sentinelKey$1(docKey));\r\n                        });\r\n                    }\r\n                });\r\n                promises.push(p);\r\n            }\r\n        });\r\n        return iteration\r\n            .next(() => PersistencePromise.waitFor(promises))\r\n            .next(() => changeBuffer.apply(txn))\r\n            .next(() => documentCount);\r\n    }\r\n    removeTarget(txn, targetData) {\r\n        const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\r\n        return this.db.getTargetCache().updateTargetData(txn, updated);\r\n    }\r\n    updateLimboDocument(txn, key) {\r\n        return writeSentinelKey(txn, key);\r\n    }\r\n    /**\r\n     * Call provided function for each document in the cache that is 'orphaned'. Orphaned\r\n     * means not a part of any target, so the only entry in the target-document index for\r\n     * that document will be the sentinel row (targetId 0), which will also have the sequence\r\n     * number for the last time the document was accessed.\r\n     */\r\n    forEachOrphanedDocument(txn, f) {\r\n        const store = documentTargetStore(txn);\r\n        let nextToReport = ListenSequence.INVALID;\r\n        let nextPath;\r\n        return store\r\n            .iterate({\r\n            index: DbTargetDocumentDocumentTargetsIndex\r\n        }, ([targetId, docKey], { path, sequenceNumber }) => {\r\n            if (targetId === 0) {\r\n                // if nextToReport is valid, report it, this is a new key so the\r\n                // last one must not be a member of any targets.\r\n                if (nextToReport !== ListenSequence.INVALID) {\r\n                    f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\r\n                }\r\n                // set nextToReport to be this sequence number. It's the next one we\r\n                // might report, if we don't find any targets for this document.\r\n                // Note that the sequence number must be defined when the targetId\r\n                // is 0.\r\n                nextToReport = sequenceNumber;\r\n                nextPath = path;\r\n            }\r\n            else {\r\n                // set nextToReport to be invalid, we know we don't need to report\r\n                // this one since we found a target for it.\r\n                nextToReport = ListenSequence.INVALID;\r\n            }\r\n        })\r\n            .next(() => {\r\n            // Since we report sequence numbers after getting to the next key, we\r\n            // need to check if the last key we iterated over was an orphaned\r\n            // document and report it.\r\n            if (nextToReport !== ListenSequence.INVALID) {\r\n                f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\r\n            }\r\n        });\r\n    }\r\n    getCacheSize(txn) {\r\n        return this.db.getRemoteDocumentCache().getSize(txn);\r\n    }\r\n}\r\nfunction sentinelKey$1(key) {\r\n    return [0, encodeResourcePath(key.path)];\r\n}\r\n/**\r\n * @returns A value suitable for writing a sentinel row in the target-document\r\n * store.\r\n */\r\nfunction sentinelRow(key, sequenceNumber) {\r\n    return { targetId: 0, path: encodeResourcePath(key.path), sequenceNumber };\r\n}\r\nfunction writeSentinelKey(txn, key) {\r\n    return documentTargetStore(txn).put(sentinelRow(key, txn.currentSequenceNumber));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\r\n * It can be used to batch up a set of changes to be written to the cache, but\r\n * additionally supports reading entries back with the `getEntry()` method,\r\n * falling back to the underlying RemoteDocumentCache if no entry is\r\n * buffered.\r\n *\r\n * Entries added to the cache *must* be read first. This is to facilitate\r\n * calculating the size delta of the pending changes.\r\n *\r\n * PORTING NOTE: This class was implemented then removed from other platforms.\r\n * If byte-counting ends up being needed on the other platforms, consider\r\n * porting this class as part of that implementation work.\r\n */\r\nclass RemoteDocumentChangeBuffer {\r\n    constructor() {\r\n        // A mapping of document key to the new cache entry that should be written.\r\n        this.changes = new ObjectMap(key => key.toString(), (l, r) => l.isEqual(r));\r\n        this.changesApplied = false;\r\n    }\r\n    /**\r\n     * Buffers a `RemoteDocumentCache.addEntry()` call.\r\n     *\r\n     * You can only modify documents that have already been retrieved via\r\n     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\r\n     */\r\n    addEntry(document) {\r\n        this.assertNotApplied();\r\n        this.changes.set(document.key, document);\r\n    }\r\n    /**\r\n     * Buffers a `RemoteDocumentCache.removeEntry()` call.\r\n     *\r\n     * You can only remove documents that have already been retrieved via\r\n     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\r\n     */\r\n    removeEntry(key, readTime) {\r\n        this.assertNotApplied();\r\n        this.changes.set(key, MutableDocument.newInvalidDocument(key).setReadTime(readTime));\r\n    }\r\n    /**\r\n     * Looks up an entry in the cache. The buffered changes will first be checked,\r\n     * and if no buffered change applies, this will forward to\r\n     * `RemoteDocumentCache.getEntry()`.\r\n     *\r\n     * @param transaction - The transaction in which to perform any persistence\r\n     *     operations.\r\n     * @param documentKey - The key of the entry to look up.\r\n     * @returns The cached document or an invalid document if we have nothing\r\n     * cached.\r\n     */\r\n    getEntry(transaction, documentKey) {\r\n        this.assertNotApplied();\r\n        const bufferedEntry = this.changes.get(documentKey);\r\n        if (bufferedEntry !== undefined) {\r\n            return PersistencePromise.resolve(bufferedEntry);\r\n        }\r\n        else {\r\n            return this.getFromCache(transaction, documentKey);\r\n        }\r\n    }\r\n    /**\r\n     * Looks up several entries in the cache, forwarding to\r\n     * `RemoteDocumentCache.getEntry()`.\r\n     *\r\n     * @param transaction - The transaction in which to perform any persistence\r\n     *     operations.\r\n     * @param documentKeys - The keys of the entries to look up.\r\n     * @returns A map of cached documents, indexed by key. If an entry cannot be\r\n     *     found, the corresponding key will be mapped to an invalid document.\r\n     */\r\n    getEntries(transaction, documentKeys) {\r\n        return this.getAllFromCache(transaction, documentKeys);\r\n    }\r\n    /**\r\n     * Applies buffered changes to the underlying RemoteDocumentCache, using\r\n     * the provided transaction.\r\n     */\r\n    apply(transaction) {\r\n        this.assertNotApplied();\r\n        this.changesApplied = true;\r\n        return this.applyChanges(transaction);\r\n    }\r\n    /** Helper to assert this.changes is not null  */\r\n    assertNotApplied() {\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The RemoteDocumentCache for IndexedDb. To construct, invoke\r\n * `newIndexedDbRemoteDocumentCache()`.\r\n */\r\nclass IndexedDbRemoteDocumentCacheImpl {\r\n    constructor(serializer) {\r\n        this.serializer = serializer;\r\n    }\r\n    setIndexManager(indexManager) {\r\n        this.indexManager = indexManager;\r\n    }\r\n    /**\r\n     * Adds the supplied entries to the cache.\r\n     *\r\n     * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer\r\n     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\r\n     */\r\n    addEntry(transaction, key, doc) {\r\n        const documentStore = remoteDocumentsStore(transaction);\r\n        return documentStore.put(doc);\r\n    }\r\n    /**\r\n     * Removes a document from the cache.\r\n     *\r\n     * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer\r\n     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\r\n     */\r\n    removeEntry(transaction, documentKey, readTime) {\r\n        const store = remoteDocumentsStore(transaction);\r\n        return store.delete(dbReadTimeKey(documentKey, readTime));\r\n    }\r\n    /**\r\n     * Updates the current cache size.\r\n     *\r\n     * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the\r\n     * cache's metadata.\r\n     */\r\n    updateMetadata(transaction, sizeDelta) {\r\n        return this.getMetadata(transaction).next(metadata => {\r\n            metadata.byteSize += sizeDelta;\r\n            return this.setMetadata(transaction, metadata);\r\n        });\r\n    }\r\n    getEntry(transaction, documentKey) {\r\n        let doc = MutableDocument.newInvalidDocument(documentKey);\r\n        return remoteDocumentsStore(transaction)\r\n            .iterate({\r\n            index: DbRemoteDocumentDocumentKeyIndex,\r\n            range: IDBKeyRange.only(dbKey(documentKey))\r\n        }, (_, dbRemoteDoc) => {\r\n            doc = this.maybeDecodeDocument(documentKey, dbRemoteDoc);\r\n        })\r\n            .next(() => doc);\r\n    }\r\n    /**\r\n     * Looks up an entry in the cache.\r\n     *\r\n     * @param documentKey - The key of the entry to look up.\r\n     * @returns The cached document entry and its size.\r\n     */\r\n    getSizedEntry(transaction, documentKey) {\r\n        let result = {\r\n            size: 0,\r\n            document: MutableDocument.newInvalidDocument(documentKey)\r\n        };\r\n        return remoteDocumentsStore(transaction)\r\n            .iterate({\r\n            index: DbRemoteDocumentDocumentKeyIndex,\r\n            range: IDBKeyRange.only(dbKey(documentKey))\r\n        }, (_, dbRemoteDoc) => {\r\n            result = {\r\n                document: this.maybeDecodeDocument(documentKey, dbRemoteDoc),\r\n                size: dbDocumentSize(dbRemoteDoc)\r\n            };\r\n        })\r\n            .next(() => result);\r\n    }\r\n    getEntries(transaction, documentKeys) {\r\n        let results = mutableDocumentMap();\r\n        return this.forEachDbEntry(transaction, documentKeys, (key, dbRemoteDoc) => {\r\n            const doc = this.maybeDecodeDocument(key, dbRemoteDoc);\r\n            results = results.insert(key, doc);\r\n        }).next(() => results);\r\n    }\r\n    /**\r\n     * Looks up several entries in the cache.\r\n     *\r\n     * @param documentKeys - The set of keys entries to look up.\r\n     * @returns A map of documents indexed by key and a map of sizes indexed by\r\n     *     key (zero if the document does not exist).\r\n     */\r\n    getSizedEntries(transaction, documentKeys) {\r\n        let results = mutableDocumentMap();\r\n        let sizeMap = new SortedMap(DocumentKey.comparator);\r\n        return this.forEachDbEntry(transaction, documentKeys, (key, dbRemoteDoc) => {\r\n            const doc = this.maybeDecodeDocument(key, dbRemoteDoc);\r\n            results = results.insert(key, doc);\r\n            sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc));\r\n        }).next(() => {\r\n            return { documents: results, sizeMap };\r\n        });\r\n    }\r\n    forEachDbEntry(transaction, documentKeys, callback) {\r\n        if (documentKeys.isEmpty()) {\r\n            return PersistencePromise.resolve();\r\n        }\r\n        let sortedKeys = new SortedSet(dbKeyComparator);\r\n        documentKeys.forEach(e => (sortedKeys = sortedKeys.add(e)));\r\n        const range = IDBKeyRange.bound(dbKey(sortedKeys.first()), dbKey(sortedKeys.last()));\r\n        const keyIter = sortedKeys.getIterator();\r\n        let nextKey = keyIter.getNext();\r\n        return remoteDocumentsStore(transaction)\r\n            .iterate({ index: DbRemoteDocumentDocumentKeyIndex, range }, (_, dbRemoteDoc, control) => {\r\n            const potentialKey = DocumentKey.fromSegments([\r\n                ...dbRemoteDoc.prefixPath,\r\n                dbRemoteDoc.collectionGroup,\r\n                dbRemoteDoc.documentId\r\n            ]);\r\n            // Go through keys not found in cache.\r\n            while (nextKey && dbKeyComparator(nextKey, potentialKey) < 0) {\r\n                callback(nextKey, null);\r\n                nextKey = keyIter.getNext();\r\n            }\r\n            if (nextKey && nextKey.isEqual(potentialKey)) {\r\n                // Key found in cache.\r\n                callback(nextKey, dbRemoteDoc);\r\n                nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\r\n            }\r\n            // Skip to the next key (if there is one).\r\n            if (nextKey) {\r\n                control.skip(dbKey(nextKey));\r\n            }\r\n            else {\r\n                control.done();\r\n            }\r\n        })\r\n            .next(() => {\r\n            // The rest of the keys are not in the cache. One case where `iterate`\r\n            // above won't go through them is when the cache is empty.\r\n            while (nextKey) {\r\n                callback(nextKey, null);\r\n                nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\r\n            }\r\n        });\r\n    }\r\n    getDocumentsMatchingQuery(transaction, query, offset, mutatedDocs) {\r\n        const collection = query.path;\r\n        const startKey = [\r\n            collection.popLast().toArray(),\r\n            collection.lastSegment(),\r\n            toDbTimestampKey(offset.readTime),\r\n            offset.documentKey.path.isEmpty()\r\n                ? ''\r\n                : offset.documentKey.path.lastSegment()\r\n        ];\r\n        const endKey = [\r\n            collection.popLast().toArray(),\r\n            collection.lastSegment(),\r\n            [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER],\r\n            ''\r\n        ];\r\n        return remoteDocumentsStore(transaction)\r\n            .loadAll(IDBKeyRange.bound(startKey, endKey, true))\r\n            .next(dbRemoteDocs => {\r\n            let results = mutableDocumentMap();\r\n            for (const dbRemoteDoc of dbRemoteDocs) {\r\n                const document = this.maybeDecodeDocument(DocumentKey.fromSegments(dbRemoteDoc.prefixPath.concat(dbRemoteDoc.collectionGroup, dbRemoteDoc.documentId)), dbRemoteDoc);\r\n                if (document.isFoundDocument() &&\r\n                    (queryMatches(query, document) || mutatedDocs.has(document.key))) {\r\n                    // Either the document matches the given query, or it is mutated.\r\n                    results = results.insert(document.key, document);\r\n                }\r\n            }\r\n            return results;\r\n        });\r\n    }\r\n    getAllFromCollectionGroup(transaction, collectionGroup, offset, limit) {\r\n        let results = mutableDocumentMap();\r\n        const startKey = dbCollectionGroupKey(collectionGroup, offset);\r\n        const endKey = dbCollectionGroupKey(collectionGroup, IndexOffset.max());\r\n        return remoteDocumentsStore(transaction)\r\n            .iterate({\r\n            index: DbRemoteDocumentCollectionGroupIndex,\r\n            range: IDBKeyRange.bound(startKey, endKey, true)\r\n        }, (_, dbRemoteDoc, control) => {\r\n            const document = this.maybeDecodeDocument(DocumentKey.fromSegments(dbRemoteDoc.prefixPath.concat(dbRemoteDoc.collectionGroup, dbRemoteDoc.documentId)), dbRemoteDoc);\r\n            results = results.insert(document.key, document);\r\n            if (results.size === limit) {\r\n                control.done();\r\n            }\r\n        })\r\n            .next(() => results);\r\n    }\r\n    newChangeBuffer(options) {\r\n        return new IndexedDbRemoteDocumentChangeBuffer(this, !!options && options.trackRemovals);\r\n    }\r\n    getSize(txn) {\r\n        return this.getMetadata(txn).next(metadata => metadata.byteSize);\r\n    }\r\n    getMetadata(txn) {\r\n        return documentGlobalStore(txn)\r\n            .get(DbRemoteDocumentGlobalKey)\r\n            .next(metadata => {\r\n            hardAssert(!!metadata);\r\n            return metadata;\r\n        });\r\n    }\r\n    setMetadata(txn, metadata) {\r\n        return documentGlobalStore(txn).put(DbRemoteDocumentGlobalKey, metadata);\r\n    }\r\n    /**\r\n     * Decodes `dbRemoteDoc` and returns the document (or an invalid document if\r\n     * the document corresponds to the format used for sentinel deletes).\r\n     */\r\n    maybeDecodeDocument(documentKey, dbRemoteDoc) {\r\n        if (dbRemoteDoc) {\r\n            const doc = fromDbRemoteDocument(this.serializer, dbRemoteDoc);\r\n            // Whether the document is a sentinel removal and should only be used in the\r\n            // `getNewDocumentChanges()`\r\n            const isSentinelRemoval = doc.isNoDocument() && doc.version.isEqual(SnapshotVersion.min());\r\n            if (!isSentinelRemoval) {\r\n                return doc;\r\n            }\r\n        }\r\n        return MutableDocument.newInvalidDocument(documentKey);\r\n    }\r\n}\r\n/** Creates a new IndexedDbRemoteDocumentCache. */\r\nfunction newIndexedDbRemoteDocumentCache(serializer) {\r\n    return new IndexedDbRemoteDocumentCacheImpl(serializer);\r\n}\r\n/**\r\n * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.\r\n *\r\n * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size\r\n * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb\r\n * when we apply the changes.\r\n */\r\nclass IndexedDbRemoteDocumentChangeBuffer extends RemoteDocumentChangeBuffer {\r\n    /**\r\n     * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.\r\n     * @param trackRemovals - Whether to create sentinel deletes that can be tracked by\r\n     * `getNewDocumentChanges()`.\r\n     */\r\n    constructor(documentCache, trackRemovals) {\r\n        super();\r\n        this.documentCache = documentCache;\r\n        this.trackRemovals = trackRemovals;\r\n        // A map of document sizes and read times prior to applying the changes in\r\n        // this buffer.\r\n        this.documentStates = new ObjectMap(key => key.toString(), (l, r) => l.isEqual(r));\r\n    }\r\n    applyChanges(transaction) {\r\n        const promises = [];\r\n        let sizeDelta = 0;\r\n        let collectionParents = new SortedSet((l, r) => primitiveComparator(l.canonicalString(), r.canonicalString()));\r\n        this.changes.forEach((key, documentChange) => {\r\n            const previousDoc = this.documentStates.get(key);\r\n            promises.push(this.documentCache.removeEntry(transaction, key, previousDoc.readTime));\r\n            if (documentChange.isValidDocument()) {\r\n                const doc = toDbRemoteDocument(this.documentCache.serializer, documentChange);\r\n                collectionParents = collectionParents.add(key.path.popLast());\r\n                const size = dbDocumentSize(doc);\r\n                sizeDelta += size - previousDoc.size;\r\n                promises.push(this.documentCache.addEntry(transaction, key, doc));\r\n            }\r\n            else {\r\n                sizeDelta -= previousDoc.size;\r\n                if (this.trackRemovals) {\r\n                    // In order to track removals, we store a \"sentinel delete\" in the\r\n                    // RemoteDocumentCache. This entry is represented by a NoDocument\r\n                    // with a version of 0 and ignored by `maybeDecodeDocument()` but\r\n                    // preserved in `getNewDocumentChanges()`.\r\n                    const deletedDoc = toDbRemoteDocument(this.documentCache.serializer, documentChange.convertToNoDocument(SnapshotVersion.min()));\r\n                    promises.push(this.documentCache.addEntry(transaction, key, deletedDoc));\r\n                }\r\n            }\r\n        });\r\n        collectionParents.forEach(parent => {\r\n            promises.push(this.documentCache.indexManager.addToCollectionParentIndex(transaction, parent));\r\n        });\r\n        promises.push(this.documentCache.updateMetadata(transaction, sizeDelta));\r\n        return PersistencePromise.waitFor(promises);\r\n    }\r\n    getFromCache(transaction, documentKey) {\r\n        // Record the size of everything we load from the cache so we can compute a delta later.\r\n        return this.documentCache\r\n            .getSizedEntry(transaction, documentKey)\r\n            .next(getResult => {\r\n            this.documentStates.set(documentKey, {\r\n                size: getResult.size,\r\n                readTime: getResult.document.readTime\r\n            });\r\n            return getResult.document;\r\n        });\r\n    }\r\n    getAllFromCache(transaction, documentKeys) {\r\n        // Record the size of everything we load from the cache so we can compute\r\n        // a delta later.\r\n        return this.documentCache\r\n            .getSizedEntries(transaction, documentKeys)\r\n            .next(({ documents, sizeMap }) => {\r\n            // Note: `getAllFromCache` returns two maps instead of a single map from\r\n            // keys to `DocumentSizeEntry`s. This is to allow returning the\r\n            // `MutableDocumentMap` directly, without a conversion.\r\n            sizeMap.forEach((documentKey, size) => {\r\n                this.documentStates.set(documentKey, {\r\n                    size,\r\n                    readTime: documents.get(documentKey).readTime\r\n                });\r\n            });\r\n            return documents;\r\n        });\r\n    }\r\n}\r\nfunction documentGlobalStore(txn) {\r\n    return getStore(txn, DbRemoteDocumentGlobalStore);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\r\n */\r\nfunction remoteDocumentsStore(txn) {\r\n    return getStore(txn, DbRemoteDocumentStore);\r\n}\r\n/**\r\n * Returns a key that can be used for document lookups on the\r\n * `DbRemoteDocumentDocumentKeyIndex` index.\r\n */\r\nfunction dbKey(documentKey) {\r\n    const path = documentKey.path.toArray();\r\n    return [\r\n        /* prefix path */ path.slice(0, path.length - 2),\r\n        /* collection id */ path[path.length - 2],\r\n        /* document id */ path[path.length - 1]\r\n    ];\r\n}\r\n/**\r\n * Returns a key that can be used for document lookups via the primary key of\r\n * the DbRemoteDocument object store.\r\n */\r\nfunction dbReadTimeKey(documentKey, readTime) {\r\n    const path = documentKey.path.toArray();\r\n    return [\r\n        /* prefix path */ path.slice(0, path.length - 2),\r\n        /* collection id */ path[path.length - 2],\r\n        toDbTimestampKey(readTime),\r\n        /* document id */ path[path.length - 1]\r\n    ];\r\n}\r\n/**\r\n * Returns a key that can be used for document lookups on the\r\n * `DbRemoteDocumentDocumentCollectionGroupIndex` index.\r\n */\r\nfunction dbCollectionGroupKey(collectionGroup, offset) {\r\n    const path = offset.documentKey.path.toArray();\r\n    return [\r\n        /* collection id */ collectionGroup,\r\n        toDbTimestampKey(offset.readTime),\r\n        /* prefix path */ path.slice(0, path.length - 2),\r\n        /* document id */ path.length > 0 ? path[path.length - 1] : ''\r\n    ];\r\n}\r\n/**\r\n * Comparator that compares document keys according to the primary key sorting\r\n * used by the `DbRemoteDocumentDocument` store (by prefix path, collection id\r\n * and then document ID).\r\n *\r\n * Visible for testing.\r\n */\r\nfunction dbKeyComparator(l, r) {\r\n    const left = l.path.toArray();\r\n    const right = r.path.toArray();\r\n    // The ordering is based on https://chromium.googlesource.com/chromium/blink/+/fe5c21fef94dae71c1c3344775b8d8a7f7e6d9ec/Source/modules/indexeddb/IDBKey.cpp#74\r\n    let cmp = 0;\r\n    for (let i = 0; i < left.length - 2 && i < right.length - 2; ++i) {\r\n        cmp = primitiveComparator(left[i], right[i]);\r\n        if (cmp) {\r\n            return cmp;\r\n        }\r\n    }\r\n    cmp = primitiveComparator(left.length, right.length);\r\n    if (cmp) {\r\n        return cmp;\r\n    }\r\n    cmp = primitiveComparator(left[left.length - 2], right[right.length - 2]);\r\n    if (cmp) {\r\n        return cmp;\r\n    }\r\n    return primitiveComparator(left[left.length - 1], right[right.length - 1]);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Schema Version for the Web client:\r\n * 1.  Initial version including Mutation Queue, Query Cache, and Remote\r\n *     Document Cache\r\n * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No\r\n *     longer required because migration 3 unconditionally clears it.\r\n * 3.  Dropped and re-created Query Cache to deal with cache corruption related\r\n *     to limbo resolution. Addresses\r\n *     https://github.com/firebase/firebase-ios-sdk/issues/1548\r\n * 4.  Multi-Tab Support.\r\n * 5.  Removal of held write acks.\r\n * 6.  Create document global for tracking document cache size.\r\n * 7.  Ensure every cached document has a sentinel row with a sequence number.\r\n * 8.  Add collection-parent index for Collection Group queries.\r\n * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than\r\n *     an auto-incrementing ID. This is required for Index-Free queries.\r\n * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.\r\n * 11. Add bundles and named_queries for bundle support.\r\n * 12. Add document overlays.\r\n * 13. Rewrite the keys of the remote document cache to allow for efficient\r\n *     document lookup via `getAll()`.\r\n * 14. Add overlays.\r\n * 15. Add indexing support.\r\n */\r\nconst SCHEMA_VERSION = 15;\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a local view (overlay) of a document, and the fields that are\r\n * locally mutated.\r\n */\r\nclass OverlayedDocument {\r\n    constructor(overlayedDocument, \r\n    /**\r\n     * The fields that are locally mutated by patch mutations.\r\n     *\r\n     * If the overlayed\tdocument is from set or delete mutations, this is `null`.\r\n     * If there is no overlay (mutation) for the document, this is an empty `FieldMask`.\r\n     */\r\n    mutatedFields) {\r\n        this.overlayedDocument = overlayedDocument;\r\n        this.mutatedFields = mutatedFields;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A readonly view of the local state of all documents we're tracking (i.e. we\r\n * have a cached version in remoteDocumentCache or local mutations for the\r\n * document). The view is computed by applying the mutations in the\r\n * MutationQueue to the RemoteDocumentCache.\r\n */\r\nclass LocalDocumentsView {\r\n    constructor(remoteDocumentCache, mutationQueue, documentOverlayCache, indexManager) {\r\n        this.remoteDocumentCache = remoteDocumentCache;\r\n        this.mutationQueue = mutationQueue;\r\n        this.documentOverlayCache = documentOverlayCache;\r\n        this.indexManager = indexManager;\r\n    }\r\n    /**\r\n     * Get the local view of the document identified by `key`.\r\n     *\r\n     * @returns Local view of the document or null if we don't have any cached\r\n     * state for it.\r\n     */\r\n    getDocument(transaction, key) {\r\n        let overlay = null;\r\n        return this.documentOverlayCache\r\n            .getOverlay(transaction, key)\r\n            .next(value => {\r\n            overlay = value;\r\n            return this.remoteDocumentCache.getEntry(transaction, key);\r\n        })\r\n            .next(document => {\r\n            if (overlay !== null) {\r\n                mutationApplyToLocalView(overlay.mutation, document, FieldMask.empty(), Timestamp.now());\r\n            }\r\n            return document;\r\n        });\r\n    }\r\n    /**\r\n     * Gets the local view of the documents identified by `keys`.\r\n     *\r\n     * If we don't have cached state for a document in `keys`, a NoDocument will\r\n     * be stored for that key in the resulting set.\r\n     */\r\n    getDocuments(transaction, keys) {\r\n        return this.remoteDocumentCache\r\n            .getEntries(transaction, keys)\r\n            .next(docs => this.getLocalViewOfDocuments(transaction, docs, documentKeySet()).next(() => docs));\r\n    }\r\n    /**\r\n     * Similar to `getDocuments`, but creates the local view from the given\r\n     * `baseDocs` without retrieving documents from the local store.\r\n     *\r\n     * @param transaction - The transaction this operation is scoped to.\r\n     * @param docs - The documents to apply local mutations to get the local views.\r\n     * @param existenceStateChanged - The set of document keys whose existence state\r\n     *   is changed. This is useful to determine if some documents overlay needs\r\n     *   to be recalculated.\r\n     */\r\n    getLocalViewOfDocuments(transaction, docs, existenceStateChanged = documentKeySet()) {\r\n        const overlays = newOverlayMap();\r\n        return this.populateOverlays(transaction, overlays, docs).next(() => {\r\n            return this.computeViews(transaction, docs, overlays, existenceStateChanged).next(computeViewsResult => {\r\n                let result = documentMap();\r\n                computeViewsResult.forEach((documentKey, overlayedDocument) => {\r\n                    result = result.insert(documentKey, overlayedDocument.overlayedDocument);\r\n                });\r\n                return result;\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Gets the overlayed documents for the given document map, which will include\r\n     * the local view of those documents and a `FieldMask` indicating which fields\r\n     * are mutated locally, `null` if overlay is a Set or Delete mutation.\r\n     */\r\n    getOverlayedDocuments(transaction, docs) {\r\n        const overlays = newOverlayMap();\r\n        return this.populateOverlays(transaction, overlays, docs).next(() => this.computeViews(transaction, docs, overlays, documentKeySet()));\r\n    }\r\n    /**\r\n     * Fetches the overlays for {@code docs} and adds them to provided overlay map\r\n     * if the map does not already contain an entry for the given document key.\r\n     */\r\n    populateOverlays(transaction, overlays, docs) {\r\n        const missingOverlays = [];\r\n        docs.forEach(key => {\r\n            if (!overlays.has(key)) {\r\n                missingOverlays.push(key);\r\n            }\r\n        });\r\n        return this.documentOverlayCache\r\n            .getOverlays(transaction, missingOverlays)\r\n            .next(result => {\r\n            result.forEach((key, val) => {\r\n                overlays.set(key, val);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Computes the local view for the given documents.\r\n     *\r\n     * @param docs - The documents to compute views for. It also has the base\r\n     *   version of the documents.\r\n     * @param overlays - The overlays that need to be applied to the given base\r\n     *   version of the documents.\r\n     * @param existenceStateChanged - A set of documents whose existence states\r\n     *   might have changed. This is used to determine if we need to re-calculate\r\n     *   overlays from mutation queues.\r\n     * @return A map represents the local documents view.\r\n     */\r\n    computeViews(transaction, docs, overlays, existenceStateChanged) {\r\n        let recalculateDocuments = mutableDocumentMap();\r\n        const mutatedFields = newDocumentKeyMap();\r\n        const results = newOverlayedDocumentMap();\r\n        docs.forEach((_, doc) => {\r\n            const overlay = overlays.get(doc.key);\r\n            // Recalculate an overlay if the document's existence state changed due to\r\n            // a remote event *and* the overlay is a PatchMutation. This is because\r\n            // document existence state can change if some patch mutation's\r\n            // preconditions are met.\r\n            // NOTE: we recalculate when `overlay` is undefined as well, because there\r\n            // might be a patch mutation whose precondition does not match before the\r\n            // change (hence overlay is undefined), but would now match.\r\n            if (existenceStateChanged.has(doc.key) &&\r\n                (overlay === undefined || overlay.mutation instanceof PatchMutation)) {\r\n                recalculateDocuments = recalculateDocuments.insert(doc.key, doc);\r\n            }\r\n            else if (overlay !== undefined) {\r\n                mutatedFields.set(doc.key, overlay.mutation.getFieldMask());\r\n                mutationApplyToLocalView(overlay.mutation, doc, overlay.mutation.getFieldMask(), Timestamp.now());\r\n            }\r\n            else {\r\n                // no overlay exists\r\n                // Using EMPTY to indicate there is no overlay for the document.\r\n                mutatedFields.set(doc.key, FieldMask.empty());\r\n            }\r\n        });\r\n        return this.recalculateAndSaveOverlays(transaction, recalculateDocuments).next(recalculatedFields => {\r\n            recalculatedFields.forEach((documentKey, mask) => mutatedFields.set(documentKey, mask));\r\n            docs.forEach((documentKey, document) => {\r\n                var _a;\r\n                return results.set(documentKey, new OverlayedDocument(document, (_a = mutatedFields.get(documentKey)) !== null && _a !== void 0 ? _a : null));\r\n            });\r\n            return results;\r\n        });\r\n    }\r\n    recalculateAndSaveOverlays(transaction, docs) {\r\n        const masks = newDocumentKeyMap();\r\n        // A reverse lookup map from batch id to the documents within that batch.\r\n        let documentsByBatchId = new SortedMap((key1, key2) => key1 - key2);\r\n        let processed = documentKeySet();\r\n        return this.mutationQueue\r\n            .getAllMutationBatchesAffectingDocumentKeys(transaction, docs)\r\n            .next(batches => {\r\n            for (const batch of batches) {\r\n                batch.keys().forEach(key => {\r\n                    const baseDoc = docs.get(key);\r\n                    if (baseDoc === null) {\r\n                        return;\r\n                    }\r\n                    let mask = masks.get(key) || FieldMask.empty();\r\n                    mask = batch.applyToLocalView(baseDoc, mask);\r\n                    masks.set(key, mask);\r\n                    const newSet = (documentsByBatchId.get(batch.batchId) || documentKeySet()).add(key);\r\n                    documentsByBatchId = documentsByBatchId.insert(batch.batchId, newSet);\r\n                });\r\n            }\r\n        })\r\n            .next(() => {\r\n            const promises = [];\r\n            // Iterate in descending order of batch IDs, and skip documents that are\r\n            // already saved.\r\n            const iter = documentsByBatchId.getReverseIterator();\r\n            while (iter.hasNext()) {\r\n                const entry = iter.getNext();\r\n                const batchId = entry.key;\r\n                const keys = entry.value;\r\n                const overlays = newMutationMap();\r\n                keys.forEach(key => {\r\n                    if (!processed.has(key)) {\r\n                        const overlayMutation = calculateOverlayMutation(docs.get(key), masks.get(key));\r\n                        if (overlayMutation !== null) {\r\n                            overlays.set(key, overlayMutation);\r\n                        }\r\n                        processed = processed.add(key);\r\n                    }\r\n                });\r\n                promises.push(this.documentOverlayCache.saveOverlays(transaction, batchId, overlays));\r\n            }\r\n            return PersistencePromise.waitFor(promises);\r\n        })\r\n            .next(() => masks);\r\n    }\r\n    /**\r\n     * Recalculates overlays by reading the documents from remote document cache\r\n     * first, and saves them after they are calculated.\r\n     */\r\n    recalculateAndSaveOverlaysForDocumentKeys(transaction, documentKeys) {\r\n        return this.remoteDocumentCache\r\n            .getEntries(transaction, documentKeys)\r\n            .next(docs => this.recalculateAndSaveOverlays(transaction, docs));\r\n    }\r\n    /**\r\n     * Performs a query against the local view of all documents.\r\n     *\r\n     * @param transaction - The persistence transaction.\r\n     * @param query - The query to match documents against.\r\n     * @param offset - Read time and key to start scanning by (exclusive).\r\n     */\r\n    getDocumentsMatchingQuery(transaction, query, offset) {\r\n        if (isDocumentQuery$1(query)) {\r\n            return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\r\n        }\r\n        else if (isCollectionGroupQuery(query)) {\r\n            return this.getDocumentsMatchingCollectionGroupQuery(transaction, query, offset);\r\n        }\r\n        else {\r\n            return this.getDocumentsMatchingCollectionQuery(transaction, query, offset);\r\n        }\r\n    }\r\n    /**\r\n     * Given a collection group, returns the next documents that follow the provided offset, along\r\n     * with an updated batch ID.\r\n     *\r\n     * <p>The documents returned by this method are ordered by remote version from the provided\r\n     * offset. If there are no more remote documents after the provided offset, documents with\r\n     * mutations in order of batch id from the offset are returned. Since all documents in a batch are\r\n     * returned together, the total number of documents returned can exceed {@code count}.\r\n     *\r\n     * @param transaction\r\n     * @param collectionGroup The collection group for the documents.\r\n     * @param offset The offset to index into.\r\n     * @param count The number of documents to return\r\n     * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.\r\n     */\r\n    getNextDocuments(transaction, collectionGroup, offset, count) {\r\n        return this.remoteDocumentCache\r\n            .getAllFromCollectionGroup(transaction, collectionGroup, offset, count)\r\n            .next((originalDocs) => {\r\n            const overlaysPromise = count - originalDocs.size > 0\r\n                ? this.documentOverlayCache.getOverlaysForCollectionGroup(transaction, collectionGroup, offset.largestBatchId, count - originalDocs.size)\r\n                : PersistencePromise.resolve(newOverlayMap());\r\n            // The callsite will use the largest batch ID together with the latest read time to create\r\n            // a new index offset. Since we only process batch IDs if all remote documents have been read,\r\n            // no overlay will increase the overall read time. This is why we only need to special case\r\n            // the batch id.\r\n            let largestBatchId = INITIAL_LARGEST_BATCH_ID;\r\n            let modifiedDocs = originalDocs;\r\n            return overlaysPromise.next(overlays => {\r\n                return PersistencePromise.forEach(overlays, (key, overlay) => {\r\n                    if (largestBatchId < overlay.largestBatchId) {\r\n                        largestBatchId = overlay.largestBatchId;\r\n                    }\r\n                    if (originalDocs.get(key)) {\r\n                        return PersistencePromise.resolve();\r\n                    }\r\n                    return this.remoteDocumentCache\r\n                        .getEntry(transaction, key)\r\n                        .next(doc => {\r\n                        modifiedDocs = modifiedDocs.insert(key, doc);\r\n                    });\r\n                })\r\n                    .next(() => this.populateOverlays(transaction, overlays, originalDocs))\r\n                    .next(() => this.computeViews(transaction, modifiedDocs, overlays, documentKeySet()))\r\n                    .next(localDocs => ({\r\n                    batchId: largestBatchId,\r\n                    changes: convertOverlayedDocumentMapToDocumentMap(localDocs)\r\n                }));\r\n            });\r\n        });\r\n    }\r\n    getDocumentsMatchingDocumentQuery(transaction, docPath) {\r\n        // Just do a simple document lookup.\r\n        return this.getDocument(transaction, new DocumentKey(docPath)).next(document => {\r\n            let result = documentMap();\r\n            if (document.isFoundDocument()) {\r\n                result = result.insert(document.key, document);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    getDocumentsMatchingCollectionGroupQuery(transaction, query, offset) {\r\n        const collectionId = query.collectionGroup;\r\n        let results = documentMap();\r\n        return this.indexManager\r\n            .getCollectionParents(transaction, collectionId)\r\n            .next(parents => {\r\n            // Perform a collection query against each parent that contains the\r\n            // collectionId and aggregate the results.\r\n            return PersistencePromise.forEach(parents, (parent) => {\r\n                const collectionQuery = asCollectionQueryAtPath(query, parent.child(collectionId));\r\n                return this.getDocumentsMatchingCollectionQuery(transaction, collectionQuery, offset).next(r => {\r\n                    r.forEach((key, doc) => {\r\n                        results = results.insert(key, doc);\r\n                    });\r\n                });\r\n            }).next(() => results);\r\n        });\r\n    }\r\n    getDocumentsMatchingCollectionQuery(transaction, query, offset) {\r\n        // Query the remote documents and overlay mutations.\r\n        let overlays;\r\n        return this.documentOverlayCache\r\n            .getOverlaysForCollection(transaction, query.path, offset.largestBatchId)\r\n            .next(result => {\r\n            overlays = result;\r\n            return this.remoteDocumentCache.getDocumentsMatchingQuery(transaction, query, offset, overlays);\r\n        })\r\n            .next(remoteDocuments => {\r\n            // As documents might match the query because of their overlay we need to\r\n            // include documents for all overlays in the initial document set.\r\n            overlays.forEach((_, overlay) => {\r\n                const key = overlay.getKey();\r\n                if (remoteDocuments.get(key) === null) {\r\n                    remoteDocuments = remoteDocuments.insert(key, MutableDocument.newInvalidDocument(key));\r\n                }\r\n            });\r\n            // Apply the overlays and match against the query.\r\n            let results = documentMap();\r\n            remoteDocuments.forEach((key, document) => {\r\n                const overlay = overlays.get(key);\r\n                if (overlay !== undefined) {\r\n                    mutationApplyToLocalView(overlay.mutation, document, FieldMask.empty(), Timestamp.now());\r\n                }\r\n                // Finally, insert the documents that still match the query\r\n                if (queryMatches(query, document)) {\r\n                    results = results.insert(key, document);\r\n                }\r\n            });\r\n            return results;\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MemoryBundleCache {\r\n    constructor(serializer) {\r\n        this.serializer = serializer;\r\n        this.bundles = new Map();\r\n        this.namedQueries = new Map();\r\n    }\r\n    getBundleMetadata(transaction, bundleId) {\r\n        return PersistencePromise.resolve(this.bundles.get(bundleId));\r\n    }\r\n    saveBundleMetadata(transaction, bundleMetadata) {\r\n        this.bundles.set(bundleMetadata.id, fromBundleMetadata(bundleMetadata));\r\n        return PersistencePromise.resolve();\r\n    }\r\n    getNamedQuery(transaction, queryName) {\r\n        return PersistencePromise.resolve(this.namedQueries.get(queryName));\r\n    }\r\n    saveNamedQuery(transaction, query) {\r\n        this.namedQueries.set(query.name, fromProtoNamedQuery(query));\r\n        return PersistencePromise.resolve();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory implementation of DocumentOverlayCache.\r\n */\r\nclass MemoryDocumentOverlayCache {\r\n    constructor() {\r\n        // A map sorted by DocumentKey, whose value is a pair of the largest batch id\r\n        // for the overlay and the overlay itself.\r\n        this.overlays = new SortedMap(DocumentKey.comparator);\r\n        this.overlayByBatchId = new Map();\r\n    }\r\n    getOverlay(transaction, key) {\r\n        return PersistencePromise.resolve(this.overlays.get(key));\r\n    }\r\n    getOverlays(transaction, keys) {\r\n        const result = newOverlayMap();\r\n        return PersistencePromise.forEach(keys, (key) => {\r\n            return this.getOverlay(transaction, key).next(overlay => {\r\n                if (overlay !== null) {\r\n                    result.set(key, overlay);\r\n                }\r\n            });\r\n        }).next(() => result);\r\n    }\r\n    saveOverlays(transaction, largestBatchId, overlays) {\r\n        overlays.forEach((_, mutation) => {\r\n            this.saveOverlay(transaction, largestBatchId, mutation);\r\n        });\r\n        return PersistencePromise.resolve();\r\n    }\r\n    removeOverlaysForBatchId(transaction, documentKeys, batchId) {\r\n        const keys = this.overlayByBatchId.get(batchId);\r\n        if (keys !== undefined) {\r\n            keys.forEach(key => (this.overlays = this.overlays.remove(key)));\r\n            this.overlayByBatchId.delete(batchId);\r\n        }\r\n        return PersistencePromise.resolve();\r\n    }\r\n    getOverlaysForCollection(transaction, collection, sinceBatchId) {\r\n        const result = newOverlayMap();\r\n        const immediateChildrenPathLength = collection.length + 1;\r\n        const prefix = new DocumentKey(collection.child(''));\r\n        const iter = this.overlays.getIteratorFrom(prefix);\r\n        while (iter.hasNext()) {\r\n            const entry = iter.getNext();\r\n            const overlay = entry.value;\r\n            const key = overlay.getKey();\r\n            if (!collection.isPrefixOf(key.path)) {\r\n                break;\r\n            }\r\n            // Documents from sub-collections\r\n            if (key.path.length !== immediateChildrenPathLength) {\r\n                continue;\r\n            }\r\n            if (overlay.largestBatchId > sinceBatchId) {\r\n                result.set(overlay.getKey(), overlay);\r\n            }\r\n        }\r\n        return PersistencePromise.resolve(result);\r\n    }\r\n    getOverlaysForCollectionGroup(transaction, collectionGroup, sinceBatchId, count) {\r\n        let batchIdToOverlays = new SortedMap((key1, key2) => key1 - key2);\r\n        const iter = this.overlays.getIterator();\r\n        while (iter.hasNext()) {\r\n            const entry = iter.getNext();\r\n            const overlay = entry.value;\r\n            const key = overlay.getKey();\r\n            if (key.getCollectionGroup() !== collectionGroup) {\r\n                continue;\r\n            }\r\n            if (overlay.largestBatchId > sinceBatchId) {\r\n                let overlaysForBatchId = batchIdToOverlays.get(overlay.largestBatchId);\r\n                if (overlaysForBatchId === null) {\r\n                    overlaysForBatchId = newOverlayMap();\r\n                    batchIdToOverlays = batchIdToOverlays.insert(overlay.largestBatchId, overlaysForBatchId);\r\n                }\r\n                overlaysForBatchId.set(overlay.getKey(), overlay);\r\n            }\r\n        }\r\n        const result = newOverlayMap();\r\n        const batchIter = batchIdToOverlays.getIterator();\r\n        while (batchIter.hasNext()) {\r\n            const entry = batchIter.getNext();\r\n            const overlays = entry.value;\r\n            overlays.forEach((key, overlay) => result.set(key, overlay));\r\n            if (result.size() >= count) {\r\n                break;\r\n            }\r\n        }\r\n        return PersistencePromise.resolve(result);\r\n    }\r\n    saveOverlay(transaction, largestBatchId, mutation) {\r\n        // Remove the association of the overlay to its batch id.\r\n        const existing = this.overlays.get(mutation.key);\r\n        if (existing !== null) {\r\n            const newSet = this.overlayByBatchId\r\n                .get(existing.largestBatchId)\r\n                .delete(mutation.key);\r\n            this.overlayByBatchId.set(existing.largestBatchId, newSet);\r\n        }\r\n        this.overlays = this.overlays.insert(mutation.key, new Overlay(largestBatchId, mutation));\r\n        // Create the association of this overlay to the given largestBatchId.\r\n        let batch = this.overlayByBatchId.get(largestBatchId);\r\n        if (batch === undefined) {\r\n            batch = documentKeySet();\r\n            this.overlayByBatchId.set(largestBatchId, batch);\r\n        }\r\n        this.overlayByBatchId.set(largestBatchId, batch.add(mutation.key));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A collection of references to a document from some kind of numbered entity\r\n * (either a target ID or batch ID). As references are added to or removed from\r\n * the set corresponding events are emitted to a registered garbage collector.\r\n *\r\n * Each reference is represented by a DocumentReference object. Each of them\r\n * contains enough information to uniquely identify the reference. They are all\r\n * stored primarily in a set sorted by key. A document is considered garbage if\r\n * there's no references in that set (this can be efficiently checked thanks to\r\n * sorting by key).\r\n *\r\n * ReferenceSet also keeps a secondary set that contains references sorted by\r\n * IDs. This one is used to efficiently implement removal of all references by\r\n * some target ID.\r\n */\r\nclass ReferenceSet {\r\n    constructor() {\r\n        // A set of outstanding references to a document sorted by key.\r\n        this.refsByKey = new SortedSet(DocReference.compareByKey);\r\n        // A set of outstanding references to a document sorted by target id.\r\n        this.refsByTarget = new SortedSet(DocReference.compareByTargetId);\r\n    }\r\n    /** Returns true if the reference set contains no references. */\r\n    isEmpty() {\r\n        return this.refsByKey.isEmpty();\r\n    }\r\n    /** Adds a reference to the given document key for the given ID. */\r\n    addReference(key, id) {\r\n        const ref = new DocReference(key, id);\r\n        this.refsByKey = this.refsByKey.add(ref);\r\n        this.refsByTarget = this.refsByTarget.add(ref);\r\n    }\r\n    /** Add references to the given document keys for the given ID. */\r\n    addReferences(keys, id) {\r\n        keys.forEach(key => this.addReference(key, id));\r\n    }\r\n    /**\r\n     * Removes a reference to the given document key for the given\r\n     * ID.\r\n     */\r\n    removeReference(key, id) {\r\n        this.removeRef(new DocReference(key, id));\r\n    }\r\n    removeReferences(keys, id) {\r\n        keys.forEach(key => this.removeReference(key, id));\r\n    }\r\n    /**\r\n     * Clears all references with a given ID. Calls removeRef() for each key\r\n     * removed.\r\n     */\r\n    removeReferencesForId(id) {\r\n        const emptyKey = new DocumentKey(new ResourcePath([]));\r\n        const startRef = new DocReference(emptyKey, id);\r\n        const endRef = new DocReference(emptyKey, id + 1);\r\n        const keys = [];\r\n        this.refsByTarget.forEachInRange([startRef, endRef], ref => {\r\n            this.removeRef(ref);\r\n            keys.push(ref.key);\r\n        });\r\n        return keys;\r\n    }\r\n    removeAllReferences() {\r\n        this.refsByKey.forEach(ref => this.removeRef(ref));\r\n    }\r\n    removeRef(ref) {\r\n        this.refsByKey = this.refsByKey.delete(ref);\r\n        this.refsByTarget = this.refsByTarget.delete(ref);\r\n    }\r\n    referencesForId(id) {\r\n        const emptyKey = new DocumentKey(new ResourcePath([]));\r\n        const startRef = new DocReference(emptyKey, id);\r\n        const endRef = new DocReference(emptyKey, id + 1);\r\n        let keys = documentKeySet();\r\n        this.refsByTarget.forEachInRange([startRef, endRef], ref => {\r\n            keys = keys.add(ref.key);\r\n        });\r\n        return keys;\r\n    }\r\n    containsKey(key) {\r\n        const ref = new DocReference(key, 0);\r\n        const firstRef = this.refsByKey.firstAfterOrEqual(ref);\r\n        return firstRef !== null && key.isEqual(firstRef.key);\r\n    }\r\n}\r\nclass DocReference {\r\n    constructor(key, targetOrBatchId) {\r\n        this.key = key;\r\n        this.targetOrBatchId = targetOrBatchId;\r\n    }\r\n    /** Compare by key then by ID */\r\n    static compareByKey(left, right) {\r\n        return (DocumentKey.comparator(left.key, right.key) ||\r\n            primitiveComparator(left.targetOrBatchId, right.targetOrBatchId));\r\n    }\r\n    /** Compare by ID then by key */\r\n    static compareByTargetId(left, right) {\r\n        return (primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) ||\r\n            DocumentKey.comparator(left.key, right.key));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MemoryMutationQueue {\r\n    constructor(indexManager, referenceDelegate) {\r\n        this.indexManager = indexManager;\r\n        this.referenceDelegate = referenceDelegate;\r\n        /**\r\n         * The set of all mutations that have been sent but not yet been applied to\r\n         * the backend.\r\n         */\r\n        this.mutationQueue = [];\r\n        /** Next value to use when assigning sequential IDs to each mutation batch. */\r\n        this.nextBatchId = 1;\r\n        /** An ordered mapping between documents and the mutations batch IDs. */\r\n        this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\r\n    }\r\n    checkEmpty(transaction) {\r\n        return PersistencePromise.resolve(this.mutationQueue.length === 0);\r\n    }\r\n    addMutationBatch(transaction, localWriteTime, baseMutations, mutations) {\r\n        const batchId = this.nextBatchId;\r\n        this.nextBatchId++;\r\n        if (this.mutationQueue.length > 0) {\r\n            this.mutationQueue[this.mutationQueue.length - 1];\r\n        }\r\n        const batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);\r\n        this.mutationQueue.push(batch);\r\n        // Track references by document key and index collection parents.\r\n        for (const mutation of mutations) {\r\n            this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));\r\n            this.indexManager.addToCollectionParentIndex(transaction, mutation.key.path.popLast());\r\n        }\r\n        return PersistencePromise.resolve(batch);\r\n    }\r\n    lookupMutationBatch(transaction, batchId) {\r\n        return PersistencePromise.resolve(this.findMutationBatch(batchId));\r\n    }\r\n    getNextMutationBatchAfterBatchId(transaction, batchId) {\r\n        const nextBatchId = batchId + 1;\r\n        // The requested batchId may still be out of range so normalize it to the\r\n        // start of the queue.\r\n        const rawIndex = this.indexOfBatchId(nextBatchId);\r\n        const index = rawIndex < 0 ? 0 : rawIndex;\r\n        return PersistencePromise.resolve(this.mutationQueue.length > index ? this.mutationQueue[index] : null);\r\n    }\r\n    getHighestUnacknowledgedBatchId() {\r\n        return PersistencePromise.resolve(this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1);\r\n    }\r\n    getAllMutationBatches(transaction) {\r\n        return PersistencePromise.resolve(this.mutationQueue.slice());\r\n    }\r\n    getAllMutationBatchesAffectingDocumentKey(transaction, documentKey) {\r\n        const start = new DocReference(documentKey, 0);\r\n        const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\r\n        const result = [];\r\n        this.batchesByDocumentKey.forEachInRange([start, end], ref => {\r\n            const batch = this.findMutationBatch(ref.targetOrBatchId);\r\n            result.push(batch);\r\n        });\r\n        return PersistencePromise.resolve(result);\r\n    }\r\n    getAllMutationBatchesAffectingDocumentKeys(transaction, documentKeys) {\r\n        let uniqueBatchIDs = new SortedSet(primitiveComparator);\r\n        documentKeys.forEach(documentKey => {\r\n            const start = new DocReference(documentKey, 0);\r\n            const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\r\n            this.batchesByDocumentKey.forEachInRange([start, end], ref => {\r\n                uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\r\n            });\r\n        });\r\n        return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\r\n    }\r\n    getAllMutationBatchesAffectingQuery(transaction, query) {\r\n        // Use the query path as a prefix for testing if a document matches the\r\n        // query.\r\n        const prefix = query.path;\r\n        const immediateChildrenPathLength = prefix.length + 1;\r\n        // Construct a document reference for actually scanning the index. Unlike\r\n        // the prefix the document key in this reference must have an even number of\r\n        // segments. The empty segment can be used a suffix of the query path\r\n        // because it precedes all other segments in an ordered traversal.\r\n        let startPath = prefix;\r\n        if (!DocumentKey.isDocumentKey(startPath)) {\r\n            startPath = startPath.child('');\r\n        }\r\n        const start = new DocReference(new DocumentKey(startPath), 0);\r\n        // Find unique batchIDs referenced by all documents potentially matching the\r\n        // query.\r\n        let uniqueBatchIDs = new SortedSet(primitiveComparator);\r\n        this.batchesByDocumentKey.forEachWhile(ref => {\r\n            const rowKeyPath = ref.key.path;\r\n            if (!prefix.isPrefixOf(rowKeyPath)) {\r\n                return false;\r\n            }\r\n            else {\r\n                // Rows with document keys more than one segment longer than the query\r\n                // path can't be matches. For example, a query on 'rooms' can't match\r\n                // the document /rooms/abc/messages/xyx.\r\n                // TODO(mcg): we'll need a different scanner when we implement\r\n                // ancestor queries.\r\n                if (rowKeyPath.length === immediateChildrenPathLength) {\r\n                    uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\r\n                }\r\n                return true;\r\n            }\r\n        }, start);\r\n        return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\r\n    }\r\n    findMutationBatches(batchIDs) {\r\n        // Construct an array of matching batches, sorted by batchID to ensure that\r\n        // multiple mutations affecting the same document key are applied in order.\r\n        const result = [];\r\n        batchIDs.forEach(batchId => {\r\n            const batch = this.findMutationBatch(batchId);\r\n            if (batch !== null) {\r\n                result.push(batch);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    removeMutationBatch(transaction, batch) {\r\n        // Find the position of the first batch for removal.\r\n        const batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');\r\n        hardAssert(batchIndex === 0);\r\n        this.mutationQueue.shift();\r\n        let references = this.batchesByDocumentKey;\r\n        return PersistencePromise.forEach(batch.mutations, (mutation) => {\r\n            const ref = new DocReference(mutation.key, batch.batchId);\r\n            references = references.delete(ref);\r\n            return this.referenceDelegate.markPotentiallyOrphaned(transaction, mutation.key);\r\n        }).next(() => {\r\n            this.batchesByDocumentKey = references;\r\n        });\r\n    }\r\n    removeCachedMutationKeys(batchId) {\r\n        // No-op since the memory mutation queue does not maintain a separate cache.\r\n    }\r\n    containsKey(txn, key) {\r\n        const ref = new DocReference(key, 0);\r\n        const firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\r\n        return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\r\n    }\r\n    performConsistencyCheck(txn) {\r\n        if (this.mutationQueue.length === 0) ;\r\n        return PersistencePromise.resolve();\r\n    }\r\n    /**\r\n     * Finds the index of the given batchId in the mutation queue and asserts that\r\n     * the resulting index is within the bounds of the queue.\r\n     *\r\n     * @param batchId - The batchId to search for\r\n     * @param action - A description of what the caller is doing, phrased in passive\r\n     * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\r\n     */\r\n    indexOfExistingBatchId(batchId, action) {\r\n        const index = this.indexOfBatchId(batchId);\r\n        return index;\r\n    }\r\n    /**\r\n     * Finds the index of the given batchId in the mutation queue. This operation\r\n     * is O(1).\r\n     *\r\n     * @returns The computed index of the batch with the given batchId, based on\r\n     * the state of the queue. Note this index can be negative if the requested\r\n     * batchId has already been remvoed from the queue or past the end of the\r\n     * queue if the batchId is larger than the last added batch.\r\n     */\r\n    indexOfBatchId(batchId) {\r\n        if (this.mutationQueue.length === 0) {\r\n            // As an index this is past the end of the queue\r\n            return 0;\r\n        }\r\n        // Examine the front of the queue to figure out the difference between the\r\n        // batchId and indexes in the array. Note that since the queue is ordered\r\n        // by batchId, if the first batch has a larger batchId then the requested\r\n        // batchId doesn't exist in the queue.\r\n        const firstBatchId = this.mutationQueue[0].batchId;\r\n        return batchId - firstBatchId;\r\n    }\r\n    /**\r\n     * A version of lookupMutationBatch that doesn't return a promise, this makes\r\n     * other functions that uses this code easier to read and more efficent.\r\n     */\r\n    findMutationBatch(batchId) {\r\n        const index = this.indexOfBatchId(batchId);\r\n        if (index < 0 || index >= this.mutationQueue.length) {\r\n            return null;\r\n        }\r\n        const batch = this.mutationQueue[index];\r\n        return batch;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction documentEntryMap() {\r\n    return new SortedMap(DocumentKey.comparator);\r\n}\r\n/**\r\n * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke\r\n * `newMemoryRemoteDocumentCache()`.\r\n */\r\nclass MemoryRemoteDocumentCacheImpl {\r\n    /**\r\n     * @param sizer - Used to assess the size of a document. For eager GC, this is\r\n     * expected to just return 0 to avoid unnecessarily doing the work of\r\n     * calculating the size.\r\n     */\r\n    constructor(sizer) {\r\n        this.sizer = sizer;\r\n        /** Underlying cache of documents and their read times. */\r\n        this.docs = documentEntryMap();\r\n        /** Size of all cached documents. */\r\n        this.size = 0;\r\n    }\r\n    setIndexManager(indexManager) {\r\n        this.indexManager = indexManager;\r\n    }\r\n    /**\r\n     * Adds the supplied entry to the cache and updates the cache size as appropriate.\r\n     *\r\n     * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer\r\n     * returned by `newChangeBuffer()`.\r\n     */\r\n    addEntry(transaction, doc) {\r\n        const key = doc.key;\r\n        const entry = this.docs.get(key);\r\n        const previousSize = entry ? entry.size : 0;\r\n        const currentSize = this.sizer(doc);\r\n        this.docs = this.docs.insert(key, {\r\n            document: doc.mutableCopy(),\r\n            size: currentSize\r\n        });\r\n        this.size += currentSize - previousSize;\r\n        return this.indexManager.addToCollectionParentIndex(transaction, key.path.popLast());\r\n    }\r\n    /**\r\n     * Removes the specified entry from the cache and updates the cache size as appropriate.\r\n     *\r\n     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer\r\n     * returned by `newChangeBuffer()`.\r\n     */\r\n    removeEntry(documentKey) {\r\n        const entry = this.docs.get(documentKey);\r\n        if (entry) {\r\n            this.docs = this.docs.remove(documentKey);\r\n            this.size -= entry.size;\r\n        }\r\n    }\r\n    getEntry(transaction, documentKey) {\r\n        const entry = this.docs.get(documentKey);\r\n        return PersistencePromise.resolve(entry\r\n            ? entry.document.mutableCopy()\r\n            : MutableDocument.newInvalidDocument(documentKey));\r\n    }\r\n    getEntries(transaction, documentKeys) {\r\n        let results = mutableDocumentMap();\r\n        documentKeys.forEach(documentKey => {\r\n            const entry = this.docs.get(documentKey);\r\n            results = results.insert(documentKey, entry\r\n                ? entry.document.mutableCopy()\r\n                : MutableDocument.newInvalidDocument(documentKey));\r\n        });\r\n        return PersistencePromise.resolve(results);\r\n    }\r\n    getDocumentsMatchingQuery(transaction, query, offset, mutatedDocs) {\r\n        let results = mutableDocumentMap();\r\n        // Documents are ordered by key, so we can use a prefix scan to narrow down\r\n        // the documents we need to match the query against.\r\n        const collectionPath = query.path;\r\n        const prefix = new DocumentKey(collectionPath.child(''));\r\n        const iterator = this.docs.getIteratorFrom(prefix);\r\n        while (iterator.hasNext()) {\r\n            const { key, value: { document } } = iterator.getNext();\r\n            if (!collectionPath.isPrefixOf(key.path)) {\r\n                break;\r\n            }\r\n            if (key.path.length > collectionPath.length + 1) {\r\n                // Exclude entries from subcollections.\r\n                continue;\r\n            }\r\n            if (indexOffsetComparator(newIndexOffsetFromDocument(document), offset) <= 0) {\r\n                // The document sorts before the offset.\r\n                continue;\r\n            }\r\n            if (!mutatedDocs.has(document.key) && !queryMatches(query, document)) {\r\n                // The document cannot possibly match the query.\r\n                continue;\r\n            }\r\n            results = results.insert(document.key, document.mutableCopy());\r\n        }\r\n        return PersistencePromise.resolve(results);\r\n    }\r\n    getAllFromCollectionGroup(transaction, collectionGroup, offset, limti) {\r\n        // This method should only be called from the IndexBackfiller if persistence\r\n        // is enabled.\r\n        fail();\r\n    }\r\n    forEachDocumentKey(transaction, f) {\r\n        return PersistencePromise.forEach(this.docs, (key) => f(key));\r\n    }\r\n    newChangeBuffer(options) {\r\n        // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps\r\n        // a separate changelog and does not need special handling for removals.\r\n        return new MemoryRemoteDocumentChangeBuffer(this);\r\n    }\r\n    getSize(txn) {\r\n        return PersistencePromise.resolve(this.size);\r\n    }\r\n}\r\n/**\r\n * Creates a new memory-only RemoteDocumentCache.\r\n *\r\n * @param sizer - Used to assess the size of a document. For eager GC, this is\r\n * expected to just return 0 to avoid unnecessarily doing the work of\r\n * calculating the size.\r\n */\r\nfunction newMemoryRemoteDocumentCache(sizer) {\r\n    return new MemoryRemoteDocumentCacheImpl(sizer);\r\n}\r\n/**\r\n * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.\r\n */\r\nclass MemoryRemoteDocumentChangeBuffer extends RemoteDocumentChangeBuffer {\r\n    constructor(documentCache) {\r\n        super();\r\n        this.documentCache = documentCache;\r\n    }\r\n    applyChanges(transaction) {\r\n        const promises = [];\r\n        this.changes.forEach((key, doc) => {\r\n            if (doc.isValidDocument()) {\r\n                promises.push(this.documentCache.addEntry(transaction, doc));\r\n            }\r\n            else {\r\n                this.documentCache.removeEntry(key);\r\n            }\r\n        });\r\n        return PersistencePromise.waitFor(promises);\r\n    }\r\n    getFromCache(transaction, documentKey) {\r\n        return this.documentCache.getEntry(transaction, documentKey);\r\n    }\r\n    getAllFromCache(transaction, documentKeys) {\r\n        return this.documentCache.getEntries(transaction, documentKeys);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MemoryTargetCache {\r\n    constructor(persistence) {\r\n        this.persistence = persistence;\r\n        /**\r\n         * Maps a target to the data about that target\r\n         */\r\n        this.targets = new ObjectMap(t => canonifyTarget(t), targetEquals);\r\n        /** The last received snapshot version. */\r\n        this.lastRemoteSnapshotVersion = SnapshotVersion.min();\r\n        /** The highest numbered target ID encountered. */\r\n        this.highestTargetId = 0;\r\n        /** The highest sequence number encountered. */\r\n        this.highestSequenceNumber = 0;\r\n        /**\r\n         * A ordered bidirectional mapping between documents and the remote target\r\n         * IDs.\r\n         */\r\n        this.references = new ReferenceSet();\r\n        this.targetCount = 0;\r\n        this.targetIdGenerator = TargetIdGenerator.forTargetCache();\r\n    }\r\n    forEachTarget(txn, f) {\r\n        this.targets.forEach((_, targetData) => f(targetData));\r\n        return PersistencePromise.resolve();\r\n    }\r\n    getLastRemoteSnapshotVersion(transaction) {\r\n        return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);\r\n    }\r\n    getHighestSequenceNumber(transaction) {\r\n        return PersistencePromise.resolve(this.highestSequenceNumber);\r\n    }\r\n    allocateTargetId(transaction) {\r\n        this.highestTargetId = this.targetIdGenerator.next();\r\n        return PersistencePromise.resolve(this.highestTargetId);\r\n    }\r\n    setTargetsMetadata(transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {\r\n        if (lastRemoteSnapshotVersion) {\r\n            this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\r\n        }\r\n        if (highestListenSequenceNumber > this.highestSequenceNumber) {\r\n            this.highestSequenceNumber = highestListenSequenceNumber;\r\n        }\r\n        return PersistencePromise.resolve();\r\n    }\r\n    saveTargetData(targetData) {\r\n        this.targets.set(targetData.target, targetData);\r\n        const targetId = targetData.targetId;\r\n        if (targetId > this.highestTargetId) {\r\n            this.targetIdGenerator = new TargetIdGenerator(targetId);\r\n            this.highestTargetId = targetId;\r\n        }\r\n        if (targetData.sequenceNumber > this.highestSequenceNumber) {\r\n            this.highestSequenceNumber = targetData.sequenceNumber;\r\n        }\r\n    }\r\n    addTargetData(transaction, targetData) {\r\n        this.saveTargetData(targetData);\r\n        this.targetCount += 1;\r\n        return PersistencePromise.resolve();\r\n    }\r\n    updateTargetData(transaction, targetData) {\r\n        this.saveTargetData(targetData);\r\n        return PersistencePromise.resolve();\r\n    }\r\n    removeTargetData(transaction, targetData) {\r\n        this.targets.delete(targetData.target);\r\n        this.references.removeReferencesForId(targetData.targetId);\r\n        this.targetCount -= 1;\r\n        return PersistencePromise.resolve();\r\n    }\r\n    removeTargets(transaction, upperBound, activeTargetIds) {\r\n        let count = 0;\r\n        const removals = [];\r\n        this.targets.forEach((key, targetData) => {\r\n            if (targetData.sequenceNumber <= upperBound &&\r\n                activeTargetIds.get(targetData.targetId) === null) {\r\n                this.targets.delete(key);\r\n                removals.push(this.removeMatchingKeysForTargetId(transaction, targetData.targetId));\r\n                count++;\r\n            }\r\n        });\r\n        return PersistencePromise.waitFor(removals).next(() => count);\r\n    }\r\n    getTargetCount(transaction) {\r\n        return PersistencePromise.resolve(this.targetCount);\r\n    }\r\n    getTargetData(transaction, target) {\r\n        const targetData = this.targets.get(target) || null;\r\n        return PersistencePromise.resolve(targetData);\r\n    }\r\n    addMatchingKeys(txn, keys, targetId) {\r\n        this.references.addReferences(keys, targetId);\r\n        return PersistencePromise.resolve();\r\n    }\r\n    removeMatchingKeys(txn, keys, targetId) {\r\n        this.references.removeReferences(keys, targetId);\r\n        const referenceDelegate = this.persistence.referenceDelegate;\r\n        const promises = [];\r\n        if (referenceDelegate) {\r\n            keys.forEach(key => {\r\n                promises.push(referenceDelegate.markPotentiallyOrphaned(txn, key));\r\n            });\r\n        }\r\n        return PersistencePromise.waitFor(promises);\r\n    }\r\n    removeMatchingKeysForTargetId(txn, targetId) {\r\n        this.references.removeReferencesForId(targetId);\r\n        return PersistencePromise.resolve();\r\n    }\r\n    getMatchingKeysForTargetId(txn, targetId) {\r\n        const matchingKeys = this.references.referencesForId(targetId);\r\n        return PersistencePromise.resolve(matchingKeys);\r\n    }\r\n    containsKey(txn, key) {\r\n        return PersistencePromise.resolve(this.references.containsKey(key));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$d = 'MemoryPersistence';\r\n/**\r\n * A memory-backed instance of Persistence. Data is stored only in RAM and\r\n * not persisted across sessions.\r\n */\r\nclass MemoryPersistence {\r\n    /**\r\n     * The constructor accepts a factory for creating a reference delegate. This\r\n     * allows both the delegate and this instance to have strong references to\r\n     * each other without having nullable fields that would then need to be\r\n     * checked or asserted on every access.\r\n     */\r\n    constructor(referenceDelegateFactory, serializer) {\r\n        this.mutationQueues = {};\r\n        this.overlays = {};\r\n        this.listenSequence = new ListenSequence(0);\r\n        this._started = false;\r\n        this._started = true;\r\n        this.referenceDelegate = referenceDelegateFactory(this);\r\n        this.targetCache = new MemoryTargetCache(this);\r\n        const sizer = (doc) => this.referenceDelegate.documentSize(doc);\r\n        this.indexManager = new MemoryIndexManager();\r\n        this.remoteDocumentCache = newMemoryRemoteDocumentCache(sizer);\r\n        this.serializer = new LocalSerializer(serializer);\r\n        this.bundleCache = new MemoryBundleCache(this.serializer);\r\n    }\r\n    start() {\r\n        return Promise.resolve();\r\n    }\r\n    shutdown() {\r\n        // No durable state to ensure is closed on shutdown.\r\n        this._started = false;\r\n        return Promise.resolve();\r\n    }\r\n    get started() {\r\n        return this._started;\r\n    }\r\n    setDatabaseDeletedListener() {\r\n        // No op.\r\n    }\r\n    setNetworkEnabled() {\r\n        // No op.\r\n    }\r\n    getIndexManager(user) {\r\n        // We do not currently support indices for memory persistence, so we can\r\n        // return the same shared instance of the memory index manager.\r\n        return this.indexManager;\r\n    }\r\n    getDocumentOverlayCache(user) {\r\n        let overlay = this.overlays[user.toKey()];\r\n        if (!overlay) {\r\n            overlay = new MemoryDocumentOverlayCache();\r\n            this.overlays[user.toKey()] = overlay;\r\n        }\r\n        return overlay;\r\n    }\r\n    getMutationQueue(user, indexManager) {\r\n        let queue = this.mutationQueues[user.toKey()];\r\n        if (!queue) {\r\n            queue = new MemoryMutationQueue(indexManager, this.referenceDelegate);\r\n            this.mutationQueues[user.toKey()] = queue;\r\n        }\r\n        return queue;\r\n    }\r\n    getTargetCache() {\r\n        return this.targetCache;\r\n    }\r\n    getRemoteDocumentCache() {\r\n        return this.remoteDocumentCache;\r\n    }\r\n    getBundleCache() {\r\n        return this.bundleCache;\r\n    }\r\n    runTransaction(action, mode, transactionOperation) {\r\n        logDebug(LOG_TAG$d, 'Starting transaction:', action);\r\n        const txn = new MemoryTransaction(this.listenSequence.next());\r\n        this.referenceDelegate.onTransactionStarted();\r\n        return transactionOperation(txn)\r\n            .next(result => {\r\n            return this.referenceDelegate\r\n                .onTransactionCommitted(txn)\r\n                .next(() => result);\r\n        })\r\n            .toPromise()\r\n            .then(result => {\r\n            txn.raiseOnCommittedEvent();\r\n            return result;\r\n        });\r\n    }\r\n    mutationQueuesContainKey(transaction, key) {\r\n        return PersistencePromise.or(Object.values(this.mutationQueues).map(queue => () => queue.containsKey(transaction, key)));\r\n    }\r\n}\r\n/**\r\n * Memory persistence is not actually transactional, but future implementations\r\n * may have transaction-scoped state.\r\n */\r\nclass MemoryTransaction extends PersistenceTransaction {\r\n    constructor(currentSequenceNumber) {\r\n        super();\r\n        this.currentSequenceNumber = currentSequenceNumber;\r\n    }\r\n}\r\nclass MemoryEagerDelegate {\r\n    constructor(persistence) {\r\n        this.persistence = persistence;\r\n        /** Tracks all documents that are active in Query views. */\r\n        this.localViewReferences = new ReferenceSet();\r\n        /** The list of documents that are potentially GCed after each transaction. */\r\n        this._orphanedDocuments = null;\r\n    }\r\n    static factory(persistence) {\r\n        return new MemoryEagerDelegate(persistence);\r\n    }\r\n    get orphanedDocuments() {\r\n        if (!this._orphanedDocuments) {\r\n            throw fail();\r\n        }\r\n        else {\r\n            return this._orphanedDocuments;\r\n        }\r\n    }\r\n    addReference(txn, targetId, key) {\r\n        this.localViewReferences.addReference(key, targetId);\r\n        this.orphanedDocuments.delete(key.toString());\r\n        return PersistencePromise.resolve();\r\n    }\r\n    removeReference(txn, targetId, key) {\r\n        this.localViewReferences.removeReference(key, targetId);\r\n        this.orphanedDocuments.add(key.toString());\r\n        return PersistencePromise.resolve();\r\n    }\r\n    markPotentiallyOrphaned(txn, key) {\r\n        this.orphanedDocuments.add(key.toString());\r\n        return PersistencePromise.resolve();\r\n    }\r\n    removeTarget(txn, targetData) {\r\n        const orphaned = this.localViewReferences.removeReferencesForId(targetData.targetId);\r\n        orphaned.forEach(key => this.orphanedDocuments.add(key.toString()));\r\n        const cache = this.persistence.getTargetCache();\r\n        return cache\r\n            .getMatchingKeysForTargetId(txn, targetData.targetId)\r\n            .next(keys => {\r\n            keys.forEach(key => this.orphanedDocuments.add(key.toString()));\r\n        })\r\n            .next(() => cache.removeTargetData(txn, targetData));\r\n    }\r\n    onTransactionStarted() {\r\n        this._orphanedDocuments = new Set();\r\n    }\r\n    onTransactionCommitted(txn) {\r\n        // Remove newly orphaned documents.\r\n        const cache = this.persistence.getRemoteDocumentCache();\r\n        const changeBuffer = cache.newChangeBuffer();\r\n        return PersistencePromise.forEach(this.orphanedDocuments, (path) => {\r\n            const key = DocumentKey.fromPath(path);\r\n            return this.isReferenced(txn, key).next(isReferenced => {\r\n                if (!isReferenced) {\r\n                    changeBuffer.removeEntry(key, SnapshotVersion.min());\r\n                }\r\n            });\r\n        }).next(() => {\r\n            this._orphanedDocuments = null;\r\n            return changeBuffer.apply(txn);\r\n        });\r\n    }\r\n    updateLimboDocument(txn, key) {\r\n        return this.isReferenced(txn, key).next(isReferenced => {\r\n            if (isReferenced) {\r\n                this.orphanedDocuments.delete(key.toString());\r\n            }\r\n            else {\r\n                this.orphanedDocuments.add(key.toString());\r\n            }\r\n        });\r\n    }\r\n    documentSize(doc) {\r\n        // For eager GC, we don't care about the document size, there are no size thresholds.\r\n        return 0;\r\n    }\r\n    isReferenced(txn, key) {\r\n        return PersistencePromise.or([\r\n            () => PersistencePromise.resolve(this.localViewReferences.containsKey(key)),\r\n            () => this.persistence.getTargetCache().containsKey(txn, key),\r\n            () => this.persistence.mutationQueuesContainKey(txn, key)\r\n        ]);\r\n    }\r\n}\r\nclass MemoryLruDelegate {\r\n    constructor(persistence, lruParams) {\r\n        this.persistence = persistence;\r\n        this.orphanedSequenceNumbers = new ObjectMap(k => encodeResourcePath(k.path), (l, r) => l.isEqual(r));\r\n        this.garbageCollector = newLruGarbageCollector(this, lruParams);\r\n    }\r\n    static factory(persistence, lruParams) {\r\n        return new MemoryLruDelegate(persistence, lruParams);\r\n    }\r\n    // No-ops, present so memory persistence doesn't have to care which delegate\r\n    // it has.\r\n    onTransactionStarted() { }\r\n    onTransactionCommitted(txn) {\r\n        return PersistencePromise.resolve();\r\n    }\r\n    forEachTarget(txn, f) {\r\n        return this.persistence.getTargetCache().forEachTarget(txn, f);\r\n    }\r\n    getSequenceNumberCount(txn) {\r\n        const docCountPromise = this.orphanedDocumentCount(txn);\r\n        const targetCountPromise = this.persistence\r\n            .getTargetCache()\r\n            .getTargetCount(txn);\r\n        return targetCountPromise.next(targetCount => docCountPromise.next(docCount => targetCount + docCount));\r\n    }\r\n    orphanedDocumentCount(txn) {\r\n        let orphanedCount = 0;\r\n        return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\r\n            orphanedCount++;\r\n        }).next(() => orphanedCount);\r\n    }\r\n    forEachOrphanedDocumentSequenceNumber(txn, f) {\r\n        return PersistencePromise.forEach(this.orphanedSequenceNumbers, (key, sequenceNumber) => {\r\n            // Pass in the exact sequence number as the upper bound so we know it won't be pinned by\r\n            // being too recent.\r\n            return this.isPinned(txn, key, sequenceNumber).next(isPinned => {\r\n                if (!isPinned) {\r\n                    return f(sequenceNumber);\r\n                }\r\n                else {\r\n                    return PersistencePromise.resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    removeTargets(txn, upperBound, activeTargetIds) {\r\n        return this.persistence\r\n            .getTargetCache()\r\n            .removeTargets(txn, upperBound, activeTargetIds);\r\n    }\r\n    removeOrphanedDocuments(txn, upperBound) {\r\n        let count = 0;\r\n        const cache = this.persistence.getRemoteDocumentCache();\r\n        const changeBuffer = cache.newChangeBuffer();\r\n        const p = cache.forEachDocumentKey(txn, key => {\r\n            return this.isPinned(txn, key, upperBound).next(isPinned => {\r\n                if (!isPinned) {\r\n                    count++;\r\n                    changeBuffer.removeEntry(key, SnapshotVersion.min());\r\n                }\r\n            });\r\n        });\r\n        return p.next(() => changeBuffer.apply(txn)).next(() => count);\r\n    }\r\n    markPotentiallyOrphaned(txn, key) {\r\n        this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\r\n        return PersistencePromise.resolve();\r\n    }\r\n    removeTarget(txn, targetData) {\r\n        const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\r\n        return this.persistence.getTargetCache().updateTargetData(txn, updated);\r\n    }\r\n    addReference(txn, targetId, key) {\r\n        this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\r\n        return PersistencePromise.resolve();\r\n    }\r\n    removeReference(txn, targetId, key) {\r\n        this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\r\n        return PersistencePromise.resolve();\r\n    }\r\n    updateLimboDocument(txn, key) {\r\n        this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\r\n        return PersistencePromise.resolve();\r\n    }\r\n    documentSize(document) {\r\n        let documentSize = document.key.toString().length;\r\n        if (document.isFoundDocument()) {\r\n            documentSize += estimateByteSize(document.data.value);\r\n        }\r\n        return documentSize;\r\n    }\r\n    isPinned(txn, key, upperBound) {\r\n        return PersistencePromise.or([\r\n            () => this.persistence.mutationQueuesContainKey(txn, key),\r\n            () => this.persistence.getTargetCache().containsKey(txn, key),\r\n            () => {\r\n                const orphanedAt = this.orphanedSequenceNumbers.get(key);\r\n                return PersistencePromise.resolve(orphanedAt !== undefined && orphanedAt > upperBound);\r\n            }\r\n        ]);\r\n    }\r\n    getCacheSize(txn) {\r\n        return this.persistence.getRemoteDocumentCache().getSize(txn);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Performs database creation and schema upgrades. */\r\nclass SchemaConverter {\r\n    constructor(serializer) {\r\n        this.serializer = serializer;\r\n    }\r\n    /**\r\n     * Performs database creation and schema upgrades.\r\n     *\r\n     * Note that in production, this method is only ever used to upgrade the schema\r\n     * to SCHEMA_VERSION. Different values of toVersion are only used for testing\r\n     * and local feature development.\r\n     */\r\n    createOrUpgrade(db, txn, fromVersion, toVersion) {\r\n        const simpleDbTransaction = new SimpleDbTransaction('createOrUpgrade', txn);\r\n        if (fromVersion < 1 && toVersion >= 1) {\r\n            createPrimaryClientStore(db);\r\n            createMutationQueue(db);\r\n            createQueryCache(db);\r\n            createLegacyRemoteDocumentCache(db);\r\n        }\r\n        // Migration 2 to populate the targetGlobal object no longer needed since\r\n        // migration 3 unconditionally clears it.\r\n        let p = PersistencePromise.resolve();\r\n        if (fromVersion < 3 && toVersion >= 3) {\r\n            // Brand new clients don't need to drop and recreate--only clients that\r\n            // potentially have corrupt data.\r\n            if (fromVersion !== 0) {\r\n                dropQueryCache(db);\r\n                createQueryCache(db);\r\n            }\r\n            p = p.next(() => writeEmptyTargetGlobalEntry(simpleDbTransaction));\r\n        }\r\n        if (fromVersion < 4 && toVersion >= 4) {\r\n            if (fromVersion !== 0) {\r\n                // Schema version 3 uses auto-generated keys to generate globally unique\r\n                // mutation batch IDs (this was previously ensured internally by the\r\n                // client). To migrate to the new schema, we have to read all mutations\r\n                // and write them back out. We preserve the existing batch IDs to guarantee\r\n                // consistency with other object stores. Any further mutation batch IDs will\r\n                // be auto-generated.\r\n                p = p.next(() => upgradeMutationBatchSchemaAndMigrateData(db, simpleDbTransaction));\r\n            }\r\n            p = p.next(() => {\r\n                createClientMetadataStore(db);\r\n            });\r\n        }\r\n        if (fromVersion < 5 && toVersion >= 5) {\r\n            p = p.next(() => this.removeAcknowledgedMutations(simpleDbTransaction));\r\n        }\r\n        if (fromVersion < 6 && toVersion >= 6) {\r\n            p = p.next(() => {\r\n                createDocumentGlobalStore(db);\r\n                return this.addDocumentGlobal(simpleDbTransaction);\r\n            });\r\n        }\r\n        if (fromVersion < 7 && toVersion >= 7) {\r\n            p = p.next(() => this.ensureSequenceNumbers(simpleDbTransaction));\r\n        }\r\n        if (fromVersion < 8 && toVersion >= 8) {\r\n            p = p.next(() => this.createCollectionParentIndex(db, simpleDbTransaction));\r\n        }\r\n        if (fromVersion < 9 && toVersion >= 9) {\r\n            p = p.next(() => {\r\n                // Multi-Tab used to manage its own changelog, but this has been moved\r\n                // to the DbRemoteDocument object store itself. Since the previous change\r\n                // log only contained transient data, we can drop its object store.\r\n                dropRemoteDocumentChangesStore(db);\r\n                // Note: Schema version 9 used to create a read time index for the\r\n                // RemoteDocumentCache. This is now done with schema version 13.\r\n            });\r\n        }\r\n        if (fromVersion < 10 && toVersion >= 10) {\r\n            p = p.next(() => this.rewriteCanonicalIds(simpleDbTransaction));\r\n        }\r\n        if (fromVersion < 11 && toVersion >= 11) {\r\n            p = p.next(() => {\r\n                createBundlesStore(db);\r\n                createNamedQueriesStore(db);\r\n            });\r\n        }\r\n        if (fromVersion < 12 && toVersion >= 12) {\r\n            p = p.next(() => {\r\n                createDocumentOverlayStore(db);\r\n            });\r\n        }\r\n        if (fromVersion < 13 && toVersion >= 13) {\r\n            p = p\r\n                .next(() => createRemoteDocumentCache(db))\r\n                .next(() => this.rewriteRemoteDocumentCache(db, simpleDbTransaction))\r\n                .next(() => db.deleteObjectStore(DbRemoteDocumentStore$1));\r\n        }\r\n        if (fromVersion < 14 && toVersion >= 14) {\r\n            p = p.next(() => this.runOverlayMigration(db, simpleDbTransaction));\r\n        }\r\n        if (fromVersion < 15 && toVersion >= 15) {\r\n            p = p.next(() => createFieldIndex(db));\r\n        }\r\n        return p;\r\n    }\r\n    addDocumentGlobal(txn) {\r\n        let byteSize = 0;\r\n        return txn\r\n            .store(DbRemoteDocumentStore$1)\r\n            .iterate((_, doc) => {\r\n            byteSize += dbDocumentSize(doc);\r\n        })\r\n            .next(() => {\r\n            const metadata = { byteSize };\r\n            return txn\r\n                .store(DbRemoteDocumentGlobalStore)\r\n                .put(DbRemoteDocumentGlobalKey, metadata);\r\n        });\r\n    }\r\n    removeAcknowledgedMutations(txn) {\r\n        const queuesStore = txn.store(DbMutationQueueStore);\r\n        const mutationsStore = txn.store(DbMutationBatchStore);\r\n        return queuesStore.loadAll().next(queues => {\r\n            return PersistencePromise.forEach(queues, (queue) => {\r\n                const range = IDBKeyRange.bound([queue.userId, BATCHID_UNKNOWN], [queue.userId, queue.lastAcknowledgedBatchId]);\r\n                return mutationsStore\r\n                    .loadAll(DbMutationBatchUserMutationsIndex, range)\r\n                    .next(dbBatches => {\r\n                    return PersistencePromise.forEach(dbBatches, (dbBatch) => {\r\n                        hardAssert(dbBatch.userId === queue.userId);\r\n                        const batch = fromDbMutationBatch(this.serializer, dbBatch);\r\n                        return removeMutationBatch(txn, queue.userId, batch).next(() => { });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Ensures that every document in the remote document cache has a corresponding sentinel row\r\n     * with a sequence number. Missing rows are given the most recently used sequence number.\r\n     */\r\n    ensureSequenceNumbers(txn) {\r\n        const documentTargetStore = txn.store(DbTargetDocumentStore);\r\n        const documentsStore = txn.store(DbRemoteDocumentStore$1);\r\n        const globalTargetStore = txn.store(DbTargetGlobalStore);\r\n        return globalTargetStore.get(DbTargetGlobalKey).next(metadata => {\r\n            const writeSentinelKey = (path) => {\r\n                return documentTargetStore.put({\r\n                    targetId: 0,\r\n                    path: encodeResourcePath(path),\r\n                    sequenceNumber: metadata.highestListenSequenceNumber\r\n                });\r\n            };\r\n            const promises = [];\r\n            return documentsStore\r\n                .iterate((key, doc) => {\r\n                const path = new ResourcePath(key);\r\n                const docSentinelKey = sentinelKey(path);\r\n                promises.push(documentTargetStore.get(docSentinelKey).next(maybeSentinel => {\r\n                    if (!maybeSentinel) {\r\n                        return writeSentinelKey(path);\r\n                    }\r\n                    else {\r\n                        return PersistencePromise.resolve();\r\n                    }\r\n                }));\r\n            })\r\n                .next(() => PersistencePromise.waitFor(promises));\r\n        });\r\n    }\r\n    createCollectionParentIndex(db, txn) {\r\n        // Create the index.\r\n        db.createObjectStore(DbCollectionParentStore, {\r\n            keyPath: DbCollectionParentKeyPath\r\n        });\r\n        const collectionParentsStore = txn.store(DbCollectionParentStore);\r\n        // Helper to add an index entry iff we haven't already written it.\r\n        const cache = new MemoryCollectionParentIndex();\r\n        const addEntry = (collectionPath) => {\r\n            if (cache.add(collectionPath)) {\r\n                const collectionId = collectionPath.lastSegment();\r\n                const parentPath = collectionPath.popLast();\r\n                return collectionParentsStore.put({\r\n                    collectionId,\r\n                    parent: encodeResourcePath(parentPath)\r\n                });\r\n            }\r\n        };\r\n        // Index existing remote documents.\r\n        return txn\r\n            .store(DbRemoteDocumentStore$1)\r\n            .iterate({ keysOnly: true }, (pathSegments, _) => {\r\n            const path = new ResourcePath(pathSegments);\r\n            return addEntry(path.popLast());\r\n        })\r\n            .next(() => {\r\n            // Index existing mutations.\r\n            return txn\r\n                .store(DbDocumentMutationStore)\r\n                .iterate({ keysOnly: true }, ([userID, encodedPath, batchId], _) => {\r\n                const path = decodeResourcePath(encodedPath);\r\n                return addEntry(path.popLast());\r\n            });\r\n        });\r\n    }\r\n    rewriteCanonicalIds(txn) {\r\n        const targetStore = txn.store(DbTargetStore);\r\n        return targetStore.iterate((key, originalDbTarget) => {\r\n            const originalTargetData = fromDbTarget(originalDbTarget);\r\n            const updatedDbTarget = toDbTarget(this.serializer, originalTargetData);\r\n            return targetStore.put(updatedDbTarget);\r\n        });\r\n    }\r\n    rewriteRemoteDocumentCache(db, transaction) {\r\n        const legacyRemoteDocumentStore = transaction.store(DbRemoteDocumentStore$1);\r\n        const writes = [];\r\n        return legacyRemoteDocumentStore\r\n            .iterate((_, legacyDocument) => {\r\n            const remoteDocumentStore = transaction.store(DbRemoteDocumentStore);\r\n            const path = extractKey(legacyDocument).path.toArray();\r\n            const dbRemoteDocument = {\r\n                prefixPath: path.slice(0, path.length - 2),\r\n                collectionGroup: path[path.length - 2],\r\n                documentId: path[path.length - 1],\r\n                readTime: legacyDocument.readTime || [0, 0],\r\n                unknownDocument: legacyDocument.unknownDocument,\r\n                noDocument: legacyDocument.noDocument,\r\n                document: legacyDocument.document,\r\n                hasCommittedMutations: !!legacyDocument.hasCommittedMutations\r\n            };\r\n            writes.push(remoteDocumentStore.put(dbRemoteDocument));\r\n        })\r\n            .next(() => PersistencePromise.waitFor(writes));\r\n    }\r\n    runOverlayMigration(db, transaction) {\r\n        const mutationsStore = transaction.store(DbMutationBatchStore);\r\n        const remoteDocumentCache = newIndexedDbRemoteDocumentCache(this.serializer);\r\n        const memoryPersistence = new MemoryPersistence(MemoryEagerDelegate.factory, this.serializer.remoteSerializer);\r\n        return mutationsStore.loadAll().next(dbBatches => {\r\n            const userToDocumentSet = new Map();\r\n            dbBatches.forEach(dbBatch => {\r\n                var _a;\r\n                let documentSet = (_a = userToDocumentSet.get(dbBatch.userId)) !== null && _a !== void 0 ? _a : documentKeySet();\r\n                const batch = fromDbMutationBatch(this.serializer, dbBatch);\r\n                batch.keys().forEach(key => (documentSet = documentSet.add(key)));\r\n                userToDocumentSet.set(dbBatch.userId, documentSet);\r\n            });\r\n            return PersistencePromise.forEach(userToDocumentSet, (allDocumentKeysForUser, userId) => {\r\n                const user = new User(userId);\r\n                const documentOverlayCache = IndexedDbDocumentOverlayCache.forUser(this.serializer, user);\r\n                // NOTE: The index manager and the reference delegate are\r\n                // irrelevant for the purpose of recalculating and saving\r\n                // overlays. We can therefore simply use the memory\r\n                // implementation.\r\n                const indexManager = memoryPersistence.getIndexManager(user);\r\n                const mutationQueue = IndexedDbMutationQueue.forUser(user, this.serializer, indexManager, memoryPersistence.referenceDelegate);\r\n                const localDocumentsView = new LocalDocumentsView(remoteDocumentCache, mutationQueue, documentOverlayCache, indexManager);\r\n                return localDocumentsView\r\n                    .recalculateAndSaveOverlaysForDocumentKeys(new IndexedDbTransaction(transaction, ListenSequence.INVALID), allDocumentKeysForUser)\r\n                    .next();\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction sentinelKey(path) {\r\n    return [0, encodeResourcePath(path)];\r\n}\r\nfunction createPrimaryClientStore(db) {\r\n    db.createObjectStore(DbPrimaryClientStore);\r\n}\r\nfunction createMutationQueue(db) {\r\n    db.createObjectStore(DbMutationQueueStore, {\r\n        keyPath: DbMutationQueueKeyPath\r\n    });\r\n    const mutationBatchesStore = db.createObjectStore(DbMutationBatchStore, {\r\n        keyPath: DbMutationBatchKeyPath,\r\n        autoIncrement: true\r\n    });\r\n    mutationBatchesStore.createIndex(DbMutationBatchUserMutationsIndex, DbMutationBatchUserMutationsKeyPath, { unique: true });\r\n    db.createObjectStore(DbDocumentMutationStore);\r\n}\r\n/**\r\n * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads\r\n * and rewrites all data.\r\n */\r\nfunction upgradeMutationBatchSchemaAndMigrateData(db, txn) {\r\n    const v1MutationsStore = txn.store(DbMutationBatchStore);\r\n    return v1MutationsStore.loadAll().next(existingMutations => {\r\n        db.deleteObjectStore(DbMutationBatchStore);\r\n        const mutationsStore = db.createObjectStore(DbMutationBatchStore, {\r\n            keyPath: DbMutationBatchKeyPath,\r\n            autoIncrement: true\r\n        });\r\n        mutationsStore.createIndex(DbMutationBatchUserMutationsIndex, DbMutationBatchUserMutationsKeyPath, { unique: true });\r\n        const v3MutationsStore = txn.store(DbMutationBatchStore);\r\n        const writeAll = existingMutations.map(mutation => v3MutationsStore.put(mutation));\r\n        return PersistencePromise.waitFor(writeAll);\r\n    });\r\n}\r\nfunction createLegacyRemoteDocumentCache(db) {\r\n    db.createObjectStore(DbRemoteDocumentStore$1);\r\n}\r\nfunction createRemoteDocumentCache(db) {\r\n    const remoteDocumentStore = db.createObjectStore(DbRemoteDocumentStore, {\r\n        keyPath: DbRemoteDocumentKeyPath\r\n    });\r\n    remoteDocumentStore.createIndex(DbRemoteDocumentDocumentKeyIndex, DbRemoteDocumentDocumentKeyIndexPath);\r\n    remoteDocumentStore.createIndex(DbRemoteDocumentCollectionGroupIndex, DbRemoteDocumentCollectionGroupIndexPath);\r\n}\r\nfunction createDocumentGlobalStore(db) {\r\n    db.createObjectStore(DbRemoteDocumentGlobalStore);\r\n}\r\nfunction createQueryCache(db) {\r\n    const targetDocumentsStore = db.createObjectStore(DbTargetDocumentStore, {\r\n        keyPath: DbTargetDocumentKeyPath\r\n    });\r\n    targetDocumentsStore.createIndex(DbTargetDocumentDocumentTargetsIndex, DbTargetDocumentDocumentTargetsKeyPath, { unique: true });\r\n    const targetStore = db.createObjectStore(DbTargetStore, {\r\n        keyPath: DbTargetKeyPath\r\n    });\r\n    // NOTE: This is unique only because the TargetId is the suffix.\r\n    targetStore.createIndex(DbTargetQueryTargetsIndexName, DbTargetQueryTargetsKeyPath, { unique: true });\r\n    db.createObjectStore(DbTargetGlobalStore);\r\n}\r\nfunction dropQueryCache(db) {\r\n    db.deleteObjectStore(DbTargetDocumentStore);\r\n    db.deleteObjectStore(DbTargetStore);\r\n    db.deleteObjectStore(DbTargetGlobalStore);\r\n}\r\nfunction dropRemoteDocumentChangesStore(db) {\r\n    if (db.objectStoreNames.contains('remoteDocumentChanges')) {\r\n        db.deleteObjectStore('remoteDocumentChanges');\r\n    }\r\n}\r\n/**\r\n * Creates the target global singleton row.\r\n *\r\n * @param txn - The version upgrade transaction for indexeddb\r\n */\r\nfunction writeEmptyTargetGlobalEntry(txn) {\r\n    const globalStore = txn.store(DbTargetGlobalStore);\r\n    const metadata = {\r\n        highestTargetId: 0,\r\n        highestListenSequenceNumber: 0,\r\n        lastRemoteSnapshotVersion: SnapshotVersion.min().toTimestamp(),\r\n        targetCount: 0\r\n    };\r\n    return globalStore.put(DbTargetGlobalKey, metadata);\r\n}\r\nfunction createClientMetadataStore(db) {\r\n    db.createObjectStore(DbClientMetadataStore, {\r\n        keyPath: DbClientMetadataKeyPath\r\n    });\r\n}\r\nfunction createBundlesStore(db) {\r\n    db.createObjectStore(DbBundleStore, {\r\n        keyPath: DbBundleKeyPath\r\n    });\r\n}\r\nfunction createNamedQueriesStore(db) {\r\n    db.createObjectStore(DbNamedQueryStore, {\r\n        keyPath: DbNamedQueryKeyPath\r\n    });\r\n}\r\nfunction createFieldIndex(db) {\r\n    const indexConfigurationStore = db.createObjectStore(DbIndexConfigurationStore, {\r\n        keyPath: DbIndexConfigurationKeyPath,\r\n        autoIncrement: true\r\n    });\r\n    indexConfigurationStore.createIndex(DbIndexConfigurationCollectionGroupIndex, DbIndexConfigurationCollectionGroupIndexPath, { unique: false });\r\n    const indexStateStore = db.createObjectStore(DbIndexStateStore, {\r\n        keyPath: DbIndexStateKeyPath\r\n    });\r\n    indexStateStore.createIndex(DbIndexStateSequenceNumberIndex, DbIndexStateSequenceNumberIndexPath, { unique: false });\r\n    const indexEntryStore = db.createObjectStore(DbIndexEntryStore, {\r\n        keyPath: DbIndexEntryKeyPath\r\n    });\r\n    indexEntryStore.createIndex(DbIndexEntryDocumentKeyIndex, DbIndexEntryDocumentKeyIndexPath, { unique: false });\r\n}\r\nfunction createDocumentOverlayStore(db) {\r\n    const documentOverlayStore = db.createObjectStore(DbDocumentOverlayStore, {\r\n        keyPath: DbDocumentOverlayKeyPath\r\n    });\r\n    documentOverlayStore.createIndex(DbDocumentOverlayCollectionPathOverlayIndex, DbDocumentOverlayCollectionPathOverlayIndexPath, { unique: false });\r\n    documentOverlayStore.createIndex(DbDocumentOverlayCollectionGroupOverlayIndex, DbDocumentOverlayCollectionGroupOverlayIndexPath, { unique: false });\r\n}\r\nfunction extractKey(remoteDoc) {\r\n    if (remoteDoc.document) {\r\n        return new DocumentKey(ResourcePath.fromString(remoteDoc.document.name).popFirst(5));\r\n    }\r\n    else if (remoteDoc.noDocument) {\r\n        return DocumentKey.fromSegments(remoteDoc.noDocument.path);\r\n    }\r\n    else if (remoteDoc.unknownDocument) {\r\n        return DocumentKey.fromSegments(remoteDoc.unknownDocument.path);\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$c = 'IndexedDbPersistence';\r\n/**\r\n * Oldest acceptable age in milliseconds for client metadata before the client\r\n * is considered inactive and its associated data is garbage collected.\r\n */\r\nconst MAX_CLIENT_AGE_MS = 30 * 60 * 1000; // 30 minutes\r\n/**\r\n * Oldest acceptable metadata age for clients that may participate in the\r\n * primary lease election. Clients that have not updated their client metadata\r\n * within 5 seconds are not eligible to receive a primary lease.\r\n */\r\nconst MAX_PRIMARY_ELIGIBLE_AGE_MS = 5000;\r\n/**\r\n * The interval at which clients will update their metadata, including\r\n * refreshing their primary lease if held or potentially trying to acquire it if\r\n * not held.\r\n *\r\n * Primary clients may opportunistically refresh their metadata earlier\r\n * if they're already performing an IndexedDB operation.\r\n */\r\nconst CLIENT_METADATA_REFRESH_INTERVAL_MS = 4000;\r\n/** User-facing error when the primary lease is required but not available. */\r\nconst PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG = 'Failed to obtain exclusive access to the persistence layer. To allow ' +\r\n    'shared access, multi-tab synchronization has to be enabled in all tabs. ' +\r\n    'If you are using `experimentalForceOwningTab:true`, make sure that only ' +\r\n    'one tab has persistence enabled at any given time.';\r\nconst UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing IndexedDB or is known to have ' +\r\n    'an incomplete implementation. Offline persistence has been disabled.';\r\n// The format of the LocalStorage key that stores zombied client is:\r\n//     firestore_zombie_<persistence_prefix>_<instance_key>\r\nconst ZOMBIED_CLIENTS_KEY_PREFIX = 'firestore_zombie';\r\n/**\r\n * The name of the main (and currently only) IndexedDB database. This name is\r\n * appended to the prefix provided to the IndexedDbPersistence constructor.\r\n */\r\nconst MAIN_DATABASE = 'main';\r\n/**\r\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\r\n * across sessions.\r\n *\r\n * On Web only, the Firestore SDKs support shared access to its persistence\r\n * layer. This allows multiple browser tabs to read and write to IndexedDb and\r\n * to synchronize state even without network connectivity. Shared access is\r\n * currently optional and not enabled unless all clients invoke\r\n * `enablePersistence()` with `{synchronizeTabs:true}`.\r\n *\r\n * In multi-tab mode, if multiple clients are active at the same time, the SDK\r\n * will designate one client as the “primary client”. An effort is made to pick\r\n * a visible, network-connected and active client, and this client is\r\n * responsible for letting other clients know about its presence. The primary\r\n * client writes a unique client-generated identifier (the client ID) to\r\n * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to\r\n * update this entry, another client can acquire the lease and take over as\r\n * primary.\r\n *\r\n * Some persistence operations in the SDK are designated as primary-client only\r\n * operations. This includes the acknowledgment of mutations and all updates of\r\n * remote documents. The effects of these operations are written to persistence\r\n * and then broadcast to other tabs via LocalStorage (see\r\n * `WebStorageSharedClientState`), which then refresh their state from\r\n * persistence.\r\n *\r\n * Similarly, the primary client listens to notifications sent by secondary\r\n * clients to discover persistence changes written by secondary clients, such as\r\n * the addition of new mutations and query targets.\r\n *\r\n * If multi-tab is not enabled and another tab already obtained the primary\r\n * lease, IndexedDbPersistence enters a failed state and all subsequent\r\n * operations will automatically fail.\r\n *\r\n * Additionally, there is an optimization so that when a tab is closed, the\r\n * primary lease is released immediately (this is especially important to make\r\n * sure that a refreshed tab is able to immediately re-acquire the primary\r\n * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload\r\n * since it is an asynchronous API. So in addition to attempting to give up the\r\n * lease, the leaseholder writes its client ID to a \"zombiedClient\" entry in\r\n * LocalStorage which acts as an indicator that another tab should go ahead and\r\n * take the primary lease immediately regardless of the current lease timestamp.\r\n *\r\n * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no\r\n * longer optional.\r\n */\r\nclass IndexedDbPersistence {\r\n    constructor(\r\n    /**\r\n     * Whether to synchronize the in-memory state of multiple tabs and share\r\n     * access to local persistence.\r\n     */\r\n    allowTabSynchronization, persistenceKey, clientId, lruParams, queue, window, document, serializer, sequenceNumberSyncer, \r\n    /**\r\n     * If set to true, forcefully obtains database access. Existing tabs will\r\n     * no longer be able to access IndexedDB.\r\n     */\r\n    forceOwningTab, schemaVersion = SCHEMA_VERSION) {\r\n        this.allowTabSynchronization = allowTabSynchronization;\r\n        this.persistenceKey = persistenceKey;\r\n        this.clientId = clientId;\r\n        this.queue = queue;\r\n        this.window = window;\r\n        this.document = document;\r\n        this.sequenceNumberSyncer = sequenceNumberSyncer;\r\n        this.forceOwningTab = forceOwningTab;\r\n        this.schemaVersion = schemaVersion;\r\n        this.listenSequence = null;\r\n        this._started = false;\r\n        this.isPrimary = false;\r\n        this.networkEnabled = true;\r\n        /** Our window.unload handler, if registered. */\r\n        this.windowUnloadHandler = null;\r\n        this.inForeground = false;\r\n        /** Our 'visibilitychange' listener if registered. */\r\n        this.documentVisibilityHandler = null;\r\n        /** The client metadata refresh task. */\r\n        this.clientMetadataRefresher = null;\r\n        /** The last time we garbage collected the client metadata object store. */\r\n        this.lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;\r\n        /** A listener to notify on primary state changes. */\r\n        this.primaryStateListener = _ => Promise.resolve();\r\n        if (!IndexedDbPersistence.isAvailable()) {\r\n            throw new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\r\n        }\r\n        this.referenceDelegate = new IndexedDbLruDelegateImpl(this, lruParams);\r\n        this.dbName = persistenceKey + MAIN_DATABASE;\r\n        this.serializer = new LocalSerializer(serializer);\r\n        this.simpleDb = new SimpleDb(this.dbName, this.schemaVersion, new SchemaConverter(this.serializer));\r\n        this.targetCache = new IndexedDbTargetCache(this.referenceDelegate, this.serializer);\r\n        this.remoteDocumentCache = newIndexedDbRemoteDocumentCache(this.serializer);\r\n        this.bundleCache = new IndexedDbBundleCache();\r\n        if (this.window && this.window.localStorage) {\r\n            this.webStorage = this.window.localStorage;\r\n        }\r\n        else {\r\n            this.webStorage = null;\r\n            if (forceOwningTab === false) {\r\n                logError(LOG_TAG$c, 'LocalStorage is unavailable. As a result, persistence may not work ' +\r\n                    'reliably. In particular enablePersistence() could fail immediately ' +\r\n                    'after refreshing the page.');\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempt to start IndexedDb persistence.\r\n     *\r\n     * @returns Whether persistence was enabled.\r\n     */\r\n    start() {\r\n        // NOTE: This is expected to fail sometimes (in the case of another tab\r\n        // already having the persistence lock), so it's the first thing we should\r\n        // do.\r\n        return this.updateClientMetadataAndTryBecomePrimary()\r\n            .then(() => {\r\n            if (!this.isPrimary && !this.allowTabSynchronization) {\r\n                // Fail `start()` if `synchronizeTabs` is disabled and we cannot\r\n                // obtain the primary lease.\r\n                throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\r\n            }\r\n            this.attachVisibilityHandler();\r\n            this.attachWindowUnloadHook();\r\n            this.scheduleClientMetadataAndPrimaryLeaseRefreshes();\r\n            return this.runTransaction('getHighestListenSequenceNumber', 'readonly', txn => this.targetCache.getHighestSequenceNumber(txn));\r\n        })\r\n            .then(highestListenSequenceNumber => {\r\n            this.listenSequence = new ListenSequence(highestListenSequenceNumber, this.sequenceNumberSyncer);\r\n        })\r\n            .then(() => {\r\n            this._started = true;\r\n        })\r\n            .catch(reason => {\r\n            this.simpleDb && this.simpleDb.close();\r\n            return Promise.reject(reason);\r\n        });\r\n    }\r\n    /**\r\n     * Registers a listener that gets called when the primary state of the\r\n     * instance changes. Upon registering, this listener is invoked immediately\r\n     * with the current primary state.\r\n     *\r\n     * PORTING NOTE: This is only used for Web multi-tab.\r\n     */\r\n    setPrimaryStateListener(primaryStateListener) {\r\n        this.primaryStateListener = async (primaryState) => {\r\n            if (this.started) {\r\n                return primaryStateListener(primaryState);\r\n            }\r\n        };\r\n        return primaryStateListener(this.isPrimary);\r\n    }\r\n    /**\r\n     * Registers a listener that gets called when the database receives a\r\n     * version change event indicating that it has deleted.\r\n     *\r\n     * PORTING NOTE: This is only used for Web multi-tab.\r\n     */\r\n    setDatabaseDeletedListener(databaseDeletedListener) {\r\n        this.simpleDb.setVersionChangeListener(async (event) => {\r\n            // Check if an attempt is made to delete IndexedDB.\r\n            if (event.newVersion === null) {\r\n                await databaseDeletedListener();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Adjusts the current network state in the client's metadata, potentially\r\n     * affecting the primary lease.\r\n     *\r\n     * PORTING NOTE: This is only used for Web multi-tab.\r\n     */\r\n    setNetworkEnabled(networkEnabled) {\r\n        if (this.networkEnabled !== networkEnabled) {\r\n            this.networkEnabled = networkEnabled;\r\n            // Schedule a primary lease refresh for immediate execution. The eventual\r\n            // lease update will be propagated via `primaryStateListener`.\r\n            this.queue.enqueueAndForget(async () => {\r\n                if (this.started) {\r\n                    await this.updateClientMetadataAndTryBecomePrimary();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Updates the client metadata in IndexedDb and attempts to either obtain or\r\n     * extend the primary lease for the local client. Asynchronously notifies the\r\n     * primary state listener if the client either newly obtained or released its\r\n     * primary lease.\r\n     */\r\n    updateClientMetadataAndTryBecomePrimary() {\r\n        return this.runTransaction('updateClientMetadataAndTryBecomePrimary', 'readwrite', txn => {\r\n            const metadataStore = clientMetadataStore(txn);\r\n            return metadataStore\r\n                .put({\r\n                clientId: this.clientId,\r\n                updateTimeMs: Date.now(),\r\n                networkEnabled: this.networkEnabled,\r\n                inForeground: this.inForeground\r\n            })\r\n                .next(() => {\r\n                if (this.isPrimary) {\r\n                    return this.verifyPrimaryLease(txn).next(success => {\r\n                        if (!success) {\r\n                            this.isPrimary = false;\r\n                            this.queue.enqueueRetryable(() => this.primaryStateListener(false));\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n                .next(() => this.canActAsPrimary(txn))\r\n                .next(canActAsPrimary => {\r\n                if (this.isPrimary && !canActAsPrimary) {\r\n                    return this.releasePrimaryLeaseIfHeld(txn).next(() => false);\r\n                }\r\n                else if (canActAsPrimary) {\r\n                    return this.acquireOrExtendPrimaryLease(txn).next(() => true);\r\n                }\r\n                else {\r\n                    return /* canActAsPrimary= */ false;\r\n                }\r\n            });\r\n        })\r\n            .catch(e => {\r\n            if (isIndexedDbTransactionError(e)) {\r\n                logDebug(LOG_TAG$c, 'Failed to extend owner lease: ', e);\r\n                // Proceed with the existing state. Any subsequent access to\r\n                // IndexedDB will verify the lease.\r\n                return this.isPrimary;\r\n            }\r\n            if (!this.allowTabSynchronization) {\r\n                throw e;\r\n            }\r\n            logDebug(LOG_TAG$c, 'Releasing owner lease after error during lease refresh', e);\r\n            return /* isPrimary= */ false;\r\n        })\r\n            .then(isPrimary => {\r\n            if (this.isPrimary !== isPrimary) {\r\n                this.queue.enqueueRetryable(() => this.primaryStateListener(isPrimary));\r\n            }\r\n            this.isPrimary = isPrimary;\r\n        });\r\n    }\r\n    verifyPrimaryLease(txn) {\r\n        const store = primaryClientStore(txn);\r\n        return store.get(DbPrimaryClientKey).next(primaryClient => {\r\n            return PersistencePromise.resolve(this.isLocalClient(primaryClient));\r\n        });\r\n    }\r\n    removeClientMetadata(txn) {\r\n        const metadataStore = clientMetadataStore(txn);\r\n        return metadataStore.delete(this.clientId);\r\n    }\r\n    /**\r\n     * If the garbage collection threshold has passed, prunes the\r\n     * RemoteDocumentChanges and the ClientMetadata store based on the last update\r\n     * time of all clients.\r\n     */\r\n    async maybeGarbageCollectMultiClientState() {\r\n        if (this.isPrimary &&\r\n            !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS)) {\r\n            this.lastGarbageCollectionTime = Date.now();\r\n            const inactiveClients = await this.runTransaction('maybeGarbageCollectMultiClientState', 'readwrite-primary', txn => {\r\n                const metadataStore = getStore(txn, DbClientMetadataStore);\r\n                return metadataStore.loadAll().next(existingClients => {\r\n                    const active = this.filterActiveClients(existingClients, MAX_CLIENT_AGE_MS);\r\n                    const inactive = existingClients.filter(client => active.indexOf(client) === -1);\r\n                    // Delete metadata for clients that are no longer considered active.\r\n                    return PersistencePromise.forEach(inactive, (inactiveClient) => metadataStore.delete(inactiveClient.clientId)).next(() => inactive);\r\n                });\r\n            }).catch(() => {\r\n                // Ignore primary lease violations or any other type of error. The next\r\n                // primary will run `maybeGarbageCollectMultiClientState()` again.\r\n                // We don't use `ignoreIfPrimaryLeaseLoss()` since we don't want to depend\r\n                // on LocalStore.\r\n                return [];\r\n            });\r\n            // Delete potential leftover entries that may continue to mark the\r\n            // inactive clients as zombied in LocalStorage.\r\n            // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for\r\n            // the client atomically, but we can't. So we opt to delete the IndexedDb\r\n            // entries first to avoid potentially reviving a zombied client.\r\n            if (this.webStorage) {\r\n                for (const inactiveClient of inactiveClients) {\r\n                    this.webStorage.removeItem(this.zombiedClientLocalStorageKey(inactiveClient.clientId));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Schedules a recurring timer to update the client metadata and to either\r\n     * extend or acquire the primary lease if the client is eligible.\r\n     */\r\n    scheduleClientMetadataAndPrimaryLeaseRefreshes() {\r\n        this.clientMetadataRefresher = this.queue.enqueueAfterDelay(\"client_metadata_refresh\" /* TimerId.ClientMetadataRefresh */, CLIENT_METADATA_REFRESH_INTERVAL_MS, () => {\r\n            return this.updateClientMetadataAndTryBecomePrimary()\r\n                .then(() => this.maybeGarbageCollectMultiClientState())\r\n                .then(() => this.scheduleClientMetadataAndPrimaryLeaseRefreshes());\r\n        });\r\n    }\r\n    /** Checks whether `client` is the local client. */\r\n    isLocalClient(client) {\r\n        return client ? client.ownerId === this.clientId : false;\r\n    }\r\n    /**\r\n     * Evaluate the state of all active clients and determine whether the local\r\n     * client is or can act as the holder of the primary lease. Returns whether\r\n     * the client is eligible for the lease, but does not actually acquire it.\r\n     * May return 'false' even if there is no active leaseholder and another\r\n     * (foreground) client should become leaseholder instead.\r\n     */\r\n    canActAsPrimary(txn) {\r\n        if (this.forceOwningTab) {\r\n            return PersistencePromise.resolve(true);\r\n        }\r\n        const store = primaryClientStore(txn);\r\n        return store\r\n            .get(DbPrimaryClientKey)\r\n            .next(currentPrimary => {\r\n            const currentLeaseIsValid = currentPrimary !== null &&\r\n                this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) &&\r\n                !this.isClientZombied(currentPrimary.ownerId);\r\n            // A client is eligible for the primary lease if:\r\n            // - its network is enabled and the client's tab is in the foreground.\r\n            // - its network is enabled and no other client's tab is in the\r\n            //   foreground.\r\n            // - every clients network is disabled and the client's tab is in the\r\n            //   foreground.\r\n            // - every clients network is disabled and no other client's tab is in\r\n            //   the foreground.\r\n            // - the `forceOwningTab` setting was passed in.\r\n            if (currentLeaseIsValid) {\r\n                if (this.isLocalClient(currentPrimary) && this.networkEnabled) {\r\n                    return true;\r\n                }\r\n                if (!this.isLocalClient(currentPrimary)) {\r\n                    if (!currentPrimary.allowTabSynchronization) {\r\n                        // Fail the `canActAsPrimary` check if the current leaseholder has\r\n                        // not opted into multi-tab synchronization. If this happens at\r\n                        // client startup, we reject the Promise returned by\r\n                        // `enablePersistence()` and the user can continue to use Firestore\r\n                        // with in-memory persistence.\r\n                        // If this fails during a lease refresh, we will instead block the\r\n                        // AsyncQueue from executing further operations. Note that this is\r\n                        // acceptable since mixing & matching different `synchronizeTabs`\r\n                        // settings is not supported.\r\n                        //\r\n                        // TODO(b/114226234): Remove this check when `synchronizeTabs` can\r\n                        // no longer be turned off.\r\n                        throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n            if (this.networkEnabled && this.inForeground) {\r\n                return true;\r\n            }\r\n            return clientMetadataStore(txn)\r\n                .loadAll()\r\n                .next(existingClients => {\r\n                // Process all existing clients and determine whether at least one of\r\n                // them is better suited to obtain the primary lease.\r\n                const preferredCandidate = this.filterActiveClients(existingClients, MAX_PRIMARY_ELIGIBLE_AGE_MS).find(otherClient => {\r\n                    if (this.clientId !== otherClient.clientId) {\r\n                        const otherClientHasBetterNetworkState = !this.networkEnabled && otherClient.networkEnabled;\r\n                        const otherClientHasBetterVisibility = !this.inForeground && otherClient.inForeground;\r\n                        const otherClientHasSameNetworkState = this.networkEnabled === otherClient.networkEnabled;\r\n                        if (otherClientHasBetterNetworkState ||\r\n                            (otherClientHasBetterVisibility &&\r\n                                otherClientHasSameNetworkState)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                });\r\n                return preferredCandidate === undefined;\r\n            });\r\n        })\r\n            .next(canActAsPrimary => {\r\n            if (this.isPrimary !== canActAsPrimary) {\r\n                logDebug(LOG_TAG$c, `Client ${canActAsPrimary ? 'is' : 'is not'} eligible for a primary lease.`);\r\n            }\r\n            return canActAsPrimary;\r\n        });\r\n    }\r\n    async shutdown() {\r\n        // The shutdown() operations are idempotent and can be called even when\r\n        // start() aborted (e.g. because it couldn't acquire the persistence lease).\r\n        this._started = false;\r\n        this.markClientZombied();\r\n        if (this.clientMetadataRefresher) {\r\n            this.clientMetadataRefresher.cancel();\r\n            this.clientMetadataRefresher = null;\r\n        }\r\n        this.detachVisibilityHandler();\r\n        this.detachWindowUnloadHook();\r\n        // Use `SimpleDb.runTransaction` directly to avoid failing if another tab\r\n        // has obtained the primary lease.\r\n        await this.simpleDb.runTransaction('shutdown', 'readwrite', [DbPrimaryClientStore, DbClientMetadataStore], simpleDbTxn => {\r\n            const persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, ListenSequence.INVALID);\r\n            return this.releasePrimaryLeaseIfHeld(persistenceTransaction).next(() => this.removeClientMetadata(persistenceTransaction));\r\n        });\r\n        this.simpleDb.close();\r\n        // Remove the entry marking the client as zombied from LocalStorage since\r\n        // we successfully deleted its metadata from IndexedDb.\r\n        this.removeClientZombiedEntry();\r\n    }\r\n    /**\r\n     * Returns clients that are not zombied and have an updateTime within the\r\n     * provided threshold.\r\n     */\r\n    filterActiveClients(clients, activityThresholdMs) {\r\n        return clients.filter(client => this.isWithinAge(client.updateTimeMs, activityThresholdMs) &&\r\n            !this.isClientZombied(client.clientId));\r\n    }\r\n    /**\r\n     * Returns the IDs of the clients that are currently active. If multi-tab\r\n     * is not supported, returns an array that only contains the local client's\r\n     * ID.\r\n     *\r\n     * PORTING NOTE: This is only used for Web multi-tab.\r\n     */\r\n    getActiveClients() {\r\n        return this.runTransaction('getActiveClients', 'readonly', txn => {\r\n            return clientMetadataStore(txn)\r\n                .loadAll()\r\n                .next(clients => this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(clientMetadata => clientMetadata.clientId));\r\n        });\r\n    }\r\n    get started() {\r\n        return this._started;\r\n    }\r\n    getMutationQueue(user, indexManager) {\r\n        return IndexedDbMutationQueue.forUser(user, this.serializer, indexManager, this.referenceDelegate);\r\n    }\r\n    getTargetCache() {\r\n        return this.targetCache;\r\n    }\r\n    getRemoteDocumentCache() {\r\n        return this.remoteDocumentCache;\r\n    }\r\n    getIndexManager(user) {\r\n        return new IndexedDbIndexManager(user, this.serializer.remoteSerializer.databaseId);\r\n    }\r\n    getDocumentOverlayCache(user) {\r\n        return IndexedDbDocumentOverlayCache.forUser(this.serializer, user);\r\n    }\r\n    getBundleCache() {\r\n        return this.bundleCache;\r\n    }\r\n    runTransaction(action, mode, transactionOperation) {\r\n        logDebug(LOG_TAG$c, 'Starting transaction:', action);\r\n        const simpleDbMode = mode === 'readonly' ? 'readonly' : 'readwrite';\r\n        const objectStores = getObjectStores(this.schemaVersion);\r\n        let persistenceTransaction;\r\n        // Do all transactions as readwrite against all object stores, since we\r\n        // are the only reader/writer.\r\n        return this.simpleDb\r\n            .runTransaction(action, simpleDbMode, objectStores, simpleDbTxn => {\r\n            persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, this.listenSequence\r\n                ? this.listenSequence.next()\r\n                : ListenSequence.INVALID);\r\n            if (mode === 'readwrite-primary') {\r\n                // While we merely verify that we have (or can acquire) the lease\r\n                // immediately, we wait to extend the primary lease until after\r\n                // executing transactionOperation(). This ensures that even if the\r\n                // transactionOperation takes a long time, we'll use a recent\r\n                // leaseTimestampMs in the extended (or newly acquired) lease.\r\n                return this.verifyPrimaryLease(persistenceTransaction)\r\n                    .next(holdsPrimaryLease => {\r\n                    if (holdsPrimaryLease) {\r\n                        return /* holdsPrimaryLease= */ true;\r\n                    }\r\n                    return this.canActAsPrimary(persistenceTransaction);\r\n                })\r\n                    .next(holdsPrimaryLease => {\r\n                    if (!holdsPrimaryLease) {\r\n                        logError(`Failed to obtain primary lease for action '${action}'.`);\r\n                        this.isPrimary = false;\r\n                        this.queue.enqueueRetryable(() => this.primaryStateListener(false));\r\n                        throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_LOST_ERROR_MSG);\r\n                    }\r\n                    return transactionOperation(persistenceTransaction);\r\n                })\r\n                    .next(result => {\r\n                    return this.acquireOrExtendPrimaryLease(persistenceTransaction).next(() => result);\r\n                });\r\n            }\r\n            else {\r\n                return this.verifyAllowTabSynchronization(persistenceTransaction).next(() => transactionOperation(persistenceTransaction));\r\n            }\r\n        })\r\n            .then(result => {\r\n            persistenceTransaction.raiseOnCommittedEvent();\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Verifies that the current tab is the primary leaseholder or alternatively\r\n     * that the leaseholder has opted into multi-tab synchronization.\r\n     */\r\n    // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer\r\n    // be turned off.\r\n    verifyAllowTabSynchronization(txn) {\r\n        const store = primaryClientStore(txn);\r\n        return store.get(DbPrimaryClientKey).next(currentPrimary => {\r\n            const currentLeaseIsValid = currentPrimary !== null &&\r\n                this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) &&\r\n                !this.isClientZombied(currentPrimary.ownerId);\r\n            if (currentLeaseIsValid && !this.isLocalClient(currentPrimary)) {\r\n                if (!this.forceOwningTab &&\r\n                    (!this.allowTabSynchronization ||\r\n                        !currentPrimary.allowTabSynchronization)) {\r\n                    throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Obtains or extends the new primary lease for the local client. This\r\n     * method does not verify that the client is eligible for this lease.\r\n     */\r\n    acquireOrExtendPrimaryLease(txn) {\r\n        const newPrimary = {\r\n            ownerId: this.clientId,\r\n            allowTabSynchronization: this.allowTabSynchronization,\r\n            leaseTimestampMs: Date.now()\r\n        };\r\n        return primaryClientStore(txn).put(DbPrimaryClientKey, newPrimary);\r\n    }\r\n    static isAvailable() {\r\n        return SimpleDb.isAvailable();\r\n    }\r\n    /** Checks the primary lease and removes it if we are the current primary. */\r\n    releasePrimaryLeaseIfHeld(txn) {\r\n        const store = primaryClientStore(txn);\r\n        return store.get(DbPrimaryClientKey).next(primaryClient => {\r\n            if (this.isLocalClient(primaryClient)) {\r\n                logDebug(LOG_TAG$c, 'Releasing primary lease.');\r\n                return store.delete(DbPrimaryClientKey);\r\n            }\r\n            else {\r\n                return PersistencePromise.resolve();\r\n            }\r\n        });\r\n    }\r\n    /** Verifies that `updateTimeMs` is within `maxAgeMs`. */\r\n    isWithinAge(updateTimeMs, maxAgeMs) {\r\n        const now = Date.now();\r\n        const minAcceptable = now - maxAgeMs;\r\n        const maxAcceptable = now;\r\n        if (updateTimeMs < minAcceptable) {\r\n            return false;\r\n        }\r\n        else if (updateTimeMs > maxAcceptable) {\r\n            logError(`Detected an update time that is in the future: ${updateTimeMs} > ${maxAcceptable}`);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    attachVisibilityHandler() {\r\n        if (this.document !== null &&\r\n            typeof this.document.addEventListener === 'function') {\r\n            this.documentVisibilityHandler = () => {\r\n                this.queue.enqueueAndForget(() => {\r\n                    this.inForeground = this.document.visibilityState === 'visible';\r\n                    return this.updateClientMetadataAndTryBecomePrimary();\r\n                });\r\n            };\r\n            this.document.addEventListener('visibilitychange', this.documentVisibilityHandler);\r\n            this.inForeground = this.document.visibilityState === 'visible';\r\n        }\r\n    }\r\n    detachVisibilityHandler() {\r\n        if (this.documentVisibilityHandler) {\r\n            this.document.removeEventListener('visibilitychange', this.documentVisibilityHandler);\r\n            this.documentVisibilityHandler = null;\r\n        }\r\n    }\r\n    /**\r\n     * Attaches a window.unload handler that will synchronously write our\r\n     * clientId to a \"zombie client id\" location in LocalStorage. This can be used\r\n     * by tabs trying to acquire the primary lease to determine that the lease\r\n     * is no longer valid even if the timestamp is recent. This is particularly\r\n     * important for the refresh case (so the tab correctly re-acquires the\r\n     * primary lease). LocalStorage is used for this rather than IndexedDb because\r\n     * it is a synchronous API and so can be used reliably from  an unload\r\n     * handler.\r\n     */\r\n    attachWindowUnloadHook() {\r\n        var _a;\r\n        if (typeof ((_a = this.window) === null || _a === void 0 ? void 0 : _a.addEventListener) === 'function') {\r\n            this.windowUnloadHandler = () => {\r\n                // Note: In theory, this should be scheduled on the AsyncQueue since it\r\n                // accesses internal state. We execute this code directly during shutdown\r\n                // to make sure it gets a chance to run.\r\n                this.markClientZombied();\r\n                const safariIndexdbBugVersionRegex = /(?:Version|Mobile)\\/1[456]/;\r\n                if (isSafari() &&\r\n                    (navigator.appVersion.match(safariIndexdbBugVersionRegex) ||\r\n                        navigator.userAgent.match(safariIndexdbBugVersionRegex))) {\r\n                    // On Safari 14, 15, and 16, we do not run any cleanup actions as it might\r\n                    // trigger a bug that prevents Safari from re-opening IndexedDB during\r\n                    // the next page load.\r\n                    // See https://bugs.webkit.org/show_bug.cgi?id=226547\r\n                    this.queue.enterRestrictedMode(/* purgeExistingTasks= */ true);\r\n                }\r\n                this.queue.enqueueAndForget(() => {\r\n                    // Attempt graceful shutdown (including releasing our primary lease),\r\n                    // but there's no guarantee it will complete.\r\n                    return this.shutdown();\r\n                });\r\n            };\r\n            this.window.addEventListener('pagehide', this.windowUnloadHandler);\r\n        }\r\n    }\r\n    detachWindowUnloadHook() {\r\n        if (this.windowUnloadHandler) {\r\n            this.window.removeEventListener('pagehide', this.windowUnloadHandler);\r\n            this.windowUnloadHandler = null;\r\n        }\r\n    }\r\n    /**\r\n     * Returns whether a client is \"zombied\" based on its LocalStorage entry.\r\n     * Clients become zombied when their tab closes without running all of the\r\n     * cleanup logic in `shutdown()`.\r\n     */\r\n    isClientZombied(clientId) {\r\n        var _a;\r\n        try {\r\n            const isZombied = ((_a = this.webStorage) === null || _a === void 0 ? void 0 : _a.getItem(this.zombiedClientLocalStorageKey(clientId))) !== null;\r\n            logDebug(LOG_TAG$c, `Client '${clientId}' ${isZombied ? 'is' : 'is not'} zombied in LocalStorage`);\r\n            return isZombied;\r\n        }\r\n        catch (e) {\r\n            // Gracefully handle if LocalStorage isn't working.\r\n            logError(LOG_TAG$c, 'Failed to get zombied client id.', e);\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Record client as zombied (a client that had its tab closed). Zombied\r\n     * clients are ignored during primary tab selection.\r\n     */\r\n    markClientZombied() {\r\n        if (!this.webStorage) {\r\n            return;\r\n        }\r\n        try {\r\n            this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId), String(Date.now()));\r\n        }\r\n        catch (e) {\r\n            // Gracefully handle if LocalStorage isn't available / working.\r\n            logError('Failed to set zombie client id.', e);\r\n        }\r\n    }\r\n    /** Removes the zombied client entry if it exists. */\r\n    removeClientZombiedEntry() {\r\n        if (!this.webStorage) {\r\n            return;\r\n        }\r\n        try {\r\n            this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId));\r\n        }\r\n        catch (e) {\r\n            // Ignore\r\n        }\r\n    }\r\n    zombiedClientLocalStorageKey(clientId) {\r\n        return `${ZOMBIED_CLIENTS_KEY_PREFIX}_${this.persistenceKey}_${clientId}`;\r\n    }\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the primary client object store.\r\n */\r\nfunction primaryClientStore(txn) {\r\n    return getStore(txn, DbPrimaryClientStore);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the client metadata object store.\r\n */\r\nfunction clientMetadataStore(txn) {\r\n    return getStore(txn, DbClientMetadataStore);\r\n}\r\n/**\r\n * Generates a string used as a prefix when storing data in IndexedDB and\r\n * LocalStorage.\r\n */\r\nfunction indexedDbStoragePrefix(databaseId, persistenceKey) {\r\n    // Use two different prefix formats:\r\n    //\r\n    //   * firestore / persistenceKey / projectID . databaseID / ...\r\n    //   * firestore / persistenceKey / projectID / ...\r\n    //\r\n    // projectIDs are DNS-compatible names and cannot contain dots\r\n    // so there's no danger of collisions.\r\n    let database = databaseId.projectId;\r\n    if (!databaseId.isDefaultDatabase) {\r\n        database += '.' + databaseId.database;\r\n    }\r\n    return 'firestore/' + persistenceKey + '/' + database + '/';\r\n}\r\nasync function indexedDbClearPersistence(persistenceKey) {\r\n    if (!SimpleDb.isAvailable()) {\r\n        return Promise.resolve();\r\n    }\r\n    const dbName = persistenceKey + MAIN_DATABASE;\r\n    await SimpleDb.delete(dbName);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Compares two array for equality using comparator. The method computes the\r\n * intersection and invokes `onAdd` for every element that is in `after` but not\r\n * `before`. `onRemove` is invoked for every element in `before` but missing\r\n * from `after`.\r\n *\r\n * The method creates a copy of both `before` and `after` and runs in O(n log\r\n * n), where n is the size of the two lists.\r\n *\r\n * @param before - The elements that exist in the original array.\r\n * @param after - The elements to diff against the original array.\r\n * @param comparator - The comparator for the elements in before and after.\r\n * @param onAdd - A function to invoke for every element that is part of `\r\n * after` but not `before`.\r\n * @param onRemove - A function to invoke for every element that is part of\r\n * `before` but not `after`.\r\n */\r\nfunction diffArrays(before, after, comparator, onAdd, onRemove) {\r\n    before = [...before];\r\n    after = [...after];\r\n    before.sort(comparator);\r\n    after.sort(comparator);\r\n    const bLen = before.length;\r\n    const aLen = after.length;\r\n    let a = 0;\r\n    let b = 0;\r\n    while (a < aLen && b < bLen) {\r\n        const cmp = comparator(before[b], after[a]);\r\n        if (cmp < 0) {\r\n            // The element was removed if the next element in our ordered\r\n            // walkthrough is only in `before`.\r\n            onRemove(before[b++]);\r\n        }\r\n        else if (cmp > 0) {\r\n            // The element was added if the next element in our ordered walkthrough\r\n            // is only in `after`.\r\n            onAdd(after[a++]);\r\n        }\r\n        else {\r\n            a++;\r\n            b++;\r\n        }\r\n    }\r\n    while (a < aLen) {\r\n        onAdd(after[a++]);\r\n    }\r\n    while (b < bLen) {\r\n        onRemove(before[b++]);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$b = 'LocalStore';\r\n/**\r\n * The maximum time to leave a resume token buffered without writing it out.\r\n * This value is arbitrary: it's long enough to avoid several writes\r\n * (possibly indefinitely if updates come more frequently than this) but\r\n * short enough that restarting after crashing will still have a pretty\r\n * recent resume token.\r\n */\r\nconst RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;\r\n/**\r\n * Implements `LocalStore` interface.\r\n *\r\n * Note: some field defined in this class might have public access level, but\r\n * the class is not exported so they are only accessible from this module.\r\n * This is useful to implement optional features (like bundles) in free\r\n * functions, such that they are tree-shakeable.\r\n */\r\nclass LocalStoreImpl {\r\n    constructor(\r\n    /** Manages our in-memory or durable persistence. */\r\n    persistence, queryEngine, initialUser, serializer) {\r\n        this.persistence = persistence;\r\n        this.queryEngine = queryEngine;\r\n        this.serializer = serializer;\r\n        /**\r\n         * Maps a targetID to data about its target.\r\n         *\r\n         * PORTING NOTE: We are using an immutable data structure on Web to make re-runs\r\n         * of `applyRemoteEvent()` idempotent.\r\n         */\r\n        this.targetDataByTarget = new SortedMap(primitiveComparator);\r\n        /** Maps a target to its targetID. */\r\n        // TODO(wuandy): Evaluate if TargetId can be part of Target.\r\n        this.targetIdByTarget = new ObjectMap(t => canonifyTarget(t), targetEquals);\r\n        /**\r\n         * A per collection group index of the last read time processed by\r\n         * `getNewDocumentChanges()`.\r\n         *\r\n         * PORTING NOTE: This is only used for multi-tab synchronization.\r\n         */\r\n        this.collectionGroupReadTime = new Map();\r\n        this.remoteDocuments = persistence.getRemoteDocumentCache();\r\n        this.targetCache = persistence.getTargetCache();\r\n        this.bundleCache = persistence.getBundleCache();\r\n        this.initializeUserComponents(initialUser);\r\n    }\r\n    initializeUserComponents(user) {\r\n        // TODO(indexing): Add spec tests that test these components change after a\r\n        // user change\r\n        this.documentOverlayCache = this.persistence.getDocumentOverlayCache(user);\r\n        this.indexManager = this.persistence.getIndexManager(user);\r\n        this.mutationQueue = this.persistence.getMutationQueue(user, this.indexManager);\r\n        this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue, this.documentOverlayCache, this.indexManager);\r\n        this.remoteDocuments.setIndexManager(this.indexManager);\r\n        this.queryEngine.initialize(this.localDocuments, this.indexManager);\r\n    }\r\n    collectGarbage(garbageCollector) {\r\n        return this.persistence.runTransaction('Collect garbage', 'readwrite-primary', txn => garbageCollector.collect(txn, this.targetDataByTarget));\r\n    }\r\n}\r\nfunction newLocalStore(\r\n/** Manages our in-memory or durable persistence. */\r\npersistence, queryEngine, initialUser, serializer) {\r\n    return new LocalStoreImpl(persistence, queryEngine, initialUser, serializer);\r\n}\r\n/**\r\n * Tells the LocalStore that the currently authenticated user has changed.\r\n *\r\n * In response the local store switches the mutation queue to the new user and\r\n * returns any resulting document changes.\r\n */\r\n// PORTING NOTE: Android and iOS only return the documents affected by the\r\n// change.\r\nasync function localStoreHandleUserChange(localStore, user) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    const result = await localStoreImpl.persistence.runTransaction('Handle user change', 'readonly', txn => {\r\n        // Swap out the mutation queue, grabbing the pending mutation batches\r\n        // before and after.\r\n        let oldBatches;\r\n        return localStoreImpl.mutationQueue\r\n            .getAllMutationBatches(txn)\r\n            .next(promisedOldBatches => {\r\n            oldBatches = promisedOldBatches;\r\n            localStoreImpl.initializeUserComponents(user);\r\n            return localStoreImpl.mutationQueue.getAllMutationBatches(txn);\r\n        })\r\n            .next(newBatches => {\r\n            const removedBatchIds = [];\r\n            const addedBatchIds = [];\r\n            // Union the old/new changed keys.\r\n            let changedKeys = documentKeySet();\r\n            for (const batch of oldBatches) {\r\n                removedBatchIds.push(batch.batchId);\r\n                for (const mutation of batch.mutations) {\r\n                    changedKeys = changedKeys.add(mutation.key);\r\n                }\r\n            }\r\n            for (const batch of newBatches) {\r\n                addedBatchIds.push(batch.batchId);\r\n                for (const mutation of batch.mutations) {\r\n                    changedKeys = changedKeys.add(mutation.key);\r\n                }\r\n            }\r\n            // Return the set of all (potentially) changed documents and the list\r\n            // of mutation batch IDs that were affected by change.\r\n            return localStoreImpl.localDocuments\r\n                .getDocuments(txn, changedKeys)\r\n                .next(affectedDocuments => {\r\n                return {\r\n                    affectedDocuments,\r\n                    removedBatchIds,\r\n                    addedBatchIds\r\n                };\r\n            });\r\n        });\r\n    });\r\n    return result;\r\n}\r\n/* Accepts locally generated Mutations and commit them to storage. */\r\nfunction localStoreWriteLocally(localStore, mutations) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    const localWriteTime = Timestamp.now();\r\n    const keys = mutations.reduce((keys, m) => keys.add(m.key), documentKeySet());\r\n    let overlayedDocuments;\r\n    let mutationBatch;\r\n    return localStoreImpl.persistence\r\n        .runTransaction('Locally write mutations', 'readwrite', txn => {\r\n        // Figure out which keys do not have a remote version in the cache, this\r\n        // is needed to create the right overlay mutation: if no remote version\r\n        // presents, we do not need to create overlays as patch mutations.\r\n        // TODO(Overlay): Is there a better way to determine this? Using the\r\n        //  document version does not work because local mutations set them back\r\n        //  to 0.\r\n        let remoteDocs = mutableDocumentMap();\r\n        let docsWithoutRemoteVersion = documentKeySet();\r\n        return localStoreImpl.remoteDocuments\r\n            .getEntries(txn, keys)\r\n            .next(docs => {\r\n            remoteDocs = docs;\r\n            remoteDocs.forEach((key, doc) => {\r\n                if (!doc.isValidDocument()) {\r\n                    docsWithoutRemoteVersion = docsWithoutRemoteVersion.add(key);\r\n                }\r\n            });\r\n        })\r\n            .next(() => {\r\n            // Load and apply all existing mutations. This lets us compute the\r\n            // current base state for all non-idempotent transforms before applying\r\n            // any additional user-provided writes.\r\n            return localStoreImpl.localDocuments.getOverlayedDocuments(txn, remoteDocs);\r\n        })\r\n            .next((docs) => {\r\n            overlayedDocuments = docs;\r\n            // For non-idempotent mutations (such as `FieldValue.increment()`),\r\n            // we record the base state in a separate patch mutation. This is\r\n            // later used to guarantee consistent values and prevents flicker\r\n            // even if the backend sends us an update that already includes our\r\n            // transform.\r\n            const baseMutations = [];\r\n            for (const mutation of mutations) {\r\n                const baseValue = mutationExtractBaseValue(mutation, overlayedDocuments.get(mutation.key).overlayedDocument);\r\n                if (baseValue != null) {\r\n                    // NOTE: The base state should only be applied if there's some\r\n                    // existing document to override, so use a Precondition of\r\n                    // exists=true\r\n                    baseMutations.push(new PatchMutation(mutation.key, baseValue, extractFieldMask(baseValue.value.mapValue), Precondition.exists(true)));\r\n                }\r\n            }\r\n            return localStoreImpl.mutationQueue.addMutationBatch(txn, localWriteTime, baseMutations, mutations);\r\n        })\r\n            .next(batch => {\r\n            mutationBatch = batch;\r\n            const overlays = batch.applyToLocalDocumentSet(overlayedDocuments, docsWithoutRemoteVersion);\r\n            return localStoreImpl.documentOverlayCache.saveOverlays(txn, batch.batchId, overlays);\r\n        });\r\n    })\r\n        .then(() => ({\r\n        batchId: mutationBatch.batchId,\r\n        changes: convertOverlayedDocumentMapToDocumentMap(overlayedDocuments)\r\n    }));\r\n}\r\n/**\r\n * Acknowledges the given batch.\r\n *\r\n * On the happy path when a batch is acknowledged, the local store will\r\n *\r\n *  + remove the batch from the mutation queue;\r\n *  + apply the changes to the remote document cache;\r\n *  + recalculate the latency compensated view implied by those changes (there\r\n *    may be mutations in the queue that affect the documents but haven't been\r\n *    acknowledged yet); and\r\n *  + give the changed documents back the sync engine\r\n *\r\n * @returns The resulting (modified) documents.\r\n */\r\nfunction localStoreAcknowledgeBatch(localStore, batchResult) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Acknowledge batch', 'readwrite-primary', txn => {\r\n        const affected = batchResult.batch.keys();\r\n        const documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\r\n            trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\r\n        });\r\n        return applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer)\r\n            .next(() => documentBuffer.apply(txn))\r\n            .next(() => localStoreImpl.mutationQueue.performConsistencyCheck(txn))\r\n            .next(() => localStoreImpl.documentOverlayCache.removeOverlaysForBatchId(txn, affected, batchResult.batch.batchId))\r\n            .next(() => localStoreImpl.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(txn, getKeysWithTransformResults(batchResult)))\r\n            .next(() => localStoreImpl.localDocuments.getDocuments(txn, affected));\r\n    });\r\n}\r\nfunction getKeysWithTransformResults(batchResult) {\r\n    let result = documentKeySet();\r\n    for (let i = 0; i < batchResult.mutationResults.length; ++i) {\r\n        const mutationResult = batchResult.mutationResults[i];\r\n        if (mutationResult.transformResults.length > 0) {\r\n            result = result.add(batchResult.batch.mutations[i].key);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Removes mutations from the MutationQueue for the specified batch;\r\n * LocalDocuments will be recalculated.\r\n *\r\n * @returns The resulting modified documents.\r\n */\r\nfunction localStoreRejectBatch(localStore, batchId) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Reject batch', 'readwrite-primary', txn => {\r\n        let affectedKeys;\r\n        return localStoreImpl.mutationQueue\r\n            .lookupMutationBatch(txn, batchId)\r\n            .next((batch) => {\r\n            hardAssert(batch !== null);\r\n            affectedKeys = batch.keys();\r\n            return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);\r\n        })\r\n            .next(() => localStoreImpl.mutationQueue.performConsistencyCheck(txn))\r\n            .next(() => localStoreImpl.documentOverlayCache.removeOverlaysForBatchId(txn, affectedKeys, batchId))\r\n            .next(() => localStoreImpl.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(txn, affectedKeys))\r\n            .next(() => localStoreImpl.localDocuments.getDocuments(txn, affectedKeys));\r\n    });\r\n}\r\n/**\r\n * Returns the largest (latest) batch id in mutation queue that is pending\r\n * server response.\r\n *\r\n * Returns `BATCHID_UNKNOWN` if the queue is empty.\r\n */\r\nfunction localStoreGetHighestUnacknowledgedBatchId(localStore) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Get highest unacknowledged batch id', 'readonly', txn => localStoreImpl.mutationQueue.getHighestUnacknowledgedBatchId(txn));\r\n}\r\n/**\r\n * Returns the last consistent snapshot processed (used by the RemoteStore to\r\n * determine whether to buffer incoming snapshots from the backend).\r\n */\r\nfunction localStoreGetLastRemoteSnapshotVersion(localStore) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Get last remote snapshot version', 'readonly', txn => localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn));\r\n}\r\n/**\r\n * Updates the \"ground-state\" (remote) documents. We assume that the remote\r\n * event reflects any write batches that have been acknowledged or rejected\r\n * (i.e. we do not re-apply local mutations to updates from this event).\r\n *\r\n * LocalDocuments are re-calculated if there are remaining mutations in the\r\n * queue.\r\n */\r\nfunction localStoreApplyRemoteEventToLocalCache(localStore, remoteEvent) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    const remoteVersion = remoteEvent.snapshotVersion;\r\n    let newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;\r\n    return localStoreImpl.persistence\r\n        .runTransaction('Apply remote event', 'readwrite-primary', txn => {\r\n        const documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\r\n            trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\r\n        });\r\n        // Reset newTargetDataByTargetMap in case this transaction gets re-run.\r\n        newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;\r\n        const promises = [];\r\n        remoteEvent.targetChanges.forEach((change, targetId) => {\r\n            const oldTargetData = newTargetDataByTargetMap.get(targetId);\r\n            if (!oldTargetData) {\r\n                return;\r\n            }\r\n            // Only update the remote keys if the target is still active. This\r\n            // ensures that we can persist the updated target data along with\r\n            // the updated assignment.\r\n            promises.push(localStoreImpl.targetCache\r\n                .removeMatchingKeys(txn, change.removedDocuments, targetId)\r\n                .next(() => {\r\n                return localStoreImpl.targetCache.addMatchingKeys(txn, change.addedDocuments, targetId);\r\n            }));\r\n            let newTargetData = oldTargetData.withSequenceNumber(txn.currentSequenceNumber);\r\n            if (remoteEvent.targetMismatches.get(targetId) !== null) {\r\n                newTargetData = newTargetData\r\n                    .withResumeToken(ByteString.EMPTY_BYTE_STRING, SnapshotVersion.min())\r\n                    .withLastLimboFreeSnapshotVersion(SnapshotVersion.min());\r\n            }\r\n            else if (change.resumeToken.approximateByteSize() > 0) {\r\n                newTargetData = newTargetData.withResumeToken(change.resumeToken, remoteVersion);\r\n            }\r\n            newTargetDataByTargetMap = newTargetDataByTargetMap.insert(targetId, newTargetData);\r\n            // Update the target data if there are target changes (or if\r\n            // sufficient time has passed since the last update).\r\n            if (shouldPersistTargetData(oldTargetData, newTargetData, change)) {\r\n                promises.push(localStoreImpl.targetCache.updateTargetData(txn, newTargetData));\r\n            }\r\n        });\r\n        let changedDocs = mutableDocumentMap();\r\n        let existenceChangedKeys = documentKeySet();\r\n        remoteEvent.documentUpdates.forEach(key => {\r\n            if (remoteEvent.resolvedLimboDocuments.has(key)) {\r\n                promises.push(localStoreImpl.persistence.referenceDelegate.updateLimboDocument(txn, key));\r\n            }\r\n        });\r\n        // Each loop iteration only affects its \"own\" doc, so it's safe to get all\r\n        // the remote documents in advance in a single call.\r\n        promises.push(populateDocumentChangeBuffer(txn, documentBuffer, remoteEvent.documentUpdates).next(result => {\r\n            changedDocs = result.changedDocuments;\r\n            existenceChangedKeys = result.existenceChangedKeys;\r\n        }));\r\n        // HACK: The only reason we allow a null snapshot version is so that we\r\n        // can synthesize remote events when we get permission denied errors while\r\n        // trying to resolve the state of a locally cached document that is in\r\n        // limbo.\r\n        if (!remoteVersion.isEqual(SnapshotVersion.min())) {\r\n            const updateRemoteVersion = localStoreImpl.targetCache\r\n                .getLastRemoteSnapshotVersion(txn)\r\n                .next(lastRemoteSnapshotVersion => {\r\n                return localStoreImpl.targetCache.setTargetsMetadata(txn, txn.currentSequenceNumber, remoteVersion);\r\n            });\r\n            promises.push(updateRemoteVersion);\r\n        }\r\n        return PersistencePromise.waitFor(promises)\r\n            .next(() => documentBuffer.apply(txn))\r\n            .next(() => localStoreImpl.localDocuments.getLocalViewOfDocuments(txn, changedDocs, existenceChangedKeys))\r\n            .next(() => changedDocs);\r\n    })\r\n        .then(changedDocs => {\r\n        localStoreImpl.targetDataByTarget = newTargetDataByTargetMap;\r\n        return changedDocs;\r\n    });\r\n}\r\n/**\r\n * Populates document change buffer with documents from backend or a bundle.\r\n * Returns the document changes resulting from applying those documents, and\r\n * also a set of documents whose existence state are changed as a result.\r\n *\r\n * @param txn - Transaction to use to read existing documents from storage.\r\n * @param documentBuffer - Document buffer to collect the resulted changes to be\r\n *        applied to storage.\r\n * @param documents - Documents to be applied.\r\n */\r\nfunction populateDocumentChangeBuffer(txn, documentBuffer, documents) {\r\n    let updatedKeys = documentKeySet();\r\n    let existenceChangedKeys = documentKeySet();\r\n    documents.forEach(k => (updatedKeys = updatedKeys.add(k)));\r\n    return documentBuffer.getEntries(txn, updatedKeys).next(existingDocs => {\r\n        let changedDocuments = mutableDocumentMap();\r\n        documents.forEach((key, doc) => {\r\n            const existingDoc = existingDocs.get(key);\r\n            // Check if see if there is a existence state change for this document.\r\n            if (doc.isFoundDocument() !== existingDoc.isFoundDocument()) {\r\n                existenceChangedKeys = existenceChangedKeys.add(key);\r\n            }\r\n            // Note: The order of the steps below is important, since we want\r\n            // to ensure that rejected limbo resolutions (which fabricate\r\n            // NoDocuments with SnapshotVersion.min()) never add documents to\r\n            // cache.\r\n            if (doc.isNoDocument() && doc.version.isEqual(SnapshotVersion.min())) {\r\n                // NoDocuments with SnapshotVersion.min() are used in manufactured\r\n                // events. We remove these documents from cache since we lost\r\n                // access.\r\n                documentBuffer.removeEntry(key, doc.readTime);\r\n                changedDocuments = changedDocuments.insert(key, doc);\r\n            }\r\n            else if (!existingDoc.isValidDocument() ||\r\n                doc.version.compareTo(existingDoc.version) > 0 ||\r\n                (doc.version.compareTo(existingDoc.version) === 0 &&\r\n                    existingDoc.hasPendingWrites)) {\r\n                documentBuffer.addEntry(doc);\r\n                changedDocuments = changedDocuments.insert(key, doc);\r\n            }\r\n            else {\r\n                logDebug(LOG_TAG$b, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\r\n            }\r\n        });\r\n        return { changedDocuments, existenceChangedKeys };\r\n    });\r\n}\r\n/**\r\n * Returns true if the newTargetData should be persisted during an update of\r\n * an active target. TargetData should always be persisted when a target is\r\n * being released and should not call this function.\r\n *\r\n * While the target is active, TargetData updates can be omitted when nothing\r\n * about the target has changed except metadata like the resume token or\r\n * snapshot version. Occasionally it's worth the extra write to prevent these\r\n * values from getting too stale after a crash, but this doesn't have to be\r\n * too frequent.\r\n */\r\nfunction shouldPersistTargetData(oldTargetData, newTargetData, change) {\r\n    // Always persist target data if we don't already have a resume token.\r\n    if (oldTargetData.resumeToken.approximateByteSize() === 0) {\r\n        return true;\r\n    }\r\n    // Don't allow resume token changes to be buffered indefinitely. This\r\n    // allows us to be reasonably up-to-date after a crash and avoids needing\r\n    // to loop over all active queries on shutdown. Especially in the browser\r\n    // we may not get time to do anything interesting while the current tab is\r\n    // closing.\r\n    const timeDelta = newTargetData.snapshotVersion.toMicroseconds() -\r\n        oldTargetData.snapshotVersion.toMicroseconds();\r\n    if (timeDelta >= RESUME_TOKEN_MAX_AGE_MICROS) {\r\n        return true;\r\n    }\r\n    // Otherwise if the only thing that has changed about a target is its resume\r\n    // token it's not worth persisting. Note that the RemoteStore keeps an\r\n    // in-memory view of the currently active targets which includes the current\r\n    // resume token, so stream failure or user changes will still use an\r\n    // up-to-date resume token regardless of what we do here.\r\n    const changes = change.addedDocuments.size +\r\n        change.modifiedDocuments.size +\r\n        change.removedDocuments.size;\r\n    return changes > 0;\r\n}\r\n/**\r\n * Notifies local store of the changed views to locally pin documents.\r\n */\r\nasync function localStoreNotifyLocalViewChanges(localStore, viewChanges) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    try {\r\n        await localStoreImpl.persistence.runTransaction('notifyLocalViewChanges', 'readwrite', txn => {\r\n            return PersistencePromise.forEach(viewChanges, (viewChange) => {\r\n                return PersistencePromise.forEach(viewChange.addedKeys, (key) => localStoreImpl.persistence.referenceDelegate.addReference(txn, viewChange.targetId, key)).next(() => PersistencePromise.forEach(viewChange.removedKeys, (key) => localStoreImpl.persistence.referenceDelegate.removeReference(txn, viewChange.targetId, key)));\r\n            });\r\n        });\r\n    }\r\n    catch (e) {\r\n        if (isIndexedDbTransactionError(e)) {\r\n            // If `notifyLocalViewChanges` fails, we did not advance the sequence\r\n            // number for the documents that were included in this transaction.\r\n            // This might trigger them to be deleted earlier than they otherwise\r\n            // would have, but it should not invalidate the integrity of the data.\r\n            logDebug(LOG_TAG$b, 'Failed to update sequence numbers: ' + e);\r\n        }\r\n        else {\r\n            throw e;\r\n        }\r\n    }\r\n    for (const viewChange of viewChanges) {\r\n        const targetId = viewChange.targetId;\r\n        if (!viewChange.fromCache) {\r\n            const targetData = localStoreImpl.targetDataByTarget.get(targetId);\r\n            // Advance the last limbo free snapshot version\r\n            const lastLimboFreeSnapshotVersion = targetData.snapshotVersion;\r\n            const updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(lastLimboFreeSnapshotVersion);\r\n            localStoreImpl.targetDataByTarget =\r\n                localStoreImpl.targetDataByTarget.insert(targetId, updatedTargetData);\r\n            // TODO(b/272564316): Apply the optimization done on other platforms.\r\n            // This is a problem for web because saving the updated targetData from\r\n            // non-primary client conflicts with what primary client saved.\r\n        }\r\n    }\r\n}\r\n/**\r\n * Gets the mutation batch after the passed in batchId in the mutation queue\r\n * or null if empty.\r\n * @param afterBatchId - If provided, the batch to search after.\r\n * @returns The next mutation or null if there wasn't one.\r\n */\r\nfunction localStoreGetNextMutationBatch(localStore, afterBatchId) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Get next mutation batch', 'readonly', txn => {\r\n        if (afterBatchId === undefined) {\r\n            afterBatchId = BATCHID_UNKNOWN;\r\n        }\r\n        return localStoreImpl.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\r\n    });\r\n}\r\n/**\r\n * Reads the current value of a Document with a given key or null if not\r\n * found - used for testing.\r\n */\r\nfunction localStoreReadDocument(localStore, key) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('read document', 'readonly', txn => localStoreImpl.localDocuments.getDocument(txn, key));\r\n}\r\n/**\r\n * Assigns the given target an internal ID so that its results can be pinned so\r\n * they don't get GC'd. A target must be allocated in the local store before\r\n * the store can be used to manage its view.\r\n *\r\n * Allocating an already allocated `Target` will return the existing `TargetData`\r\n * for that `Target`.\r\n */\r\nfunction localStoreAllocateTarget(localStore, target) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence\r\n        .runTransaction('Allocate target', 'readwrite', txn => {\r\n        let targetData;\r\n        return localStoreImpl.targetCache\r\n            .getTargetData(txn, target)\r\n            .next((cached) => {\r\n            if (cached) {\r\n                // This target has been listened to previously, so reuse the\r\n                // previous targetID.\r\n                // TODO(mcg): freshen last accessed date?\r\n                targetData = cached;\r\n                return PersistencePromise.resolve(targetData);\r\n            }\r\n            else {\r\n                return localStoreImpl.targetCache\r\n                    .allocateTargetId(txn)\r\n                    .next(targetId => {\r\n                    targetData = new TargetData(target, targetId, \"TargetPurposeListen\" /* TargetPurpose.Listen */, txn.currentSequenceNumber);\r\n                    return localStoreImpl.targetCache\r\n                        .addTargetData(txn, targetData)\r\n                        .next(() => targetData);\r\n                });\r\n            }\r\n        });\r\n    })\r\n        .then(targetData => {\r\n        // If Multi-Tab is enabled, the existing target data may be newer than\r\n        // the in-memory data\r\n        const cachedTargetData = localStoreImpl.targetDataByTarget.get(targetData.targetId);\r\n        if (cachedTargetData === null ||\r\n            targetData.snapshotVersion.compareTo(cachedTargetData.snapshotVersion) >\r\n                0) {\r\n            localStoreImpl.targetDataByTarget =\r\n                localStoreImpl.targetDataByTarget.insert(targetData.targetId, targetData);\r\n            localStoreImpl.targetIdByTarget.set(target, targetData.targetId);\r\n        }\r\n        return targetData;\r\n    });\r\n}\r\n/**\r\n * Returns the TargetData as seen by the LocalStore, including updates that may\r\n * have not yet been persisted to the TargetCache.\r\n */\r\n// Visible for testing.\r\nfunction localStoreGetTargetData(localStore, transaction, target) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    const targetId = localStoreImpl.targetIdByTarget.get(target);\r\n    if (targetId !== undefined) {\r\n        return PersistencePromise.resolve(localStoreImpl.targetDataByTarget.get(targetId));\r\n    }\r\n    else {\r\n        return localStoreImpl.targetCache.getTargetData(transaction, target);\r\n    }\r\n}\r\n/**\r\n * Unpins all the documents associated with the given target. If\r\n * `keepPersistedTargetData` is set to false and Eager GC enabled, the method\r\n * directly removes the associated target data from the target cache.\r\n *\r\n * Releasing a non-existing `Target` is a no-op.\r\n */\r\n// PORTING NOTE: `keepPersistedTargetData` is multi-tab only.\r\nasync function localStoreReleaseTarget(localStore, targetId, keepPersistedTargetData) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    const targetData = localStoreImpl.targetDataByTarget.get(targetId);\r\n    const mode = keepPersistedTargetData ? 'readwrite' : 'readwrite-primary';\r\n    try {\r\n        if (!keepPersistedTargetData) {\r\n            await localStoreImpl.persistence.runTransaction('Release target', mode, txn => {\r\n                return localStoreImpl.persistence.referenceDelegate.removeTarget(txn, targetData);\r\n            });\r\n        }\r\n    }\r\n    catch (e) {\r\n        if (isIndexedDbTransactionError(e)) {\r\n            // All `releaseTarget` does is record the final metadata state for the\r\n            // target, but we've been recording this periodically during target\r\n            // activity. If we lose this write this could cause a very slight\r\n            // difference in the order of target deletion during GC, but we\r\n            // don't define exact LRU semantics so this is acceptable.\r\n            logDebug(LOG_TAG$b, `Failed to update sequence numbers for target ${targetId}: ${e}`);\r\n        }\r\n        else {\r\n            throw e;\r\n        }\r\n    }\r\n    localStoreImpl.targetDataByTarget =\r\n        localStoreImpl.targetDataByTarget.remove(targetId);\r\n    localStoreImpl.targetIdByTarget.delete(targetData.target);\r\n}\r\n/**\r\n * Runs the specified query against the local store and returns the results,\r\n * potentially taking advantage of query data from previous executions (such\r\n * as the set of remote keys).\r\n *\r\n * @param usePreviousResults - Whether results from previous executions can\r\n * be used to optimize this query execution.\r\n */\r\nfunction localStoreExecuteQuery(localStore, query, usePreviousResults) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    let lastLimboFreeSnapshotVersion = SnapshotVersion.min();\r\n    let remoteKeys = documentKeySet();\r\n    return localStoreImpl.persistence.runTransaction('Execute query', 'readonly', txn => {\r\n        return localStoreGetTargetData(localStoreImpl, txn, queryToTarget(query))\r\n            .next(targetData => {\r\n            if (targetData) {\r\n                lastLimboFreeSnapshotVersion =\r\n                    targetData.lastLimboFreeSnapshotVersion;\r\n                return localStoreImpl.targetCache\r\n                    .getMatchingKeysForTargetId(txn, targetData.targetId)\r\n                    .next(result => {\r\n                    remoteKeys = result;\r\n                });\r\n            }\r\n        })\r\n            .next(() => localStoreImpl.queryEngine.getDocumentsMatchingQuery(txn, query, usePreviousResults\r\n            ? lastLimboFreeSnapshotVersion\r\n            : SnapshotVersion.min(), usePreviousResults ? remoteKeys : documentKeySet()))\r\n            .next(documents => {\r\n            setMaxReadTime(localStoreImpl, queryCollectionGroup(query), documents);\r\n            return { documents, remoteKeys };\r\n        });\r\n    });\r\n}\r\nfunction applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer) {\r\n    const batch = batchResult.batch;\r\n    const docKeys = batch.keys();\r\n    let promiseChain = PersistencePromise.resolve();\r\n    docKeys.forEach(docKey => {\r\n        promiseChain = promiseChain\r\n            .next(() => documentBuffer.getEntry(txn, docKey))\r\n            .next(doc => {\r\n            const ackVersion = batchResult.docVersions.get(docKey);\r\n            hardAssert(ackVersion !== null);\r\n            if (doc.version.compareTo(ackVersion) < 0) {\r\n                batch.applyToRemoteDocument(doc, batchResult);\r\n                if (doc.isValidDocument()) {\r\n                    // We use the commitVersion as the readTime rather than the\r\n                    // document's updateTime since the updateTime is not advanced\r\n                    // for updates that do not modify the underlying document.\r\n                    doc.setReadTime(batchResult.commitVersion);\r\n                    documentBuffer.addEntry(doc);\r\n                }\r\n            }\r\n        });\r\n    });\r\n    return promiseChain.next(() => localStoreImpl.mutationQueue.removeMutationBatch(txn, batch));\r\n}\r\n/** Returns the local view of the documents affected by a mutation batch. */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction localStoreLookupMutationDocuments(localStore, batchId) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    const mutationQueueImpl = debugCast(localStoreImpl.mutationQueue);\r\n    return localStoreImpl.persistence.runTransaction('Lookup mutation documents', 'readonly', txn => {\r\n        return mutationQueueImpl.lookupMutationKeys(txn, batchId).next(keys => {\r\n            if (keys) {\r\n                return localStoreImpl.localDocuments.getDocuments(txn, keys);\r\n            }\r\n            else {\r\n                return PersistencePromise.resolve(null);\r\n            }\r\n        });\r\n    });\r\n}\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction localStoreRemoveCachedMutationBatchMetadata(localStore, batchId) {\r\n    const mutationQueueImpl = debugCast(debugCast(localStore, LocalStoreImpl).mutationQueue);\r\n    mutationQueueImpl.removeCachedMutationKeys(batchId);\r\n}\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction localStoreGetActiveClients(localStore) {\r\n    const persistenceImpl = debugCast(debugCast(localStore, LocalStoreImpl).persistence);\r\n    return persistenceImpl.getActiveClients();\r\n}\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction localStoreGetCachedTarget(localStore, targetId) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    const targetCacheImpl = debugCast(localStoreImpl.targetCache);\r\n    const cachedTargetData = localStoreImpl.targetDataByTarget.get(targetId);\r\n    if (cachedTargetData) {\r\n        return Promise.resolve(cachedTargetData.target);\r\n    }\r\n    else {\r\n        return localStoreImpl.persistence.runTransaction('Get target data', 'readonly', txn => {\r\n            return targetCacheImpl\r\n                .getTargetDataForTarget(txn, targetId)\r\n                .next(targetData => (targetData ? targetData.target : null));\r\n        });\r\n    }\r\n}\r\n/**\r\n * Returns the set of documents that have been updated since the last call.\r\n * If this is the first call, returns the set of changes since client\r\n * initialization. Further invocations will return document that have changed\r\n * since the prior call.\r\n */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction localStoreGetNewDocumentChanges(localStore, collectionGroup) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    // Get the current maximum read time for the collection. This should always\r\n    // exist, but to reduce the chance for regressions we default to\r\n    // SnapshotVersion.Min()\r\n    // TODO(indexing): Consider removing the default value.\r\n    const readTime = localStoreImpl.collectionGroupReadTime.get(collectionGroup) ||\r\n        SnapshotVersion.min();\r\n    return localStoreImpl.persistence\r\n        .runTransaction('Get new document changes', 'readonly', txn => localStoreImpl.remoteDocuments.getAllFromCollectionGroup(txn, collectionGroup, newIndexOffsetSuccessorFromReadTime(readTime, INITIAL_LARGEST_BATCH_ID), \r\n    /* limit= */ Number.MAX_SAFE_INTEGER))\r\n        .then(changedDocs => {\r\n        setMaxReadTime(localStoreImpl, collectionGroup, changedDocs);\r\n        return changedDocs;\r\n    });\r\n}\r\n/** Sets the collection group's maximum read time from the given documents. */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction setMaxReadTime(localStoreImpl, collectionGroup, changedDocs) {\r\n    let readTime = localStoreImpl.collectionGroupReadTime.get(collectionGroup) ||\r\n        SnapshotVersion.min();\r\n    changedDocs.forEach((_, doc) => {\r\n        if (doc.readTime.compareTo(readTime) > 0) {\r\n            readTime = doc.readTime;\r\n        }\r\n    });\r\n    localStoreImpl.collectionGroupReadTime.set(collectionGroup, readTime);\r\n}\r\n/**\r\n * Creates a new target using the given bundle name, which will be used to\r\n * hold the keys of all documents from the bundle in query-document mappings.\r\n * This ensures that the loaded documents do not get garbage collected\r\n * right away.\r\n */\r\nfunction umbrellaTarget(bundleName) {\r\n    // It is OK that the path used for the query is not valid, because this will\r\n    // not be read and queried.\r\n    return queryToTarget(newQueryForPath(ResourcePath.fromString(`__bundle__/docs/${bundleName}`)));\r\n}\r\n/**\r\n * Applies the documents from a bundle to the \"ground-state\" (remote)\r\n * documents.\r\n *\r\n * LocalDocuments are re-calculated if there are remaining mutations in the\r\n * queue.\r\n */\r\nasync function localStoreApplyBundledDocuments(localStore, bundleConverter, documents, bundleName) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    let documentKeys = documentKeySet();\r\n    let documentMap = mutableDocumentMap();\r\n    for (const bundleDoc of documents) {\r\n        const documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);\r\n        if (bundleDoc.document) {\r\n            documentKeys = documentKeys.add(documentKey);\r\n        }\r\n        const doc = bundleConverter.toMutableDocument(bundleDoc);\r\n        doc.setReadTime(bundleConverter.toSnapshotVersion(bundleDoc.metadata.readTime));\r\n        documentMap = documentMap.insert(documentKey, doc);\r\n    }\r\n    const documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\r\n        trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\r\n    });\r\n    // Allocates a target to hold all document keys from the bundle, such that\r\n    // they will not get garbage collected right away.\r\n    const umbrellaTargetData = await localStoreAllocateTarget(localStoreImpl, umbrellaTarget(bundleName));\r\n    return localStoreImpl.persistence.runTransaction('Apply bundle documents', 'readwrite', txn => {\r\n        return populateDocumentChangeBuffer(txn, documentBuffer, documentMap)\r\n            .next(documentChangeResult => {\r\n            documentBuffer.apply(txn);\r\n            return documentChangeResult;\r\n        })\r\n            .next(documentChangeResult => {\r\n            return localStoreImpl.targetCache\r\n                .removeMatchingKeysForTargetId(txn, umbrellaTargetData.targetId)\r\n                .next(() => localStoreImpl.targetCache.addMatchingKeys(txn, documentKeys, umbrellaTargetData.targetId))\r\n                .next(() => localStoreImpl.localDocuments.getLocalViewOfDocuments(txn, documentChangeResult.changedDocuments, documentChangeResult.existenceChangedKeys))\r\n                .next(() => documentChangeResult.changedDocuments);\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns a promise of a boolean to indicate if the given bundle has already\r\n * been loaded and the create time is newer than the current loading bundle.\r\n */\r\nfunction localStoreHasNewerBundle(localStore, bundleMetadata) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    const currentReadTime = fromVersion(bundleMetadata.createTime);\r\n    return localStoreImpl.persistence\r\n        .runTransaction('hasNewerBundle', 'readonly', transaction => {\r\n        return localStoreImpl.bundleCache.getBundleMetadata(transaction, bundleMetadata.id);\r\n    })\r\n        .then(cached => {\r\n        return !!cached && cached.createTime.compareTo(currentReadTime) >= 0;\r\n    });\r\n}\r\n/**\r\n * Saves the given `BundleMetadata` to local persistence.\r\n */\r\nfunction localStoreSaveBundle(localStore, bundleMetadata) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Save bundle', 'readwrite', transaction => {\r\n        return localStoreImpl.bundleCache.saveBundleMetadata(transaction, bundleMetadata);\r\n    });\r\n}\r\n/**\r\n * Returns a promise of a `NamedQuery` associated with given query name. Promise\r\n * resolves to undefined if no persisted data can be found.\r\n */\r\nfunction localStoreGetNamedQuery(localStore, queryName) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Get named query', 'readonly', transaction => localStoreImpl.bundleCache.getNamedQuery(transaction, queryName));\r\n}\r\n/**\r\n * Saves the given `NamedQuery` to local persistence.\r\n */\r\nasync function localStoreSaveNamedQuery(localStore, query, documents = documentKeySet()) {\r\n    // Allocate a target for the named query such that it can be resumed\r\n    // from associated read time if users use it to listen.\r\n    // NOTE: this also means if no corresponding target exists, the new target\r\n    // will remain active and will not get collected, unless users happen to\r\n    // unlisten the query somehow.\r\n    const allocated = await localStoreAllocateTarget(localStore, queryToTarget(fromBundledQuery(query.bundledQuery)));\r\n    const localStoreImpl = debugCast(localStore);\r\n    return localStoreImpl.persistence.runTransaction('Save named query', 'readwrite', transaction => {\r\n        const readTime = fromVersion(query.readTime);\r\n        // Simply save the query itself if it is older than what the SDK already\r\n        // has.\r\n        if (allocated.snapshotVersion.compareTo(readTime) >= 0) {\r\n            return localStoreImpl.bundleCache.saveNamedQuery(transaction, query);\r\n        }\r\n        // Update existing target data because the query from the bundle is newer.\r\n        const newTargetData = allocated.withResumeToken(ByteString.EMPTY_BYTE_STRING, readTime);\r\n        localStoreImpl.targetDataByTarget =\r\n            localStoreImpl.targetDataByTarget.insert(newTargetData.targetId, newTargetData);\r\n        return localStoreImpl.targetCache\r\n            .updateTargetData(transaction, newTargetData)\r\n            .next(() => localStoreImpl.targetCache.removeMatchingKeysForTargetId(transaction, allocated.targetId))\r\n            .next(() => localStoreImpl.targetCache.addMatchingKeys(transaction, documents, allocated.targetId))\r\n            .next(() => localStoreImpl.bundleCache.saveNamedQuery(transaction, query));\r\n    });\r\n}\r\nasync function localStoreConfigureFieldIndexes(localStore, newFieldIndexes) {\r\n    const localStoreImpl = debugCast(localStore);\r\n    const indexManager = localStoreImpl.indexManager;\r\n    const promises = [];\r\n    return localStoreImpl.persistence.runTransaction('Configure indexes', 'readwrite', transaction => indexManager\r\n        .getFieldIndexes(transaction)\r\n        .next(oldFieldIndexes => diffArrays(oldFieldIndexes, newFieldIndexes, fieldIndexSemanticComparator, fieldIndex => {\r\n        promises.push(indexManager.addFieldIndex(transaction, fieldIndex));\r\n    }, fieldIndex => {\r\n        promises.push(indexManager.deleteFieldIndex(transaction, fieldIndex));\r\n    }))\r\n        .next(() => PersistencePromise.waitFor(promises)));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The Firestore query engine.\r\n *\r\n * Firestore queries can be executed in three modes. The Query Engine determines\r\n * what mode to use based on what data is persisted. The mode only determines\r\n * the runtime complexity of the query - the result set is equivalent across all\r\n * implementations.\r\n *\r\n * The Query engine will use indexed-based execution if a user has configured\r\n * any index that can be used to execute query (via `setIndexConfiguration()`).\r\n * Otherwise, the engine will try to optimize the query by re-using a previously\r\n * persisted query result. If that is not possible, the query will be executed\r\n * via a full collection scan.\r\n *\r\n * Index-based execution is the default when available. The query engine\r\n * supports partial indexed execution and merges the result from the index\r\n * lookup with documents that have not yet been indexed. The index evaluation\r\n * matches the backend's format and as such, the SDK can use indexing for all\r\n * queries that the backend supports.\r\n *\r\n * If no index exists, the query engine tries to take advantage of the target\r\n * document mapping in the TargetCache. These mappings exists for all queries\r\n * that have been synced with the backend at least once and allow the query\r\n * engine to only read documents that previously matched a query plus any\r\n * documents that were edited after the query was last listened to.\r\n *\r\n * There are some cases when this optimization is not guaranteed to produce\r\n * the same results as full collection scans. In these cases, query\r\n * processing falls back to full scans. These cases are:\r\n *\r\n * - Limit queries where a document that matched the query previously no longer\r\n *   matches the query.\r\n *\r\n * - Limit queries where a document edit may cause the document to sort below\r\n *   another document that is in the local cache.\r\n *\r\n * - Queries that have never been CURRENT or free of limbo documents.\r\n */\r\nclass QueryEngine {\r\n    constructor() {\r\n        this.initialized = false;\r\n    }\r\n    /** Sets the document view to query against. */\r\n    initialize(localDocuments, indexManager) {\r\n        this.localDocumentsView = localDocuments;\r\n        this.indexManager = indexManager;\r\n        this.initialized = true;\r\n    }\r\n    /** Returns all local documents matching the specified query. */\r\n    getDocumentsMatchingQuery(transaction, query, lastLimboFreeSnapshotVersion, remoteKeys) {\r\n        return this.performQueryUsingIndex(transaction, query)\r\n            .next(result => result\r\n            ? result\r\n            : this.performQueryUsingRemoteKeys(transaction, query, remoteKeys, lastLimboFreeSnapshotVersion))\r\n            .next(result => result ? result : this.executeFullCollectionScan(transaction, query));\r\n    }\r\n    /**\r\n     * Performs an indexed query that evaluates the query based on a collection's\r\n     * persisted index values. Returns `null` if an index is not available.\r\n     */\r\n    performQueryUsingIndex(transaction, query) {\r\n        if (queryMatchesAllDocuments(query)) {\r\n            // Queries that match all documents don't benefit from using\r\n            // key-based lookups. It is more efficient to scan all documents in a\r\n            // collection, rather than to perform individual lookups.\r\n            return PersistencePromise.resolve(null);\r\n        }\r\n        let target = queryToTarget(query);\r\n        return this.indexManager\r\n            .getIndexType(transaction, target)\r\n            .next(indexType => {\r\n            if (indexType === 0 /* IndexType.NONE */) {\r\n                // The target cannot be served from any index.\r\n                return null;\r\n            }\r\n            if (query.limit !== null && indexType === 1 /* IndexType.PARTIAL */) {\r\n                // We cannot apply a limit for targets that are served using a partial\r\n                // index. If a partial index will be used to serve the target, the\r\n                // query may return a superset of documents that match the target\r\n                // (e.g. if the index doesn't include all the target's filters), or\r\n                // may return the correct set of documents in the wrong order (e.g. if\r\n                // the index doesn't include a segment for one of the orderBys).\r\n                // Therefore, a limit should not be applied in such cases.\r\n                query = queryWithLimit(query, null, \"F\" /* LimitType.First */);\r\n                target = queryToTarget(query);\r\n            }\r\n            return this.indexManager\r\n                .getDocumentsMatchingTarget(transaction, target)\r\n                .next(keys => {\r\n                const sortedKeys = documentKeySet(...keys);\r\n                return this.localDocumentsView\r\n                    .getDocuments(transaction, sortedKeys)\r\n                    .next(indexedDocuments => {\r\n                    return this.indexManager\r\n                        .getMinOffset(transaction, target)\r\n                        .next(offset => {\r\n                        const previousResults = this.applyQuery(query, indexedDocuments);\r\n                        if (this.needsRefill(query, previousResults, sortedKeys, offset.readTime)) {\r\n                            // A limit query whose boundaries change due to local\r\n                            // edits can be re-run against the cache by excluding the\r\n                            // limit. This ensures that all documents that match the\r\n                            // query's filters are included in the result set. The SDK\r\n                            // can then apply the limit once all local edits are\r\n                            // incorporated.\r\n                            return this.performQueryUsingIndex(transaction, queryWithLimit(query, null, \"F\" /* LimitType.First */));\r\n                        }\r\n                        return this.appendRemainingResults(transaction, previousResults, query, offset);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Performs a query based on the target's persisted query mapping. Returns\r\n     * `null` if the mapping is not available or cannot be used.\r\n     */\r\n    performQueryUsingRemoteKeys(transaction, query, remoteKeys, lastLimboFreeSnapshotVersion) {\r\n        if (queryMatchesAllDocuments(query)) {\r\n            // Queries that match all documents don't benefit from using\r\n            // key-based lookups. It is more efficient to scan all documents in a\r\n            // collection, rather than to perform individual lookups.\r\n            return this.executeFullCollectionScan(transaction, query);\r\n        }\r\n        // Queries that have never seen a snapshot without limbo free documents\r\n        // should also be run as a full collection scan.\r\n        if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.min())) {\r\n            return this.executeFullCollectionScan(transaction, query);\r\n        }\r\n        return this.localDocumentsView.getDocuments(transaction, remoteKeys).next(documents => {\r\n            const previousResults = this.applyQuery(query, documents);\r\n            if (this.needsRefill(query, previousResults, remoteKeys, lastLimboFreeSnapshotVersion)) {\r\n                return this.executeFullCollectionScan(transaction, query);\r\n            }\r\n            if (getLogLevel() <= LogLevel.DEBUG) {\r\n                logDebug('QueryEngine', 'Re-using previous result from %s to execute query: %s', lastLimboFreeSnapshotVersion.toString(), stringifyQuery(query));\r\n            }\r\n            // Retrieve all results for documents that were updated since the last\r\n            // limbo-document free remote snapshot.\r\n            return this.appendRemainingResults(transaction, previousResults, query, newIndexOffsetSuccessorFromReadTime(lastLimboFreeSnapshotVersion, INITIAL_LARGEST_BATCH_ID));\r\n        });\r\n    }\r\n    /** Applies the query filter and sorting to the provided documents.  */\r\n    applyQuery(query, documents) {\r\n        // Sort the documents and re-apply the query filter since previously\r\n        // matching documents do not necessarily still match the query.\r\n        let queryResults = new SortedSet(newQueryComparator(query));\r\n        documents.forEach((_, maybeDoc) => {\r\n            if (queryMatches(query, maybeDoc)) {\r\n                queryResults = queryResults.add(maybeDoc);\r\n            }\r\n        });\r\n        return queryResults;\r\n    }\r\n    /**\r\n     * Determines if a limit query needs to be refilled from cache, making it\r\n     * ineligible for index-free execution.\r\n     *\r\n     * @param query - The query.\r\n     * @param sortedPreviousResults - The documents that matched the query when it\r\n     * was last synchronized, sorted by the query's comparator.\r\n     * @param remoteKeys - The document keys that matched the query at the last\r\n     * snapshot.\r\n     * @param limboFreeSnapshotVersion - The version of the snapshot when the\r\n     * query was last synchronized.\r\n     */\r\n    needsRefill(query, sortedPreviousResults, remoteKeys, limboFreeSnapshotVersion) {\r\n        if (query.limit === null) {\r\n            // Queries without limits do not need to be refilled.\r\n            return false;\r\n        }\r\n        if (remoteKeys.size !== sortedPreviousResults.size) {\r\n            // The query needs to be refilled if a previously matching document no\r\n            // longer matches.\r\n            return true;\r\n        }\r\n        // Limit queries are not eligible for index-free query execution if there is\r\n        // a potential that an older document from cache now sorts before a document\r\n        // that was previously part of the limit. This, however, can only happen if\r\n        // the document at the edge of the limit goes out of limit.\r\n        // If a document that is not the limit boundary sorts differently,\r\n        // the boundary of the limit itself did not change and documents from cache\r\n        // will continue to be \"rejected\" by this boundary. Therefore, we can ignore\r\n        // any modifications that don't affect the last document.\r\n        const docAtLimitEdge = query.limitType === \"F\" /* LimitType.First */\r\n            ? sortedPreviousResults.last()\r\n            : sortedPreviousResults.first();\r\n        if (!docAtLimitEdge) {\r\n            // We don't need to refill the query if there were already no documents.\r\n            return false;\r\n        }\r\n        return (docAtLimitEdge.hasPendingWrites ||\r\n            docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0);\r\n    }\r\n    executeFullCollectionScan(transaction, query) {\r\n        if (getLogLevel() <= LogLevel.DEBUG) {\r\n            logDebug('QueryEngine', 'Using full collection scan to execute query:', stringifyQuery(query));\r\n        }\r\n        return this.localDocumentsView.getDocumentsMatchingQuery(transaction, query, IndexOffset.min());\r\n    }\r\n    /**\r\n     * Combines the results from an indexed execution with the remaining documents\r\n     * that have not yet been indexed.\r\n     */\r\n    appendRemainingResults(transaction, indexedResults, query, offset) {\r\n        // Retrieve all results for documents that were updated since the offset.\r\n        return this.localDocumentsView\r\n            .getDocumentsMatchingQuery(transaction, query, offset)\r\n            .next(remainingResults => {\r\n            // Merge with existing results\r\n            indexedResults.forEach(d => {\r\n                remainingResults = remainingResults.insert(d.key, d);\r\n            });\r\n            return remainingResults;\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// The format of the LocalStorage key that stores the client state is:\r\n//     firestore_clients_<persistence_prefix>_<instance_key>\r\nconst CLIENT_STATE_KEY_PREFIX = 'firestore_clients';\r\n/** Assembles the key for a client state in WebStorage */\r\nfunction createWebStorageClientStateKey(persistenceKey, clientId) {\r\n    return `${CLIENT_STATE_KEY_PREFIX}_${persistenceKey}_${clientId}`;\r\n}\r\n// The format of the WebStorage key that stores the mutation state is:\r\n//     firestore_mutations_<persistence_prefix>_<batch_id>\r\n//     (for unauthenticated users)\r\n// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>\r\n//\r\n// 'user_uid' is last to avoid needing to escape '_' characters that it might\r\n// contain.\r\nconst MUTATION_BATCH_KEY_PREFIX = 'firestore_mutations';\r\n/** Assembles the key for a mutation batch in WebStorage */\r\nfunction createWebStorageMutationBatchKey(persistenceKey, user, batchId) {\r\n    let mutationKey = `${MUTATION_BATCH_KEY_PREFIX}_${persistenceKey}_${batchId}`;\r\n    if (user.isAuthenticated()) {\r\n        mutationKey += `_${user.uid}`;\r\n    }\r\n    return mutationKey;\r\n}\r\n// The format of the WebStorage key that stores a query target's metadata is:\r\n//     firestore_targets_<persistence_prefix>_<target_id>\r\nconst QUERY_TARGET_KEY_PREFIX = 'firestore_targets';\r\n/** Assembles the key for a query state in WebStorage */\r\nfunction createWebStorageQueryTargetMetadataKey(persistenceKey, targetId) {\r\n    return `${QUERY_TARGET_KEY_PREFIX}_${persistenceKey}_${targetId}`;\r\n}\r\n// The WebStorage prefix that stores the primary tab's online state. The\r\n// format of the key is:\r\n//     firestore_online_state_<persistence_prefix>\r\nconst ONLINE_STATE_KEY_PREFIX = 'firestore_online_state';\r\n/** Assembles the key for the online state of the primary tab. */\r\nfunction createWebStorageOnlineStateKey(persistenceKey) {\r\n    return `${ONLINE_STATE_KEY_PREFIX}_${persistenceKey}`;\r\n}\r\n// The WebStorage prefix that plays as a event to indicate the remote documents\r\n// might have changed due to some secondary tabs loading a bundle.\r\n// format of the key is:\r\n//     firestore_bundle_loaded_v2_<persistenceKey>\r\n// The version ending with \"v2\" stores the list of modified collection groups.\r\nconst BUNDLE_LOADED_KEY_PREFIX = 'firestore_bundle_loaded_v2';\r\nfunction createBundleLoadedKey(persistenceKey) {\r\n    return `${BUNDLE_LOADED_KEY_PREFIX}_${persistenceKey}`;\r\n}\r\n// The WebStorage key prefix for the key that stores the last sequence number allocated. The key\r\n// looks like 'firestore_sequence_number_<persistence_prefix>'.\r\nconst SEQUENCE_NUMBER_KEY_PREFIX = 'firestore_sequence_number';\r\n/** Assembles the key for the current sequence number. */\r\nfunction createWebStorageSequenceNumberKey(persistenceKey) {\r\n    return `${SEQUENCE_NUMBER_KEY_PREFIX}_${persistenceKey}`;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$a = 'SharedClientState';\r\n/**\r\n * Holds the state of a mutation batch, including its user ID, batch ID and\r\n * whether the batch is 'pending', 'acknowledged' or 'rejected'.\r\n */\r\n// Visible for testing\r\nclass MutationMetadata {\r\n    constructor(user, batchId, state, error) {\r\n        this.user = user;\r\n        this.batchId = batchId;\r\n        this.state = state;\r\n        this.error = error;\r\n    }\r\n    /**\r\n     * Parses a MutationMetadata from its JSON representation in WebStorage.\r\n     * Logs a warning and returns null if the format of the data is not valid.\r\n     */\r\n    static fromWebStorageEntry(user, batchId, value) {\r\n        const mutationBatch = JSON.parse(value);\r\n        let validData = typeof mutationBatch === 'object' &&\r\n            ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !==\r\n                -1 &&\r\n            (mutationBatch.error === undefined ||\r\n                typeof mutationBatch.error === 'object');\r\n        let firestoreError = undefined;\r\n        if (validData && mutationBatch.error) {\r\n            validData =\r\n                typeof mutationBatch.error.message === 'string' &&\r\n                    typeof mutationBatch.error.code === 'string';\r\n            if (validData) {\r\n                firestoreError = new FirestoreError(mutationBatch.error.code, mutationBatch.error.message);\r\n            }\r\n        }\r\n        if (validData) {\r\n            return new MutationMetadata(user, batchId, mutationBatch.state, firestoreError);\r\n        }\r\n        else {\r\n            logError(LOG_TAG$a, `Failed to parse mutation state for ID '${batchId}': ${value}`);\r\n            return null;\r\n        }\r\n    }\r\n    toWebStorageJSON() {\r\n        const batchMetadata = {\r\n            state: this.state,\r\n            updateTimeMs: Date.now() // Modify the existing value to trigger update.\r\n        };\r\n        if (this.error) {\r\n            batchMetadata.error = {\r\n                code: this.error.code,\r\n                message: this.error.message\r\n            };\r\n        }\r\n        return JSON.stringify(batchMetadata);\r\n    }\r\n}\r\n/**\r\n * Holds the state of a query target, including its target ID and whether the\r\n * target is 'not-current', 'current' or 'rejected'.\r\n */\r\n// Visible for testing\r\nclass QueryTargetMetadata {\r\n    constructor(targetId, state, error) {\r\n        this.targetId = targetId;\r\n        this.state = state;\r\n        this.error = error;\r\n    }\r\n    /**\r\n     * Parses a QueryTargetMetadata from its JSON representation in WebStorage.\r\n     * Logs a warning and returns null if the format of the data is not valid.\r\n     */\r\n    static fromWebStorageEntry(targetId, value) {\r\n        const targetState = JSON.parse(value);\r\n        let validData = typeof targetState === 'object' &&\r\n            ['not-current', 'current', 'rejected'].indexOf(targetState.state) !==\r\n                -1 &&\r\n            (targetState.error === undefined ||\r\n                typeof targetState.error === 'object');\r\n        let firestoreError = undefined;\r\n        if (validData && targetState.error) {\r\n            validData =\r\n                typeof targetState.error.message === 'string' &&\r\n                    typeof targetState.error.code === 'string';\r\n            if (validData) {\r\n                firestoreError = new FirestoreError(targetState.error.code, targetState.error.message);\r\n            }\r\n        }\r\n        if (validData) {\r\n            return new QueryTargetMetadata(targetId, targetState.state, firestoreError);\r\n        }\r\n        else {\r\n            logError(LOG_TAG$a, `Failed to parse target state for ID '${targetId}': ${value}`);\r\n            return null;\r\n        }\r\n    }\r\n    toWebStorageJSON() {\r\n        const targetState = {\r\n            state: this.state,\r\n            updateTimeMs: Date.now() // Modify the existing value to trigger update.\r\n        };\r\n        if (this.error) {\r\n            targetState.error = {\r\n                code: this.error.code,\r\n                message: this.error.message\r\n            };\r\n        }\r\n        return JSON.stringify(targetState);\r\n    }\r\n}\r\n/**\r\n * This class represents the immutable ClientState for a client read from\r\n * WebStorage, containing the list of active query targets.\r\n */\r\nclass RemoteClientState {\r\n    constructor(clientId, activeTargetIds) {\r\n        this.clientId = clientId;\r\n        this.activeTargetIds = activeTargetIds;\r\n    }\r\n    /**\r\n     * Parses a RemoteClientState from the JSON representation in WebStorage.\r\n     * Logs a warning and returns null if the format of the data is not valid.\r\n     */\r\n    static fromWebStorageEntry(clientId, value) {\r\n        const clientState = JSON.parse(value);\r\n        let validData = typeof clientState === 'object' &&\r\n            clientState.activeTargetIds instanceof Array;\r\n        let activeTargetIdsSet = targetIdSet();\r\n        for (let i = 0; validData && i < clientState.activeTargetIds.length; ++i) {\r\n            validData = isSafeInteger(clientState.activeTargetIds[i]);\r\n            activeTargetIdsSet = activeTargetIdsSet.add(clientState.activeTargetIds[i]);\r\n        }\r\n        if (validData) {\r\n            return new RemoteClientState(clientId, activeTargetIdsSet);\r\n        }\r\n        else {\r\n            logError(LOG_TAG$a, `Failed to parse client data for instance '${clientId}': ${value}`);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * This class represents the online state for all clients participating in\r\n * multi-tab. The online state is only written to by the primary client, and\r\n * used in secondary clients to update their query views.\r\n */\r\nclass SharedOnlineState {\r\n    constructor(clientId, onlineState) {\r\n        this.clientId = clientId;\r\n        this.onlineState = onlineState;\r\n    }\r\n    /**\r\n     * Parses a SharedOnlineState from its JSON representation in WebStorage.\r\n     * Logs a warning and returns null if the format of the data is not valid.\r\n     */\r\n    static fromWebStorageEntry(value) {\r\n        const onlineState = JSON.parse(value);\r\n        const validData = typeof onlineState === 'object' &&\r\n            ['Unknown', 'Online', 'Offline'].indexOf(onlineState.onlineState) !==\r\n                -1 &&\r\n            typeof onlineState.clientId === 'string';\r\n        if (validData) {\r\n            return new SharedOnlineState(onlineState.clientId, onlineState.onlineState);\r\n        }\r\n        else {\r\n            logError(LOG_TAG$a, `Failed to parse online state: ${value}`);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Metadata state of the local client. Unlike `RemoteClientState`, this class is\r\n * mutable and keeps track of all pending mutations, which allows us to\r\n * update the range of pending mutation batch IDs as new mutations are added or\r\n * removed.\r\n *\r\n * The data in `LocalClientState` is not read from WebStorage and instead\r\n * updated via its instance methods. The updated state can be serialized via\r\n * `toWebStorageJSON()`.\r\n */\r\n// Visible for testing.\r\nclass LocalClientState {\r\n    constructor() {\r\n        this.activeTargetIds = targetIdSet();\r\n    }\r\n    addQueryTarget(targetId) {\r\n        this.activeTargetIds = this.activeTargetIds.add(targetId);\r\n    }\r\n    removeQueryTarget(targetId) {\r\n        this.activeTargetIds = this.activeTargetIds.delete(targetId);\r\n    }\r\n    /**\r\n     * Converts this entry into a JSON-encoded format we can use for WebStorage.\r\n     * Does not encode `clientId` as it is part of the key in WebStorage.\r\n     */\r\n    toWebStorageJSON() {\r\n        const data = {\r\n            activeTargetIds: this.activeTargetIds.toArray(),\r\n            updateTimeMs: Date.now() // Modify the existing value to trigger update.\r\n        };\r\n        return JSON.stringify(data);\r\n    }\r\n}\r\n/**\r\n * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the\r\n * backing store for the SharedClientState. It keeps track of all active\r\n * clients and supports modifications of the local client's data.\r\n */\r\nclass WebStorageSharedClientState {\r\n    constructor(window, queue, persistenceKey, localClientId, initialUser) {\r\n        this.window = window;\r\n        this.queue = queue;\r\n        this.persistenceKey = persistenceKey;\r\n        this.localClientId = localClientId;\r\n        this.syncEngine = null;\r\n        this.onlineStateHandler = null;\r\n        this.sequenceNumberHandler = null;\r\n        this.storageListener = this.handleWebStorageEvent.bind(this);\r\n        this.activeClients = new SortedMap(primitiveComparator);\r\n        this.started = false;\r\n        /**\r\n         * Captures WebStorage events that occur before `start()` is called. These\r\n         * events are replayed once `WebStorageSharedClientState` is started.\r\n         */\r\n        this.earlyEvents = [];\r\n        // Escape the special characters mentioned here:\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\r\n        const escapedPersistenceKey = persistenceKey.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n        this.storage = this.window.localStorage;\r\n        this.currentUser = initialUser;\r\n        this.localClientStorageKey = createWebStorageClientStateKey(this.persistenceKey, this.localClientId);\r\n        this.sequenceNumberKey = createWebStorageSequenceNumberKey(this.persistenceKey);\r\n        this.activeClients = this.activeClients.insert(this.localClientId, new LocalClientState());\r\n        this.clientStateKeyRe = new RegExp(`^${CLIENT_STATE_KEY_PREFIX}_${escapedPersistenceKey}_([^_]*)$`);\r\n        this.mutationBatchKeyRe = new RegExp(`^${MUTATION_BATCH_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)(?:_(.*))?$`);\r\n        this.queryTargetKeyRe = new RegExp(`^${QUERY_TARGET_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)$`);\r\n        this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);\r\n        this.bundleLoadedKey = createBundleLoadedKey(this.persistenceKey);\r\n        // Rather than adding the storage observer during start(), we add the\r\n        // storage observer during initialization. This ensures that we collect\r\n        // events before other components populate their initial state (during their\r\n        // respective start() calls). Otherwise, we might for example miss a\r\n        // mutation that is added after LocalStore's start() processed the existing\r\n        // mutations but before we observe WebStorage events.\r\n        this.window.addEventListener('storage', this.storageListener);\r\n    }\r\n    /** Returns 'true' if WebStorage is available in the current environment. */\r\n    static isAvailable(window) {\r\n        return !!(window && window.localStorage);\r\n    }\r\n    async start() {\r\n        // Retrieve the list of existing clients to backfill the data in\r\n        // SharedClientState.\r\n        const existingClients = await this.syncEngine.getActiveClients();\r\n        for (const clientId of existingClients) {\r\n            if (clientId === this.localClientId) {\r\n                continue;\r\n            }\r\n            const storageItem = this.getItem(createWebStorageClientStateKey(this.persistenceKey, clientId));\r\n            if (storageItem) {\r\n                const clientState = RemoteClientState.fromWebStorageEntry(clientId, storageItem);\r\n                if (clientState) {\r\n                    this.activeClients = this.activeClients.insert(clientState.clientId, clientState);\r\n                }\r\n            }\r\n        }\r\n        this.persistClientState();\r\n        // Check if there is an existing online state and call the callback handler\r\n        // if applicable.\r\n        const onlineStateJSON = this.storage.getItem(this.onlineStateKey);\r\n        if (onlineStateJSON) {\r\n            const onlineState = this.fromWebStorageOnlineState(onlineStateJSON);\r\n            if (onlineState) {\r\n                this.handleOnlineStateEvent(onlineState);\r\n            }\r\n        }\r\n        for (const event of this.earlyEvents) {\r\n            this.handleWebStorageEvent(event);\r\n        }\r\n        this.earlyEvents = [];\r\n        // Register a window unload hook to remove the client metadata entry from\r\n        // WebStorage even if `shutdown()` was not called.\r\n        this.window.addEventListener('pagehide', () => this.shutdown());\r\n        this.started = true;\r\n    }\r\n    writeSequenceNumber(sequenceNumber) {\r\n        this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));\r\n    }\r\n    getAllActiveQueryTargets() {\r\n        return this.extractActiveQueryTargets(this.activeClients);\r\n    }\r\n    isActiveQueryTarget(targetId) {\r\n        let found = false;\r\n        this.activeClients.forEach((key, value) => {\r\n            if (value.activeTargetIds.has(targetId)) {\r\n                found = true;\r\n            }\r\n        });\r\n        return found;\r\n    }\r\n    addPendingMutation(batchId) {\r\n        this.persistMutationState(batchId, 'pending');\r\n    }\r\n    updateMutationState(batchId, state, error) {\r\n        this.persistMutationState(batchId, state, error);\r\n        // Once a final mutation result is observed by other clients, they no longer\r\n        // access the mutation's metadata entry. Since WebStorage replays events\r\n        // in order, it is safe to delete the entry right after updating it.\r\n        this.removeMutationState(batchId);\r\n    }\r\n    addLocalQueryTarget(targetId) {\r\n        let queryState = 'not-current';\r\n        // Lookup an existing query state if the target ID was already registered\r\n        // by another tab\r\n        if (this.isActiveQueryTarget(targetId)) {\r\n            const storageItem = this.storage.getItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));\r\n            if (storageItem) {\r\n                const metadata = QueryTargetMetadata.fromWebStorageEntry(targetId, storageItem);\r\n                if (metadata) {\r\n                    queryState = metadata.state;\r\n                }\r\n            }\r\n        }\r\n        this.localClientState.addQueryTarget(targetId);\r\n        this.persistClientState();\r\n        return queryState;\r\n    }\r\n    removeLocalQueryTarget(targetId) {\r\n        this.localClientState.removeQueryTarget(targetId);\r\n        this.persistClientState();\r\n    }\r\n    isLocalQueryTarget(targetId) {\r\n        return this.localClientState.activeTargetIds.has(targetId);\r\n    }\r\n    clearQueryState(targetId) {\r\n        this.removeItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));\r\n    }\r\n    updateQueryState(targetId, state, error) {\r\n        this.persistQueryTargetState(targetId, state, error);\r\n    }\r\n    handleUserChange(user, removedBatchIds, addedBatchIds) {\r\n        removedBatchIds.forEach(batchId => {\r\n            this.removeMutationState(batchId);\r\n        });\r\n        this.currentUser = user;\r\n        addedBatchIds.forEach(batchId => {\r\n            this.addPendingMutation(batchId);\r\n        });\r\n    }\r\n    setOnlineState(onlineState) {\r\n        this.persistOnlineState(onlineState);\r\n    }\r\n    notifyBundleLoaded(collectionGroups) {\r\n        this.persistBundleLoadedState(collectionGroups);\r\n    }\r\n    shutdown() {\r\n        if (this.started) {\r\n            this.window.removeEventListener('storage', this.storageListener);\r\n            this.removeItem(this.localClientStorageKey);\r\n            this.started = false;\r\n        }\r\n    }\r\n    getItem(key) {\r\n        const value = this.storage.getItem(key);\r\n        logDebug(LOG_TAG$a, 'READ', key, value);\r\n        return value;\r\n    }\r\n    setItem(key, value) {\r\n        logDebug(LOG_TAG$a, 'SET', key, value);\r\n        this.storage.setItem(key, value);\r\n    }\r\n    removeItem(key) {\r\n        logDebug(LOG_TAG$a, 'REMOVE', key);\r\n        this.storage.removeItem(key);\r\n    }\r\n    handleWebStorageEvent(event) {\r\n        // Note: The function is typed to take Event to be interface-compatible with\r\n        // `Window.addEventListener`.\r\n        const storageEvent = event;\r\n        if (storageEvent.storageArea === this.storage) {\r\n            logDebug(LOG_TAG$a, 'EVENT', storageEvent.key, storageEvent.newValue);\r\n            if (storageEvent.key === this.localClientStorageKey) {\r\n                logError('Received WebStorage notification for local change. Another client might have ' +\r\n                    'garbage-collected our state');\r\n                return;\r\n            }\r\n            this.queue.enqueueRetryable(async () => {\r\n                if (!this.started) {\r\n                    this.earlyEvents.push(storageEvent);\r\n                    return;\r\n                }\r\n                if (storageEvent.key === null) {\r\n                    return;\r\n                }\r\n                if (this.clientStateKeyRe.test(storageEvent.key)) {\r\n                    if (storageEvent.newValue != null) {\r\n                        const clientState = this.fromWebStorageClientState(storageEvent.key, storageEvent.newValue);\r\n                        if (clientState) {\r\n                            return this.handleClientStateEvent(clientState.clientId, clientState);\r\n                        }\r\n                    }\r\n                    else {\r\n                        const clientId = this.fromWebStorageClientStateKey(storageEvent.key);\r\n                        return this.handleClientStateEvent(clientId, null);\r\n                    }\r\n                }\r\n                else if (this.mutationBatchKeyRe.test(storageEvent.key)) {\r\n                    if (storageEvent.newValue !== null) {\r\n                        const mutationMetadata = this.fromWebStorageMutationMetadata(storageEvent.key, storageEvent.newValue);\r\n                        if (mutationMetadata) {\r\n                            return this.handleMutationBatchEvent(mutationMetadata);\r\n                        }\r\n                    }\r\n                }\r\n                else if (this.queryTargetKeyRe.test(storageEvent.key)) {\r\n                    if (storageEvent.newValue !== null) {\r\n                        const queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(storageEvent.key, storageEvent.newValue);\r\n                        if (queryTargetMetadata) {\r\n                            return this.handleQueryTargetEvent(queryTargetMetadata);\r\n                        }\r\n                    }\r\n                }\r\n                else if (storageEvent.key === this.onlineStateKey) {\r\n                    if (storageEvent.newValue !== null) {\r\n                        const onlineState = this.fromWebStorageOnlineState(storageEvent.newValue);\r\n                        if (onlineState) {\r\n                            return this.handleOnlineStateEvent(onlineState);\r\n                        }\r\n                    }\r\n                }\r\n                else if (storageEvent.key === this.sequenceNumberKey) {\r\n                    const sequenceNumber = fromWebStorageSequenceNumber(storageEvent.newValue);\r\n                    if (sequenceNumber !== ListenSequence.INVALID) {\r\n                        this.sequenceNumberHandler(sequenceNumber);\r\n                    }\r\n                }\r\n                else if (storageEvent.key === this.bundleLoadedKey) {\r\n                    const collectionGroups = this.fromWebStoreBundleLoadedState(storageEvent.newValue);\r\n                    await Promise.all(collectionGroups.map(cg => this.syncEngine.synchronizeWithChangedDocuments(cg)));\r\n                }\r\n            });\r\n        }\r\n    }\r\n    get localClientState() {\r\n        return this.activeClients.get(this.localClientId);\r\n    }\r\n    persistClientState() {\r\n        this.setItem(this.localClientStorageKey, this.localClientState.toWebStorageJSON());\r\n    }\r\n    persistMutationState(batchId, state, error) {\r\n        const mutationState = new MutationMetadata(this.currentUser, batchId, state, error);\r\n        const mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);\r\n        this.setItem(mutationKey, mutationState.toWebStorageJSON());\r\n    }\r\n    removeMutationState(batchId) {\r\n        const mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);\r\n        this.removeItem(mutationKey);\r\n    }\r\n    persistOnlineState(onlineState) {\r\n        const entry = {\r\n            clientId: this.localClientId,\r\n            onlineState\r\n        };\r\n        this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));\r\n    }\r\n    persistQueryTargetState(targetId, state, error) {\r\n        const targetKey = createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId);\r\n        const targetMetadata = new QueryTargetMetadata(targetId, state, error);\r\n        this.setItem(targetKey, targetMetadata.toWebStorageJSON());\r\n    }\r\n    persistBundleLoadedState(collectionGroups) {\r\n        const json = JSON.stringify(Array.from(collectionGroups));\r\n        this.setItem(this.bundleLoadedKey, json);\r\n    }\r\n    /**\r\n     * Parses a client state key in WebStorage. Returns null if the key does not\r\n     * match the expected key format.\r\n     */\r\n    fromWebStorageClientStateKey(key) {\r\n        const match = this.clientStateKeyRe.exec(key);\r\n        return match ? match[1] : null;\r\n    }\r\n    /**\r\n     * Parses a client state in WebStorage. Returns 'null' if the value could not\r\n     * be parsed.\r\n     */\r\n    fromWebStorageClientState(key, value) {\r\n        const clientId = this.fromWebStorageClientStateKey(key);\r\n        return RemoteClientState.fromWebStorageEntry(clientId, value);\r\n    }\r\n    /**\r\n     * Parses a mutation batch state in WebStorage. Returns 'null' if the value\r\n     * could not be parsed.\r\n     */\r\n    fromWebStorageMutationMetadata(key, value) {\r\n        const match = this.mutationBatchKeyRe.exec(key);\r\n        const batchId = Number(match[1]);\r\n        const userId = match[2] !== undefined ? match[2] : null;\r\n        return MutationMetadata.fromWebStorageEntry(new User(userId), batchId, value);\r\n    }\r\n    /**\r\n     * Parses a query target state from WebStorage. Returns 'null' if the value\r\n     * could not be parsed.\r\n     */\r\n    fromWebStorageQueryTargetMetadata(key, value) {\r\n        const match = this.queryTargetKeyRe.exec(key);\r\n        const targetId = Number(match[1]);\r\n        return QueryTargetMetadata.fromWebStorageEntry(targetId, value);\r\n    }\r\n    /**\r\n     * Parses an online state from WebStorage. Returns 'null' if the value\r\n     * could not be parsed.\r\n     */\r\n    fromWebStorageOnlineState(value) {\r\n        return SharedOnlineState.fromWebStorageEntry(value);\r\n    }\r\n    fromWebStoreBundleLoadedState(value) {\r\n        return JSON.parse(value);\r\n    }\r\n    async handleMutationBatchEvent(mutationBatch) {\r\n        if (mutationBatch.user.uid !== this.currentUser.uid) {\r\n            logDebug(LOG_TAG$a, `Ignoring mutation for non-active user ${mutationBatch.user.uid}`);\r\n            return;\r\n        }\r\n        return this.syncEngine.applyBatchState(mutationBatch.batchId, mutationBatch.state, mutationBatch.error);\r\n    }\r\n    handleQueryTargetEvent(targetMetadata) {\r\n        return this.syncEngine.applyTargetState(targetMetadata.targetId, targetMetadata.state, targetMetadata.error);\r\n    }\r\n    handleClientStateEvent(clientId, clientState) {\r\n        const updatedClients = clientState\r\n            ? this.activeClients.insert(clientId, clientState)\r\n            : this.activeClients.remove(clientId);\r\n        const existingTargets = this.extractActiveQueryTargets(this.activeClients);\r\n        const newTargets = this.extractActiveQueryTargets(updatedClients);\r\n        const addedTargets = [];\r\n        const removedTargets = [];\r\n        newTargets.forEach(targetId => {\r\n            if (!existingTargets.has(targetId)) {\r\n                addedTargets.push(targetId);\r\n            }\r\n        });\r\n        existingTargets.forEach(targetId => {\r\n            if (!newTargets.has(targetId)) {\r\n                removedTargets.push(targetId);\r\n            }\r\n        });\r\n        return this.syncEngine.applyActiveTargetsChange(addedTargets, removedTargets).then(() => {\r\n            this.activeClients = updatedClients;\r\n        });\r\n    }\r\n    handleOnlineStateEvent(onlineState) {\r\n        // We check whether the client that wrote this online state is still active\r\n        // by comparing its client ID to the list of clients kept active in\r\n        // IndexedDb. If a client does not update their IndexedDb client state\r\n        // within 5 seconds, it is considered inactive and we don't emit an online\r\n        // state event.\r\n        if (this.activeClients.get(onlineState.clientId)) {\r\n            this.onlineStateHandler(onlineState.onlineState);\r\n        }\r\n    }\r\n    extractActiveQueryTargets(clients) {\r\n        let activeTargets = targetIdSet();\r\n        clients.forEach((kev, value) => {\r\n            activeTargets = activeTargets.unionWith(value.activeTargetIds);\r\n        });\r\n        return activeTargets;\r\n    }\r\n}\r\nfunction fromWebStorageSequenceNumber(seqString) {\r\n    let sequenceNumber = ListenSequence.INVALID;\r\n    if (seqString != null) {\r\n        try {\r\n            const parsed = JSON.parse(seqString);\r\n            hardAssert(typeof parsed === 'number');\r\n            sequenceNumber = parsed;\r\n        }\r\n        catch (e) {\r\n            logError(LOG_TAG$a, 'Failed to read sequence number from WebStorage', e);\r\n        }\r\n    }\r\n    return sequenceNumber;\r\n}\r\n/**\r\n * `MemorySharedClientState` is a simple implementation of SharedClientState for\r\n * clients using memory persistence. The state in this class remains fully\r\n * isolated and no synchronization is performed.\r\n */\r\nclass MemorySharedClientState {\r\n    constructor() {\r\n        this.localState = new LocalClientState();\r\n        this.queryState = {};\r\n        this.onlineStateHandler = null;\r\n        this.sequenceNumberHandler = null;\r\n    }\r\n    addPendingMutation(batchId) {\r\n        // No op.\r\n    }\r\n    updateMutationState(batchId, state, error) {\r\n        // No op.\r\n    }\r\n    addLocalQueryTarget(targetId) {\r\n        this.localState.addQueryTarget(targetId);\r\n        return this.queryState[targetId] || 'not-current';\r\n    }\r\n    updateQueryState(targetId, state, error) {\r\n        this.queryState[targetId] = state;\r\n    }\r\n    removeLocalQueryTarget(targetId) {\r\n        this.localState.removeQueryTarget(targetId);\r\n    }\r\n    isLocalQueryTarget(targetId) {\r\n        return this.localState.activeTargetIds.has(targetId);\r\n    }\r\n    clearQueryState(targetId) {\r\n        delete this.queryState[targetId];\r\n    }\r\n    getAllActiveQueryTargets() {\r\n        return this.localState.activeTargetIds;\r\n    }\r\n    isActiveQueryTarget(targetId) {\r\n        return this.localState.activeTargetIds.has(targetId);\r\n    }\r\n    start() {\r\n        this.localState = new LocalClientState();\r\n        return Promise.resolve();\r\n    }\r\n    handleUserChange(user, removedBatchIds, addedBatchIds) {\r\n        // No op.\r\n    }\r\n    setOnlineState(onlineState) {\r\n        // No op.\r\n    }\r\n    shutdown() { }\r\n    writeSequenceNumber(sequenceNumber) { }\r\n    notifyBundleLoaded(collectionGroups) {\r\n        // No op.\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NoopConnectivityMonitor {\r\n    addCallback(callback) {\r\n        // No-op.\r\n    }\r\n    shutdown() {\r\n        // No-op.\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides a simple helper class that implements the Stream interface to\r\n * bridge to other implementations that are streams but do not implement the\r\n * interface. The stream callbacks are invoked with the callOn... methods.\r\n */\r\nclass StreamBridge {\r\n    constructor(args) {\r\n        this.sendFn = args.sendFn;\r\n        this.closeFn = args.closeFn;\r\n    }\r\n    onOpen(callback) {\r\n        this.wrappedOnOpen = callback;\r\n    }\r\n    onClose(callback) {\r\n        this.wrappedOnClose = callback;\r\n    }\r\n    onMessage(callback) {\r\n        this.wrappedOnMessage = callback;\r\n    }\r\n    close() {\r\n        this.closeFn();\r\n    }\r\n    send(msg) {\r\n        this.sendFn(msg);\r\n    }\r\n    callOnOpen() {\r\n        this.wrappedOnOpen();\r\n    }\r\n    callOnClose(err) {\r\n        this.wrappedOnClose(err);\r\n    }\r\n    callOnMessage(msg) {\r\n        this.wrappedOnMessage(msg);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The value returned from the most recent invocation of\r\n * `generateUniqueDebugId()`, or null if it has never been invoked.\r\n */\r\nlet lastUniqueDebugId = null;\r\n/**\r\n * Generates and returns an initial value for `lastUniqueDebugId`.\r\n *\r\n * The returned value is randomly selected from a range of integers that are\r\n * represented as 8 hexadecimal digits. This means that (within reason) any\r\n * numbers generated by incrementing the returned number by 1 will also be\r\n * represented by 8 hexadecimal digits. This leads to all \"IDs\" having the same\r\n * length when converted to a hexadecimal string, making reading logs containing\r\n * these IDs easier to follow. And since the return value is randomly selected\r\n * it will help to differentiate between logs from different executions.\r\n */\r\nfunction generateInitialUniqueDebugId() {\r\n    const minResult = 0x10000000;\r\n    const maxResult = 0x90000000;\r\n    const resultRange = maxResult - minResult;\r\n    const resultOffset = Math.round(resultRange * Math.random());\r\n    return minResult + resultOffset;\r\n}\r\n/**\r\n * Generates and returns a unique ID as a hexadecimal string.\r\n *\r\n * The returned ID is intended to be used in debug logging messages to help\r\n * correlate log messages that may be spatially separated in the logs, but\r\n * logically related. For example, a network connection could include the same\r\n * \"debug ID\" string in all of its log messages to help trace a specific\r\n * connection over time.\r\n *\r\n * @return the 10-character generated ID (e.g. \"0xa1b2c3d4\").\r\n */\r\nfunction generateUniqueDebugId() {\r\n    if (lastUniqueDebugId === null) {\r\n        lastUniqueDebugId = generateInitialUniqueDebugId();\r\n    }\r\n    else {\r\n        lastUniqueDebugId++;\r\n    }\r\n    return '0x' + lastUniqueDebugId.toString(16);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*\r\n * Utilities for dealing with node.js-style APIs. See nodePromise for more\r\n * details.\r\n */\r\n/**\r\n * Creates a node-style callback that resolves or rejects a new Promise. The\r\n * callback is passed to the given action which can then use the callback as\r\n * a parameter to a node-style function.\r\n *\r\n * The intent is to directly bridge a node-style function (which takes a\r\n * callback) into a Promise without manually converting between the node-style\r\n * callback and the promise at each call.\r\n *\r\n * In effect it allows you to convert:\r\n *\r\n * @example\r\n * new Promise((resolve: (value?: fs.Stats) => void,\r\n *              reject: (error?: any) => void) => {\r\n *   fs.stat(path, (error?: any, stat?: fs.Stats) => {\r\n *     if (error) {\r\n *       reject(error);\r\n *     } else {\r\n *       resolve(stat);\r\n *     }\r\n *   });\r\n * });\r\n *\r\n * Into\r\n * @example\r\n * nodePromise((callback: NodeCallback<fs.Stats>) => {\r\n *   fs.stat(path, callback);\r\n * });\r\n *\r\n * @param action - a function that takes a node-style callback as an argument\r\n *     and then uses that callback to invoke some node-style API.\r\n * @returns a new Promise which will be rejected if the callback is given the\r\n *     first Error parameter or will resolve to the value given otherwise.\r\n */\r\nfunction nodePromise(action) {\r\n    return new Promise((resolve, reject) => {\r\n        action((error, value) => {\r\n            if (error) {\r\n                reject(error);\r\n            }\r\n            else {\r\n                resolve(value);\r\n            }\r\n        });\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: Fetch runtime version from grpc-js/package.json instead\r\n// when there's a cleaner way to dynamic require JSON in both Node ESM and CJS\r\nconst grpcVersion = '1.7.3';\r\nconst LOG_TAG$9 = 'GrpcConnection';\r\nconst X_GOOG_API_CLIENT_VALUE = `gl-node/${process.versions.node} fire/${SDK_VERSION} grpc/${grpcVersion}`;\r\nfunction createMetadata(databasePath, authToken, appCheckToken, appId) {\r\n    hardAssert(authToken === null || authToken.type === 'OAuth');\r\n    const metadata = new grpc.Metadata();\r\n    if (authToken) {\r\n        authToken.headers.forEach((value, key) => metadata.set(key, value));\r\n    }\r\n    if (appCheckToken) {\r\n        appCheckToken.headers.forEach((value, key) => metadata.set(key, value));\r\n    }\r\n    if (appId) {\r\n        metadata.set('X-Firebase-GMPID', appId);\r\n    }\r\n    metadata.set('X-Goog-Api-Client', X_GOOG_API_CLIENT_VALUE);\r\n    // These headers are used to improve routing and project isolation by the\r\n    // backend.\r\n    // TODO(b/199767712): We are keeping 'Google-Cloud-Resource-Prefix' until Emulators can be\r\n    // released with cl/428820046. Currently blocked because Emulators are now built with Java\r\n    // 11 from Google3.\r\n    metadata.set('Google-Cloud-Resource-Prefix', databasePath);\r\n    metadata.set('x-goog-request-params', databasePath);\r\n    return metadata;\r\n}\r\n/**\r\n * A Connection implemented by GRPC-Node.\r\n */\r\nclass GrpcConnection {\r\n    constructor(protos, databaseInfo) {\r\n        this.databaseInfo = databaseInfo;\r\n        // We cache stubs for the most-recently-used token.\r\n        this.cachedStub = null;\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        this.firestore = protos['google']['firestore']['v1'];\r\n        this.databasePath = `projects/${databaseInfo.databaseId.projectId}/databases/${databaseInfo.databaseId.database}`;\r\n    }\r\n    get shouldResourcePathBeIncludedInRequest() {\r\n        // Both `invokeRPC()` and `invokeStreamingRPC()` ignore their `path` arguments, and expect\r\n        // the \"path\" to be part of the given `request`.\r\n        return true;\r\n    }\r\n    ensureActiveStub() {\r\n        if (!this.cachedStub) {\r\n            logDebug(LOG_TAG$9, 'Creating Firestore stub.');\r\n            const credentials = this.databaseInfo.ssl\r\n                ? grpc.credentials.createSsl()\r\n                : grpc.credentials.createInsecure();\r\n            this.cachedStub = new this.firestore.Firestore(this.databaseInfo.host, credentials);\r\n        }\r\n        return this.cachedStub;\r\n    }\r\n    invokeRPC(rpcName, path, request, authToken, appCheckToken) {\r\n        const streamId = generateUniqueDebugId();\r\n        const stub = this.ensureActiveStub();\r\n        const metadata = createMetadata(this.databasePath, authToken, appCheckToken, this.databaseInfo.appId);\r\n        const jsonRequest = Object.assign({ database: this.databasePath }, request);\r\n        return nodePromise((callback) => {\r\n            logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} invoked with request:`, request);\r\n            return stub[rpcName](jsonRequest, metadata, (grpcError, value) => {\r\n                if (grpcError) {\r\n                    logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} failed with error:`, grpcError);\r\n                    callback(new FirestoreError(mapCodeFromRpcCode(grpcError.code), grpcError.message));\r\n                }\r\n                else {\r\n                    logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} completed with response:`, value);\r\n                    callback(undefined, value);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    invokeStreamingRPC(rpcName, path, request, authToken, appCheckToken, expectedResponseCount) {\r\n        const streamId = generateUniqueDebugId();\r\n        const results = [];\r\n        const responseDeferred = new Deferred();\r\n        logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} invoked (streaming) with request:`, request);\r\n        const stub = this.ensureActiveStub();\r\n        const metadata = createMetadata(this.databasePath, authToken, appCheckToken, this.databaseInfo.appId);\r\n        const jsonRequest = Object.assign(Object.assign({}, request), { database: this.databasePath });\r\n        const stream = stub[rpcName](jsonRequest, metadata);\r\n        let callbackFired = false;\r\n        stream.on('data', (response) => {\r\n            logDebug(LOG_TAG$9, `RPC ${rpcName} ${streamId} received result:`, response);\r\n            results.push(response);\r\n            if (expectedResponseCount !== undefined &&\r\n                results.length === expectedResponseCount) {\r\n                callbackFired = true;\r\n                responseDeferred.resolve(results);\r\n            }\r\n        });\r\n        stream.on('end', () => {\r\n            logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} completed.`);\r\n            if (!callbackFired) {\r\n                callbackFired = true;\r\n                responseDeferred.resolve(results);\r\n            }\r\n        });\r\n        stream.on('error', (grpcError) => {\r\n            logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} failed with error:`, grpcError);\r\n            const code = mapCodeFromRpcCode(grpcError.code);\r\n            responseDeferred.reject(new FirestoreError(code, grpcError.message));\r\n        });\r\n        return responseDeferred.promise;\r\n    }\r\n    // TODO(mikelehen): This \"method\" is a monster. Should be refactored.\r\n    openStream(rpcName, authToken, appCheckToken) {\r\n        const streamId = generateUniqueDebugId();\r\n        const stub = this.ensureActiveStub();\r\n        const metadata = createMetadata(this.databasePath, authToken, appCheckToken, this.databaseInfo.appId);\r\n        const grpcStream = stub[rpcName](metadata);\r\n        let closed = false;\r\n        const close = (err) => {\r\n            if (!closed) {\r\n                closed = true;\r\n                stream.callOnClose(err);\r\n                grpcStream.end();\r\n            }\r\n        };\r\n        const stream = new StreamBridge({\r\n            sendFn: (msg) => {\r\n                if (!closed) {\r\n                    logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} sending:`, msg);\r\n                    try {\r\n                        grpcStream.write(msg);\r\n                    }\r\n                    catch (e) {\r\n                        // This probably means we didn't conform to the proto.  Make sure to\r\n                        // log the message we sent.\r\n                        logError('Failure sending:', msg);\r\n                        logError('Error:', e);\r\n                        throw e;\r\n                    }\r\n                }\r\n                else {\r\n                    logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} ` +\r\n                        'not sending because gRPC stream is closed:', msg);\r\n                }\r\n            },\r\n            closeFn: () => {\r\n                logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} closed locally via close().`);\r\n                close();\r\n            }\r\n        });\r\n        grpcStream.on('data', (msg) => {\r\n            if (!closed) {\r\n                logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} received:`, msg);\r\n                stream.callOnMessage(msg);\r\n            }\r\n        });\r\n        grpcStream.on('end', () => {\r\n            logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} ended.`);\r\n            close();\r\n        });\r\n        grpcStream.on('error', (grpcError) => {\r\n            if (!closed) {\r\n                logWarn(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} error. Code:`, grpcError.code, 'Message:', grpcError.message);\r\n                const code = mapCodeFromRpcCode(grpcError.code);\r\n                close(new FirestoreError(code, grpcError.message));\r\n            }\r\n        });\r\n        logDebug(LOG_TAG$9, `Opening RPC '${rpcName}' stream ${streamId} ` +\r\n            `to ${this.databaseInfo.host}`);\r\n        // TODO(dimond): Since grpc has no explicit open status (or does it?) we\r\n        // simulate an onOpen in the next loop after the stream had it's listeners\r\n        // registered\r\n        setTimeout(() => {\r\n            stream.callOnOpen();\r\n        }, 0);\r\n        return stream;\r\n    }\r\n}\n\nconst nested = {\n\tgoogle: {\n\t\tnested: {\n\t\t\tprotobuf: {\n\t\t\t\toptions: {\n\t\t\t\t\tcsharp_namespace: \"Google.Protobuf.WellKnownTypes\",\n\t\t\t\t\tgo_package: \"github.com/golang/protobuf/ptypes/wrappers\",\n\t\t\t\t\tjava_package: \"com.google.protobuf\",\n\t\t\t\t\tjava_outer_classname: \"WrappersProto\",\n\t\t\t\t\tjava_multiple_files: true,\n\t\t\t\t\tobjc_class_prefix: \"GPB\",\n\t\t\t\t\tcc_enable_arenas: true,\n\t\t\t\t\toptimize_for: \"SPEED\"\n\t\t\t\t},\n\t\t\t\tnested: {\n\t\t\t\t\tTimestamp: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tseconds: {\n\t\t\t\t\t\t\t\ttype: \"int64\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnanos: {\n\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tFileDescriptorSet: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"FileDescriptorProto\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tFileDescriptorProto: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"package\": {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdependency: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpublicDependency: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\tid: 10,\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\tpacked: false\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tweakDependency: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\tid: 11,\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\tpacked: false\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmessageType: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"DescriptorProto\",\n\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tenumType: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"EnumDescriptorProto\",\n\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tservice: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"ServiceDescriptorProto\",\n\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\textension: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"FieldDescriptorProto\",\n\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\ttype: \"FileOptions\",\n\t\t\t\t\t\t\t\tid: 8\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsourceCodeInfo: {\n\t\t\t\t\t\t\t\ttype: \"SourceCodeInfo\",\n\t\t\t\t\t\t\t\tid: 9\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tsyntax: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 12\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tDescriptorProto: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"FieldDescriptorProto\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\textension: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"FieldDescriptorProto\",\n\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnestedType: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"DescriptorProto\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tenumType: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"EnumDescriptorProto\",\n\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\textensionRange: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"ExtensionRange\",\n\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toneofDecl: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"OneofDescriptorProto\",\n\t\t\t\t\t\t\t\tid: 8\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\ttype: \"MessageOptions\",\n\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\treservedRange: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"ReservedRange\",\n\t\t\t\t\t\t\t\tid: 9\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\treservedName: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 10\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\tExtensionRange: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tstart: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tend: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tReservedRange: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tstart: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tend: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tFieldDescriptorProto: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnumber: {\n\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlabel: {\n\t\t\t\t\t\t\t\ttype: \"Label\",\n\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\t\ttype: \"Type\",\n\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttypeName: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\textendee: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefaultValue: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toneofIndex: {\n\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\tid: 9\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tjsonName: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 10\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\ttype: \"FieldOptions\",\n\t\t\t\t\t\t\t\tid: 8\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\tType: {\n\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\tTYPE_DOUBLE: 1,\n\t\t\t\t\t\t\t\t\tTYPE_FLOAT: 2,\n\t\t\t\t\t\t\t\t\tTYPE_INT64: 3,\n\t\t\t\t\t\t\t\t\tTYPE_UINT64: 4,\n\t\t\t\t\t\t\t\t\tTYPE_INT32: 5,\n\t\t\t\t\t\t\t\t\tTYPE_FIXED64: 6,\n\t\t\t\t\t\t\t\t\tTYPE_FIXED32: 7,\n\t\t\t\t\t\t\t\t\tTYPE_BOOL: 8,\n\t\t\t\t\t\t\t\t\tTYPE_STRING: 9,\n\t\t\t\t\t\t\t\t\tTYPE_GROUP: 10,\n\t\t\t\t\t\t\t\t\tTYPE_MESSAGE: 11,\n\t\t\t\t\t\t\t\t\tTYPE_BYTES: 12,\n\t\t\t\t\t\t\t\t\tTYPE_UINT32: 13,\n\t\t\t\t\t\t\t\t\tTYPE_ENUM: 14,\n\t\t\t\t\t\t\t\t\tTYPE_SFIXED32: 15,\n\t\t\t\t\t\t\t\t\tTYPE_SFIXED64: 16,\n\t\t\t\t\t\t\t\t\tTYPE_SINT32: 17,\n\t\t\t\t\t\t\t\t\tTYPE_SINT64: 18\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tLabel: {\n\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\tLABEL_OPTIONAL: 1,\n\t\t\t\t\t\t\t\t\tLABEL_REQUIRED: 2,\n\t\t\t\t\t\t\t\t\tLABEL_REPEATED: 3\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tOneofDescriptorProto: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\ttype: \"OneofOptions\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tEnumDescriptorProto: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"EnumValueDescriptorProto\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\ttype: \"EnumOptions\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tEnumValueDescriptorProto: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnumber: {\n\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\ttype: \"EnumValueOptions\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tServiceDescriptorProto: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmethod: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"MethodDescriptorProto\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\ttype: \"ServiceOptions\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tMethodDescriptorProto: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tinputType: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toutputType: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\ttype: \"MethodOptions\",\n\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tclientStreaming: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tserverStreaming: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tFileOptions: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tjavaPackage: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tjavaOuterClassname: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 8\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tjavaMultipleFiles: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 10\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tjavaGenerateEqualsAndHash: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 20,\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\tdeprecated: true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tjavaStringCheckUtf8: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 27\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\toptimizeFor: {\n\t\t\t\t\t\t\t\ttype: \"OptimizeMode\",\n\t\t\t\t\t\t\t\tid: 9,\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\"default\": \"SPEED\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tgoPackage: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 11\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tccGenericServices: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 16\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tjavaGenericServices: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 17\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpyGenericServices: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 18\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdeprecated: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 23\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tccEnableArenas: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 31\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tobjcClassPrefix: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 36\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcsharpNamespace: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 37\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tuninterpretedOption: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"UninterpretedOption\",\n\t\t\t\t\t\t\t\tid: 999\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t\t\t536870911\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\treserved: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t38,\n\t\t\t\t\t\t\t\t38\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\tOptimizeMode: {\n\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\tSPEED: 1,\n\t\t\t\t\t\t\t\t\tCODE_SIZE: 2,\n\t\t\t\t\t\t\t\t\tLITE_RUNTIME: 3\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tMessageOptions: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tmessageSetWireFormat: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnoStandardDescriptorAccessor: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdeprecated: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmapEntry: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tuninterpretedOption: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"UninterpretedOption\",\n\t\t\t\t\t\t\t\tid: 999\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t\t\t536870911\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\treserved: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t8,\n\t\t\t\t\t\t\t\t8\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tFieldOptions: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tctype: {\n\t\t\t\t\t\t\t\ttype: \"CType\",\n\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\"default\": \"STRING\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpacked: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tjstype: {\n\t\t\t\t\t\t\t\ttype: \"JSType\",\n\t\t\t\t\t\t\t\tid: 6,\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\"default\": \"JS_NORMAL\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlazy: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdeprecated: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tweak: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 10\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tuninterpretedOption: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"UninterpretedOption\",\n\t\t\t\t\t\t\t\tid: 999\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t\t\t536870911\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\treserved: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t4,\n\t\t\t\t\t\t\t\t4\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t],\n\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\tCType: {\n\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\tSTRING: 0,\n\t\t\t\t\t\t\t\t\tCORD: 1,\n\t\t\t\t\t\t\t\t\tSTRING_PIECE: 2\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tJSType: {\n\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\tJS_NORMAL: 0,\n\t\t\t\t\t\t\t\t\tJS_STRING: 1,\n\t\t\t\t\t\t\t\t\tJS_NUMBER: 2\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tOneofOptions: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tuninterpretedOption: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"UninterpretedOption\",\n\t\t\t\t\t\t\t\tid: 999\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t\t\t536870911\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tEnumOptions: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tallowAlias: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdeprecated: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tuninterpretedOption: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"UninterpretedOption\",\n\t\t\t\t\t\t\t\tid: 999\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t\t\t536870911\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tEnumValueOptions: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tdeprecated: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tuninterpretedOption: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"UninterpretedOption\",\n\t\t\t\t\t\t\t\tid: 999\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t\t\t536870911\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tServiceOptions: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tdeprecated: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 33\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tuninterpretedOption: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"UninterpretedOption\",\n\t\t\t\t\t\t\t\tid: 999\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t\t\t536870911\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tMethodOptions: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tdeprecated: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 33\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tuninterpretedOption: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"UninterpretedOption\",\n\t\t\t\t\t\t\t\tid: 999\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t\t\t536870911\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\tUninterpretedOption: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"NamePart\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tidentifierValue: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpositiveIntValue: {\n\t\t\t\t\t\t\t\ttype: \"uint64\",\n\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnegativeIntValue: {\n\t\t\t\t\t\t\t\ttype: \"int64\",\n\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdoubleValue: {\n\t\t\t\t\t\t\t\ttype: \"double\",\n\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstringValue: {\n\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\taggregateValue: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 8\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\tNamePart: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tnamePart: {\n\t\t\t\t\t\t\t\t\t\trule: \"required\",\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tisExtension: {\n\t\t\t\t\t\t\t\t\t\trule: \"required\",\n\t\t\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tSourceCodeInfo: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tlocation: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"Location\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\tLocation: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tspan: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tleadingComments: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttrailingComments: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tleadingDetachedComments: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tGeneratedCodeInfo: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tannotation: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"Annotation\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\tAnnotation: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tsourceFile: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbegin: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tend: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tStruct: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\tkeyType: \"string\",\n\t\t\t\t\t\t\t\ttype: \"Value\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tValue: {\n\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\tkind: {\n\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\"nullValue\",\n\t\t\t\t\t\t\t\t\t\"numberValue\",\n\t\t\t\t\t\t\t\t\t\"stringValue\",\n\t\t\t\t\t\t\t\t\t\"boolValue\",\n\t\t\t\t\t\t\t\t\t\"structValue\",\n\t\t\t\t\t\t\t\t\t\"listValue\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tnullValue: {\n\t\t\t\t\t\t\t\ttype: \"NullValue\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnumberValue: {\n\t\t\t\t\t\t\t\ttype: \"double\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstringValue: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tboolValue: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstructValue: {\n\t\t\t\t\t\t\t\ttype: \"Struct\",\n\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlistValue: {\n\t\t\t\t\t\t\t\ttype: \"ListValue\",\n\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tNullValue: {\n\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\tNULL_VALUE: 0\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tListValue: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"Value\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tEmpty: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tDoubleValue: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\ttype: \"double\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tFloatValue: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\ttype: \"float\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tInt64Value: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\ttype: \"int64\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tUInt64Value: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\ttype: \"uint64\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tInt32Value: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tUInt32Value: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\ttype: \"uint32\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tBoolValue: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tStringValue: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tBytesValue: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tAny: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\ttypeUrl: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tfirestore: {\n\t\t\t\tnested: {\n\t\t\t\t\tv1: {\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\tcsharp_namespace: \"Google.Cloud.Firestore.V1\",\n\t\t\t\t\t\t\tgo_package: \"google.golang.org/genproto/googleapis/firestore/v1;firestore\",\n\t\t\t\t\t\t\tjava_multiple_files: true,\n\t\t\t\t\t\t\tjava_outer_classname: \"WriteProto\",\n\t\t\t\t\t\t\tjava_package: \"com.google.firestore.v1\",\n\t\t\t\t\t\t\tobjc_class_prefix: \"GCFS\",\n\t\t\t\t\t\t\tphp_namespace: \"Google\\\\Cloud\\\\Firestore\\\\V1\",\n\t\t\t\t\t\t\truby_package: \"Google::Cloud::Firestore::V1\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\tAggregationResult: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\taggregateFields: {\n\t\t\t\t\t\t\t\t\t\tkeyType: \"string\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Value\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tBitSequence: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tbitmap: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpadding: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tBloomFilter: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tbits: {\n\t\t\t\t\t\t\t\t\t\ttype: \"BitSequence\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\thashCount: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tDocumentMask: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tfieldPaths: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tPrecondition: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\tconditionType: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"exists\",\n\t\t\t\t\t\t\t\t\t\t\t\"updateTime\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\texists: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tupdateTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tTransactionOptions: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\tmode: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"readOnly\",\n\t\t\t\t\t\t\t\t\t\t\t\"readWrite\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\treadOnly: {\n\t\t\t\t\t\t\t\t\t\ttype: \"ReadOnly\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadWrite: {\n\t\t\t\t\t\t\t\t\t\ttype: \"ReadWrite\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\t\t\tReadWrite: {\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\tretryTransaction: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tReadOnly: {\n\t\t\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\t\t\tconsistencySelector: {\n\t\t\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"readTime\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tDocument: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\tkeyType: \"string\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Value\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcreateTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tupdateTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tValue: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\tvalueType: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"nullValue\",\n\t\t\t\t\t\t\t\t\t\t\t\"booleanValue\",\n\t\t\t\t\t\t\t\t\t\t\t\"integerValue\",\n\t\t\t\t\t\t\t\t\t\t\t\"doubleValue\",\n\t\t\t\t\t\t\t\t\t\t\t\"timestampValue\",\n\t\t\t\t\t\t\t\t\t\t\t\"stringValue\",\n\t\t\t\t\t\t\t\t\t\t\t\"bytesValue\",\n\t\t\t\t\t\t\t\t\t\t\t\"referenceValue\",\n\t\t\t\t\t\t\t\t\t\t\t\"geoPointValue\",\n\t\t\t\t\t\t\t\t\t\t\t\"arrayValue\",\n\t\t\t\t\t\t\t\t\t\t\t\"mapValue\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tnullValue: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.NullValue\",\n\t\t\t\t\t\t\t\t\t\tid: 11\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbooleanValue: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tintegerValue: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int64\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdoubleValue: {\n\t\t\t\t\t\t\t\t\t\ttype: \"double\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttimestampValue: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 10\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tstringValue: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 17\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbytesValue: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 18\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treferenceValue: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tgeoPointValue: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.type.LatLng\",\n\t\t\t\t\t\t\t\t\t\tid: 8\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tarrayValue: {\n\t\t\t\t\t\t\t\t\t\ttype: \"ArrayValue\",\n\t\t\t\t\t\t\t\t\t\tid: 9\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tmapValue: {\n\t\t\t\t\t\t\t\t\t\ttype: \"MapValue\",\n\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tArrayValue: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Value\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tMapValue: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\tkeyType: \"string\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Value\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tFirestore: {\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\"(google.api.default_host)\": \"firestore.googleapis.com\",\n\t\t\t\t\t\t\t\t\t\"(google.api.oauth_scopes)\": \"https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/datastore\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmethods: {\n\t\t\t\t\t\t\t\t\tGetDocument: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"GetDocumentRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"Document\",\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).get\": \"/v1/{name=projects/*/databases/*/documents/*/**}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tget: \"/v1/{name=projects/*/databases/*/documents/*/**}\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tListDocuments: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"ListDocumentsRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"ListDocumentsResponse\",\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).get\": \"/v1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tget: \"/v1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tUpdateDocument: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"UpdateDocumentRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"Document\",\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).patch\": \"/v1/{document.name=projects/*/databases/*/documents/*/**}\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"document\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.method_signature)\": \"document,update_mask\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpatch: \"/v1/{document.name=projects/*/databases/*/documents/*/**}\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"document\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.method_signature)\": \"document,update_mask\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tDeleteDocument: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"DeleteDocumentRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"google.protobuf.Empty\",\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).delete\": \"/v1/{name=projects/*/databases/*/documents/*/**}\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.method_signature)\": \"name\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"delete\": \"/v1/{name=projects/*/databases/*/documents/*/**}\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.method_signature)\": \"name\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tBatchGetDocuments: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"BatchGetDocumentsRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"BatchGetDocumentsResponse\",\n\t\t\t\t\t\t\t\t\t\tresponseStream: true,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:batchGet\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"*\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{database=projects/*/databases/*}/documents:batchGet\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tBeginTransaction: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"BeginTransactionRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"BeginTransactionResponse\",\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:beginTransaction\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"*\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.method_signature)\": \"database\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{database=projects/*/databases/*}/documents:beginTransaction\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.method_signature)\": \"database\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tCommit: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"CommitRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"CommitResponse\",\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:commit\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"*\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.method_signature)\": \"database,writes\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{database=projects/*/databases/*}/documents:commit\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.method_signature)\": \"database,writes\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tRollback: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"RollbackRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"google.protobuf.Empty\",\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:rollback\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"*\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.method_signature)\": \"database,transaction\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{database=projects/*/databases/*}/documents:rollback\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.method_signature)\": \"database,transaction\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tRunQuery: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"RunQueryRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"RunQueryResponse\",\n\t\t\t\t\t\t\t\t\t\tresponseStream: true,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents}:runQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"*\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).additional_bindings.post\": \"/v1/{parent=projects/*/databases/*/documents/*/**}:runQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).additional_bindings.body\": \"*\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{parent=projects/*/databases/*/documents}:runQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tadditional_bindings: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{parent=projects/*/databases/*/documents/*/**}:runQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tRunAggregationQuery: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"RunAggregationQueryRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"RunAggregationQueryResponse\",\n\t\t\t\t\t\t\t\t\t\tresponseStream: true,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents}:runAggregationQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"*\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).additional_bindings.post\": \"/v1/{parent=projects/*/databases/*/documents/*/**}:runAggregationQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).additional_bindings.body\": \"*\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{parent=projects/*/databases/*/documents}:runAggregationQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tadditional_bindings: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{parent=projects/*/databases/*/documents/*/**}:runAggregationQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tPartitionQuery: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"PartitionQueryRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"PartitionQueryResponse\",\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents}:partitionQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"*\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).additional_bindings.post\": \"/v1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).additional_bindings.body\": \"*\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{parent=projects/*/databases/*/documents}:partitionQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tadditional_bindings: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tWrite: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"WriteRequest\",\n\t\t\t\t\t\t\t\t\t\trequestStream: true,\n\t\t\t\t\t\t\t\t\t\tresponseType: \"WriteResponse\",\n\t\t\t\t\t\t\t\t\t\tresponseStream: true,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:write\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"*\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{database=projects/*/databases/*}/documents:write\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tListen: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"ListenRequest\",\n\t\t\t\t\t\t\t\t\t\trequestStream: true,\n\t\t\t\t\t\t\t\t\t\tresponseType: \"ListenResponse\",\n\t\t\t\t\t\t\t\t\t\tresponseStream: true,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:listen\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"*\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{database=projects/*/databases/*}/documents:listen\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tListCollectionIds: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"ListCollectionIdsRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"ListCollectionIdsResponse\",\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents}:listCollectionIds\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"*\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).additional_bindings.post\": \"/v1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).additional_bindings.body\": \"*\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.method_signature)\": \"parent\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{parent=projects/*/databases/*/documents}:listCollectionIds\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tadditional_bindings: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.method_signature)\": \"parent\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tBatchWrite: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"BatchWriteRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"BatchWriteResponse\",\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:batchWrite\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"*\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{database=projects/*/databases/*}/documents:batchWrite\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"*\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tCreateDocument: {\n\t\t\t\t\t\t\t\t\t\trequestType: \"CreateDocumentRequest\",\n\t\t\t\t\t\t\t\t\t\tresponseType: \"Document\",\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents/**}/{collection_id}\",\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http).body\": \"document\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tparsedOptions: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"(google.api.http)\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpost: \"/v1/{parent=projects/*/databases/*/documents/**}/{collection_id}\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tbody: \"document\"\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tGetDocumentRequest: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\tconsistencySelector: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"transaction\",\n\t\t\t\t\t\t\t\t\t\t\t\"readTime\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tmask: {\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentMask\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tListDocumentsRequest: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\tconsistencySelector: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"transaction\",\n\t\t\t\t\t\t\t\t\t\t\t\"readTime\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcollectionId: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpageSize: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpageToken: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\torderBy: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tmask: {\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentMask\",\n\t\t\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 8\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 10\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tshowMissing: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\t\t\tid: 12\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tListDocumentsResponse: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdocuments: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Document\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnextPageToken: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tCreateDocumentRequest: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcollectionId: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdocumentId: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdocument: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Document\",\n\t\t\t\t\t\t\t\t\t\tid: 4,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tmask: {\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentMask\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tUpdateDocumentRequest: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdocument: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Document\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tupdateMask: {\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentMask\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tmask: {\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentMask\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcurrentDocument: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Precondition\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tDeleteDocumentRequest: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcurrentDocument: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Precondition\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tBatchGetDocumentsRequest: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\tconsistencySelector: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"transaction\",\n\t\t\t\t\t\t\t\t\t\t\t\"newTransaction\",\n\t\t\t\t\t\t\t\t\t\t\t\"readTime\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdatabase: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdocuments: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tmask: {\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentMask\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnewTransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"TransactionOptions\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tBatchGetDocumentsResponse: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\tresult: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"found\",\n\t\t\t\t\t\t\t\t\t\t\t\"missing\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tfound: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Document\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tmissing: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tBeginTransactionRequest: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdatabase: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\ttype: \"TransactionOptions\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tBeginTransactionResponse: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\ttransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tCommitRequest: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdatabase: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\twrites: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Write\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tCommitResponse: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\twriteResults: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"WriteResult\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcommitTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRollbackRequest: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdatabase: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRunQueryRequest: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\tqueryType: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"structuredQuery\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tconsistencySelector: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"transaction\",\n\t\t\t\t\t\t\t\t\t\t\t\"newTransaction\",\n\t\t\t\t\t\t\t\t\t\t\t\"readTime\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tstructuredQuery: {\n\t\t\t\t\t\t\t\t\t\ttype: \"StructuredQuery\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnewTransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"TransactionOptions\",\n\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRunQueryResponse: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\ttransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdocument: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Document\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tskippedResults: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRunAggregationQueryRequest: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\tqueryType: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"structuredAggregationQuery\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tconsistencySelector: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"transaction\",\n\t\t\t\t\t\t\t\t\t\t\t\"newTransaction\",\n\t\t\t\t\t\t\t\t\t\t\t\"readTime\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tstructuredAggregationQuery: {\n\t\t\t\t\t\t\t\t\t\ttype: \"StructuredAggregationQuery\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnewTransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"TransactionOptions\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tRunAggregationQueryResponse: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tresult: {\n\t\t\t\t\t\t\t\t\t\ttype: \"AggregationResult\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttransaction: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tPartitionQueryRequest: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\tqueryType: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"structuredQuery\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tstructuredQuery: {\n\t\t\t\t\t\t\t\t\t\ttype: \"StructuredQuery\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpartitionCount: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int64\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpageToken: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpageSize: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tPartitionQueryResponse: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tpartitions: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Cursor\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnextPageToken: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tWriteRequest: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdatabase: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tstreamId: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\twrites: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Write\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tstreamToken: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tlabels: {\n\t\t\t\t\t\t\t\t\t\tkeyType: \"string\",\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tWriteResponse: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tstreamId: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tstreamToken: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\twriteResults: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"WriteResult\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcommitTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tListenRequest: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\ttargetChange: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"addTarget\",\n\t\t\t\t\t\t\t\t\t\t\t\"removeTarget\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdatabase: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\taddTarget: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Target\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tremoveTarget: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tlabels: {\n\t\t\t\t\t\t\t\t\t\tkeyType: \"string\",\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tListenResponse: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\tresponseType: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"targetChange\",\n\t\t\t\t\t\t\t\t\t\t\t\"documentChange\",\n\t\t\t\t\t\t\t\t\t\t\t\"documentDelete\",\n\t\t\t\t\t\t\t\t\t\t\t\"documentRemove\",\n\t\t\t\t\t\t\t\t\t\t\t\"filter\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\ttargetChange: {\n\t\t\t\t\t\t\t\t\t\ttype: \"TargetChange\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdocumentChange: {\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentChange\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdocumentDelete: {\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentDelete\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdocumentRemove: {\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentRemove\",\n\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tfilter: {\n\t\t\t\t\t\t\t\t\t\ttype: \"ExistenceFilter\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tTarget: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\ttargetType: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"query\",\n\t\t\t\t\t\t\t\t\t\t\t\"documents\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tresumeType: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"resumeToken\",\n\t\t\t\t\t\t\t\t\t\t\t\"readTime\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tquery: {\n\t\t\t\t\t\t\t\t\t\ttype: \"QueryTarget\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tdocuments: {\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentsTarget\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tresumeToken: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 11\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttargetId: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tonce: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\texpectedCount: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Int32Value\",\n\t\t\t\t\t\t\t\t\t\tid: 12\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\t\t\tDocumentsTarget: {\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\tdocuments: {\n\t\t\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tQueryTarget: {\n\t\t\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\t\t\tqueryType: {\n\t\t\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"structuredQuery\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tstructuredQuery: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"StructuredQuery\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tTargetChange: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\ttargetChangeType: {\n\t\t\t\t\t\t\t\t\t\ttype: \"TargetChangeType\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttargetIds: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcause: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.rpc.Status\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tresumeToken: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bytes\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\t\t\tTargetChangeType: {\n\t\t\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\t\t\tNO_CHANGE: 0,\n\t\t\t\t\t\t\t\t\t\t\tADD: 1,\n\t\t\t\t\t\t\t\t\t\t\tREMOVE: 2,\n\t\t\t\t\t\t\t\t\t\t\tCURRENT: 3,\n\t\t\t\t\t\t\t\t\t\t\tRESET: 4\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tListCollectionIdsRequest: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tparent: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpageSize: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpageToken: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tListCollectionIdsResponse: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tcollectionIds: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnextPageToken: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tBatchWriteRequest: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdatabase: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\t\t\"(google.api.field_behavior)\": \"REQUIRED\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\twrites: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Write\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tlabels: {\n\t\t\t\t\t\t\t\t\t\tkeyType: \"string\",\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tBatchWriteResponse: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\twriteResults: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"WriteResult\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tstatus: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"google.rpc.Status\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tStructuredQuery: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tselect: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Projection\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tfrom: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"CollectionSelector\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Filter\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\torderBy: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Order\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tstartAt: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Cursor\",\n\t\t\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tendAt: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Cursor\",\n\t\t\t\t\t\t\t\t\t\tid: 8\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\toffset: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tlimit: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Int32Value\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\t\t\tCollectionSelector: {\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\tcollectionId: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tallDescendants: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tFilter: {\n\t\t\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\t\t\tfilterType: {\n\t\t\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"compositeFilter\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"fieldFilter\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"unaryFilter\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\tcompositeFilter: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"CompositeFilter\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tfieldFilter: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"FieldFilter\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tunaryFilter: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"UnaryFilter\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tCompositeFilter: {\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\top: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"Operator\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tfilters: {\n\t\t\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"Filter\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\t\t\t\t\tOperator: {\n\t\t\t\t\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tOPERATOR_UNSPECIFIED: 0,\n\t\t\t\t\t\t\t\t\t\t\t\t\tAND: 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\tOR: 2\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tFieldFilter: {\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"FieldReference\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\top: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"Operator\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"Value\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\t\t\t\t\tOperator: {\n\t\t\t\t\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tOPERATOR_UNSPECIFIED: 0,\n\t\t\t\t\t\t\t\t\t\t\t\t\tLESS_THAN: 1,\n\t\t\t\t\t\t\t\t\t\t\t\t\tLESS_THAN_OR_EQUAL: 2,\n\t\t\t\t\t\t\t\t\t\t\t\t\tGREATER_THAN: 3,\n\t\t\t\t\t\t\t\t\t\t\t\t\tGREATER_THAN_OR_EQUAL: 4,\n\t\t\t\t\t\t\t\t\t\t\t\t\tEQUAL: 5,\n\t\t\t\t\t\t\t\t\t\t\t\t\tNOT_EQUAL: 6,\n\t\t\t\t\t\t\t\t\t\t\t\t\tARRAY_CONTAINS: 7,\n\t\t\t\t\t\t\t\t\t\t\t\t\tIN: 8,\n\t\t\t\t\t\t\t\t\t\t\t\t\tARRAY_CONTAINS_ANY: 9,\n\t\t\t\t\t\t\t\t\t\t\t\t\tNOT_IN: 10\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tUnaryFilter: {\n\t\t\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\t\t\toperandType: {\n\t\t\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"field\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\top: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"Operator\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"FieldReference\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\t\t\t\t\tOperator: {\n\t\t\t\t\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tOPERATOR_UNSPECIFIED: 0,\n\t\t\t\t\t\t\t\t\t\t\t\t\tIS_NAN: 2,\n\t\t\t\t\t\t\t\t\t\t\t\t\tIS_NULL: 3,\n\t\t\t\t\t\t\t\t\t\t\t\t\tIS_NOT_NAN: 4,\n\t\t\t\t\t\t\t\t\t\t\t\t\tIS_NOT_NULL: 5\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tOrder: {\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"FieldReference\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tdirection: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"Direction\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tFieldReference: {\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\tfieldPath: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tProjection: {\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"FieldReference\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tDirection: {\n\t\t\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\t\t\tDIRECTION_UNSPECIFIED: 0,\n\t\t\t\t\t\t\t\t\t\t\tASCENDING: 1,\n\t\t\t\t\t\t\t\t\t\t\tDESCENDING: 2\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tStructuredAggregationQuery: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\tqueryType: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"structuredQuery\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tstructuredQuery: {\n\t\t\t\t\t\t\t\t\t\ttype: \"StructuredQuery\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\taggregations: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Aggregation\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\t\t\tAggregation: {\n\t\t\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\t\t\toperator: {\n\t\t\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"count\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"sum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"avg\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"Count\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tsum: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"Sum\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tavg: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"Avg\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\talias: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\t\t\t\t\tCount: {\n\t\t\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tupTo: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Int64Value\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tSum: {\n\t\t\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"FieldReference\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tAvg: {\n\t\t\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"FieldReference\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tCursor: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Value\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbefore: {\n\t\t\t\t\t\t\t\t\t\ttype: \"bool\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tWrite: {\n\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\toperation: {\n\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\"update\",\n\t\t\t\t\t\t\t\t\t\t\t\"delete\",\n\t\t\t\t\t\t\t\t\t\t\t\"verify\",\n\t\t\t\t\t\t\t\t\t\t\t\"transform\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tupdate: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Document\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"delete\": {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tverify: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttransform: {\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentTransform\",\n\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tupdateMask: {\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentMask\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tupdateTransforms: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"DocumentTransform.FieldTransform\",\n\t\t\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcurrentDocument: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Precondition\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tDocumentTransform: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdocument: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tfieldTransforms: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"FieldTransform\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\t\t\tFieldTransform: {\n\t\t\t\t\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\t\t\t\t\ttransformType: {\n\t\t\t\t\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"setToServerValue\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"increment\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"maximum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"minimum\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"appendMissingElements\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"removeAllFromArray\"\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\t\t\tfieldPath: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tsetToServerValue: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"ServerValue\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tincrement: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"Value\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tmaximum: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"Value\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tminimum: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"Value\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tappendMissingElements: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"ArrayValue\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tremoveAllFromArray: {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"ArrayValue\",\n\t\t\t\t\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tnested: {\n\t\t\t\t\t\t\t\t\t\t\tServerValue: {\n\t\t\t\t\t\t\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tSERVER_VALUE_UNSPECIFIED: 0,\n\t\t\t\t\t\t\t\t\t\t\t\t\tREQUEST_TIME: 1\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tWriteResult: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tupdateTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttransformResults: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"Value\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tDocumentChange: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdocument: {\n\t\t\t\t\t\t\t\t\t\ttype: \"Document\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttargetIds: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tremovedTargetIds: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tDocumentDelete: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdocument: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tremovedTargetIds: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tDocumentRemove: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\tdocument: {\n\t\t\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tremovedTargetIds: {\n\t\t\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\treadTime: {\n\t\t\t\t\t\t\t\t\t\ttype: \"google.protobuf.Timestamp\",\n\t\t\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tExistenceFilter: {\n\t\t\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\t\t\ttargetId: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcount: {\n\t\t\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tunchangedNames: {\n\t\t\t\t\t\t\t\t\t\ttype: \"BloomFilter\",\n\t\t\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tapi: {\n\t\t\t\toptions: {\n\t\t\t\t\tgo_package: \"google.golang.org/genproto/googleapis/api/annotations;annotations\",\n\t\t\t\t\tjava_multiple_files: true,\n\t\t\t\t\tjava_outer_classname: \"HttpProto\",\n\t\t\t\t\tjava_package: \"com.google.api\",\n\t\t\t\t\tobjc_class_prefix: \"GAPI\",\n\t\t\t\t\tcc_enable_arenas: true\n\t\t\t\t},\n\t\t\t\tnested: {\n\t\t\t\t\thttp: {\n\t\t\t\t\t\ttype: \"HttpRule\",\n\t\t\t\t\t\tid: 72295728,\n\t\t\t\t\t\textend: \"google.protobuf.MethodOptions\"\n\t\t\t\t\t},\n\t\t\t\t\tHttp: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\trules: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"HttpRule\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tHttpRule: {\n\t\t\t\t\t\toneofs: {\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\toneof: [\n\t\t\t\t\t\t\t\t\t\"get\",\n\t\t\t\t\t\t\t\t\t\"put\",\n\t\t\t\t\t\t\t\t\t\"post\",\n\t\t\t\t\t\t\t\t\t\"delete\",\n\t\t\t\t\t\t\t\t\t\"patch\",\n\t\t\t\t\t\t\t\t\t\"custom\"\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tget: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tput: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpost: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 4\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"delete\": {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 5\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpatch: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 6\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcustom: {\n\t\t\t\t\t\t\t\ttype: \"CustomHttpPattern\",\n\t\t\t\t\t\t\t\tid: 8\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tselector: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 7\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tadditionalBindings: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"HttpRule\",\n\t\t\t\t\t\t\t\tid: 11\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tCustomHttpPattern: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tkind: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tmethodSignature: {\n\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tid: 1051,\n\t\t\t\t\t\textend: \"google.protobuf.MethodOptions\"\n\t\t\t\t\t},\n\t\t\t\t\tdefaultHost: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tid: 1049,\n\t\t\t\t\t\textend: \"google.protobuf.ServiceOptions\"\n\t\t\t\t\t},\n\t\t\t\t\toauthScopes: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tid: 1050,\n\t\t\t\t\t\textend: \"google.protobuf.ServiceOptions\"\n\t\t\t\t\t},\n\t\t\t\t\tfieldBehavior: {\n\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\ttype: \"google.api.FieldBehavior\",\n\t\t\t\t\t\tid: 1052,\n\t\t\t\t\t\textend: \"google.protobuf.FieldOptions\"\n\t\t\t\t\t},\n\t\t\t\t\tFieldBehavior: {\n\t\t\t\t\t\tvalues: {\n\t\t\t\t\t\t\tFIELD_BEHAVIOR_UNSPECIFIED: 0,\n\t\t\t\t\t\t\tOPTIONAL: 1,\n\t\t\t\t\t\t\tREQUIRED: 2,\n\t\t\t\t\t\t\tOUTPUT_ONLY: 3,\n\t\t\t\t\t\t\tINPUT_ONLY: 4,\n\t\t\t\t\t\t\tIMMUTABLE: 5,\n\t\t\t\t\t\t\tUNORDERED_LIST: 6,\n\t\t\t\t\t\t\tNON_EMPTY_DEFAULT: 7\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\ttype: {\n\t\t\t\toptions: {\n\t\t\t\t\tcc_enable_arenas: true,\n\t\t\t\t\tgo_package: \"google.golang.org/genproto/googleapis/type/latlng;latlng\",\n\t\t\t\t\tjava_multiple_files: true,\n\t\t\t\t\tjava_outer_classname: \"LatLngProto\",\n\t\t\t\t\tjava_package: \"com.google.type\",\n\t\t\t\t\tobjc_class_prefix: \"GTP\"\n\t\t\t\t},\n\t\t\t\tnested: {\n\t\t\t\t\tLatLng: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tlatitude: {\n\t\t\t\t\t\t\t\ttype: \"double\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tlongitude: {\n\t\t\t\t\t\t\t\ttype: \"double\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\trpc: {\n\t\t\t\toptions: {\n\t\t\t\t\tcc_enable_arenas: true,\n\t\t\t\t\tgo_package: \"google.golang.org/genproto/googleapis/rpc/status;status\",\n\t\t\t\t\tjava_multiple_files: true,\n\t\t\t\t\tjava_outer_classname: \"StatusProto\",\n\t\t\t\t\tjava_package: \"com.google.rpc\",\n\t\t\t\t\tobjc_class_prefix: \"RPC\"\n\t\t\t\t},\n\t\t\t\tnested: {\n\t\t\t\t\tStatus: {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tcode: {\n\t\t\t\t\t\t\t\ttype: \"int32\",\n\t\t\t\t\t\t\t\tid: 1\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t\t\tid: 2\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdetails: {\n\t\t\t\t\t\t\t\trule: \"repeated\",\n\t\t\t\t\t\t\t\ttype: \"google.protobuf.Any\",\n\t\t\t\t\t\t\t\tid: 3\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\nvar protos = {\n\tnested: nested\n};\n\nvar protos$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  nested: nested,\n  'default': protos\n});\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Used by tests so we can match @grpc/proto-loader behavior. */\r\nconst protoLoaderOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    defaults: true,\r\n    oneofs: false\r\n};\r\n/**\r\n * Loads the protocol buffer definitions for Firestore.\r\n *\r\n * @returns The GrpcObject representing our protos.\r\n */\r\nfunction loadProtos() {\r\n    const packageDefinition = protoLoader.fromJSON(protos$1, protoLoaderOptions);\r\n    return grpc.loadPackageDefinition(packageDefinition);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Loads the GRPC stack */\r\nfunction newConnection(databaseInfo) {\r\n    const protos = loadProtos();\r\n    return new GrpcConnection(protos, databaseInfo);\r\n}\r\n/** Return the Platform-specific connectivity monitor. */\r\nfunction newConnectivityMonitor() {\r\n    return new NoopConnectivityMonitor();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The Platform's 'window' implementation or null if not available. */\r\nfunction getWindow() {\r\n    if (process.env.USE_MOCK_PERSISTENCE === 'YES') {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        return window;\r\n    }\r\n    return null;\r\n}\r\n/** The Platform's 'document' implementation or null if not available. */\r\nfunction getDocument() {\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSerializer(databaseId) {\r\n    return new JsonProtoSerializer(databaseId, /* useProto3Json= */ false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$8 = 'ExponentialBackoff';\r\n/**\r\n * Initial backoff time in milliseconds after an error.\r\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\r\n */\r\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\r\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\r\n/** Maximum backoff time in milliseconds */\r\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\r\n/**\r\n * A helper for running delayed tasks following an exponential backoff curve\r\n * between attempts.\r\n *\r\n * Each delay is made up of a \"base\" delay which follows the exponential\r\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\r\n * base delay. This prevents clients from accidentally synchronizing their\r\n * delays causing spikes of load to the backend.\r\n */\r\nclass ExponentialBackoff {\r\n    constructor(\r\n    /**\r\n     * The AsyncQueue to run backoff operations on.\r\n     */\r\n    queue, \r\n    /**\r\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\r\n     */\r\n    timerId, \r\n    /**\r\n     * The initial delay (used as the base delay on the first retry attempt).\r\n     * Note that jitter will still be applied, so the actual delay could be as\r\n     * little as 0.5*initialDelayMs.\r\n     */\r\n    initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS, \r\n    /**\r\n     * The multiplier to use to determine the extended base delay after each\r\n     * attempt.\r\n     */\r\n    backoffFactor = DEFAULT_BACKOFF_FACTOR, \r\n    /**\r\n     * The maximum base delay after which no further backoff is performed.\r\n     * Note that jitter will still be applied, so the actual delay could be as\r\n     * much as 1.5*maxDelayMs.\r\n     */\r\n    maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS) {\r\n        this.queue = queue;\r\n        this.timerId = timerId;\r\n        this.initialDelayMs = initialDelayMs;\r\n        this.backoffFactor = backoffFactor;\r\n        this.maxDelayMs = maxDelayMs;\r\n        this.currentBaseMs = 0;\r\n        this.timerPromise = null;\r\n        /** The last backoff attempt, as epoch milliseconds. */\r\n        this.lastAttemptTime = Date.now();\r\n        this.reset();\r\n    }\r\n    /**\r\n     * Resets the backoff delay.\r\n     *\r\n     * The very next backoffAndWait() will have no delay. If it is called again\r\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\r\n     * subsequent ones will increase according to the backoffFactor.\r\n     */\r\n    reset() {\r\n        this.currentBaseMs = 0;\r\n    }\r\n    /**\r\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\r\n     * RESOURCE_EXHAUSTED error).\r\n     */\r\n    resetToMax() {\r\n        this.currentBaseMs = this.maxDelayMs;\r\n    }\r\n    /**\r\n     * Returns a promise that resolves after currentDelayMs, and increases the\r\n     * delay for any subsequent attempts. If there was a pending backoff operation\r\n     * already, it will be canceled.\r\n     */\r\n    backoffAndRun(op) {\r\n        // Cancel any pending backoff operation.\r\n        this.cancel();\r\n        // First schedule using the current base (which may be 0 and should be\r\n        // honored as such).\r\n        const desiredDelayWithJitterMs = Math.floor(this.currentBaseMs + this.jitterDelayMs());\r\n        // Guard against lastAttemptTime being in the future due to a clock change.\r\n        const delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);\r\n        // Guard against the backoff delay already being past.\r\n        const remainingDelayMs = Math.max(0, desiredDelayWithJitterMs - delaySoFarMs);\r\n        if (remainingDelayMs > 0) {\r\n            logDebug(LOG_TAG$8, `Backing off for ${remainingDelayMs} ms ` +\r\n                `(base delay: ${this.currentBaseMs} ms, ` +\r\n                `delay with jitter: ${desiredDelayWithJitterMs} ms, ` +\r\n                `last attempt: ${delaySoFarMs} ms ago)`);\r\n        }\r\n        this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, remainingDelayMs, () => {\r\n            this.lastAttemptTime = Date.now();\r\n            return op();\r\n        });\r\n        // Apply backoff factor to determine next delay and ensure it is within\r\n        // bounds.\r\n        this.currentBaseMs *= this.backoffFactor;\r\n        if (this.currentBaseMs < this.initialDelayMs) {\r\n            this.currentBaseMs = this.initialDelayMs;\r\n        }\r\n        if (this.currentBaseMs > this.maxDelayMs) {\r\n            this.currentBaseMs = this.maxDelayMs;\r\n        }\r\n    }\r\n    skipBackoff() {\r\n        if (this.timerPromise !== null) {\r\n            this.timerPromise.skipDelay();\r\n            this.timerPromise = null;\r\n        }\r\n    }\r\n    cancel() {\r\n        if (this.timerPromise !== null) {\r\n            this.timerPromise.cancel();\r\n            this.timerPromise = null;\r\n        }\r\n    }\r\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\r\n    jitterDelayMs() {\r\n        return (Math.random() - 0.5) * this.currentBaseMs;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$7 = 'PersistentStream';\r\n/** The time a stream stays open after it is marked idle. */\r\nconst IDLE_TIMEOUT_MS = 60 * 1000;\r\n/** The time a stream stays open until we consider it healthy. */\r\nconst HEALTHY_TIMEOUT_MS = 10 * 1000;\r\n/**\r\n * A PersistentStream is an abstract base class that represents a streaming RPC\r\n * to the Firestore backend. It's built on top of the connections own support\r\n * for streaming RPCs, and adds several critical features for our clients:\r\n *\r\n *   - Exponential backoff on failure\r\n *   - Authentication via CredentialsProvider\r\n *   - Dispatching all callbacks into the shared worker queue\r\n *   - Closing idle streams after 60 seconds of inactivity\r\n *\r\n * Subclasses of PersistentStream implement serialization of models to and\r\n * from the JSON representation of the protocol buffers for a specific\r\n * streaming RPC.\r\n *\r\n * ## Starting and Stopping\r\n *\r\n * Streaming RPCs are stateful and need to be start()ed before messages can\r\n * be sent and received. The PersistentStream will call the onOpen() function\r\n * of the listener once the stream is ready to accept requests.\r\n *\r\n * Should a start() fail, PersistentStream will call the registered onClose()\r\n * listener with a FirestoreError indicating what went wrong.\r\n *\r\n * A PersistentStream can be started and stopped repeatedly.\r\n *\r\n * Generic types:\r\n *  SendType: The type of the outgoing message of the underlying\r\n *    connection stream\r\n *  ReceiveType: The type of the incoming message of the underlying\r\n *    connection stream\r\n *  ListenerType: The type of the listener that will be used for callbacks\r\n */\r\nclass PersistentStream {\r\n    constructor(queue, connectionTimerId, idleTimerId, healthTimerId, connection, authCredentialsProvider, appCheckCredentialsProvider, listener) {\r\n        this.queue = queue;\r\n        this.idleTimerId = idleTimerId;\r\n        this.healthTimerId = healthTimerId;\r\n        this.connection = connection;\r\n        this.authCredentialsProvider = authCredentialsProvider;\r\n        this.appCheckCredentialsProvider = appCheckCredentialsProvider;\r\n        this.listener = listener;\r\n        this.state = 0 /* PersistentStreamState.Initial */;\r\n        /**\r\n         * A close count that's incremented every time the stream is closed; used by\r\n         * getCloseGuardedDispatcher() to invalidate callbacks that happen after\r\n         * close.\r\n         */\r\n        this.closeCount = 0;\r\n        this.idleTimer = null;\r\n        this.healthCheck = null;\r\n        this.stream = null;\r\n        this.backoff = new ExponentialBackoff(queue, connectionTimerId);\r\n    }\r\n    /**\r\n     * Returns true if start() has been called and no error has occurred. True\r\n     * indicates the stream is open or in the process of opening (which\r\n     * encompasses respecting backoff, getting auth tokens, and starting the\r\n     * actual RPC). Use isOpen() to determine if the stream is open and ready for\r\n     * outbound requests.\r\n     */\r\n    isStarted() {\r\n        return (this.state === 1 /* PersistentStreamState.Starting */ ||\r\n            this.state === 5 /* PersistentStreamState.Backoff */ ||\r\n            this.isOpen());\r\n    }\r\n    /**\r\n     * Returns true if the underlying RPC is open (the onOpen() listener has been\r\n     * called) and the stream is ready for outbound requests.\r\n     */\r\n    isOpen() {\r\n        return (this.state === 2 /* PersistentStreamState.Open */ ||\r\n            this.state === 3 /* PersistentStreamState.Healthy */);\r\n    }\r\n    /**\r\n     * Starts the RPC. Only allowed if isStarted() returns false. The stream is\r\n     * not immediately ready for use: onOpen() will be invoked when the RPC is\r\n     * ready for outbound requests, at which point isOpen() will return true.\r\n     *\r\n     * When start returns, isStarted() will return true.\r\n     */\r\n    start() {\r\n        if (this.state === 4 /* PersistentStreamState.Error */) {\r\n            this.performBackoff();\r\n            return;\r\n        }\r\n        this.auth();\r\n    }\r\n    /**\r\n     * Stops the RPC. This call is idempotent and allowed regardless of the\r\n     * current isStarted() state.\r\n     *\r\n     * When stop returns, isStarted() and isOpen() will both return false.\r\n     */\r\n    async stop() {\r\n        if (this.isStarted()) {\r\n            await this.close(0 /* PersistentStreamState.Initial */);\r\n        }\r\n    }\r\n    /**\r\n     * After an error the stream will usually back off on the next attempt to\r\n     * start it. If the error warrants an immediate restart of the stream, the\r\n     * sender can use this to indicate that the receiver should not back off.\r\n     *\r\n     * Each error will call the onClose() listener. That function can decide to\r\n     * inhibit backoff if required.\r\n     */\r\n    inhibitBackoff() {\r\n        this.state = 0 /* PersistentStreamState.Initial */;\r\n        this.backoff.reset();\r\n    }\r\n    /**\r\n     * Marks this stream as idle. If no further actions are performed on the\r\n     * stream for one minute, the stream will automatically close itself and\r\n     * notify the stream's onClose() handler with Status.OK. The stream will then\r\n     * be in a !isStarted() state, requiring the caller to start the stream again\r\n     * before further use.\r\n     *\r\n     * Only streams that are in state 'Open' can be marked idle, as all other\r\n     * states imply pending network operations.\r\n     */\r\n    markIdle() {\r\n        // Starts the idle time if we are in state 'Open' and are not yet already\r\n        // running a timer (in which case the previous idle timeout still applies).\r\n        if (this.isOpen() && this.idleTimer === null) {\r\n            this.idleTimer = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, () => this.handleIdleCloseTimer());\r\n        }\r\n    }\r\n    /** Sends a message to the underlying stream. */\r\n    sendRequest(msg) {\r\n        this.cancelIdleCheck();\r\n        this.stream.send(msg);\r\n    }\r\n    /** Called by the idle timer when the stream should close due to inactivity. */\r\n    async handleIdleCloseTimer() {\r\n        if (this.isOpen()) {\r\n            // When timing out an idle stream there's no reason to force the stream into backoff when\r\n            // it restarts so set the stream state to Initial instead of Error.\r\n            return this.close(0 /* PersistentStreamState.Initial */);\r\n        }\r\n    }\r\n    /** Marks the stream as active again. */\r\n    cancelIdleCheck() {\r\n        if (this.idleTimer) {\r\n            this.idleTimer.cancel();\r\n            this.idleTimer = null;\r\n        }\r\n    }\r\n    /** Cancels the health check delayed operation. */\r\n    cancelHealthCheck() {\r\n        if (this.healthCheck) {\r\n            this.healthCheck.cancel();\r\n            this.healthCheck = null;\r\n        }\r\n    }\r\n    /**\r\n     * Closes the stream and cleans up as necessary:\r\n     *\r\n     * * closes the underlying GRPC stream;\r\n     * * calls the onClose handler with the given 'error';\r\n     * * sets internal stream state to 'finalState';\r\n     * * adjusts the backoff timer based on the error\r\n     *\r\n     * A new stream can be opened by calling start().\r\n     *\r\n     * @param finalState - the intended state of the stream after closing.\r\n     * @param error - the error the connection was closed with.\r\n     */\r\n    async close(finalState, error) {\r\n        // Cancel any outstanding timers (they're guaranteed not to execute).\r\n        this.cancelIdleCheck();\r\n        this.cancelHealthCheck();\r\n        this.backoff.cancel();\r\n        // Invalidates any stream-related callbacks (e.g. from auth or the\r\n        // underlying stream), guaranteeing they won't execute.\r\n        this.closeCount++;\r\n        if (finalState !== 4 /* PersistentStreamState.Error */) {\r\n            // If this is an intentional close ensure we don't delay our next connection attempt.\r\n            this.backoff.reset();\r\n        }\r\n        else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\r\n            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\r\n            logError(error.toString());\r\n            logError('Using maximum backoff delay to prevent overloading the backend.');\r\n            this.backoff.resetToMax();\r\n        }\r\n        else if (error &&\r\n            error.code === Code.UNAUTHENTICATED &&\r\n            this.state !== 3 /* PersistentStreamState.Healthy */) {\r\n            // \"unauthenticated\" error means the token was rejected. This should rarely\r\n            // happen since both Auth and AppCheck ensure a sufficient TTL when we\r\n            // request a token. If a user manually resets their system clock this can\r\n            // fail, however. In this case, we should get a Code.UNAUTHENTICATED error\r\n            // before we received the first message and we need to invalidate the token\r\n            // to ensure that we fetch a new token.\r\n            this.authCredentialsProvider.invalidateToken();\r\n            this.appCheckCredentialsProvider.invalidateToken();\r\n        }\r\n        // Clean up the underlying stream because we are no longer interested in events.\r\n        if (this.stream !== null) {\r\n            this.tearDown();\r\n            this.stream.close();\r\n            this.stream = null;\r\n        }\r\n        // This state must be assigned before calling onClose() to allow the callback to\r\n        // inhibit backoff or otherwise manipulate the state in its non-started state.\r\n        this.state = finalState;\r\n        // Notify the listener that the stream closed.\r\n        await this.listener.onClose(error);\r\n    }\r\n    /**\r\n     * Can be overridden to perform additional cleanup before the stream is closed.\r\n     * Calling super.tearDown() is not required.\r\n     */\r\n    tearDown() { }\r\n    auth() {\r\n        this.state = 1 /* PersistentStreamState.Starting */;\r\n        const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\r\n        // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.\r\n        const closeCount = this.closeCount;\r\n        Promise.all([\r\n            this.authCredentialsProvider.getToken(),\r\n            this.appCheckCredentialsProvider.getToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            // Stream can be stopped while waiting for authentication.\r\n            // TODO(mikelehen): We really should just use dispatchIfNotClosed\r\n            // and let this dispatch onto the queue, but that opened a spec test can\r\n            // of worms that I don't want to deal with in this PR.\r\n            if (this.closeCount === closeCount) {\r\n                // Normally we'd have to schedule the callback on the AsyncQueue.\r\n                // However, the following calls are safe to be called outside the\r\n                // AsyncQueue since they don't chain asynchronous calls\r\n                this.startStream(authToken, appCheckToken);\r\n            }\r\n        }, (error) => {\r\n            dispatchIfNotClosed(() => {\r\n                const rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\r\n                return this.handleStreamClose(rpcError);\r\n            });\r\n        });\r\n    }\r\n    startStream(authToken, appCheckToken) {\r\n        const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\r\n        this.stream = this.startRpc(authToken, appCheckToken);\r\n        this.stream.onOpen(() => {\r\n            dispatchIfNotClosed(() => {\r\n                this.state = 2 /* PersistentStreamState.Open */;\r\n                this.healthCheck = this.queue.enqueueAfterDelay(this.healthTimerId, HEALTHY_TIMEOUT_MS, () => {\r\n                    if (this.isOpen()) {\r\n                        this.state = 3 /* PersistentStreamState.Healthy */;\r\n                    }\r\n                    return Promise.resolve();\r\n                });\r\n                return this.listener.onOpen();\r\n            });\r\n        });\r\n        this.stream.onClose((error) => {\r\n            dispatchIfNotClosed(() => {\r\n                return this.handleStreamClose(error);\r\n            });\r\n        });\r\n        this.stream.onMessage((msg) => {\r\n            dispatchIfNotClosed(() => {\r\n                return this.onMessage(msg);\r\n            });\r\n        });\r\n    }\r\n    performBackoff() {\r\n        this.state = 5 /* PersistentStreamState.Backoff */;\r\n        this.backoff.backoffAndRun(async () => {\r\n            this.state = 0 /* PersistentStreamState.Initial */;\r\n            this.start();\r\n        });\r\n    }\r\n    // Visible for tests\r\n    handleStreamClose(error) {\r\n        logDebug(LOG_TAG$7, `close with error: ${error}`);\r\n        this.stream = null;\r\n        // In theory the stream could close cleanly, however, in our current model\r\n        // we never expect this to happen because if we stop a stream ourselves,\r\n        // this callback will never be called. To prevent cases where we retry\r\n        // without a backoff accidentally, we set the stream to error in all cases.\r\n        return this.close(4 /* PersistentStreamState.Error */, error);\r\n    }\r\n    /**\r\n     * Returns a \"dispatcher\" function that dispatches operations onto the\r\n     * AsyncQueue but only runs them if closeCount remains unchanged. This allows\r\n     * us to turn auth / stream callbacks into no-ops if the stream is closed /\r\n     * re-opened, etc.\r\n     */\r\n    getCloseGuardedDispatcher(startCloseCount) {\r\n        return (fn) => {\r\n            this.queue.enqueueAndForget(() => {\r\n                if (this.closeCount === startCloseCount) {\r\n                    return fn();\r\n                }\r\n                else {\r\n                    logDebug(LOG_TAG$7, 'stream callback skipped by getCloseGuardedDispatcher.');\r\n                    return Promise.resolve();\r\n                }\r\n            });\r\n        };\r\n    }\r\n}\r\n/**\r\n * A PersistentStream that implements the Listen RPC.\r\n *\r\n * Once the Listen stream has called the onOpen() listener, any number of\r\n * listen() and unlisten() calls can be made to control what changes will be\r\n * sent from the server for ListenResponses.\r\n */\r\nclass PersistentListenStream extends PersistentStream {\r\n    constructor(queue, connection, authCredentials, appCheckCredentials, serializer, listener) {\r\n        super(queue, \"listen_stream_connection_backoff\" /* TimerId.ListenStreamConnectionBackoff */, \"listen_stream_idle\" /* TimerId.ListenStreamIdle */, \"health_check_timeout\" /* TimerId.HealthCheckTimeout */, connection, authCredentials, appCheckCredentials, listener);\r\n        this.serializer = serializer;\r\n    }\r\n    startRpc(authToken, appCheckToken) {\r\n        return this.connection.openStream('Listen', authToken, appCheckToken);\r\n    }\r\n    onMessage(watchChangeProto) {\r\n        // A successful response means the stream is healthy\r\n        this.backoff.reset();\r\n        const watchChange = fromWatchChange(this.serializer, watchChangeProto);\r\n        const snapshot = versionFromListenResponse(watchChangeProto);\r\n        return this.listener.onWatchChange(watchChange, snapshot);\r\n    }\r\n    /**\r\n     * Registers interest in the results of the given target. If the target\r\n     * includes a resumeToken it will be included in the request. Results that\r\n     * affect the target will be streamed back as WatchChange messages that\r\n     * reference the targetId.\r\n     */\r\n    watch(targetData) {\r\n        const request = {};\r\n        request.database = getEncodedDatabaseId(this.serializer);\r\n        request.addTarget = toTarget(this.serializer, targetData);\r\n        const labels = toListenRequestLabels(this.serializer, targetData);\r\n        if (labels) {\r\n            request.labels = labels;\r\n        }\r\n        this.sendRequest(request);\r\n    }\r\n    /**\r\n     * Unregisters interest in the results of the target associated with the\r\n     * given targetId.\r\n     */\r\n    unwatch(targetId) {\r\n        const request = {};\r\n        request.database = getEncodedDatabaseId(this.serializer);\r\n        request.removeTarget = targetId;\r\n        this.sendRequest(request);\r\n    }\r\n}\r\n/**\r\n * A Stream that implements the Write RPC.\r\n *\r\n * The Write RPC requires the caller to maintain special streamToken\r\n * state in between calls, to help the server understand which responses the\r\n * client has processed by the time the next request is made. Every response\r\n * will contain a streamToken; this value must be passed to the next\r\n * request.\r\n *\r\n * After calling start() on this stream, the next request must be a handshake,\r\n * containing whatever streamToken is on hand. Once a response to this\r\n * request is received, all pending mutations may be submitted. When\r\n * submitting multiple batches of mutations at the same time, it's\r\n * okay to use the same streamToken for the calls to writeMutations.\r\n *\r\n * TODO(b/33271235): Use proto types\r\n */\r\nclass PersistentWriteStream extends PersistentStream {\r\n    constructor(queue, connection, authCredentials, appCheckCredentials, serializer, listener) {\r\n        super(queue, \"write_stream_connection_backoff\" /* TimerId.WriteStreamConnectionBackoff */, \"write_stream_idle\" /* TimerId.WriteStreamIdle */, \"health_check_timeout\" /* TimerId.HealthCheckTimeout */, connection, authCredentials, appCheckCredentials, listener);\r\n        this.serializer = serializer;\r\n        this.handshakeComplete_ = false;\r\n    }\r\n    /**\r\n     * Tracks whether or not a handshake has been successfully exchanged and\r\n     * the stream is ready to accept mutations.\r\n     */\r\n    get handshakeComplete() {\r\n        return this.handshakeComplete_;\r\n    }\r\n    // Override of PersistentStream.start\r\n    start() {\r\n        this.handshakeComplete_ = false;\r\n        this.lastStreamToken = undefined;\r\n        super.start();\r\n    }\r\n    tearDown() {\r\n        if (this.handshakeComplete_) {\r\n            this.writeMutations([]);\r\n        }\r\n    }\r\n    startRpc(authToken, appCheckToken) {\r\n        return this.connection.openStream('Write', authToken, appCheckToken);\r\n    }\r\n    onMessage(responseProto) {\r\n        // Always capture the last stream token.\r\n        hardAssert(!!responseProto.streamToken);\r\n        this.lastStreamToken = responseProto.streamToken;\r\n        if (!this.handshakeComplete_) {\r\n            // The first response is always the handshake response\r\n            hardAssert(!responseProto.writeResults || responseProto.writeResults.length === 0);\r\n            this.handshakeComplete_ = true;\r\n            return this.listener.onHandshakeComplete();\r\n        }\r\n        else {\r\n            // A successful first write response means the stream is healthy,\r\n            // Note, that we could consider a successful handshake healthy, however,\r\n            // the write itself might be causing an error we want to back off from.\r\n            this.backoff.reset();\r\n            const results = fromWriteResults(responseProto.writeResults, responseProto.commitTime);\r\n            const commitVersion = fromVersion(responseProto.commitTime);\r\n            return this.listener.onMutationResult(commitVersion, results);\r\n        }\r\n    }\r\n    /**\r\n     * Sends an initial streamToken to the server, performing the handshake\r\n     * required to make the StreamingWrite RPC work. Subsequent\r\n     * calls should wait until onHandshakeComplete was called.\r\n     */\r\n    writeHandshake() {\r\n        // TODO(dimond): Support stream resumption. We intentionally do not set the\r\n        // stream token on the handshake, ignoring any stream token we might have.\r\n        const request = {};\r\n        request.database = getEncodedDatabaseId(this.serializer);\r\n        this.sendRequest(request);\r\n    }\r\n    /** Sends a group of mutations to the Firestore backend to apply. */\r\n    writeMutations(mutations) {\r\n        const request = {\r\n            streamToken: this.lastStreamToken,\r\n            writes: mutations.map(mutation => toMutation(this.serializer, mutation))\r\n        };\r\n        this.sendRequest(request);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Datastore and its related methods are a wrapper around the external Google\r\n * Cloud Datastore grpc API, which provides an interface that is more convenient\r\n * for the rest of the client SDK architecture to consume.\r\n */\r\nclass Datastore {\r\n}\r\n/**\r\n * An implementation of Datastore that exposes additional state for internal\r\n * consumption.\r\n */\r\nclass DatastoreImpl extends Datastore {\r\n    constructor(authCredentials, appCheckCredentials, connection, serializer) {\r\n        super();\r\n        this.authCredentials = authCredentials;\r\n        this.appCheckCredentials = appCheckCredentials;\r\n        this.connection = connection;\r\n        this.serializer = serializer;\r\n        this.terminated = false;\r\n    }\r\n    verifyInitialized() {\r\n        if (this.terminated) {\r\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'The client has already been terminated.');\r\n        }\r\n    }\r\n    /** Invokes the provided RPC with auth and AppCheck tokens. */\r\n    invokeRPC(rpcName, path, request) {\r\n        this.verifyInitialized();\r\n        return Promise.all([\r\n            this.authCredentials.getToken(),\r\n            this.appCheckCredentials.getToken()\r\n        ])\r\n            .then(([authToken, appCheckToken]) => {\r\n            return this.connection.invokeRPC(rpcName, path, request, authToken, appCheckToken);\r\n        })\r\n            .catch((error) => {\r\n            if (error.name === 'FirebaseError') {\r\n                if (error.code === Code.UNAUTHENTICATED) {\r\n                    this.authCredentials.invalidateToken();\r\n                    this.appCheckCredentials.invalidateToken();\r\n                }\r\n                throw error;\r\n            }\r\n            else {\r\n                throw new FirestoreError(Code.UNKNOWN, error.toString());\r\n            }\r\n        });\r\n    }\r\n    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */\r\n    invokeStreamingRPC(rpcName, path, request, expectedResponseCount) {\r\n        this.verifyInitialized();\r\n        return Promise.all([\r\n            this.authCredentials.getToken(),\r\n            this.appCheckCredentials.getToken()\r\n        ])\r\n            .then(([authToken, appCheckToken]) => {\r\n            return this.connection.invokeStreamingRPC(rpcName, path, request, authToken, appCheckToken, expectedResponseCount);\r\n        })\r\n            .catch((error) => {\r\n            if (error.name === 'FirebaseError') {\r\n                if (error.code === Code.UNAUTHENTICATED) {\r\n                    this.authCredentials.invalidateToken();\r\n                    this.appCheckCredentials.invalidateToken();\r\n                }\r\n                throw error;\r\n            }\r\n            else {\r\n                throw new FirestoreError(Code.UNKNOWN, error.toString());\r\n            }\r\n        });\r\n    }\r\n    terminate() {\r\n        this.terminated = true;\r\n    }\r\n}\r\n// TODO(firestorexp): Make sure there is only one Datastore instance per\r\n// firestore-exp client.\r\nfunction newDatastore(authCredentials, appCheckCredentials, connection, serializer) {\r\n    return new DatastoreImpl(authCredentials, appCheckCredentials, connection, serializer);\r\n}\r\nasync function invokeCommitRpc(datastore, mutations) {\r\n    const datastoreImpl = debugCast(datastore);\r\n    const path = getEncodedDatabaseId(datastoreImpl.serializer) + '/documents';\r\n    const request = {\r\n        writes: mutations.map(m => toMutation(datastoreImpl.serializer, m))\r\n    };\r\n    await datastoreImpl.invokeRPC('Commit', path, request);\r\n}\r\nasync function invokeBatchGetDocumentsRpc(datastore, keys) {\r\n    const datastoreImpl = debugCast(datastore);\r\n    const path = getEncodedDatabaseId(datastoreImpl.serializer) + '/documents';\r\n    const request = {\r\n        documents: keys.map(k => toName(datastoreImpl.serializer, k))\r\n    };\r\n    const response = await datastoreImpl.invokeStreamingRPC('BatchGetDocuments', path, request, keys.length);\r\n    const docs = new Map();\r\n    response.forEach(proto => {\r\n        const doc = fromBatchGetDocumentsResponse(datastoreImpl.serializer, proto);\r\n        docs.set(doc.key.toString(), doc);\r\n    });\r\n    const result = [];\r\n    keys.forEach(key => {\r\n        const doc = docs.get(key.toString());\r\n        hardAssert(!!doc);\r\n        result.push(doc);\r\n    });\r\n    return result;\r\n}\r\nasync function invokeRunAggregationQueryRpc(datastore, query, aggregates) {\r\n    var _a;\r\n    const datastoreImpl = debugCast(datastore);\r\n    const { request, aliasMap } = toRunAggregationQueryRequest(datastoreImpl.serializer, queryToTarget(query), aggregates);\r\n    const parent = request.parent;\r\n    if (!datastoreImpl.connection.shouldResourcePathBeIncludedInRequest) {\r\n        delete request.parent;\r\n    }\r\n    const response = await datastoreImpl.invokeStreamingRPC('RunAggregationQuery', parent, request, /*expectedResponseCount=*/ 1);\r\n    // Omit RunAggregationQueryResponse that only contain readTimes.\r\n    const filteredResult = response.filter(proto => !!proto.result);\r\n    hardAssert(filteredResult.length === 1);\r\n    // Remap the short-form aliases that were sent to the server\r\n    // to the client-side aliases. Users will access the results\r\n    // using the client-side alias.\r\n    const unmappedAggregateFields = (_a = filteredResult[0].result) === null || _a === void 0 ? void 0 : _a.aggregateFields;\r\n    const remappedFields = Object.keys(unmappedAggregateFields).reduce((accumulator, key) => {\r\n        accumulator[aliasMap[key]] = unmappedAggregateFields[key];\r\n        return accumulator;\r\n    }, {});\r\n    return remappedFields;\r\n}\r\nfunction newPersistentWriteStream(datastore, queue, listener) {\r\n    const datastoreImpl = debugCast(datastore);\r\n    datastoreImpl.verifyInitialized();\r\n    return new PersistentWriteStream(queue, datastoreImpl.connection, datastoreImpl.authCredentials, datastoreImpl.appCheckCredentials, datastoreImpl.serializer, listener);\r\n}\r\nfunction newPersistentWatchStream(datastore, queue, listener) {\r\n    const datastoreImpl = debugCast(datastore);\r\n    datastoreImpl.verifyInitialized();\r\n    return new PersistentListenStream(queue, datastoreImpl.connection, datastoreImpl.authCredentials, datastoreImpl.appCheckCredentials, datastoreImpl.serializer, listener);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$6 = 'OnlineStateTracker';\r\n// To deal with transient failures, we allow multiple stream attempts before\r\n// giving up and transitioning from OnlineState.Unknown to Offline.\r\n// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.\r\n// @jdimond thinks that bug is sufficiently fixed so that we can set this back\r\n// to 1. If that works okay, we could potentially remove this logic entirely.\r\nconst MAX_WATCH_STREAM_FAILURES = 1;\r\n// To deal with stream attempts that don't succeed or fail in a timely manner,\r\n// we have a timeout for OnlineState to reach Online or Offline.\r\n// If the timeout is reached, we transition to Offline rather than waiting\r\n// indefinitely.\r\nconst ONLINE_STATE_TIMEOUT_MS = 10 * 1000;\r\n/**\r\n * A component used by the RemoteStore to track the OnlineState (that is,\r\n * whether or not the client as a whole should be considered to be online or\r\n * offline), implementing the appropriate heuristics.\r\n *\r\n * In particular, when the client is trying to connect to the backend, we\r\n * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for\r\n * a connection to succeed. If we have too many failures or the timeout elapses,\r\n * then we set the OnlineState to Offline, and the client will behave as if\r\n * it is offline (get()s will return cached data, etc.).\r\n */\r\nclass OnlineStateTracker {\r\n    constructor(asyncQueue, onlineStateHandler) {\r\n        this.asyncQueue = asyncQueue;\r\n        this.onlineStateHandler = onlineStateHandler;\r\n        /** The current OnlineState. */\r\n        this.state = \"Unknown\" /* OnlineState.Unknown */;\r\n        /**\r\n         * A count of consecutive failures to open the stream. If it reaches the\r\n         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to\r\n         * Offline.\r\n         */\r\n        this.watchStreamFailures = 0;\r\n        /**\r\n         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we\r\n         * transition from OnlineState.Unknown to OnlineState.Offline without waiting\r\n         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).\r\n         */\r\n        this.onlineStateTimer = null;\r\n        /**\r\n         * Whether the client should log a warning message if it fails to connect to\r\n         * the backend (initially true, cleared after a successful stream, or if we've\r\n         * logged the message already).\r\n         */\r\n        this.shouldWarnClientIsOffline = true;\r\n    }\r\n    /**\r\n     * Called by RemoteStore when a watch stream is started (including on each\r\n     * backoff attempt).\r\n     *\r\n     * If this is the first attempt, it sets the OnlineState to Unknown and starts\r\n     * the onlineStateTimer.\r\n     */\r\n    handleWatchStreamStart() {\r\n        if (this.watchStreamFailures === 0) {\r\n            this.setAndBroadcast(\"Unknown\" /* OnlineState.Unknown */);\r\n            this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(\"online_state_timeout\" /* TimerId.OnlineStateTimeout */, ONLINE_STATE_TIMEOUT_MS, () => {\r\n                this.onlineStateTimer = null;\r\n                this.logClientOfflineWarningIfNecessary(`Backend didn't respond within ${ONLINE_STATE_TIMEOUT_MS / 1000} ` +\r\n                    `seconds.`);\r\n                this.setAndBroadcast(\"Offline\" /* OnlineState.Offline */);\r\n                // NOTE: handleWatchStreamFailure() will continue to increment\r\n                // watchStreamFailures even though we are already marked Offline,\r\n                // but this is non-harmful.\r\n                return Promise.resolve();\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Updates our OnlineState as appropriate after the watch stream reports a\r\n     * failure. The first failure moves us to the 'Unknown' state. We then may\r\n     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we\r\n     * actually transition to the 'Offline' state.\r\n     */\r\n    handleWatchStreamFailure(error) {\r\n        if (this.state === \"Online\" /* OnlineState.Online */) {\r\n            this.setAndBroadcast(\"Unknown\" /* OnlineState.Unknown */);\r\n        }\r\n        else {\r\n            this.watchStreamFailures++;\r\n            if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {\r\n                this.clearOnlineStateTimer();\r\n                this.logClientOfflineWarningIfNecessary(`Connection failed ${MAX_WATCH_STREAM_FAILURES} ` +\r\n                    `times. Most recent error: ${error.toString()}`);\r\n                this.setAndBroadcast(\"Offline\" /* OnlineState.Offline */);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Explicitly sets the OnlineState to the specified state.\r\n     *\r\n     * Note that this resets our timers / failure counters, etc. used by our\r\n     * Offline heuristics, so must not be used in place of\r\n     * handleWatchStreamStart() and handleWatchStreamFailure().\r\n     */\r\n    set(newState) {\r\n        this.clearOnlineStateTimer();\r\n        this.watchStreamFailures = 0;\r\n        if (newState === \"Online\" /* OnlineState.Online */) {\r\n            // We've connected to watch at least once. Don't warn the developer\r\n            // about being offline going forward.\r\n            this.shouldWarnClientIsOffline = false;\r\n        }\r\n        this.setAndBroadcast(newState);\r\n    }\r\n    setAndBroadcast(newState) {\r\n        if (newState !== this.state) {\r\n            this.state = newState;\r\n            this.onlineStateHandler(newState);\r\n        }\r\n    }\r\n    logClientOfflineWarningIfNecessary(details) {\r\n        const message = `Could not reach Cloud Firestore backend. ${details}\\n` +\r\n            `This typically indicates that your device does not have a healthy ` +\r\n            `Internet connection at the moment. The client will operate in offline ` +\r\n            `mode until it is able to successfully connect to the backend.`;\r\n        if (this.shouldWarnClientIsOffline) {\r\n            logError(message);\r\n            this.shouldWarnClientIsOffline = false;\r\n        }\r\n        else {\r\n            logDebug(LOG_TAG$6, message);\r\n        }\r\n    }\r\n    clearOnlineStateTimer() {\r\n        if (this.onlineStateTimer !== null) {\r\n            this.onlineStateTimer.cancel();\r\n            this.onlineStateTimer = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$5 = 'RemoteStore';\r\n// TODO(b/35853402): Negotiate this with the stream.\r\nconst MAX_PENDING_WRITES = 10;\r\nclass RemoteStoreImpl {\r\n    constructor(\r\n    /**\r\n     * The local store, used to fill the write pipeline with outbound mutations.\r\n     */\r\n    localStore, \r\n    /** The client-side proxy for interacting with the backend. */\r\n    datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {\r\n        this.localStore = localStore;\r\n        this.datastore = datastore;\r\n        this.asyncQueue = asyncQueue;\r\n        this.remoteSyncer = {};\r\n        /**\r\n         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the\r\n         * LocalStore via fillWritePipeline() and have or will send to the write\r\n         * stream.\r\n         *\r\n         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or\r\n         * restart the write stream. When the stream is established the writes in the\r\n         * pipeline will be sent in order.\r\n         *\r\n         * Writes remain in writePipeline until they are acknowledged by the backend\r\n         * and thus will automatically be re-sent if the stream is interrupted /\r\n         * restarted before they're acknowledged.\r\n         *\r\n         * Write responses from the backend are linked to their originating request\r\n         * purely based on order, and so we can just shift() writes from the front of\r\n         * the writePipeline as we receive responses.\r\n         */\r\n        this.writePipeline = [];\r\n        /**\r\n         * A mapping of watched targets that the client cares about tracking and the\r\n         * user has explicitly called a 'listen' for this target.\r\n         *\r\n         * These targets may or may not have been sent to or acknowledged by the\r\n         * server. On re-establishing the listen stream, these targets should be sent\r\n         * to the server. The targets removed with unlistens are removed eagerly\r\n         * without waiting for confirmation from the listen stream.\r\n         */\r\n        this.listenTargets = new Map();\r\n        /**\r\n         * A set of reasons for why the RemoteStore may be offline. If empty, the\r\n         * RemoteStore may start its network connections.\r\n         */\r\n        this.offlineCauses = new Set();\r\n        /**\r\n         * Event handlers that get called when the network is disabled or enabled.\r\n         *\r\n         * PORTING NOTE: These functions are used on the Web client to create the\r\n         * underlying streams (to support tree-shakeable streams). On Android and iOS,\r\n         * the streams are created during construction of RemoteStore.\r\n         */\r\n        this.onNetworkStatusChange = [];\r\n        this.connectivityMonitor = connectivityMonitor;\r\n        this.connectivityMonitor.addCallback((_) => {\r\n            asyncQueue.enqueueAndForget(async () => {\r\n                // Porting Note: Unlike iOS, `restartNetwork()` is called even when the\r\n                // network becomes unreachable as we don't have any other way to tear\r\n                // down our streams.\r\n                if (canUseNetwork(this)) {\r\n                    logDebug(LOG_TAG$5, 'Restarting streams for network reachability change.');\r\n                    await restartNetwork(this);\r\n                }\r\n            });\r\n        });\r\n        this.onlineStateTracker = new OnlineStateTracker(asyncQueue, onlineStateHandler);\r\n    }\r\n}\r\nfunction newRemoteStore(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {\r\n    return new RemoteStoreImpl(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor);\r\n}\r\n/** Re-enables the network. Idempotent. */\r\nfunction remoteStoreEnableNetwork(remoteStore) {\r\n    const remoteStoreImpl = debugCast(remoteStore);\r\n    remoteStoreImpl.offlineCauses.delete(0 /* OfflineCause.UserDisabled */);\r\n    return enableNetworkInternal(remoteStoreImpl);\r\n}\r\nasync function enableNetworkInternal(remoteStoreImpl) {\r\n    if (canUseNetwork(remoteStoreImpl)) {\r\n        for (const networkStatusHandler of remoteStoreImpl.onNetworkStatusChange) {\r\n            await networkStatusHandler(/* enabled= */ true);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Temporarily disables the network. The network can be re-enabled using\r\n * enableNetwork().\r\n */\r\nasync function remoteStoreDisableNetwork(remoteStore) {\r\n    const remoteStoreImpl = debugCast(remoteStore);\r\n    remoteStoreImpl.offlineCauses.add(0 /* OfflineCause.UserDisabled */);\r\n    await disableNetworkInternal(remoteStoreImpl);\r\n    // Set the OnlineState to Offline so get()s return from cache, etc.\r\n    remoteStoreImpl.onlineStateTracker.set(\"Offline\" /* OnlineState.Offline */);\r\n}\r\nasync function disableNetworkInternal(remoteStoreImpl) {\r\n    for (const networkStatusHandler of remoteStoreImpl.onNetworkStatusChange) {\r\n        await networkStatusHandler(/* enabled= */ false);\r\n    }\r\n}\r\nasync function remoteStoreShutdown(remoteStore) {\r\n    const remoteStoreImpl = debugCast(remoteStore);\r\n    logDebug(LOG_TAG$5, 'RemoteStore shutting down.');\r\n    remoteStoreImpl.offlineCauses.add(5 /* OfflineCause.Shutdown */);\r\n    await disableNetworkInternal(remoteStoreImpl);\r\n    remoteStoreImpl.connectivityMonitor.shutdown();\r\n    // Set the OnlineState to Unknown (rather than Offline) to avoid potentially\r\n    // triggering spurious listener events with cached data, etc.\r\n    remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\r\n}\r\n/**\r\n * Starts new listen for the given target. Uses resume token if provided. It\r\n * is a no-op if the target of given `TargetData` is already being listened to.\r\n */\r\nfunction remoteStoreListen(remoteStore, targetData) {\r\n    const remoteStoreImpl = debugCast(remoteStore);\r\n    if (remoteStoreImpl.listenTargets.has(targetData.targetId)) {\r\n        return;\r\n    }\r\n    // Mark this as something the client is currently listening for.\r\n    remoteStoreImpl.listenTargets.set(targetData.targetId, targetData);\r\n    if (shouldStartWatchStream(remoteStoreImpl)) {\r\n        // The listen will be sent in onWatchStreamOpen\r\n        startWatchStream(remoteStoreImpl);\r\n    }\r\n    else if (ensureWatchStream(remoteStoreImpl).isOpen()) {\r\n        sendWatchRequest(remoteStoreImpl, targetData);\r\n    }\r\n}\r\n/**\r\n * Removes the listen from server. It is a no-op if the given target id is\r\n * not being listened to.\r\n */\r\nfunction remoteStoreUnlisten(remoteStore, targetId) {\r\n    const remoteStoreImpl = debugCast(remoteStore);\r\n    const watchStream = ensureWatchStream(remoteStoreImpl);\r\n    remoteStoreImpl.listenTargets.delete(targetId);\r\n    if (watchStream.isOpen()) {\r\n        sendUnwatchRequest(remoteStoreImpl, targetId);\r\n    }\r\n    if (remoteStoreImpl.listenTargets.size === 0) {\r\n        if (watchStream.isOpen()) {\r\n            watchStream.markIdle();\r\n        }\r\n        else if (canUseNetwork(remoteStoreImpl)) {\r\n            // Revert to OnlineState.Unknown if the watch stream is not open and we\r\n            // have no listeners, since without any listens to send we cannot\r\n            // confirm if the stream is healthy and upgrade to OnlineState.Online.\r\n            remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\r\n        }\r\n    }\r\n}\r\n/**\r\n * We need to increment the the expected number of pending responses we're due\r\n * from watch so we wait for the ack to process any messages from this target.\r\n */\r\nfunction sendWatchRequest(remoteStoreImpl, targetData) {\r\n    remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetData.targetId);\r\n    if (targetData.resumeToken.approximateByteSize() > 0 ||\r\n        targetData.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {\r\n        const expectedCount = remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget(targetData.targetId).size;\r\n        targetData = targetData.withExpectedCount(expectedCount);\r\n    }\r\n    ensureWatchStream(remoteStoreImpl).watch(targetData);\r\n}\r\n/**\r\n * We need to increment the expected number of pending responses we're due\r\n * from watch so we wait for the removal on the server before we process any\r\n * messages from this target.\r\n */\r\nfunction sendUnwatchRequest(remoteStoreImpl, targetId) {\r\n    remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetId);\r\n    ensureWatchStream(remoteStoreImpl).unwatch(targetId);\r\n}\r\nfunction startWatchStream(remoteStoreImpl) {\r\n    remoteStoreImpl.watchChangeAggregator = new WatchChangeAggregator({\r\n        getRemoteKeysForTarget: targetId => remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget(targetId),\r\n        getTargetDataForTarget: targetId => remoteStoreImpl.listenTargets.get(targetId) || null,\r\n        getDatabaseId: () => remoteStoreImpl.datastore.serializer.databaseId\r\n    });\r\n    ensureWatchStream(remoteStoreImpl).start();\r\n    remoteStoreImpl.onlineStateTracker.handleWatchStreamStart();\r\n}\r\n/**\r\n * Returns whether the watch stream should be started because it's necessary\r\n * and has not yet been started.\r\n */\r\nfunction shouldStartWatchStream(remoteStoreImpl) {\r\n    return (canUseNetwork(remoteStoreImpl) &&\r\n        !ensureWatchStream(remoteStoreImpl).isStarted() &&\r\n        remoteStoreImpl.listenTargets.size > 0);\r\n}\r\nfunction canUseNetwork(remoteStore) {\r\n    const remoteStoreImpl = debugCast(remoteStore);\r\n    return remoteStoreImpl.offlineCauses.size === 0;\r\n}\r\nfunction cleanUpWatchStreamState(remoteStoreImpl) {\r\n    remoteStoreImpl.watchChangeAggregator = undefined;\r\n}\r\nasync function onWatchStreamOpen(remoteStoreImpl) {\r\n    remoteStoreImpl.listenTargets.forEach((targetData, targetId) => {\r\n        sendWatchRequest(remoteStoreImpl, targetData);\r\n    });\r\n}\r\nasync function onWatchStreamClose(remoteStoreImpl, error) {\r\n    cleanUpWatchStreamState(remoteStoreImpl);\r\n    // If we still need the watch stream, retry the connection.\r\n    if (shouldStartWatchStream(remoteStoreImpl)) {\r\n        remoteStoreImpl.onlineStateTracker.handleWatchStreamFailure(error);\r\n        startWatchStream(remoteStoreImpl);\r\n    }\r\n    else {\r\n        // No need to restart watch stream because there are no active targets.\r\n        // The online state is set to unknown because there is no active attempt\r\n        // at establishing a connection\r\n        remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\r\n    }\r\n}\r\nasync function onWatchStreamChange(remoteStoreImpl, watchChange, snapshotVersion) {\r\n    // Mark the client as online since we got a message from the server\r\n    remoteStoreImpl.onlineStateTracker.set(\"Online\" /* OnlineState.Online */);\r\n    if (watchChange instanceof WatchTargetChange &&\r\n        watchChange.state === 2 /* WatchTargetChangeState.Removed */ &&\r\n        watchChange.cause) {\r\n        // There was an error on a target, don't wait for a consistent snapshot\r\n        // to raise events\r\n        try {\r\n            await handleTargetError(remoteStoreImpl, watchChange);\r\n        }\r\n        catch (e) {\r\n            logDebug(LOG_TAG$5, 'Failed to remove targets %s: %s ', watchChange.targetIds.join(','), e);\r\n            await disableNetworkUntilRecovery(remoteStoreImpl, e);\r\n        }\r\n        return;\r\n    }\r\n    if (watchChange instanceof DocumentWatchChange) {\r\n        remoteStoreImpl.watchChangeAggregator.handleDocumentChange(watchChange);\r\n    }\r\n    else if (watchChange instanceof ExistenceFilterChange) {\r\n        remoteStoreImpl.watchChangeAggregator.handleExistenceFilter(watchChange);\r\n    }\r\n    else {\r\n        remoteStoreImpl.watchChangeAggregator.handleTargetChange(watchChange);\r\n    }\r\n    if (!snapshotVersion.isEqual(SnapshotVersion.min())) {\r\n        try {\r\n            const lastRemoteSnapshotVersion = await localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore);\r\n            if (snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0) {\r\n                // We have received a target change with a global snapshot if the snapshot\r\n                // version is not equal to SnapshotVersion.min().\r\n                await raiseWatchSnapshot(remoteStoreImpl, snapshotVersion);\r\n            }\r\n        }\r\n        catch (e) {\r\n            logDebug(LOG_TAG$5, 'Failed to raise snapshot:', e);\r\n            await disableNetworkUntilRecovery(remoteStoreImpl, e);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recovery logic for IndexedDB errors that takes the network offline until\r\n * `op` succeeds. Retries are scheduled with backoff using\r\n * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is\r\n * validated via a generic operation.\r\n *\r\n * The returned Promise is resolved once the network is disabled and before\r\n * any retry attempt.\r\n */\r\nasync function disableNetworkUntilRecovery(remoteStoreImpl, e, op) {\r\n    if (isIndexedDbTransactionError(e)) {\r\n        remoteStoreImpl.offlineCauses.add(1 /* OfflineCause.IndexedDbFailed */);\r\n        // Disable network and raise offline snapshots\r\n        await disableNetworkInternal(remoteStoreImpl);\r\n        remoteStoreImpl.onlineStateTracker.set(\"Offline\" /* OnlineState.Offline */);\r\n        if (!op) {\r\n            // Use a simple read operation to determine if IndexedDB recovered.\r\n            // Ideally, we would expose a health check directly on SimpleDb, but\r\n            // RemoteStore only has access to persistence through LocalStore.\r\n            op = () => localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore);\r\n        }\r\n        // Probe IndexedDB periodically and re-enable network\r\n        remoteStoreImpl.asyncQueue.enqueueRetryable(async () => {\r\n            logDebug(LOG_TAG$5, 'Retrying IndexedDB access');\r\n            await op();\r\n            remoteStoreImpl.offlineCauses.delete(1 /* OfflineCause.IndexedDbFailed */);\r\n            await enableNetworkInternal(remoteStoreImpl);\r\n        });\r\n    }\r\n    else {\r\n        throw e;\r\n    }\r\n}\r\n/**\r\n * Executes `op`. If `op` fails, takes the network offline until `op`\r\n * succeeds. Returns after the first attempt.\r\n */\r\nfunction executeWithRecovery(remoteStoreImpl, op) {\r\n    return op().catch(e => disableNetworkUntilRecovery(remoteStoreImpl, e, op));\r\n}\r\n/**\r\n * Takes a batch of changes from the Datastore, repackages them as a\r\n * RemoteEvent, and passes that on to the listener, which is typically the\r\n * SyncEngine.\r\n */\r\nfunction raiseWatchSnapshot(remoteStoreImpl, snapshotVersion) {\r\n    const remoteEvent = remoteStoreImpl.watchChangeAggregator.createRemoteEvent(snapshotVersion);\r\n    // Update in-memory resume tokens. LocalStore will update the\r\n    // persistent view of these when applying the completed RemoteEvent.\r\n    remoteEvent.targetChanges.forEach((change, targetId) => {\r\n        if (change.resumeToken.approximateByteSize() > 0) {\r\n            const targetData = remoteStoreImpl.listenTargets.get(targetId);\r\n            // A watched target might have been removed already.\r\n            if (targetData) {\r\n                remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(change.resumeToken, snapshotVersion));\r\n            }\r\n        }\r\n    });\r\n    // Re-establish listens for the targets that have been invalidated by\r\n    // existence filter mismatches.\r\n    remoteEvent.targetMismatches.forEach((targetId, targetPurpose) => {\r\n        const targetData = remoteStoreImpl.listenTargets.get(targetId);\r\n        if (!targetData) {\r\n            // A watched target might have been removed already.\r\n            return;\r\n        }\r\n        // Clear the resume token for the target, since we're in a known mismatch\r\n        // state.\r\n        remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(ByteString.EMPTY_BYTE_STRING, targetData.snapshotVersion));\r\n        // Cause a hard reset by unwatching and rewatching immediately, but\r\n        // deliberately don't send a resume token so that we get a full update.\r\n        sendUnwatchRequest(remoteStoreImpl, targetId);\r\n        // Mark the target we send as being on behalf of an existence filter\r\n        // mismatch, but don't actually retain that in listenTargets. This ensures\r\n        // that we flag the first re-listen this way without impacting future\r\n        // listens of this target (that might happen e.g. on reconnect).\r\n        const requestTargetData = new TargetData(targetData.target, targetId, targetPurpose, targetData.sequenceNumber);\r\n        sendWatchRequest(remoteStoreImpl, requestTargetData);\r\n    });\r\n    return remoteStoreImpl.remoteSyncer.applyRemoteEvent(remoteEvent);\r\n}\r\n/** Handles an error on a target */\r\nasync function handleTargetError(remoteStoreImpl, watchChange) {\r\n    const error = watchChange.cause;\r\n    for (const targetId of watchChange.targetIds) {\r\n        // A watched target might have been removed already.\r\n        if (remoteStoreImpl.listenTargets.has(targetId)) {\r\n            await remoteStoreImpl.remoteSyncer.rejectListen(targetId, error);\r\n            remoteStoreImpl.listenTargets.delete(targetId);\r\n            remoteStoreImpl.watchChangeAggregator.removeTarget(targetId);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Attempts to fill our write pipeline with writes from the LocalStore.\r\n *\r\n * Called internally to bootstrap or refill the write pipeline and by\r\n * SyncEngine whenever there are new mutations to process.\r\n *\r\n * Starts the write stream if necessary.\r\n */\r\nasync function fillWritePipeline(remoteStore) {\r\n    const remoteStoreImpl = debugCast(remoteStore);\r\n    const writeStream = ensureWriteStream(remoteStoreImpl);\r\n    let lastBatchIdRetrieved = remoteStoreImpl.writePipeline.length > 0\r\n        ? remoteStoreImpl.writePipeline[remoteStoreImpl.writePipeline.length - 1]\r\n            .batchId\r\n        : BATCHID_UNKNOWN;\r\n    while (canAddToWritePipeline(remoteStoreImpl)) {\r\n        try {\r\n            const batch = await localStoreGetNextMutationBatch(remoteStoreImpl.localStore, lastBatchIdRetrieved);\r\n            if (batch === null) {\r\n                if (remoteStoreImpl.writePipeline.length === 0) {\r\n                    writeStream.markIdle();\r\n                }\r\n                break;\r\n            }\r\n            else {\r\n                lastBatchIdRetrieved = batch.batchId;\r\n                addToWritePipeline(remoteStoreImpl, batch);\r\n            }\r\n        }\r\n        catch (e) {\r\n            await disableNetworkUntilRecovery(remoteStoreImpl, e);\r\n        }\r\n    }\r\n    if (shouldStartWriteStream(remoteStoreImpl)) {\r\n        startWriteStream(remoteStoreImpl);\r\n    }\r\n}\r\n/**\r\n * Returns true if we can add to the write pipeline (i.e. the network is\r\n * enabled and the write pipeline is not full).\r\n */\r\nfunction canAddToWritePipeline(remoteStoreImpl) {\r\n    return (canUseNetwork(remoteStoreImpl) &&\r\n        remoteStoreImpl.writePipeline.length < MAX_PENDING_WRITES);\r\n}\r\n/**\r\n * Queues additional writes to be sent to the write stream, sending them\r\n * immediately if the write stream is established.\r\n */\r\nfunction addToWritePipeline(remoteStoreImpl, batch) {\r\n    remoteStoreImpl.writePipeline.push(batch);\r\n    const writeStream = ensureWriteStream(remoteStoreImpl);\r\n    if (writeStream.isOpen() && writeStream.handshakeComplete) {\r\n        writeStream.writeMutations(batch.mutations);\r\n    }\r\n}\r\nfunction shouldStartWriteStream(remoteStoreImpl) {\r\n    return (canUseNetwork(remoteStoreImpl) &&\r\n        !ensureWriteStream(remoteStoreImpl).isStarted() &&\r\n        remoteStoreImpl.writePipeline.length > 0);\r\n}\r\nfunction startWriteStream(remoteStoreImpl) {\r\n    ensureWriteStream(remoteStoreImpl).start();\r\n}\r\nasync function onWriteStreamOpen(remoteStoreImpl) {\r\n    ensureWriteStream(remoteStoreImpl).writeHandshake();\r\n}\r\nasync function onWriteHandshakeComplete(remoteStoreImpl) {\r\n    const writeStream = ensureWriteStream(remoteStoreImpl);\r\n    // Send the write pipeline now that the stream is established.\r\n    for (const batch of remoteStoreImpl.writePipeline) {\r\n        writeStream.writeMutations(batch.mutations);\r\n    }\r\n}\r\nasync function onMutationResult(remoteStoreImpl, commitVersion, results) {\r\n    const batch = remoteStoreImpl.writePipeline.shift();\r\n    const success = MutationBatchResult.from(batch, commitVersion, results);\r\n    await executeWithRecovery(remoteStoreImpl, () => remoteStoreImpl.remoteSyncer.applySuccessfulWrite(success));\r\n    // It's possible that with the completion of this mutation another\r\n    // slot has freed up.\r\n    await fillWritePipeline(remoteStoreImpl);\r\n}\r\nasync function onWriteStreamClose(remoteStoreImpl, error) {\r\n    // If the write stream closed after the write handshake completes, a write\r\n    // operation failed and we fail the pending operation.\r\n    if (error && ensureWriteStream(remoteStoreImpl).handshakeComplete) {\r\n        // This error affects the actual write.\r\n        await handleWriteError(remoteStoreImpl, error);\r\n    }\r\n    // The write stream might have been started by refilling the write\r\n    // pipeline for failed writes\r\n    if (shouldStartWriteStream(remoteStoreImpl)) {\r\n        startWriteStream(remoteStoreImpl);\r\n    }\r\n}\r\nasync function handleWriteError(remoteStoreImpl, error) {\r\n    // Only handle permanent errors here. If it's transient, just let the retry\r\n    // logic kick in.\r\n    if (isPermanentWriteError(error.code)) {\r\n        // This was a permanent error, the request itself was the problem\r\n        // so it's not going to succeed if we resend it.\r\n        const batch = remoteStoreImpl.writePipeline.shift();\r\n        // In this case it's also unlikely that the server itself is melting\r\n        // down -- this was just a bad request so inhibit backoff on the next\r\n        // restart.\r\n        ensureWriteStream(remoteStoreImpl).inhibitBackoff();\r\n        await executeWithRecovery(remoteStoreImpl, () => remoteStoreImpl.remoteSyncer.rejectFailedWrite(batch.batchId, error));\r\n        // It's possible that with the completion of this mutation\r\n        // another slot has freed up.\r\n        await fillWritePipeline(remoteStoreImpl);\r\n    }\r\n}\r\nasync function restartNetwork(remoteStore) {\r\n    const remoteStoreImpl = debugCast(remoteStore);\r\n    remoteStoreImpl.offlineCauses.add(4 /* OfflineCause.ConnectivityChange */);\r\n    await disableNetworkInternal(remoteStoreImpl);\r\n    remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\r\n    remoteStoreImpl.offlineCauses.delete(4 /* OfflineCause.ConnectivityChange */);\r\n    await enableNetworkInternal(remoteStoreImpl);\r\n}\r\nasync function remoteStoreHandleCredentialChange(remoteStore, user) {\r\n    const remoteStoreImpl = debugCast(remoteStore);\r\n    remoteStoreImpl.asyncQueue.verifyOperationInProgress();\r\n    logDebug(LOG_TAG$5, 'RemoteStore received new credentials');\r\n    const usesNetwork = canUseNetwork(remoteStoreImpl);\r\n    // Tear down and re-create our network streams. This will ensure we get a\r\n    // fresh auth token for the new user and re-fill the write pipeline with\r\n    // new mutations from the LocalStore (since mutations are per-user).\r\n    remoteStoreImpl.offlineCauses.add(3 /* OfflineCause.CredentialChange */);\r\n    await disableNetworkInternal(remoteStoreImpl);\r\n    if (usesNetwork) {\r\n        // Don't set the network status to Unknown if we are offline.\r\n        remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\r\n    }\r\n    await remoteStoreImpl.remoteSyncer.handleCredentialChange(user);\r\n    remoteStoreImpl.offlineCauses.delete(3 /* OfflineCause.CredentialChange */);\r\n    await enableNetworkInternal(remoteStoreImpl);\r\n}\r\n/**\r\n * Toggles the network state when the client gains or loses its primary lease.\r\n */\r\nasync function remoteStoreApplyPrimaryState(remoteStore, isPrimary) {\r\n    const remoteStoreImpl = debugCast(remoteStore);\r\n    if (isPrimary) {\r\n        remoteStoreImpl.offlineCauses.delete(2 /* OfflineCause.IsSecondary */);\r\n        await enableNetworkInternal(remoteStoreImpl);\r\n    }\r\n    else if (!isPrimary) {\r\n        remoteStoreImpl.offlineCauses.add(2 /* OfflineCause.IsSecondary */);\r\n        await disableNetworkInternal(remoteStoreImpl);\r\n        remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\r\n    }\r\n}\r\n/**\r\n * If not yet initialized, registers the WatchStream and its network state\r\n * callback with `remoteStoreImpl`. Returns the existing stream if one is\r\n * already available.\r\n *\r\n * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.\r\n * This is not done on Web to allow it to be tree-shaken.\r\n */\r\nfunction ensureWatchStream(remoteStoreImpl) {\r\n    if (!remoteStoreImpl.watchStream) {\r\n        // Create stream (but note that it is not started yet).\r\n        remoteStoreImpl.watchStream = newPersistentWatchStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {\r\n            onOpen: onWatchStreamOpen.bind(null, remoteStoreImpl),\r\n            onClose: onWatchStreamClose.bind(null, remoteStoreImpl),\r\n            onWatchChange: onWatchStreamChange.bind(null, remoteStoreImpl)\r\n        });\r\n        remoteStoreImpl.onNetworkStatusChange.push(async (enabled) => {\r\n            if (enabled) {\r\n                remoteStoreImpl.watchStream.inhibitBackoff();\r\n                if (shouldStartWatchStream(remoteStoreImpl)) {\r\n                    startWatchStream(remoteStoreImpl);\r\n                }\r\n                else {\r\n                    remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\r\n                }\r\n            }\r\n            else {\r\n                await remoteStoreImpl.watchStream.stop();\r\n                cleanUpWatchStreamState(remoteStoreImpl);\r\n            }\r\n        });\r\n    }\r\n    return remoteStoreImpl.watchStream;\r\n}\r\n/**\r\n * If not yet initialized, registers the WriteStream and its network state\r\n * callback with `remoteStoreImpl`. Returns the existing stream if one is\r\n * already available.\r\n *\r\n * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.\r\n * This is not done on Web to allow it to be tree-shaken.\r\n */\r\nfunction ensureWriteStream(remoteStoreImpl) {\r\n    if (!remoteStoreImpl.writeStream) {\r\n        // Create stream (but note that it is not started yet).\r\n        remoteStoreImpl.writeStream = newPersistentWriteStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {\r\n            onOpen: onWriteStreamOpen.bind(null, remoteStoreImpl),\r\n            onClose: onWriteStreamClose.bind(null, remoteStoreImpl),\r\n            onHandshakeComplete: onWriteHandshakeComplete.bind(null, remoteStoreImpl),\r\n            onMutationResult: onMutationResult.bind(null, remoteStoreImpl)\r\n        });\r\n        remoteStoreImpl.onNetworkStatusChange.push(async (enabled) => {\r\n            if (enabled) {\r\n                remoteStoreImpl.writeStream.inhibitBackoff();\r\n                // This will start the write stream if necessary.\r\n                await fillWritePipeline(remoteStoreImpl);\r\n            }\r\n            else {\r\n                await remoteStoreImpl.writeStream.stop();\r\n                if (remoteStoreImpl.writePipeline.length > 0) {\r\n                    logDebug(LOG_TAG$5, `Stopping write stream with ${remoteStoreImpl.writePipeline.length} pending writes`);\r\n                    remoteStoreImpl.writePipeline = [];\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return remoteStoreImpl.writeStream;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$4 = 'AsyncQueue';\r\n/**\r\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\r\n *\r\n * It is created via DelayedOperation.createAndSchedule().\r\n *\r\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\r\n *\r\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\r\n * in newer versions of TypeScript defines `finally`, which is not available in\r\n * IE.\r\n */\r\nclass DelayedOperation {\r\n    constructor(asyncQueue, timerId, targetTimeMs, op, removalCallback) {\r\n        this.asyncQueue = asyncQueue;\r\n        this.timerId = timerId;\r\n        this.targetTimeMs = targetTimeMs;\r\n        this.op = op;\r\n        this.removalCallback = removalCallback;\r\n        this.deferred = new Deferred();\r\n        this.then = this.deferred.promise.then.bind(this.deferred.promise);\r\n        // It's normal for the deferred promise to be canceled (due to cancellation)\r\n        // and so we attach a dummy catch callback to avoid\r\n        // 'UnhandledPromiseRejectionWarning' log spam.\r\n        this.deferred.promise.catch(err => { });\r\n    }\r\n    /**\r\n     * Creates and returns a DelayedOperation that has been scheduled to be\r\n     * executed on the provided asyncQueue after the provided delayMs.\r\n     *\r\n     * @param asyncQueue - The queue to schedule the operation on.\r\n     * @param id - A Timer ID identifying the type of operation this is.\r\n     * @param delayMs - The delay (ms) before the operation should be scheduled.\r\n     * @param op - The operation to run.\r\n     * @param removalCallback - A callback to be called synchronously once the\r\n     *   operation is executed or canceled, notifying the AsyncQueue to remove it\r\n     *   from its delayedOperations list.\r\n     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\r\n     *   the DelayedOperation class public.\r\n     */\r\n    static createAndSchedule(asyncQueue, timerId, delayMs, op, removalCallback) {\r\n        const targetTime = Date.now() + delayMs;\r\n        const delayedOp = new DelayedOperation(asyncQueue, timerId, targetTime, op, removalCallback);\r\n        delayedOp.start(delayMs);\r\n        return delayedOp;\r\n    }\r\n    /**\r\n     * Starts the timer. This is called immediately after construction by\r\n     * createAndSchedule().\r\n     */\r\n    start(delayMs) {\r\n        this.timerHandle = setTimeout(() => this.handleDelayElapsed(), delayMs);\r\n    }\r\n    /**\r\n     * Queues the operation to run immediately (if it hasn't already been run or\r\n     * canceled).\r\n     */\r\n    skipDelay() {\r\n        return this.handleDelayElapsed();\r\n    }\r\n    /**\r\n     * Cancels the operation if it hasn't already been executed or canceled. The\r\n     * promise will be rejected.\r\n     *\r\n     * As long as the operation has not yet been run, calling cancel() provides a\r\n     * guarantee that the operation will not be run.\r\n     */\r\n    cancel(reason) {\r\n        if (this.timerHandle !== null) {\r\n            this.clearTimeout();\r\n            this.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled' + (reason ? ': ' + reason : '')));\r\n        }\r\n    }\r\n    handleDelayElapsed() {\r\n        this.asyncQueue.enqueueAndForget(() => {\r\n            if (this.timerHandle !== null) {\r\n                this.clearTimeout();\r\n                return this.op().then(result => {\r\n                    return this.deferred.resolve(result);\r\n                });\r\n            }\r\n            else {\r\n                return Promise.resolve();\r\n            }\r\n        });\r\n    }\r\n    clearTimeout() {\r\n        if (this.timerHandle !== null) {\r\n            this.removalCallback(this);\r\n            clearTimeout(this.timerHandle);\r\n            this.timerHandle = null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a FirestoreError that can be surfaced to the user if the provided\r\n * error is an IndexedDbTransactionError. Re-throws the error otherwise.\r\n */\r\nfunction wrapInUserErrorIfRecoverable(e, msg) {\r\n    logError(LOG_TAG$4, `${msg}: ${e}`);\r\n    if (isIndexedDbTransactionError(e)) {\r\n        return new FirestoreError(Code.UNAVAILABLE, `${msg}: ${e}`);\r\n    }\r\n    else {\r\n        throw e;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\r\n * in order specified by the provided comparator. We always add a document key\r\n * comparator on top of what is provided to guarantee document equality based on\r\n * the key.\r\n */\r\nclass DocumentSet {\r\n    /** The default ordering is by key if the comparator is omitted */\r\n    constructor(comp) {\r\n        // We are adding document key comparator to the end as it's the only\r\n        // guaranteed unique property of a document.\r\n        if (comp) {\r\n            this.comparator = (d1, d2) => comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\r\n        }\r\n        else {\r\n            this.comparator = (d1, d2) => DocumentKey.comparator(d1.key, d2.key);\r\n        }\r\n        this.keyedMap = documentMap();\r\n        this.sortedSet = new SortedMap(this.comparator);\r\n    }\r\n    /**\r\n     * Returns an empty copy of the existing DocumentSet, using the same\r\n     * comparator.\r\n     */\r\n    static emptySet(oldSet) {\r\n        return new DocumentSet(oldSet.comparator);\r\n    }\r\n    has(key) {\r\n        return this.keyedMap.get(key) != null;\r\n    }\r\n    get(key) {\r\n        return this.keyedMap.get(key);\r\n    }\r\n    first() {\r\n        return this.sortedSet.minKey();\r\n    }\r\n    last() {\r\n        return this.sortedSet.maxKey();\r\n    }\r\n    isEmpty() {\r\n        return this.sortedSet.isEmpty();\r\n    }\r\n    /**\r\n     * Returns the index of the provided key in the document set, or -1 if the\r\n     * document key is not present in the set;\r\n     */\r\n    indexOf(key) {\r\n        const doc = this.keyedMap.get(key);\r\n        return doc ? this.sortedSet.indexOf(doc) : -1;\r\n    }\r\n    get size() {\r\n        return this.sortedSet.size;\r\n    }\r\n    /** Iterates documents in order defined by \"comparator\" */\r\n    forEach(cb) {\r\n        this.sortedSet.inorderTraversal((k, v) => {\r\n            cb(k);\r\n            return false;\r\n        });\r\n    }\r\n    /** Inserts or updates a document with the same key */\r\n    add(doc) {\r\n        // First remove the element if we have it.\r\n        const set = this.delete(doc.key);\r\n        return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\r\n    }\r\n    /** Deletes a document with a given key */\r\n    delete(key) {\r\n        const doc = this.get(key);\r\n        if (!doc) {\r\n            return this;\r\n        }\r\n        return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\r\n    }\r\n    isEqual(other) {\r\n        if (!(other instanceof DocumentSet)) {\r\n            return false;\r\n        }\r\n        if (this.size !== other.size) {\r\n            return false;\r\n        }\r\n        const thisIt = this.sortedSet.getIterator();\r\n        const otherIt = other.sortedSet.getIterator();\r\n        while (thisIt.hasNext()) {\r\n            const thisDoc = thisIt.getNext().key;\r\n            const otherDoc = otherIt.getNext().key;\r\n            if (!thisDoc.isEqual(otherDoc)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    toString() {\r\n        const docStrings = [];\r\n        this.forEach(doc => {\r\n            docStrings.push(doc.toString());\r\n        });\r\n        if (docStrings.length === 0) {\r\n            return 'DocumentSet ()';\r\n        }\r\n        else {\r\n            return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\r\n        }\r\n    }\r\n    copy(keyedMap, sortedSet) {\r\n        const newSet = new DocumentSet();\r\n        newSet.comparator = this.comparator;\r\n        newSet.keyedMap = keyedMap;\r\n        newSet.sortedSet = sortedSet;\r\n        return newSet;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\r\n * duplicate events for the same doc.\r\n */\r\nclass DocumentChangeSet {\r\n    constructor() {\r\n        this.changeMap = new SortedMap(DocumentKey.comparator);\r\n    }\r\n    track(change) {\r\n        const key = change.doc.key;\r\n        const oldChange = this.changeMap.get(key);\r\n        if (!oldChange) {\r\n            this.changeMap = this.changeMap.insert(key, change);\r\n            return;\r\n        }\r\n        // Merge the new change with the existing change.\r\n        if (change.type !== 0 /* ChangeType.Added */ &&\r\n            oldChange.type === 3 /* ChangeType.Metadata */) {\r\n            this.changeMap = this.changeMap.insert(key, change);\r\n        }\r\n        else if (change.type === 3 /* ChangeType.Metadata */ &&\r\n            oldChange.type !== 1 /* ChangeType.Removed */) {\r\n            this.changeMap = this.changeMap.insert(key, {\r\n                type: oldChange.type,\r\n                doc: change.doc\r\n            });\r\n        }\r\n        else if (change.type === 2 /* ChangeType.Modified */ &&\r\n            oldChange.type === 2 /* ChangeType.Modified */) {\r\n            this.changeMap = this.changeMap.insert(key, {\r\n                type: 2 /* ChangeType.Modified */,\r\n                doc: change.doc\r\n            });\r\n        }\r\n        else if (change.type === 2 /* ChangeType.Modified */ &&\r\n            oldChange.type === 0 /* ChangeType.Added */) {\r\n            this.changeMap = this.changeMap.insert(key, {\r\n                type: 0 /* ChangeType.Added */,\r\n                doc: change.doc\r\n            });\r\n        }\r\n        else if (change.type === 1 /* ChangeType.Removed */ &&\r\n            oldChange.type === 0 /* ChangeType.Added */) {\r\n            this.changeMap = this.changeMap.remove(key);\r\n        }\r\n        else if (change.type === 1 /* ChangeType.Removed */ &&\r\n            oldChange.type === 2 /* ChangeType.Modified */) {\r\n            this.changeMap = this.changeMap.insert(key, {\r\n                type: 1 /* ChangeType.Removed */,\r\n                doc: oldChange.doc\r\n            });\r\n        }\r\n        else if (change.type === 0 /* ChangeType.Added */ &&\r\n            oldChange.type === 1 /* ChangeType.Removed */) {\r\n            this.changeMap = this.changeMap.insert(key, {\r\n                type: 2 /* ChangeType.Modified */,\r\n                doc: change.doc\r\n            });\r\n        }\r\n        else {\r\n            // This includes these cases, which don't make sense:\r\n            // Added->Added\r\n            // Removed->Removed\r\n            // Modified->Added\r\n            // Removed->Modified\r\n            // Metadata->Added\r\n            // Removed->Metadata\r\n            fail();\r\n        }\r\n    }\r\n    getChanges() {\r\n        const changes = [];\r\n        this.changeMap.inorderTraversal((key, change) => {\r\n            changes.push(change);\r\n        });\r\n        return changes;\r\n    }\r\n}\r\nclass ViewSnapshot {\r\n    constructor(query, docs, oldDocs, docChanges, mutatedKeys, fromCache, syncStateChanged, excludesMetadataChanges, hasCachedResults) {\r\n        this.query = query;\r\n        this.docs = docs;\r\n        this.oldDocs = oldDocs;\r\n        this.docChanges = docChanges;\r\n        this.mutatedKeys = mutatedKeys;\r\n        this.fromCache = fromCache;\r\n        this.syncStateChanged = syncStateChanged;\r\n        this.excludesMetadataChanges = excludesMetadataChanges;\r\n        this.hasCachedResults = hasCachedResults;\r\n    }\r\n    /** Returns a view snapshot as if all documents in the snapshot were added. */\r\n    static fromInitialDocuments(query, documents, mutatedKeys, fromCache, hasCachedResults) {\r\n        const changes = [];\r\n        documents.forEach(doc => {\r\n            changes.push({ type: 0 /* ChangeType.Added */, doc });\r\n        });\r\n        return new ViewSnapshot(query, documents, DocumentSet.emptySet(documents), changes, mutatedKeys, fromCache, \r\n        /* syncStateChanged= */ true, \r\n        /* excludesMetadataChanges= */ false, hasCachedResults);\r\n    }\r\n    get hasPendingWrites() {\r\n        return !this.mutatedKeys.isEmpty();\r\n    }\r\n    isEqual(other) {\r\n        if (this.fromCache !== other.fromCache ||\r\n            this.hasCachedResults !== other.hasCachedResults ||\r\n            this.syncStateChanged !== other.syncStateChanged ||\r\n            !this.mutatedKeys.isEqual(other.mutatedKeys) ||\r\n            !queryEquals(this.query, other.query) ||\r\n            !this.docs.isEqual(other.docs) ||\r\n            !this.oldDocs.isEqual(other.oldDocs)) {\r\n            return false;\r\n        }\r\n        const changes = this.docChanges;\r\n        const otherChanges = other.docChanges;\r\n        if (changes.length !== otherChanges.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < changes.length; i++) {\r\n            if (changes[i].type !== otherChanges[i].type ||\r\n                !changes[i].doc.isEqual(otherChanges[i].doc)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Holds the listeners and the last received ViewSnapshot for a query being\r\n * tracked by EventManager.\r\n */\r\nclass QueryListenersInfo {\r\n    constructor() {\r\n        this.viewSnap = undefined;\r\n        this.listeners = [];\r\n    }\r\n}\r\nfunction newEventManager() {\r\n    return new EventManagerImpl();\r\n}\r\nclass EventManagerImpl {\r\n    constructor() {\r\n        this.queries = new ObjectMap(q => canonifyQuery(q), queryEquals);\r\n        this.onlineState = \"Unknown\" /* OnlineState.Unknown */;\r\n        this.snapshotsInSyncListeners = new Set();\r\n    }\r\n}\r\nasync function eventManagerListen(eventManager, listener) {\r\n    const eventManagerImpl = debugCast(eventManager);\r\n    const query = listener.query;\r\n    let firstListen = false;\r\n    let queryInfo = eventManagerImpl.queries.get(query);\r\n    if (!queryInfo) {\r\n        firstListen = true;\r\n        queryInfo = new QueryListenersInfo();\r\n    }\r\n    if (firstListen) {\r\n        try {\r\n            queryInfo.viewSnap = await eventManagerImpl.onListen(query);\r\n        }\r\n        catch (e) {\r\n            const firestoreError = wrapInUserErrorIfRecoverable(e, `Initialization of query '${stringifyQuery(listener.query)}' failed`);\r\n            listener.onError(firestoreError);\r\n            return;\r\n        }\r\n    }\r\n    eventManagerImpl.queries.set(query, queryInfo);\r\n    queryInfo.listeners.push(listener);\r\n    // Run global snapshot listeners if a consistent snapshot has been emitted.\r\n    listener.applyOnlineStateChange(eventManagerImpl.onlineState);\r\n    if (queryInfo.viewSnap) {\r\n        const raisedEvent = listener.onViewSnapshot(queryInfo.viewSnap);\r\n        if (raisedEvent) {\r\n            raiseSnapshotsInSyncEvent(eventManagerImpl);\r\n        }\r\n    }\r\n}\r\nasync function eventManagerUnlisten(eventManager, listener) {\r\n    const eventManagerImpl = debugCast(eventManager);\r\n    const query = listener.query;\r\n    let lastListen = false;\r\n    const queryInfo = eventManagerImpl.queries.get(query);\r\n    if (queryInfo) {\r\n        const i = queryInfo.listeners.indexOf(listener);\r\n        if (i >= 0) {\r\n            queryInfo.listeners.splice(i, 1);\r\n            lastListen = queryInfo.listeners.length === 0;\r\n        }\r\n    }\r\n    if (lastListen) {\r\n        eventManagerImpl.queries.delete(query);\r\n        return eventManagerImpl.onUnlisten(query);\r\n    }\r\n}\r\nfunction eventManagerOnWatchChange(eventManager, viewSnaps) {\r\n    const eventManagerImpl = debugCast(eventManager);\r\n    let raisedEvent = false;\r\n    for (const viewSnap of viewSnaps) {\r\n        const query = viewSnap.query;\r\n        const queryInfo = eventManagerImpl.queries.get(query);\r\n        if (queryInfo) {\r\n            for (const listener of queryInfo.listeners) {\r\n                if (listener.onViewSnapshot(viewSnap)) {\r\n                    raisedEvent = true;\r\n                }\r\n            }\r\n            queryInfo.viewSnap = viewSnap;\r\n        }\r\n    }\r\n    if (raisedEvent) {\r\n        raiseSnapshotsInSyncEvent(eventManagerImpl);\r\n    }\r\n}\r\nfunction eventManagerOnWatchError(eventManager, query, error) {\r\n    const eventManagerImpl = debugCast(eventManager);\r\n    const queryInfo = eventManagerImpl.queries.get(query);\r\n    if (queryInfo) {\r\n        for (const listener of queryInfo.listeners) {\r\n            listener.onError(error);\r\n        }\r\n    }\r\n    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\r\n    // after an error.\r\n    eventManagerImpl.queries.delete(query);\r\n}\r\nfunction eventManagerOnOnlineStateChange(eventManager, onlineState) {\r\n    const eventManagerImpl = debugCast(eventManager);\r\n    eventManagerImpl.onlineState = onlineState;\r\n    let raisedEvent = false;\r\n    eventManagerImpl.queries.forEach((_, queryInfo) => {\r\n        for (const listener of queryInfo.listeners) {\r\n            // Run global snapshot listeners if a consistent snapshot has been emitted.\r\n            if (listener.applyOnlineStateChange(onlineState)) {\r\n                raisedEvent = true;\r\n            }\r\n        }\r\n    });\r\n    if (raisedEvent) {\r\n        raiseSnapshotsInSyncEvent(eventManagerImpl);\r\n    }\r\n}\r\nfunction addSnapshotsInSyncListener(eventManager, observer) {\r\n    const eventManagerImpl = debugCast(eventManager);\r\n    eventManagerImpl.snapshotsInSyncListeners.add(observer);\r\n    // Immediately fire an initial event, indicating all existing listeners\r\n    // are in-sync.\r\n    observer.next();\r\n}\r\nfunction removeSnapshotsInSyncListener(eventManager, observer) {\r\n    const eventManagerImpl = debugCast(eventManager);\r\n    eventManagerImpl.snapshotsInSyncListeners.delete(observer);\r\n}\r\n// Call all global snapshot listeners that have been set.\r\nfunction raiseSnapshotsInSyncEvent(eventManagerImpl) {\r\n    eventManagerImpl.snapshotsInSyncListeners.forEach(observer => {\r\n        observer.next();\r\n    });\r\n}\r\n/**\r\n * QueryListener takes a series of internal view snapshots and determines\r\n * when to raise the event.\r\n *\r\n * It uses an Observer to dispatch events.\r\n */\r\nclass QueryListener {\r\n    constructor(query, queryObserver, options) {\r\n        this.query = query;\r\n        this.queryObserver = queryObserver;\r\n        /**\r\n         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\r\n         * observer. This flag is set to true once we've actually raised an event.\r\n         */\r\n        this.raisedInitialEvent = false;\r\n        this.snap = null;\r\n        this.onlineState = \"Unknown\" /* OnlineState.Unknown */;\r\n        this.options = options || {};\r\n    }\r\n    /**\r\n     * Applies the new ViewSnapshot to this listener, raising a user-facing event\r\n     * if applicable (depending on what changed, whether the user has opted into\r\n     * metadata-only changes, etc.). Returns true if a user-facing event was\r\n     * indeed raised.\r\n     */\r\n    onViewSnapshot(snap) {\r\n        if (!this.options.includeMetadataChanges) {\r\n            // Remove the metadata only changes.\r\n            const docChanges = [];\r\n            for (const docChange of snap.docChanges) {\r\n                if (docChange.type !== 3 /* ChangeType.Metadata */) {\r\n                    docChanges.push(docChange);\r\n                }\r\n            }\r\n            snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.mutatedKeys, snap.fromCache, snap.syncStateChanged, \r\n            /* excludesMetadataChanges= */ true, snap.hasCachedResults);\r\n        }\r\n        let raisedEvent = false;\r\n        if (!this.raisedInitialEvent) {\r\n            if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\r\n                this.raiseInitialEvent(snap);\r\n                raisedEvent = true;\r\n            }\r\n        }\r\n        else if (this.shouldRaiseEvent(snap)) {\r\n            this.queryObserver.next(snap);\r\n            raisedEvent = true;\r\n        }\r\n        this.snap = snap;\r\n        return raisedEvent;\r\n    }\r\n    onError(error) {\r\n        this.queryObserver.error(error);\r\n    }\r\n    /** Returns whether a snapshot was raised. */\r\n    applyOnlineStateChange(onlineState) {\r\n        this.onlineState = onlineState;\r\n        let raisedEvent = false;\r\n        if (this.snap &&\r\n            !this.raisedInitialEvent &&\r\n            this.shouldRaiseInitialEvent(this.snap, onlineState)) {\r\n            this.raiseInitialEvent(this.snap);\r\n            raisedEvent = true;\r\n        }\r\n        return raisedEvent;\r\n    }\r\n    shouldRaiseInitialEvent(snap, onlineState) {\r\n        // Always raise the first event when we're synced\r\n        if (!snap.fromCache) {\r\n            return true;\r\n        }\r\n        // NOTE: We consider OnlineState.Unknown as online (it should become Offline\r\n        // or Online if we wait long enough).\r\n        const maybeOnline = onlineState !== \"Offline\" /* OnlineState.Offline */;\r\n        // Don't raise the event if we're online, aren't synced yet (checked\r\n        // above) and are waiting for a sync.\r\n        if (this.options.waitForSyncWhenOnline && maybeOnline) {\r\n            return false;\r\n        }\r\n        // Raise data from cache if we have any documents, have cached results before,\r\n        // or we are offline.\r\n        return (!snap.docs.isEmpty() ||\r\n            snap.hasCachedResults ||\r\n            onlineState === \"Offline\" /* OnlineState.Offline */);\r\n    }\r\n    shouldRaiseEvent(snap) {\r\n        // We don't need to handle includeDocumentMetadataChanges here because\r\n        // the Metadata only changes have already been stripped out if needed.\r\n        // At this point the only changes we will see are the ones we should\r\n        // propagate.\r\n        if (snap.docChanges.length > 0) {\r\n            return true;\r\n        }\r\n        const hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\r\n        if (snap.syncStateChanged || hasPendingWritesChanged) {\r\n            return this.options.includeMetadataChanges === true;\r\n        }\r\n        // Generally we should have hit one of the cases above, but it's possible\r\n        // to get here if there were only metadata docChanges and they got\r\n        // stripped out.\r\n        return false;\r\n    }\r\n    raiseInitialEvent(snap) {\r\n        snap = ViewSnapshot.fromInitialDocuments(snap.query, snap.docs, snap.mutatedKeys, snap.fromCache, snap.hasCachedResults);\r\n        this.raisedInitialEvent = true;\r\n        this.queryObserver.next(snap);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A set of changes to what documents are currently in view and out of view for\r\n * a given query. These changes are sent to the LocalStore by the View (via\r\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\r\n */\r\nclass LocalViewChanges {\r\n    constructor(targetId, fromCache, addedKeys, removedKeys) {\r\n        this.targetId = targetId;\r\n        this.fromCache = fromCache;\r\n        this.addedKeys = addedKeys;\r\n        this.removedKeys = removedKeys;\r\n    }\r\n    static fromSnapshot(targetId, viewSnapshot) {\r\n        let addedKeys = documentKeySet();\r\n        let removedKeys = documentKeySet();\r\n        for (const docChange of viewSnapshot.docChanges) {\r\n            switch (docChange.type) {\r\n                case 0 /* ChangeType.Added */:\r\n                    addedKeys = addedKeys.add(docChange.doc.key);\r\n                    break;\r\n                case 1 /* ChangeType.Removed */:\r\n                    removedKeys = removedKeys.add(docChange.doc.key);\r\n                    break;\r\n                // do nothing\r\n            }\r\n        }\r\n        return new LocalViewChanges(targetId, viewSnapshot.fromCache, addedKeys, removedKeys);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to convert objects from bundles to model objects in the SDK.\r\n */\r\nclass BundleConverterImpl {\r\n    constructor(serializer) {\r\n        this.serializer = serializer;\r\n    }\r\n    toDocumentKey(name) {\r\n        return fromName(this.serializer, name);\r\n    }\r\n    /**\r\n     * Converts a BundleDocument to a MutableDocument.\r\n     */\r\n    toMutableDocument(bundledDoc) {\r\n        if (bundledDoc.metadata.exists) {\r\n            return fromDocument(this.serializer, bundledDoc.document, false);\r\n        }\r\n        else {\r\n            return MutableDocument.newNoDocument(this.toDocumentKey(bundledDoc.metadata.name), this.toSnapshotVersion(bundledDoc.metadata.readTime));\r\n        }\r\n    }\r\n    toSnapshotVersion(time) {\r\n        return fromVersion(time);\r\n    }\r\n}\r\n/**\r\n * A class to process the elements from a bundle, load them into local\r\n * storage and provide progress update while loading.\r\n */\r\nclass BundleLoader {\r\n    constructor(bundleMetadata, localStore, serializer) {\r\n        this.bundleMetadata = bundleMetadata;\r\n        this.localStore = localStore;\r\n        this.serializer = serializer;\r\n        /** Batched queries to be saved into storage */\r\n        this.queries = [];\r\n        /** Batched documents to be saved into storage */\r\n        this.documents = [];\r\n        /** The collection groups affected by this bundle. */\r\n        this.collectionGroups = new Set();\r\n        this.progress = bundleInitialProgress(bundleMetadata);\r\n    }\r\n    /**\r\n     * Adds an element from the bundle to the loader.\r\n     *\r\n     * Returns a new progress if adding the element leads to a new progress,\r\n     * otherwise returns null.\r\n     */\r\n    addSizedElement(element) {\r\n        this.progress.bytesLoaded += element.byteLength;\r\n        let documentsLoaded = this.progress.documentsLoaded;\r\n        if (element.payload.namedQuery) {\r\n            this.queries.push(element.payload.namedQuery);\r\n        }\r\n        else if (element.payload.documentMetadata) {\r\n            this.documents.push({ metadata: element.payload.documentMetadata });\r\n            if (!element.payload.documentMetadata.exists) {\r\n                ++documentsLoaded;\r\n            }\r\n            const path = ResourcePath.fromString(element.payload.documentMetadata.name);\r\n            this.collectionGroups.add(path.get(path.length - 2));\r\n        }\r\n        else if (element.payload.document) {\r\n            this.documents[this.documents.length - 1].document =\r\n                element.payload.document;\r\n            ++documentsLoaded;\r\n        }\r\n        if (documentsLoaded !== this.progress.documentsLoaded) {\r\n            this.progress.documentsLoaded = documentsLoaded;\r\n            return Object.assign({}, this.progress);\r\n        }\r\n        return null;\r\n    }\r\n    getQueryDocumentMapping(documents) {\r\n        const queryDocumentMap = new Map();\r\n        const bundleConverter = new BundleConverterImpl(this.serializer);\r\n        for (const bundleDoc of documents) {\r\n            if (bundleDoc.metadata.queries) {\r\n                const documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);\r\n                for (const queryName of bundleDoc.metadata.queries) {\r\n                    const documentKeys = (queryDocumentMap.get(queryName) || documentKeySet()).add(documentKey);\r\n                    queryDocumentMap.set(queryName, documentKeys);\r\n                }\r\n            }\r\n        }\r\n        return queryDocumentMap;\r\n    }\r\n    /**\r\n     * Update the progress to 'Success' and return the updated progress.\r\n     */\r\n    async complete() {\r\n        const changedDocs = await localStoreApplyBundledDocuments(this.localStore, new BundleConverterImpl(this.serializer), this.documents, this.bundleMetadata.id);\r\n        const queryDocumentMap = this.getQueryDocumentMapping(this.documents);\r\n        for (const q of this.queries) {\r\n            await localStoreSaveNamedQuery(this.localStore, q, queryDocumentMap.get(q.name));\r\n        }\r\n        this.progress.taskState = 'Success';\r\n        return {\r\n            progress: this.progress,\r\n            changedCollectionGroups: this.collectionGroups,\r\n            changedDocs\r\n        };\r\n    }\r\n}\r\n/**\r\n * Returns a `LoadBundleTaskProgress` representing the initial progress of\r\n * loading a bundle.\r\n */\r\nfunction bundleInitialProgress(metadata) {\r\n    return {\r\n        taskState: 'Running',\r\n        documentsLoaded: 0,\r\n        bytesLoaded: 0,\r\n        totalDocuments: metadata.totalDocuments,\r\n        totalBytes: metadata.totalBytes\r\n    };\r\n}\r\n/**\r\n * Returns a `LoadBundleTaskProgress` representing the progress that the loading\r\n * has succeeded.\r\n */\r\nfunction bundleSuccessProgress(metadata) {\r\n    return {\r\n        taskState: 'Success',\r\n        documentsLoaded: metadata.totalDocuments,\r\n        bytesLoaded: metadata.totalBytes,\r\n        totalDocuments: metadata.totalDocuments,\r\n        totalBytes: metadata.totalBytes\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AddedLimboDocument {\r\n    constructor(key) {\r\n        this.key = key;\r\n    }\r\n}\r\nclass RemovedLimboDocument {\r\n    constructor(key) {\r\n        this.key = key;\r\n    }\r\n}\r\n/**\r\n * View is responsible for computing the final merged truth of what docs are in\r\n * a query. It gets notified of local and remote changes to docs, and applies\r\n * the query filters and limits to determine the most correct possible results.\r\n */\r\nclass View {\r\n    constructor(query, \r\n    /** Documents included in the remote target */\r\n    _syncedDocuments) {\r\n        this.query = query;\r\n        this._syncedDocuments = _syncedDocuments;\r\n        this.syncState = null;\r\n        this.hasCachedResults = false;\r\n        /**\r\n         * A flag whether the view is current with the backend. A view is considered\r\n         * current after it has seen the current flag from the backend and did not\r\n         * lose consistency within the watch stream (e.g. because of an existence\r\n         * filter mismatch).\r\n         */\r\n        this.current = false;\r\n        /** Documents in the view but not in the remote target */\r\n        this.limboDocuments = documentKeySet();\r\n        /** Document Keys that have local changes */\r\n        this.mutatedKeys = documentKeySet();\r\n        this.docComparator = newQueryComparator(query);\r\n        this.documentSet = new DocumentSet(this.docComparator);\r\n    }\r\n    /**\r\n     * The set of remote documents that the server has told us belongs to the target associated with\r\n     * this view.\r\n     */\r\n    get syncedDocuments() {\r\n        return this._syncedDocuments;\r\n    }\r\n    /**\r\n     * Iterates over a set of doc changes, applies the query limit, and computes\r\n     * what the new results should be, what the changes were, and whether we may\r\n     * need to go back to the local cache for more results. Does not make any\r\n     * changes to the view.\r\n     * @param docChanges - The doc changes to apply to this view.\r\n     * @param previousChanges - If this is being called with a refill, then start\r\n     *        with this set of docs and changes instead of the current view.\r\n     * @returns a new set of docs, changes, and refill flag.\r\n     */\r\n    computeDocChanges(docChanges, previousChanges) {\r\n        const changeSet = previousChanges\r\n            ? previousChanges.changeSet\r\n            : new DocumentChangeSet();\r\n        const oldDocumentSet = previousChanges\r\n            ? previousChanges.documentSet\r\n            : this.documentSet;\r\n        let newMutatedKeys = previousChanges\r\n            ? previousChanges.mutatedKeys\r\n            : this.mutatedKeys;\r\n        let newDocumentSet = oldDocumentSet;\r\n        let needsRefill = false;\r\n        // Track the last doc in a (full) limit. This is necessary, because some\r\n        // update (a delete, or an update moving a doc past the old limit) might\r\n        // mean there is some other document in the local cache that either should\r\n        // come (1) between the old last limit doc and the new last document, in the\r\n        // case of updates, or (2) after the new last document, in the case of\r\n        // deletes. So we keep this doc at the old limit to compare the updates to.\r\n        //\r\n        // Note that this should never get used in a refill (when previousChanges is\r\n        // set), because there will only be adds -- no deletes or updates.\r\n        const lastDocInLimit = this.query.limitType === \"F\" /* LimitType.First */ &&\r\n            oldDocumentSet.size === this.query.limit\r\n            ? oldDocumentSet.last()\r\n            : null;\r\n        const firstDocInLimit = this.query.limitType === \"L\" /* LimitType.Last */ &&\r\n            oldDocumentSet.size === this.query.limit\r\n            ? oldDocumentSet.first()\r\n            : null;\r\n        docChanges.inorderTraversal((key, entry) => {\r\n            const oldDoc = oldDocumentSet.get(key);\r\n            const newDoc = queryMatches(this.query, entry) ? entry : null;\r\n            const oldDocHadPendingMutations = oldDoc\r\n                ? this.mutatedKeys.has(oldDoc.key)\r\n                : false;\r\n            const newDocHasPendingMutations = newDoc\r\n                ? newDoc.hasLocalMutations ||\r\n                    // We only consider committed mutations for documents that were\r\n                    // mutated during the lifetime of the view.\r\n                    (this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations)\r\n                : false;\r\n            let changeApplied = false;\r\n            // Calculate change\r\n            if (oldDoc && newDoc) {\r\n                const docsEqual = oldDoc.data.isEqual(newDoc.data);\r\n                if (!docsEqual) {\r\n                    if (!this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {\r\n                        changeSet.track({\r\n                            type: 2 /* ChangeType.Modified */,\r\n                            doc: newDoc\r\n                        });\r\n                        changeApplied = true;\r\n                        if ((lastDocInLimit &&\r\n                            this.docComparator(newDoc, lastDocInLimit) > 0) ||\r\n                            (firstDocInLimit &&\r\n                                this.docComparator(newDoc, firstDocInLimit) < 0)) {\r\n                            // This doc moved from inside the limit to outside the limit.\r\n                            // That means there may be some other doc in the local cache\r\n                            // that should be included instead.\r\n                            needsRefill = true;\r\n                        }\r\n                    }\r\n                }\r\n                else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {\r\n                    changeSet.track({ type: 3 /* ChangeType.Metadata */, doc: newDoc });\r\n                    changeApplied = true;\r\n                }\r\n            }\r\n            else if (!oldDoc && newDoc) {\r\n                changeSet.track({ type: 0 /* ChangeType.Added */, doc: newDoc });\r\n                changeApplied = true;\r\n            }\r\n            else if (oldDoc && !newDoc) {\r\n                changeSet.track({ type: 1 /* ChangeType.Removed */, doc: oldDoc });\r\n                changeApplied = true;\r\n                if (lastDocInLimit || firstDocInLimit) {\r\n                    // A doc was removed from a full limit query. We'll need to\r\n                    // requery from the local cache to see if we know about some other\r\n                    // doc that should be in the results.\r\n                    needsRefill = true;\r\n                }\r\n            }\r\n            if (changeApplied) {\r\n                if (newDoc) {\r\n                    newDocumentSet = newDocumentSet.add(newDoc);\r\n                    if (newDocHasPendingMutations) {\r\n                        newMutatedKeys = newMutatedKeys.add(key);\r\n                    }\r\n                    else {\r\n                        newMutatedKeys = newMutatedKeys.delete(key);\r\n                    }\r\n                }\r\n                else {\r\n                    newDocumentSet = newDocumentSet.delete(key);\r\n                    newMutatedKeys = newMutatedKeys.delete(key);\r\n                }\r\n            }\r\n        });\r\n        // Drop documents out to meet limit/limitToLast requirement.\r\n        if (this.query.limit !== null) {\r\n            while (newDocumentSet.size > this.query.limit) {\r\n                const oldDoc = this.query.limitType === \"F\" /* LimitType.First */\r\n                    ? newDocumentSet.last()\r\n                    : newDocumentSet.first();\r\n                newDocumentSet = newDocumentSet.delete(oldDoc.key);\r\n                newMutatedKeys = newMutatedKeys.delete(oldDoc.key);\r\n                changeSet.track({ type: 1 /* ChangeType.Removed */, doc: oldDoc });\r\n            }\r\n        }\r\n        return {\r\n            documentSet: newDocumentSet,\r\n            changeSet,\r\n            needsRefill,\r\n            mutatedKeys: newMutatedKeys\r\n        };\r\n    }\r\n    shouldWaitForSyncedDocument(oldDoc, newDoc) {\r\n        // We suppress the initial change event for documents that were modified as\r\n        // part of a write acknowledgment (e.g. when the value of a server transform\r\n        // is applied) as Watch will send us the same document again.\r\n        // By suppressing the event, we only raise two user visible events (one with\r\n        // `hasPendingWrites` and the final state of the document) instead of three\r\n        // (one with `hasPendingWrites`, the modified document with\r\n        // `hasPendingWrites` and the final state of the document).\r\n        return (oldDoc.hasLocalMutations &&\r\n            newDoc.hasCommittedMutations &&\r\n            !newDoc.hasLocalMutations);\r\n    }\r\n    /**\r\n     * Updates the view with the given ViewDocumentChanges and optionally updates\r\n     * limbo docs and sync state from the provided target change.\r\n     * @param docChanges - The set of changes to make to the view's docs.\r\n     * @param updateLimboDocuments - Whether to update limbo documents based on\r\n     *        this change.\r\n     * @param targetChange - A target change to apply for computing limbo docs and\r\n     *        sync state.\r\n     * @returns A new ViewChange with the given docs, changes, and sync state.\r\n     */\r\n    // PORTING NOTE: The iOS/Android clients always compute limbo document changes.\r\n    applyChanges(docChanges, updateLimboDocuments, targetChange) {\r\n        const oldDocs = this.documentSet;\r\n        this.documentSet = docChanges.documentSet;\r\n        this.mutatedKeys = docChanges.mutatedKeys;\r\n        // Sort changes based on type and query comparator\r\n        const changes = docChanges.changeSet.getChanges();\r\n        changes.sort((c1, c2) => {\r\n            return (compareChangeType(c1.type, c2.type) ||\r\n                this.docComparator(c1.doc, c2.doc));\r\n        });\r\n        this.applyTargetChange(targetChange);\r\n        const limboChanges = updateLimboDocuments\r\n            ? this.updateLimboDocuments()\r\n            : [];\r\n        const synced = this.limboDocuments.size === 0 && this.current;\r\n        const newSyncState = synced ? 1 /* SyncState.Synced */ : 0 /* SyncState.Local */;\r\n        const syncStateChanged = newSyncState !== this.syncState;\r\n        this.syncState = newSyncState;\r\n        if (changes.length === 0 && !syncStateChanged) {\r\n            // no changes\r\n            return { limboChanges };\r\n        }\r\n        else {\r\n            const snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, docChanges.mutatedKeys, newSyncState === 0 /* SyncState.Local */, syncStateChanged, \r\n            /* excludesMetadataChanges= */ false, targetChange\r\n                ? targetChange.resumeToken.approximateByteSize() > 0\r\n                : false);\r\n            return {\r\n                snapshot: snap,\r\n                limboChanges\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Applies an OnlineState change to the view, potentially generating a\r\n     * ViewChange if the view's syncState changes as a result.\r\n     */\r\n    applyOnlineStateChange(onlineState) {\r\n        if (this.current && onlineState === \"Offline\" /* OnlineState.Offline */) {\r\n            // If we're offline, set `current` to false and then call applyChanges()\r\n            // to refresh our syncState and generate a ViewChange as appropriate. We\r\n            // are guaranteed to get a new TargetChange that sets `current` back to\r\n            // true once the client is back online.\r\n            this.current = false;\r\n            return this.applyChanges({\r\n                documentSet: this.documentSet,\r\n                changeSet: new DocumentChangeSet(),\r\n                mutatedKeys: this.mutatedKeys,\r\n                needsRefill: false\r\n            }, \r\n            /* updateLimboDocuments= */ false);\r\n        }\r\n        else {\r\n            // No effect, just return a no-op ViewChange.\r\n            return { limboChanges: [] };\r\n        }\r\n    }\r\n    /**\r\n     * Returns whether the doc for the given key should be in limbo.\r\n     */\r\n    shouldBeInLimbo(key) {\r\n        // If the remote end says it's part of this query, it's not in limbo.\r\n        if (this._syncedDocuments.has(key)) {\r\n            return false;\r\n        }\r\n        // The local store doesn't think it's a result, so it shouldn't be in limbo.\r\n        if (!this.documentSet.has(key)) {\r\n            return false;\r\n        }\r\n        // If there are local changes to the doc, they might explain why the server\r\n        // doesn't know that it's part of the query. So don't put it in limbo.\r\n        // TODO(klimt): Ideally, we would only consider changes that might actually\r\n        // affect this specific query.\r\n        if (this.documentSet.get(key).hasLocalMutations) {\r\n            return false;\r\n        }\r\n        // Everything else is in limbo.\r\n        return true;\r\n    }\r\n    /**\r\n     * Updates syncedDocuments, current, and limbo docs based on the given change.\r\n     * Returns the list of changes to which docs are in limbo.\r\n     */\r\n    applyTargetChange(targetChange) {\r\n        if (targetChange) {\r\n            targetChange.addedDocuments.forEach(key => (this._syncedDocuments = this._syncedDocuments.add(key)));\r\n            targetChange.modifiedDocuments.forEach(key => {\r\n            });\r\n            targetChange.removedDocuments.forEach(key => (this._syncedDocuments = this._syncedDocuments.delete(key)));\r\n            this.current = targetChange.current;\r\n        }\r\n    }\r\n    updateLimboDocuments() {\r\n        // We can only determine limbo documents when we're in-sync with the server.\r\n        if (!this.current) {\r\n            return [];\r\n        }\r\n        // TODO(klimt): Do this incrementally so that it's not quadratic when\r\n        // updating many documents.\r\n        const oldLimboDocuments = this.limboDocuments;\r\n        this.limboDocuments = documentKeySet();\r\n        this.documentSet.forEach(doc => {\r\n            if (this.shouldBeInLimbo(doc.key)) {\r\n                this.limboDocuments = this.limboDocuments.add(doc.key);\r\n            }\r\n        });\r\n        // Diff the new limbo docs with the old limbo docs.\r\n        const changes = [];\r\n        oldLimboDocuments.forEach(key => {\r\n            if (!this.limboDocuments.has(key)) {\r\n                changes.push(new RemovedLimboDocument(key));\r\n            }\r\n        });\r\n        this.limboDocuments.forEach(key => {\r\n            if (!oldLimboDocuments.has(key)) {\r\n                changes.push(new AddedLimboDocument(key));\r\n            }\r\n        });\r\n        return changes;\r\n    }\r\n    /**\r\n     * Update the in-memory state of the current view with the state read from\r\n     * persistence.\r\n     *\r\n     * We update the query view whenever a client's primary status changes:\r\n     * - When a client transitions from primary to secondary, it can miss\r\n     *   LocalStorage updates and its query views may temporarily not be\r\n     *   synchronized with the state on disk.\r\n     * - For secondary to primary transitions, the client needs to update the list\r\n     *   of `syncedDocuments` since secondary clients update their query views\r\n     *   based purely on synthesized RemoteEvents.\r\n     *\r\n     * @param queryResult.documents - The documents that match the query according\r\n     * to the LocalStore.\r\n     * @param queryResult.remoteKeys - The keys of the documents that match the\r\n     * query according to the backend.\r\n     *\r\n     * @returns The ViewChange that resulted from this synchronization.\r\n     */\r\n    // PORTING NOTE: Multi-tab only.\r\n    synchronizeWithPersistedState(queryResult) {\r\n        this._syncedDocuments = queryResult.remoteKeys;\r\n        this.limboDocuments = documentKeySet();\r\n        const docChanges = this.computeDocChanges(queryResult.documents);\r\n        return this.applyChanges(docChanges, /*updateLimboDocuments=*/ true);\r\n    }\r\n    /**\r\n     * Returns a view snapshot as if this query was just listened to. Contains\r\n     * a document add for every existing document and the `fromCache` and\r\n     * `hasPendingWrites` status of the already established view.\r\n     */\r\n    // PORTING NOTE: Multi-tab only.\r\n    computeInitialSnapshot() {\r\n        return ViewSnapshot.fromInitialDocuments(this.query, this.documentSet, this.mutatedKeys, this.syncState === 0 /* SyncState.Local */, this.hasCachedResults);\r\n    }\r\n}\r\nfunction compareChangeType(c1, c2) {\r\n    const order = (change) => {\r\n        switch (change) {\r\n            case 0 /* ChangeType.Added */:\r\n                return 1;\r\n            case 2 /* ChangeType.Modified */:\r\n                return 2;\r\n            case 3 /* ChangeType.Metadata */:\r\n                // A metadata change is converted to a modified change at the public\r\n                // api layer.  Since we sort by document key and then change type,\r\n                // metadata and modified changes must be sorted equivalently.\r\n                return 2;\r\n            case 1 /* ChangeType.Removed */:\r\n                return 0;\r\n            default:\r\n                return fail();\r\n        }\r\n    };\r\n    return order(c1) - order(c2);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$3 = 'SyncEngine';\r\n/**\r\n * QueryView contains all of the data that SyncEngine needs to keep track of for\r\n * a particular query.\r\n */\r\nclass QueryView {\r\n    constructor(\r\n    /**\r\n     * The query itself.\r\n     */\r\n    query, \r\n    /**\r\n     * The target number created by the client that is used in the watch\r\n     * stream to identify this query.\r\n     */\r\n    targetId, \r\n    /**\r\n     * The view is responsible for computing the final merged truth of what\r\n     * docs are in the query. It gets notified of local and remote changes,\r\n     * and applies the query filters and limits to determine the most correct\r\n     * possible results.\r\n     */\r\n    view) {\r\n        this.query = query;\r\n        this.targetId = targetId;\r\n        this.view = view;\r\n    }\r\n}\r\n/** Tracks a limbo resolution. */\r\nclass LimboResolution {\r\n    constructor(key) {\r\n        this.key = key;\r\n        /**\r\n         * Set to true once we've received a document. This is used in\r\n         * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to\r\n         * decide whether it needs to manufacture a delete event for the target once\r\n         * the target is CURRENT.\r\n         */\r\n        this.receivedDocument = false;\r\n    }\r\n}\r\n/**\r\n * An implementation of `SyncEngine` coordinating with other parts of SDK.\r\n *\r\n * The parts of SyncEngine that act as a callback to RemoteStore need to be\r\n * registered individually. This is done in `syncEngineWrite()` and\r\n * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods\r\n * serve as entry points to RemoteStore's functionality.\r\n *\r\n * Note: some field defined in this class might have public access level, but\r\n * the class is not exported so they are only accessible from this module.\r\n * This is useful to implement optional features (like bundles) in free\r\n * functions, such that they are tree-shakeable.\r\n */\r\nclass SyncEngineImpl {\r\n    constructor(localStore, remoteStore, eventManager, \r\n    // PORTING NOTE: Manages state synchronization in multi-tab environments.\r\n    sharedClientState, currentUser, maxConcurrentLimboResolutions) {\r\n        this.localStore = localStore;\r\n        this.remoteStore = remoteStore;\r\n        this.eventManager = eventManager;\r\n        this.sharedClientState = sharedClientState;\r\n        this.currentUser = currentUser;\r\n        this.maxConcurrentLimboResolutions = maxConcurrentLimboResolutions;\r\n        this.syncEngineListener = {};\r\n        this.queryViewsByQuery = new ObjectMap(q => canonifyQuery(q), queryEquals);\r\n        this.queriesByTarget = new Map();\r\n        /**\r\n         * The keys of documents that are in limbo for which we haven't yet started a\r\n         * limbo resolution query. The strings in this set are the result of calling\r\n         * `key.path.canonicalString()` where `key` is a `DocumentKey` object.\r\n         *\r\n         * The `Set` type was chosen because it provides efficient lookup and removal\r\n         * of arbitrary elements and it also maintains insertion order, providing the\r\n         * desired queue-like FIFO semantics.\r\n         */\r\n        this.enqueuedLimboResolutions = new Set();\r\n        /**\r\n         * Keeps track of the target ID for each document that is in limbo with an\r\n         * active target.\r\n         */\r\n        this.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);\r\n        /**\r\n         * Keeps track of the information about an active limbo resolution for each\r\n         * active target ID that was started for the purpose of limbo resolution.\r\n         */\r\n        this.activeLimboResolutionsByTarget = new Map();\r\n        this.limboDocumentRefs = new ReferenceSet();\r\n        /** Stores user completion handlers, indexed by User and BatchId. */\r\n        this.mutationUserCallbacks = {};\r\n        /** Stores user callbacks waiting for all pending writes to be acknowledged. */\r\n        this.pendingWritesCallbacks = new Map();\r\n        this.limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();\r\n        this.onlineState = \"Unknown\" /* OnlineState.Unknown */;\r\n        // The primary state is set to `true` or `false` immediately after Firestore\r\n        // startup. In the interim, a client should only be considered primary if\r\n        // `isPrimary` is true.\r\n        this._isPrimaryClient = undefined;\r\n    }\r\n    get isPrimaryClient() {\r\n        return this._isPrimaryClient === true;\r\n    }\r\n}\r\nfunction newSyncEngine(localStore, remoteStore, eventManager, \r\n// PORTING NOTE: Manages state synchronization in multi-tab environments.\r\nsharedClientState, currentUser, maxConcurrentLimboResolutions, isPrimary) {\r\n    const syncEngine = new SyncEngineImpl(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions);\r\n    if (isPrimary) {\r\n        syncEngine._isPrimaryClient = true;\r\n    }\r\n    return syncEngine;\r\n}\r\n/**\r\n * Initiates the new listen, resolves promise when listen enqueued to the\r\n * server. All the subsequent view snapshots or errors are sent to the\r\n * subscribed handlers. Returns the initial snapshot.\r\n */\r\nasync function syncEngineListen(syncEngine, query) {\r\n    const syncEngineImpl = ensureWatchCallbacks(syncEngine);\r\n    let targetId;\r\n    let viewSnapshot;\r\n    const queryView = syncEngineImpl.queryViewsByQuery.get(query);\r\n    if (queryView) {\r\n        // PORTING NOTE: With Multi-Tab Web, it is possible that a query view\r\n        // already exists when EventManager calls us for the first time. This\r\n        // happens when the primary tab is already listening to this query on\r\n        // behalf of another tab and the user of the primary also starts listening\r\n        // to the query. EventManager will not have an assigned target ID in this\r\n        // case and calls `listen` to obtain this ID.\r\n        targetId = queryView.targetId;\r\n        syncEngineImpl.sharedClientState.addLocalQueryTarget(targetId);\r\n        viewSnapshot = queryView.view.computeInitialSnapshot();\r\n    }\r\n    else {\r\n        const targetData = await localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(query));\r\n        const status = syncEngineImpl.sharedClientState.addLocalQueryTarget(targetData.targetId);\r\n        targetId = targetData.targetId;\r\n        viewSnapshot = await initializeViewAndComputeSnapshot(syncEngineImpl, query, targetId, status === 'current', targetData.resumeToken);\r\n        if (syncEngineImpl.isPrimaryClient) {\r\n            remoteStoreListen(syncEngineImpl.remoteStore, targetData);\r\n        }\r\n    }\r\n    return viewSnapshot;\r\n}\r\n/**\r\n * Registers a view for a previously unknown query and computes its initial\r\n * snapshot.\r\n */\r\nasync function initializeViewAndComputeSnapshot(syncEngineImpl, query, targetId, current, resumeToken) {\r\n    // PORTING NOTE: On Web only, we inject the code that registers new Limbo\r\n    // targets based on view changes. This allows us to only depend on Limbo\r\n    // changes when user code includes queries.\r\n    syncEngineImpl.applyDocChanges = (queryView, changes, remoteEvent) => applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent);\r\n    const queryResult = await localStoreExecuteQuery(syncEngineImpl.localStore, query, \r\n    /* usePreviousResults= */ true);\r\n    const view = new View(query, queryResult.remoteKeys);\r\n    const viewDocChanges = view.computeDocChanges(queryResult.documents);\r\n    const synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current && syncEngineImpl.onlineState !== \"Offline\" /* OnlineState.Offline */, resumeToken);\r\n    const viewChange = view.applyChanges(viewDocChanges, \r\n    /* updateLimboDocuments= */ syncEngineImpl.isPrimaryClient, synthesizedTargetChange);\r\n    updateTrackedLimbos(syncEngineImpl, targetId, viewChange.limboChanges);\r\n    const data = new QueryView(query, targetId, view);\r\n    syncEngineImpl.queryViewsByQuery.set(query, data);\r\n    if (syncEngineImpl.queriesByTarget.has(targetId)) {\r\n        syncEngineImpl.queriesByTarget.get(targetId).push(query);\r\n    }\r\n    else {\r\n        syncEngineImpl.queriesByTarget.set(targetId, [query]);\r\n    }\r\n    return viewChange.snapshot;\r\n}\r\n/** Stops listening to the query. */\r\nasync function syncEngineUnlisten(syncEngine, query) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    const queryView = syncEngineImpl.queryViewsByQuery.get(query);\r\n    // Only clean up the query view and target if this is the only query mapped\r\n    // to the target.\r\n    const queries = syncEngineImpl.queriesByTarget.get(queryView.targetId);\r\n    if (queries.length > 1) {\r\n        syncEngineImpl.queriesByTarget.set(queryView.targetId, queries.filter(q => !queryEquals(q, query)));\r\n        syncEngineImpl.queryViewsByQuery.delete(query);\r\n        return;\r\n    }\r\n    // No other queries are mapped to the target, clean up the query and the target.\r\n    if (syncEngineImpl.isPrimaryClient) {\r\n        // We need to remove the local query target first to allow us to verify\r\n        // whether any other client is still interested in this target.\r\n        syncEngineImpl.sharedClientState.removeLocalQueryTarget(queryView.targetId);\r\n        const targetRemainsActive = syncEngineImpl.sharedClientState.isActiveQueryTarget(queryView.targetId);\r\n        if (!targetRemainsActive) {\r\n            await localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId, \r\n            /*keepPersistedTargetData=*/ false)\r\n                .then(() => {\r\n                syncEngineImpl.sharedClientState.clearQueryState(queryView.targetId);\r\n                remoteStoreUnlisten(syncEngineImpl.remoteStore, queryView.targetId);\r\n                removeAndCleanupTarget(syncEngineImpl, queryView.targetId);\r\n            })\r\n                .catch(ignoreIfPrimaryLeaseLoss);\r\n        }\r\n    }\r\n    else {\r\n        removeAndCleanupTarget(syncEngineImpl, queryView.targetId);\r\n        await localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId, \r\n        /*keepPersistedTargetData=*/ true);\r\n    }\r\n}\r\n/**\r\n * Initiates the write of local mutation batch which involves adding the\r\n * writes to the mutation queue, notifying the remote store about new\r\n * mutations and raising events for any changes this write caused.\r\n *\r\n * The promise returned by this call is resolved when the above steps\r\n * have completed, *not* when the write was acked by the backend. The\r\n * userCallback is resolved once the write was acked/rejected by the\r\n * backend (or failed locally for any other reason).\r\n */\r\nasync function syncEngineWrite(syncEngine, batch, userCallback) {\r\n    const syncEngineImpl = syncEngineEnsureWriteCallbacks(syncEngine);\r\n    try {\r\n        const result = await localStoreWriteLocally(syncEngineImpl.localStore, batch);\r\n        syncEngineImpl.sharedClientState.addPendingMutation(result.batchId);\r\n        addMutationCallback(syncEngineImpl, result.batchId, userCallback);\r\n        await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.changes);\r\n        await fillWritePipeline(syncEngineImpl.remoteStore);\r\n    }\r\n    catch (e) {\r\n        // If we can't persist the mutation, we reject the user callback and\r\n        // don't send the mutation. The user can then retry the write.\r\n        const error = wrapInUserErrorIfRecoverable(e, `Failed to persist write`);\r\n        userCallback.reject(error);\r\n    }\r\n}\r\n/**\r\n * Applies one remote event to the sync engine, notifying any views of the\r\n * changes, and releasing any pending mutation batches that would become\r\n * visible because of the snapshot version the remote event contains.\r\n */\r\nasync function syncEngineApplyRemoteEvent(syncEngine, remoteEvent) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    try {\r\n        const changes = await localStoreApplyRemoteEventToLocalCache(syncEngineImpl.localStore, remoteEvent);\r\n        // Update `receivedDocument` as appropriate for any limbo targets.\r\n        remoteEvent.targetChanges.forEach((targetChange, targetId) => {\r\n            const limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\r\n            if (limboResolution) {\r\n                // Since this is a limbo resolution lookup, it's for a single document\r\n                // and it could be added, modified, or removed, but not a combination.\r\n                hardAssert(targetChange.addedDocuments.size +\r\n                    targetChange.modifiedDocuments.size +\r\n                    targetChange.removedDocuments.size <=\r\n                    1);\r\n                if (targetChange.addedDocuments.size > 0) {\r\n                    limboResolution.receivedDocument = true;\r\n                }\r\n                else if (targetChange.modifiedDocuments.size > 0) {\r\n                    hardAssert(limboResolution.receivedDocument);\r\n                }\r\n                else if (targetChange.removedDocuments.size > 0) {\r\n                    hardAssert(limboResolution.receivedDocument);\r\n                    limboResolution.receivedDocument = false;\r\n                }\r\n                else {\r\n                    // This was probably just a CURRENT targetChange or similar.\r\n                }\r\n            }\r\n        });\r\n        await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, remoteEvent);\r\n    }\r\n    catch (error) {\r\n        await ignoreIfPrimaryLeaseLoss(error);\r\n    }\r\n}\r\n/**\r\n * Applies an OnlineState change to the sync engine and notifies any views of\r\n * the change.\r\n */\r\nfunction syncEngineApplyOnlineStateChange(syncEngine, onlineState, source) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    // If we are the secondary client, we explicitly ignore the remote store's\r\n    // online state (the local client may go offline, even though the primary\r\n    // tab remains online) and only apply the primary tab's online state from\r\n    // SharedClientState.\r\n    if ((syncEngineImpl.isPrimaryClient &&\r\n        source === 0 /* OnlineStateSource.RemoteStore */) ||\r\n        (!syncEngineImpl.isPrimaryClient &&\r\n            source === 1 /* OnlineStateSource.SharedClientState */)) {\r\n        const newViewSnapshots = [];\r\n        syncEngineImpl.queryViewsByQuery.forEach((query, queryView) => {\r\n            const viewChange = queryView.view.applyOnlineStateChange(onlineState);\r\n            if (viewChange.snapshot) {\r\n                newViewSnapshots.push(viewChange.snapshot);\r\n            }\r\n        });\r\n        eventManagerOnOnlineStateChange(syncEngineImpl.eventManager, onlineState);\r\n        if (newViewSnapshots.length) {\r\n            syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots);\r\n        }\r\n        syncEngineImpl.onlineState = onlineState;\r\n        if (syncEngineImpl.isPrimaryClient) {\r\n            syncEngineImpl.sharedClientState.setOnlineState(onlineState);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Rejects the listen for the given targetID. This can be triggered by the\r\n * backend for any active target.\r\n *\r\n * @param syncEngine - The sync engine implementation.\r\n * @param targetId - The targetID corresponds to one previously initiated by the\r\n * user as part of TargetData passed to listen() on RemoteStore.\r\n * @param err - A description of the condition that has forced the rejection.\r\n * Nearly always this will be an indication that the user is no longer\r\n * authorized to see the data matching the target.\r\n */\r\nasync function syncEngineRejectListen(syncEngine, targetId, err) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    // PORTING NOTE: Multi-tab only.\r\n    syncEngineImpl.sharedClientState.updateQueryState(targetId, 'rejected', err);\r\n    const limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\r\n    const limboKey = limboResolution && limboResolution.key;\r\n    if (limboKey) {\r\n        // TODO(klimt): We really only should do the following on permission\r\n        // denied errors, but we don't have the cause code here.\r\n        // It's a limbo doc. Create a synthetic event saying it was deleted.\r\n        // This is kind of a hack. Ideally, we would have a method in the local\r\n        // store to purge a document. However, it would be tricky to keep all of\r\n        // the local store's invariants with another method.\r\n        let documentUpdates = new SortedMap(DocumentKey.comparator);\r\n        // TODO(b/217189216): This limbo document should ideally have a read time,\r\n        // so that it is picked up by any read-time based scans. The backend,\r\n        // however, does not send a read time for target removals.\r\n        documentUpdates = documentUpdates.insert(limboKey, MutableDocument.newNoDocument(limboKey, SnapshotVersion.min()));\r\n        const resolvedLimboDocuments = documentKeySet().add(limboKey);\r\n        const event = new RemoteEvent(SnapshotVersion.min(), \r\n        /* targetChanges= */ new Map(), \r\n        /* targetMismatches= */ new SortedMap(primitiveComparator), documentUpdates, resolvedLimboDocuments);\r\n        await syncEngineApplyRemoteEvent(syncEngineImpl, event);\r\n        // Since this query failed, we won't want to manually unlisten to it.\r\n        // We only remove it from bookkeeping after we successfully applied the\r\n        // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to\r\n        // this query when the RemoteStore restarts the Watch stream, which should\r\n        // re-trigger the target failure.\r\n        syncEngineImpl.activeLimboTargetsByKey =\r\n            syncEngineImpl.activeLimboTargetsByKey.remove(limboKey);\r\n        syncEngineImpl.activeLimboResolutionsByTarget.delete(targetId);\r\n        pumpEnqueuedLimboResolutions(syncEngineImpl);\r\n    }\r\n    else {\r\n        await localStoreReleaseTarget(syncEngineImpl.localStore, targetId, \r\n        /* keepPersistedTargetData */ false)\r\n            .then(() => removeAndCleanupTarget(syncEngineImpl, targetId, err))\r\n            .catch(ignoreIfPrimaryLeaseLoss);\r\n    }\r\n}\r\nasync function syncEngineApplySuccessfulWrite(syncEngine, mutationBatchResult) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    const batchId = mutationBatchResult.batch.batchId;\r\n    try {\r\n        const changes = await localStoreAcknowledgeBatch(syncEngineImpl.localStore, mutationBatchResult);\r\n        // The local store may or may not be able to apply the write result and\r\n        // raise events immediately (depending on whether the watcher is caught\r\n        // up), so we raise user callbacks first so that they consistently happen\r\n        // before listen events.\r\n        processUserCallback(syncEngineImpl, batchId, /*error=*/ null);\r\n        triggerPendingWritesCallbacks(syncEngineImpl, batchId);\r\n        syncEngineImpl.sharedClientState.updateMutationState(batchId, 'acknowledged');\r\n        await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes);\r\n    }\r\n    catch (error) {\r\n        await ignoreIfPrimaryLeaseLoss(error);\r\n    }\r\n}\r\nasync function syncEngineRejectFailedWrite(syncEngine, batchId, error) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    try {\r\n        const changes = await localStoreRejectBatch(syncEngineImpl.localStore, batchId);\r\n        // The local store may or may not be able to apply the write result and\r\n        // raise events immediately (depending on whether the watcher is caught up),\r\n        // so we raise user callbacks first so that they consistently happen before\r\n        // listen events.\r\n        processUserCallback(syncEngineImpl, batchId, error);\r\n        triggerPendingWritesCallbacks(syncEngineImpl, batchId);\r\n        syncEngineImpl.sharedClientState.updateMutationState(batchId, 'rejected', error);\r\n        await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes);\r\n    }\r\n    catch (error) {\r\n        await ignoreIfPrimaryLeaseLoss(error);\r\n    }\r\n}\r\n/**\r\n * Registers a user callback that resolves when all pending mutations at the moment of calling\r\n * are acknowledged .\r\n */\r\nasync function syncEngineRegisterPendingWritesCallback(syncEngine, callback) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    if (!canUseNetwork(syncEngineImpl.remoteStore)) {\r\n        logDebug(LOG_TAG$3, 'The network is disabled. The task returned by ' +\r\n            \"'awaitPendingWrites()' will not complete until the network is enabled.\");\r\n    }\r\n    try {\r\n        const highestBatchId = await localStoreGetHighestUnacknowledgedBatchId(syncEngineImpl.localStore);\r\n        if (highestBatchId === BATCHID_UNKNOWN) {\r\n            // Trigger the callback right away if there is no pending writes at the moment.\r\n            callback.resolve();\r\n            return;\r\n        }\r\n        const callbacks = syncEngineImpl.pendingWritesCallbacks.get(highestBatchId) || [];\r\n        callbacks.push(callback);\r\n        syncEngineImpl.pendingWritesCallbacks.set(highestBatchId, callbacks);\r\n    }\r\n    catch (e) {\r\n        const firestoreError = wrapInUserErrorIfRecoverable(e, 'Initialization of waitForPendingWrites() operation failed');\r\n        callback.reject(firestoreError);\r\n    }\r\n}\r\n/**\r\n * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,\r\n * if there are any.\r\n */\r\nfunction triggerPendingWritesCallbacks(syncEngineImpl, batchId) {\r\n    (syncEngineImpl.pendingWritesCallbacks.get(batchId) || []).forEach(callback => {\r\n        callback.resolve();\r\n    });\r\n    syncEngineImpl.pendingWritesCallbacks.delete(batchId);\r\n}\r\n/** Reject all outstanding callbacks waiting for pending writes to complete. */\r\nfunction rejectOutstandingPendingWritesCallbacks(syncEngineImpl, errorMessage) {\r\n    syncEngineImpl.pendingWritesCallbacks.forEach(callbacks => {\r\n        callbacks.forEach(callback => {\r\n            callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));\r\n        });\r\n    });\r\n    syncEngineImpl.pendingWritesCallbacks.clear();\r\n}\r\nfunction addMutationCallback(syncEngineImpl, batchId, callback) {\r\n    let newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];\r\n    if (!newCallbacks) {\r\n        newCallbacks = new SortedMap(primitiveComparator);\r\n    }\r\n    newCallbacks = newCallbacks.insert(batchId, callback);\r\n    syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] =\r\n        newCallbacks;\r\n}\r\n/**\r\n * Resolves or rejects the user callback for the given batch and then discards\r\n * it.\r\n */\r\nfunction processUserCallback(syncEngine, batchId, error) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    let newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];\r\n    // NOTE: Mutations restored from persistence won't have callbacks, so it's\r\n    // okay for there to be no callback for this ID.\r\n    if (newCallbacks) {\r\n        const callback = newCallbacks.get(batchId);\r\n        if (callback) {\r\n            if (error) {\r\n                callback.reject(error);\r\n            }\r\n            else {\r\n                callback.resolve();\r\n            }\r\n            newCallbacks = newCallbacks.remove(batchId);\r\n        }\r\n        syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] =\r\n            newCallbacks;\r\n    }\r\n}\r\nfunction removeAndCleanupTarget(syncEngineImpl, targetId, error = null) {\r\n    syncEngineImpl.sharedClientState.removeLocalQueryTarget(targetId);\r\n    for (const query of syncEngineImpl.queriesByTarget.get(targetId)) {\r\n        syncEngineImpl.queryViewsByQuery.delete(query);\r\n        if (error) {\r\n            syncEngineImpl.syncEngineListener.onWatchError(query, error);\r\n        }\r\n    }\r\n    syncEngineImpl.queriesByTarget.delete(targetId);\r\n    if (syncEngineImpl.isPrimaryClient) {\r\n        const limboKeys = syncEngineImpl.limboDocumentRefs.removeReferencesForId(targetId);\r\n        limboKeys.forEach(limboKey => {\r\n            const isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboKey);\r\n            if (!isReferenced) {\r\n                // We removed the last reference for this key\r\n                removeLimboTarget(syncEngineImpl, limboKey);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction removeLimboTarget(syncEngineImpl, key) {\r\n    syncEngineImpl.enqueuedLimboResolutions.delete(key.path.canonicalString());\r\n    // It's possible that the target already got removed because the query failed. In that case,\r\n    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.\r\n    const limboTargetId = syncEngineImpl.activeLimboTargetsByKey.get(key);\r\n    if (limboTargetId === null) {\r\n        // This target already got removed, because the query failed.\r\n        return;\r\n    }\r\n    remoteStoreUnlisten(syncEngineImpl.remoteStore, limboTargetId);\r\n    syncEngineImpl.activeLimboTargetsByKey =\r\n        syncEngineImpl.activeLimboTargetsByKey.remove(key);\r\n    syncEngineImpl.activeLimboResolutionsByTarget.delete(limboTargetId);\r\n    pumpEnqueuedLimboResolutions(syncEngineImpl);\r\n}\r\nfunction updateTrackedLimbos(syncEngineImpl, targetId, limboChanges) {\r\n    for (const limboChange of limboChanges) {\r\n        if (limboChange instanceof AddedLimboDocument) {\r\n            syncEngineImpl.limboDocumentRefs.addReference(limboChange.key, targetId);\r\n            trackLimboChange(syncEngineImpl, limboChange);\r\n        }\r\n        else if (limboChange instanceof RemovedLimboDocument) {\r\n            logDebug(LOG_TAG$3, 'Document no longer in limbo: ' + limboChange.key);\r\n            syncEngineImpl.limboDocumentRefs.removeReference(limboChange.key, targetId);\r\n            const isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboChange.key);\r\n            if (!isReferenced) {\r\n                // We removed the last reference for this key\r\n                removeLimboTarget(syncEngineImpl, limboChange.key);\r\n            }\r\n        }\r\n        else {\r\n            fail();\r\n        }\r\n    }\r\n}\r\nfunction trackLimboChange(syncEngineImpl, limboChange) {\r\n    const key = limboChange.key;\r\n    const keyString = key.path.canonicalString();\r\n    if (!syncEngineImpl.activeLimboTargetsByKey.get(key) &&\r\n        !syncEngineImpl.enqueuedLimboResolutions.has(keyString)) {\r\n        logDebug(LOG_TAG$3, 'New document in limbo: ' + key);\r\n        syncEngineImpl.enqueuedLimboResolutions.add(keyString);\r\n        pumpEnqueuedLimboResolutions(syncEngineImpl);\r\n    }\r\n}\r\n/**\r\n * Starts listens for documents in limbo that are enqueued for resolution,\r\n * subject to a maximum number of concurrent resolutions.\r\n *\r\n * Without bounding the number of concurrent resolutions, the server can fail\r\n * with \"resource exhausted\" errors which can lead to pathological client\r\n * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.\r\n */\r\nfunction pumpEnqueuedLimboResolutions(syncEngineImpl) {\r\n    while (syncEngineImpl.enqueuedLimboResolutions.size > 0 &&\r\n        syncEngineImpl.activeLimboTargetsByKey.size <\r\n            syncEngineImpl.maxConcurrentLimboResolutions) {\r\n        const keyString = syncEngineImpl.enqueuedLimboResolutions\r\n            .values()\r\n            .next().value;\r\n        syncEngineImpl.enqueuedLimboResolutions.delete(keyString);\r\n        const key = new DocumentKey(ResourcePath.fromString(keyString));\r\n        const limboTargetId = syncEngineImpl.limboTargetIdGenerator.next();\r\n        syncEngineImpl.activeLimboResolutionsByTarget.set(limboTargetId, new LimboResolution(key));\r\n        syncEngineImpl.activeLimboTargetsByKey =\r\n            syncEngineImpl.activeLimboTargetsByKey.insert(key, limboTargetId);\r\n        remoteStoreListen(syncEngineImpl.remoteStore, new TargetData(queryToTarget(newQueryForPath(key.path)), limboTargetId, \"TargetPurposeLimboResolution\" /* TargetPurpose.LimboResolution */, ListenSequence.INVALID));\r\n    }\r\n}\r\nasync function syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, changes, remoteEvent) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    const newSnaps = [];\r\n    const docChangesInAllViews = [];\r\n    const queriesProcessed = [];\r\n    if (syncEngineImpl.queryViewsByQuery.isEmpty()) {\r\n        // Return early since `onWatchChange()` might not have been assigned yet.\r\n        return;\r\n    }\r\n    syncEngineImpl.queryViewsByQuery.forEach((_, queryView) => {\r\n        queriesProcessed.push(syncEngineImpl\r\n            .applyDocChanges(queryView, changes, remoteEvent)\r\n            .then(viewSnapshot => {\r\n            // If there are changes, or we are handling a global snapshot, notify\r\n            // secondary clients to update query state.\r\n            if (viewSnapshot || remoteEvent) {\r\n                if (syncEngineImpl.isPrimaryClient) {\r\n                    syncEngineImpl.sharedClientState.updateQueryState(queryView.targetId, (viewSnapshot === null || viewSnapshot === void 0 ? void 0 : viewSnapshot.fromCache) ? 'not-current' : 'current');\r\n                }\r\n            }\r\n            // Update views if there are actual changes.\r\n            if (!!viewSnapshot) {\r\n                newSnaps.push(viewSnapshot);\r\n                const docChanges = LocalViewChanges.fromSnapshot(queryView.targetId, viewSnapshot);\r\n                docChangesInAllViews.push(docChanges);\r\n            }\r\n        }));\r\n    });\r\n    await Promise.all(queriesProcessed);\r\n    syncEngineImpl.syncEngineListener.onWatchChange(newSnaps);\r\n    await localStoreNotifyLocalViewChanges(syncEngineImpl.localStore, docChangesInAllViews);\r\n}\r\nasync function applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent) {\r\n    let viewDocChanges = queryView.view.computeDocChanges(changes);\r\n    if (viewDocChanges.needsRefill) {\r\n        // The query has a limit and some docs were removed, so we need\r\n        // to re-run the query against the local store to make sure we\r\n        // didn't lose any good docs that had been past the limit.\r\n        viewDocChanges = await localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query, \r\n        /* usePreviousResults= */ false).then(({ documents }) => {\r\n            return queryView.view.computeDocChanges(documents, viewDocChanges);\r\n        });\r\n    }\r\n    const targetChange = remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);\r\n    const viewChange = queryView.view.applyChanges(viewDocChanges, \r\n    /* updateLimboDocuments= */ syncEngineImpl.isPrimaryClient, targetChange);\r\n    updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewChange.limboChanges);\r\n    return viewChange.snapshot;\r\n}\r\nasync function syncEngineHandleCredentialChange(syncEngine, user) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    const userChanged = !syncEngineImpl.currentUser.isEqual(user);\r\n    if (userChanged) {\r\n        logDebug(LOG_TAG$3, 'User change. New user:', user.toKey());\r\n        const result = await localStoreHandleUserChange(syncEngineImpl.localStore, user);\r\n        syncEngineImpl.currentUser = user;\r\n        // Fails tasks waiting for pending writes requested by previous user.\r\n        rejectOutstandingPendingWritesCallbacks(syncEngineImpl, \"'waitForPendingWrites' promise is rejected due to a user change.\");\r\n        // TODO(b/114226417): Consider calling this only in the primary tab.\r\n        syncEngineImpl.sharedClientState.handleUserChange(user, result.removedBatchIds, result.addedBatchIds);\r\n        await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.affectedDocuments);\r\n    }\r\n}\r\nfunction syncEngineGetRemoteKeysForTarget(syncEngine, targetId) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    const limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\r\n    if (limboResolution && limboResolution.receivedDocument) {\r\n        return documentKeySet().add(limboResolution.key);\r\n    }\r\n    else {\r\n        let keySet = documentKeySet();\r\n        const queries = syncEngineImpl.queriesByTarget.get(targetId);\r\n        if (!queries) {\r\n            return keySet;\r\n        }\r\n        for (const query of queries) {\r\n            const queryView = syncEngineImpl.queryViewsByQuery.get(query);\r\n            keySet = keySet.unionWith(queryView.view.syncedDocuments);\r\n        }\r\n        return keySet;\r\n    }\r\n}\r\n/**\r\n * Reconcile the list of synced documents in an existing view with those\r\n * from persistence.\r\n */\r\nasync function synchronizeViewAndComputeSnapshot(syncEngine, queryView) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    const queryResult = await localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query, \r\n    /* usePreviousResults= */ true);\r\n    const viewSnapshot = queryView.view.synchronizeWithPersistedState(queryResult);\r\n    if (syncEngineImpl.isPrimaryClient) {\r\n        updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewSnapshot.limboChanges);\r\n    }\r\n    return viewSnapshot;\r\n}\r\n/**\r\n * Retrieves newly changed documents from remote document cache and raises\r\n * snapshots if needed.\r\n */\r\n// PORTING NOTE: Multi-Tab only.\r\nasync function syncEngineSynchronizeWithChangedDocuments(syncEngine, collectionGroup) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    return localStoreGetNewDocumentChanges(syncEngineImpl.localStore, collectionGroup).then(changes => syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes));\r\n}\r\n/** Applies a mutation state to an existing batch.  */\r\n// PORTING NOTE: Multi-Tab only.\r\nasync function syncEngineApplyBatchState(syncEngine, batchId, batchState, error) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    const documents = await localStoreLookupMutationDocuments(syncEngineImpl.localStore, batchId);\r\n    if (documents === null) {\r\n        // A throttled tab may not have seen the mutation before it was completed\r\n        // and removed from the mutation queue, in which case we won't have cached\r\n        // the affected documents. In this case we can safely ignore the update\r\n        // since that means we didn't apply the mutation locally at all (if we\r\n        // had, we would have cached the affected documents), and so we will just\r\n        // see any resulting document changes via normal remote document updates\r\n        // as applicable.\r\n        logDebug(LOG_TAG$3, 'Cannot apply mutation batch with id: ' + batchId);\r\n        return;\r\n    }\r\n    if (batchState === 'pending') {\r\n        // If we are the primary client, we need to send this write to the\r\n        // backend. Secondary clients will ignore these writes since their remote\r\n        // connection is disabled.\r\n        await fillWritePipeline(syncEngineImpl.remoteStore);\r\n    }\r\n    else if (batchState === 'acknowledged' || batchState === 'rejected') {\r\n        // NOTE: Both these methods are no-ops for batches that originated from\r\n        // other clients.\r\n        processUserCallback(syncEngineImpl, batchId, error ? error : null);\r\n        triggerPendingWritesCallbacks(syncEngineImpl, batchId);\r\n        localStoreRemoveCachedMutationBatchMetadata(syncEngineImpl.localStore, batchId);\r\n    }\r\n    else {\r\n        fail();\r\n    }\r\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, documents);\r\n}\r\n/** Applies a query target change from a different tab. */\r\n// PORTING NOTE: Multi-Tab only.\r\nasync function syncEngineApplyPrimaryState(syncEngine, isPrimary) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    ensureWatchCallbacks(syncEngineImpl);\r\n    syncEngineEnsureWriteCallbacks(syncEngineImpl);\r\n    if (isPrimary === true && syncEngineImpl._isPrimaryClient !== true) {\r\n        // Secondary tabs only maintain Views for their local listeners and the\r\n        // Views internal state may not be 100% populated (in particular\r\n        // secondary tabs don't track syncedDocuments, the set of documents the\r\n        // server considers to be in the target). So when a secondary becomes\r\n        // primary, we need to need to make sure that all views for all targets\r\n        // match the state on disk.\r\n        const activeTargets = syncEngineImpl.sharedClientState.getAllActiveQueryTargets();\r\n        const activeQueries = await synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets.toArray());\r\n        syncEngineImpl._isPrimaryClient = true;\r\n        await remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, true);\r\n        for (const targetData of activeQueries) {\r\n            remoteStoreListen(syncEngineImpl.remoteStore, targetData);\r\n        }\r\n    }\r\n    else if (isPrimary === false && syncEngineImpl._isPrimaryClient !== false) {\r\n        const activeTargets = [];\r\n        let p = Promise.resolve();\r\n        syncEngineImpl.queriesByTarget.forEach((_, targetId) => {\r\n            if (syncEngineImpl.sharedClientState.isLocalQueryTarget(targetId)) {\r\n                activeTargets.push(targetId);\r\n            }\r\n            else {\r\n                p = p.then(() => {\r\n                    removeAndCleanupTarget(syncEngineImpl, targetId);\r\n                    return localStoreReleaseTarget(syncEngineImpl.localStore, targetId, \r\n                    /*keepPersistedTargetData=*/ true);\r\n                });\r\n            }\r\n            remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\r\n        });\r\n        await p;\r\n        await synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets);\r\n        resetLimboDocuments(syncEngineImpl);\r\n        syncEngineImpl._isPrimaryClient = false;\r\n        await remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, false);\r\n    }\r\n}\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction resetLimboDocuments(syncEngine) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    syncEngineImpl.activeLimboResolutionsByTarget.forEach((_, targetId) => {\r\n        remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\r\n    });\r\n    syncEngineImpl.limboDocumentRefs.removeAllReferences();\r\n    syncEngineImpl.activeLimboResolutionsByTarget = new Map();\r\n    syncEngineImpl.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);\r\n}\r\n/**\r\n * Reconcile the query views of the provided query targets with the state from\r\n * persistence. Raises snapshots for any changes that affect the local\r\n * client and returns the updated state of all target's query data.\r\n *\r\n * @param syncEngine - The sync engine implementation\r\n * @param targets - the list of targets with views that need to be recomputed\r\n * @param transitionToPrimary - `true` iff the tab transitions from a secondary\r\n * tab to a primary tab\r\n */\r\n// PORTING NOTE: Multi-Tab only.\r\nasync function synchronizeQueryViewsAndRaiseSnapshots(syncEngine, targets, transitionToPrimary) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    const activeQueries = [];\r\n    const newViewSnapshots = [];\r\n    for (const targetId of targets) {\r\n        let targetData;\r\n        const queries = syncEngineImpl.queriesByTarget.get(targetId);\r\n        if (queries && queries.length !== 0) {\r\n            // For queries that have a local View, we fetch their current state\r\n            // from LocalStore (as the resume token and the snapshot version\r\n            // might have changed) and reconcile their views with the persisted\r\n            // state (the list of syncedDocuments may have gotten out of sync).\r\n            targetData = await localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(queries[0]));\r\n            for (const query of queries) {\r\n                const queryView = syncEngineImpl.queryViewsByQuery.get(query);\r\n                const viewChange = await synchronizeViewAndComputeSnapshot(syncEngineImpl, queryView);\r\n                if (viewChange.snapshot) {\r\n                    newViewSnapshots.push(viewChange.snapshot);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // For queries that never executed on this client, we need to\r\n            // allocate the target in LocalStore and initialize a new View.\r\n            const target = await localStoreGetCachedTarget(syncEngineImpl.localStore, targetId);\r\n            targetData = await localStoreAllocateTarget(syncEngineImpl.localStore, target);\r\n            await initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetId, \r\n            /*current=*/ false, targetData.resumeToken);\r\n        }\r\n        activeQueries.push(targetData);\r\n    }\r\n    syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots);\r\n    return activeQueries;\r\n}\r\n/**\r\n * Creates a `Query` object from the specified `Target`. There is no way to\r\n * obtain the original `Query`, so we synthesize a `Query` from the `Target`\r\n * object.\r\n *\r\n * The synthesized result might be different from the original `Query`, but\r\n * since the synthesized `Query` should return the same results as the\r\n * original one (only the presentation of results might differ), the potential\r\n * difference will not cause issues.\r\n */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction synthesizeTargetToQuery(target) {\r\n    return newQuery(target.path, target.collectionGroup, target.orderBy, target.filters, target.limit, \"F\" /* LimitType.First */, target.startAt, target.endAt);\r\n}\r\n/** Returns the IDs of the clients that are currently active. */\r\n// PORTING NOTE: Multi-Tab only.\r\nfunction syncEngineGetActiveClients(syncEngine) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    return localStoreGetActiveClients(syncEngineImpl.localStore);\r\n}\r\n/** Applies a query target change from a different tab. */\r\n// PORTING NOTE: Multi-Tab only.\r\nasync function syncEngineApplyTargetState(syncEngine, targetId, state, error) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    if (syncEngineImpl._isPrimaryClient) {\r\n        // If we receive a target state notification via WebStorage, we are\r\n        // either already secondary or another tab has taken the primary lease.\r\n        logDebug(LOG_TAG$3, 'Ignoring unexpected query state notification.');\r\n        return;\r\n    }\r\n    const query = syncEngineImpl.queriesByTarget.get(targetId);\r\n    if (query && query.length > 0) {\r\n        switch (state) {\r\n            case 'current':\r\n            case 'not-current': {\r\n                const changes = await localStoreGetNewDocumentChanges(syncEngineImpl.localStore, queryCollectionGroup(query[0]));\r\n                const synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(targetId, state === 'current', ByteString.EMPTY_BYTE_STRING);\r\n                await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, synthesizedRemoteEvent);\r\n                break;\r\n            }\r\n            case 'rejected': {\r\n                await localStoreReleaseTarget(syncEngineImpl.localStore, targetId, \r\n                /* keepPersistedTargetData */ true);\r\n                removeAndCleanupTarget(syncEngineImpl, targetId, error);\r\n                break;\r\n            }\r\n            default:\r\n                fail();\r\n        }\r\n    }\r\n}\r\n/** Adds or removes Watch targets for queries from different tabs. */\r\nasync function syncEngineApplyActiveTargetsChange(syncEngine, added, removed) {\r\n    const syncEngineImpl = ensureWatchCallbacks(syncEngine);\r\n    if (!syncEngineImpl._isPrimaryClient) {\r\n        return;\r\n    }\r\n    for (const targetId of added) {\r\n        if (syncEngineImpl.queriesByTarget.has(targetId)) {\r\n            // A target might have been added in a previous attempt\r\n            logDebug(LOG_TAG$3, 'Adding an already active target ' + targetId);\r\n            continue;\r\n        }\r\n        const target = await localStoreGetCachedTarget(syncEngineImpl.localStore, targetId);\r\n        const targetData = await localStoreAllocateTarget(syncEngineImpl.localStore, target);\r\n        await initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetData.targetId, \r\n        /*current=*/ false, targetData.resumeToken);\r\n        remoteStoreListen(syncEngineImpl.remoteStore, targetData);\r\n    }\r\n    for (const targetId of removed) {\r\n        // Check that the target is still active since the target might have been\r\n        // removed if it has been rejected by the backend.\r\n        if (!syncEngineImpl.queriesByTarget.has(targetId)) {\r\n            continue;\r\n        }\r\n        // Release queries that are still active.\r\n        await localStoreReleaseTarget(syncEngineImpl.localStore, targetId, \r\n        /* keepPersistedTargetData */ false)\r\n            .then(() => {\r\n            remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\r\n            removeAndCleanupTarget(syncEngineImpl, targetId);\r\n        })\r\n            .catch(ignoreIfPrimaryLeaseLoss);\r\n    }\r\n}\r\nfunction ensureWatchCallbacks(syncEngine) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    syncEngineImpl.remoteStore.remoteSyncer.applyRemoteEvent =\r\n        syncEngineApplyRemoteEvent.bind(null, syncEngineImpl);\r\n    syncEngineImpl.remoteStore.remoteSyncer.getRemoteKeysForTarget =\r\n        syncEngineGetRemoteKeysForTarget.bind(null, syncEngineImpl);\r\n    syncEngineImpl.remoteStore.remoteSyncer.rejectListen =\r\n        syncEngineRejectListen.bind(null, syncEngineImpl);\r\n    syncEngineImpl.syncEngineListener.onWatchChange =\r\n        eventManagerOnWatchChange.bind(null, syncEngineImpl.eventManager);\r\n    syncEngineImpl.syncEngineListener.onWatchError =\r\n        eventManagerOnWatchError.bind(null, syncEngineImpl.eventManager);\r\n    return syncEngineImpl;\r\n}\r\nfunction syncEngineEnsureWriteCallbacks(syncEngine) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    syncEngineImpl.remoteStore.remoteSyncer.applySuccessfulWrite =\r\n        syncEngineApplySuccessfulWrite.bind(null, syncEngineImpl);\r\n    syncEngineImpl.remoteStore.remoteSyncer.rejectFailedWrite =\r\n        syncEngineRejectFailedWrite.bind(null, syncEngineImpl);\r\n    return syncEngineImpl;\r\n}\r\n/**\r\n * Loads a Firestore bundle into the SDK. The returned promise resolves when\r\n * the bundle finished loading.\r\n *\r\n * @param syncEngine - SyncEngine to use.\r\n * @param bundleReader - Bundle to load into the SDK.\r\n * @param task - LoadBundleTask used to update the loading progress to public API.\r\n */\r\nfunction syncEngineLoadBundle(syncEngine, bundleReader, task) {\r\n    const syncEngineImpl = debugCast(syncEngine);\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    loadBundleImpl(syncEngineImpl, bundleReader, task).then(collectionGroups => {\r\n        syncEngineImpl.sharedClientState.notifyBundleLoaded(collectionGroups);\r\n    });\r\n}\r\n/** Loads a bundle and returns the list of affected collection groups. */\r\nasync function loadBundleImpl(syncEngine, reader, task) {\r\n    try {\r\n        const metadata = await reader.getMetadata();\r\n        const skip = await localStoreHasNewerBundle(syncEngine.localStore, metadata);\r\n        if (skip) {\r\n            await reader.close();\r\n            task._completeWith(bundleSuccessProgress(metadata));\r\n            return Promise.resolve(new Set());\r\n        }\r\n        task._updateProgress(bundleInitialProgress(metadata));\r\n        const loader = new BundleLoader(metadata, syncEngine.localStore, reader.serializer);\r\n        let element = await reader.nextElement();\r\n        while (element) {\r\n            ;\r\n            const progress = await loader.addSizedElement(element);\r\n            if (progress) {\r\n                task._updateProgress(progress);\r\n            }\r\n            element = await reader.nextElement();\r\n        }\r\n        const result = await loader.complete();\r\n        await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, result.changedDocs, \r\n        /* remoteEvent */ undefined);\r\n        // Save metadata, so loading the same bundle will skip.\r\n        await localStoreSaveBundle(syncEngine.localStore, metadata);\r\n        task._completeWith(result.progress);\r\n        return Promise.resolve(result.changedCollectionGroups);\r\n    }\r\n    catch (e) {\r\n        logWarn(LOG_TAG$3, `Loading bundle failed with ${e}`);\r\n        task._failWith(e);\r\n        return Promise.resolve(new Set());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides all components needed for Firestore with in-memory persistence.\r\n * Uses EagerGC garbage collection.\r\n */\r\nclass MemoryOfflineComponentProvider {\r\n    constructor() {\r\n        this.synchronizeTabs = false;\r\n    }\r\n    async initialize(cfg) {\r\n        this.serializer = newSerializer(cfg.databaseInfo.databaseId);\r\n        this.sharedClientState = this.createSharedClientState(cfg);\r\n        this.persistence = this.createPersistence(cfg);\r\n        await this.persistence.start();\r\n        this.localStore = this.createLocalStore(cfg);\r\n        this.gcScheduler = this.createGarbageCollectionScheduler(cfg, this.localStore);\r\n        this.indexBackfillerScheduler = this.createIndexBackfillerScheduler(cfg, this.localStore);\r\n    }\r\n    createGarbageCollectionScheduler(cfg, localStore) {\r\n        return null;\r\n    }\r\n    createIndexBackfillerScheduler(cfg, localStore) {\r\n        return null;\r\n    }\r\n    createLocalStore(cfg) {\r\n        return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);\r\n    }\r\n    createPersistence(cfg) {\r\n        return new MemoryPersistence(MemoryEagerDelegate.factory, this.serializer);\r\n    }\r\n    createSharedClientState(cfg) {\r\n        return new MemorySharedClientState();\r\n    }\r\n    async terminate() {\r\n        if (this.gcScheduler) {\r\n            this.gcScheduler.stop();\r\n        }\r\n        await this.sharedClientState.shutdown();\r\n        await this.persistence.shutdown();\r\n    }\r\n}\r\nclass LruGcMemoryOfflineComponentProvider extends MemoryOfflineComponentProvider {\r\n    constructor(cacheSizeBytes) {\r\n        super();\r\n        this.cacheSizeBytes = cacheSizeBytes;\r\n    }\r\n    createGarbageCollectionScheduler(cfg, localStore) {\r\n        hardAssert(this.persistence.referenceDelegate instanceof MemoryLruDelegate);\r\n        const garbageCollector = this.persistence.referenceDelegate.garbageCollector;\r\n        return new LruScheduler(garbageCollector, cfg.asyncQueue, localStore);\r\n    }\r\n    createPersistence(cfg) {\r\n        const lruParams = this.cacheSizeBytes !== undefined\r\n            ? LruParams.withCacheSize(this.cacheSizeBytes)\r\n            : LruParams.DEFAULT;\r\n        return new MemoryPersistence(p => MemoryLruDelegate.factory(p, lruParams), this.serializer);\r\n    }\r\n}\r\n/**\r\n * Provides all components needed for Firestore with IndexedDB persistence.\r\n */\r\nclass IndexedDbOfflineComponentProvider extends MemoryOfflineComponentProvider {\r\n    constructor(onlineComponentProvider, cacheSizeBytes, forceOwnership) {\r\n        super();\r\n        this.onlineComponentProvider = onlineComponentProvider;\r\n        this.cacheSizeBytes = cacheSizeBytes;\r\n        this.forceOwnership = forceOwnership;\r\n        this.synchronizeTabs = false;\r\n    }\r\n    async initialize(cfg) {\r\n        await super.initialize(cfg);\r\n        await this.onlineComponentProvider.initialize(this, cfg);\r\n        // Enqueue writes from a previous session\r\n        await syncEngineEnsureWriteCallbacks(this.onlineComponentProvider.syncEngine);\r\n        await fillWritePipeline(this.onlineComponentProvider.remoteStore);\r\n        // NOTE: This will immediately call the listener, so we make sure to\r\n        // set it after localStore / remoteStore are started.\r\n        await this.persistence.setPrimaryStateListener(() => {\r\n            if (this.gcScheduler && !this.gcScheduler.started) {\r\n                this.gcScheduler.start();\r\n            }\r\n            if (this.indexBackfillerScheduler &&\r\n                !this.indexBackfillerScheduler.started) {\r\n                this.indexBackfillerScheduler.start();\r\n            }\r\n            return Promise.resolve();\r\n        });\r\n    }\r\n    createLocalStore(cfg) {\r\n        return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);\r\n    }\r\n    createGarbageCollectionScheduler(cfg, localStore) {\r\n        const garbageCollector = this.persistence.referenceDelegate.garbageCollector;\r\n        return new LruScheduler(garbageCollector, cfg.asyncQueue, localStore);\r\n    }\r\n    createIndexBackfillerScheduler(cfg, localStore) {\r\n        const indexBackfiller = new IndexBackfiller(localStore, this.persistence);\r\n        return new IndexBackfillerScheduler(cfg.asyncQueue, indexBackfiller);\r\n    }\r\n    createPersistence(cfg) {\r\n        const persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);\r\n        const lruParams = this.cacheSizeBytes !== undefined\r\n            ? LruParams.withCacheSize(this.cacheSizeBytes)\r\n            : LruParams.DEFAULT;\r\n        return new IndexedDbPersistence(this.synchronizeTabs, persistenceKey, cfg.clientId, lruParams, cfg.asyncQueue, getWindow(), getDocument(), this.serializer, this.sharedClientState, !!this.forceOwnership);\r\n    }\r\n    createSharedClientState(cfg) {\r\n        return new MemorySharedClientState();\r\n    }\r\n}\r\n/**\r\n * Provides all components needed for Firestore with multi-tab IndexedDB\r\n * persistence.\r\n *\r\n * In the legacy client, this provider is used to provide both multi-tab and\r\n * non-multi-tab persistence since we cannot tell at build time whether\r\n * `synchronizeTabs` will be enabled.\r\n */\r\nclass MultiTabOfflineComponentProvider extends IndexedDbOfflineComponentProvider {\r\n    constructor(onlineComponentProvider, cacheSizeBytes) {\r\n        super(onlineComponentProvider, cacheSizeBytes, /* forceOwnership= */ false);\r\n        this.onlineComponentProvider = onlineComponentProvider;\r\n        this.cacheSizeBytes = cacheSizeBytes;\r\n        this.synchronizeTabs = true;\r\n    }\r\n    async initialize(cfg) {\r\n        await super.initialize(cfg);\r\n        const syncEngine = this.onlineComponentProvider.syncEngine;\r\n        if (this.sharedClientState instanceof WebStorageSharedClientState) {\r\n            this.sharedClientState.syncEngine = {\r\n                applyBatchState: syncEngineApplyBatchState.bind(null, syncEngine),\r\n                applyTargetState: syncEngineApplyTargetState.bind(null, syncEngine),\r\n                applyActiveTargetsChange: syncEngineApplyActiveTargetsChange.bind(null, syncEngine),\r\n                getActiveClients: syncEngineGetActiveClients.bind(null, syncEngine),\r\n                synchronizeWithChangedDocuments: syncEngineSynchronizeWithChangedDocuments.bind(null, syncEngine)\r\n            };\r\n            await this.sharedClientState.start();\r\n        }\r\n        // NOTE: This will immediately call the listener, so we make sure to\r\n        // set it after localStore / remoteStore are started.\r\n        await this.persistence.setPrimaryStateListener(async (isPrimary) => {\r\n            await syncEngineApplyPrimaryState(this.onlineComponentProvider.syncEngine, isPrimary);\r\n            if (this.gcScheduler) {\r\n                if (isPrimary && !this.gcScheduler.started) {\r\n                    this.gcScheduler.start();\r\n                }\r\n                else if (!isPrimary) {\r\n                    this.gcScheduler.stop();\r\n                }\r\n            }\r\n            if (this.indexBackfillerScheduler) {\r\n                if (isPrimary && !this.indexBackfillerScheduler.started) {\r\n                    this.indexBackfillerScheduler.start();\r\n                }\r\n                else if (!isPrimary) {\r\n                    this.indexBackfillerScheduler.stop();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    createSharedClientState(cfg) {\r\n        const window = getWindow();\r\n        if (!WebStorageSharedClientState.isAvailable(window)) {\r\n            throw new FirestoreError(Code.UNIMPLEMENTED, 'IndexedDB persistence is only available on platforms that support LocalStorage.');\r\n        }\r\n        const persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);\r\n        return new WebStorageSharedClientState(window, cfg.asyncQueue, persistenceKey, cfg.clientId, cfg.initialUser);\r\n    }\r\n}\r\n/**\r\n * Initializes and wires the components that are needed to interface with the\r\n * network.\r\n */\r\nclass OnlineComponentProvider {\r\n    async initialize(offlineComponentProvider, cfg) {\r\n        if (this.localStore) {\r\n            // OnlineComponentProvider may get initialized multiple times if\r\n            // multi-tab persistence is used.\r\n            return;\r\n        }\r\n        this.localStore = offlineComponentProvider.localStore;\r\n        this.sharedClientState = offlineComponentProvider.sharedClientState;\r\n        this.datastore = this.createDatastore(cfg);\r\n        this.remoteStore = this.createRemoteStore(cfg);\r\n        this.eventManager = this.createEventManager(cfg);\r\n        this.syncEngine = this.createSyncEngine(cfg, \r\n        /* startAsPrimary=*/ !offlineComponentProvider.synchronizeTabs);\r\n        this.sharedClientState.onlineStateHandler = onlineState => syncEngineApplyOnlineStateChange(this.syncEngine, onlineState, 1 /* OnlineStateSource.SharedClientState */);\r\n        this.remoteStore.remoteSyncer.handleCredentialChange =\r\n            syncEngineHandleCredentialChange.bind(null, this.syncEngine);\r\n        await remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient);\r\n    }\r\n    createEventManager(cfg) {\r\n        return newEventManager();\r\n    }\r\n    createDatastore(cfg) {\r\n        const serializer = newSerializer(cfg.databaseInfo.databaseId);\r\n        const connection = newConnection(cfg.databaseInfo);\r\n        return newDatastore(cfg.authCredentials, cfg.appCheckCredentials, connection, serializer);\r\n    }\r\n    createRemoteStore(cfg) {\r\n        return newRemoteStore(this.localStore, this.datastore, cfg.asyncQueue, onlineState => syncEngineApplyOnlineStateChange(this.syncEngine, onlineState, 0 /* OnlineStateSource.RemoteStore */), newConnectivityMonitor());\r\n    }\r\n    createSyncEngine(cfg, startAsPrimary) {\r\n        return newSyncEngine(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, cfg.initialUser, cfg.maxConcurrentLimboResolutions, startAsPrimary);\r\n    }\r\n    terminate() {\r\n        return remoteStoreShutdown(this.remoteStore);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * How many bytes to read each time when `ReadableStreamReader.read()` is\r\n * called. Only applicable for byte streams that we control (e.g. those backed\r\n * by an UInt8Array).\r\n */\r\nconst DEFAULT_BYTES_PER_READ = 10240;\r\n/**\r\n * Builds a `ByteStreamReader` from a UInt8Array.\r\n * @param source - The data source to use.\r\n * @param bytesPerRead - How many bytes each `read()` from the returned reader\r\n *        will read.\r\n */\r\nfunction toByteStreamReaderHelper(source, bytesPerRead = DEFAULT_BYTES_PER_READ) {\r\n    let readFrom = 0;\r\n    // The TypeScript definition for ReadableStreamReader changed. We use\r\n    // `any` here to allow this code to compile with different versions.\r\n    // See https://github.com/microsoft/TypeScript/issues/42970\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const reader = {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        async read() {\r\n            if (readFrom < source.byteLength) {\r\n                const result = {\r\n                    value: source.slice(readFrom, readFrom + bytesPerRead),\r\n                    done: false\r\n                };\r\n                readFrom += bytesPerRead;\r\n                return result;\r\n            }\r\n            return { done: true };\r\n        },\r\n        async cancel() { },\r\n        releaseLock() { },\r\n        closed: Promise.resolve()\r\n    };\r\n    return reader;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction validateNonEmptyArgument(functionName, argumentName, argument) {\r\n    if (!argument) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Function ${functionName}() cannot be called with an empty ${argumentName}.`);\r\n    }\r\n}\r\n/**\r\n * Validates that two boolean options are not set at the same time.\r\n * @internal\r\n */\r\nfunction validateIsNotUsedTogether(optionName1, argument1, optionName2, argument2) {\r\n    if (argument1 === true && argument2 === true) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `${optionName1} and ${optionName2} cannot be used together.`);\r\n    }\r\n}\r\n/**\r\n * Validates that `path` refers to a document (indicated by the fact it contains\r\n * an even numbers of segments).\r\n */\r\nfunction validateDocumentPath(path) {\r\n    if (!DocumentKey.isDocumentKey(path)) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${path} has ${path.length}.`);\r\n    }\r\n}\r\n/**\r\n * Validates that `path` refers to a collection (indicated by the fact it\r\n * contains an odd numbers of segments).\r\n */\r\nfunction validateCollectionPath(path) {\r\n    if (DocumentKey.isDocumentKey(path)) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${path} has ${path.length}.`);\r\n    }\r\n}\r\n/**\r\n * Returns true if it's a non-null object without a custom prototype\r\n * (i.e. excludes Array, Date, etc.).\r\n */\r\nfunction isPlainObject(input) {\r\n    return (typeof input === 'object' &&\r\n        input !== null &&\r\n        (Object.getPrototypeOf(input) === Object.prototype ||\r\n            Object.getPrototypeOf(input) === null));\r\n}\r\n/** Returns a string describing the type / value of the provided input. */\r\nfunction valueDescription(input) {\r\n    if (input === undefined) {\r\n        return 'undefined';\r\n    }\r\n    else if (input === null) {\r\n        return 'null';\r\n    }\r\n    else if (typeof input === 'string') {\r\n        if (input.length > 20) {\r\n            input = `${input.substring(0, 20)}...`;\r\n        }\r\n        return JSON.stringify(input);\r\n    }\r\n    else if (typeof input === 'number' || typeof input === 'boolean') {\r\n        return '' + input;\r\n    }\r\n    else if (typeof input === 'object') {\r\n        if (input instanceof Array) {\r\n            return 'an array';\r\n        }\r\n        else {\r\n            const customObjectName = tryGetCustomObjectType(input);\r\n            if (customObjectName) {\r\n                return `a custom ${customObjectName} object`;\r\n            }\r\n            else {\r\n                return 'an object';\r\n            }\r\n        }\r\n    }\r\n    else if (typeof input === 'function') {\r\n        return 'a function';\r\n    }\r\n    else {\r\n        return fail();\r\n    }\r\n}\r\n/** try to get the constructor name for an object. */\r\nfunction tryGetCustomObjectType(input) {\r\n    if (input.constructor) {\r\n        return input.constructor.name;\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\r\n * underlying instance. Throws if  `obj` is not an instance of `T`.\r\n *\r\n * This cast is used in the Lite and Full SDK to verify instance types for\r\n * arguments passed to the public API.\r\n * @internal\r\n */\r\nfunction cast(obj, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconstructor) {\r\n    if ('_delegate' in obj) {\r\n        // Unwrap Compat types\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        obj = obj._delegate;\r\n    }\r\n    if (!(obj instanceof constructor)) {\r\n        if (constructor.name === obj.constructor.name) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Type does not match the expected instance. Did you pass a ' +\r\n                `reference from a different Firestore SDK?`);\r\n        }\r\n        else {\r\n            const description = valueDescription(obj);\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, `Expected type '${constructor.name}', but it was: ${description}`);\r\n        }\r\n    }\r\n    return obj;\r\n}\r\nfunction validatePositiveNumber(functionName, n) {\r\n    if (n <= 0) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Function ${functionName}() requires a positive number, but it was: ${n}.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * On Node, only supported data source is a `Uint8Array` for now.\r\n */\r\nfunction toByteStreamReader(source, bytesPerRead) {\r\n    if (!(source instanceof Uint8Array)) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `NodePlatform.toByteStreamReader expects source to be Uint8Array, got ${valueDescription(source)}`);\r\n    }\r\n    return toByteStreamReaderHelper(source, bytesPerRead);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*\r\n * A wrapper implementation of Observer<T> that will dispatch events\r\n * asynchronously. To allow immediate silencing, a mute call is added which\r\n * causes events scheduled to no longer be raised.\r\n */\r\nclass AsyncObserver {\r\n    constructor(observer) {\r\n        this.observer = observer;\r\n        /**\r\n         * When set to true, will not raise future events. Necessary to deal with\r\n         * async detachment of listener.\r\n         */\r\n        this.muted = false;\r\n    }\r\n    next(value) {\r\n        if (this.observer.next) {\r\n            this.scheduleEvent(this.observer.next, value);\r\n        }\r\n    }\r\n    error(error) {\r\n        if (this.observer.error) {\r\n            this.scheduleEvent(this.observer.error, error);\r\n        }\r\n        else {\r\n            logError('Uncaught Error in snapshot listener:', error.toString());\r\n        }\r\n    }\r\n    mute() {\r\n        this.muted = true;\r\n    }\r\n    scheduleEvent(eventHandler, event) {\r\n        if (!this.muted) {\r\n            setTimeout(() => {\r\n                if (!this.muted) {\r\n                    eventHandler(event);\r\n                }\r\n            }, 0);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A complete element in the bundle stream, together with the byte length it\r\n * occupies in the stream.\r\n */\r\nclass SizedBundleElement {\r\n    constructor(payload, \r\n    // How many bytes this element takes to store in the bundle.\r\n    byteLength) {\r\n        this.payload = payload;\r\n        this.byteLength = byteLength;\r\n    }\r\n    isBundleMetadata() {\r\n        return 'metadata' in this.payload;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class representing a bundle.\r\n *\r\n * Takes a bundle stream or buffer, and presents abstractions to read bundled\r\n * elements out of the underlying content.\r\n */\r\nclass BundleReaderImpl {\r\n    constructor(\r\n    /** The reader to read from underlying binary bundle data source. */\r\n    reader, serializer) {\r\n        this.reader = reader;\r\n        this.serializer = serializer;\r\n        /** Cached bundle metadata. */\r\n        this.metadata = new Deferred();\r\n        /**\r\n         * Internal buffer to hold bundle content, accumulating incomplete element\r\n         * content.\r\n         */\r\n        this.buffer = new Uint8Array();\r\n        this.textDecoder = newTextDecoder();\r\n        // Read the metadata (which is the first element).\r\n        this.nextElementImpl().then(element => {\r\n            if (element && element.isBundleMetadata()) {\r\n                this.metadata.resolve(element.payload.metadata);\r\n            }\r\n            else {\r\n                this.metadata.reject(new Error(`The first element of the bundle is not a metadata, it is\n             ${JSON.stringify(element === null || element === void 0 ? void 0 : element.payload)}`));\r\n            }\r\n        }, error => this.metadata.reject(error));\r\n    }\r\n    close() {\r\n        return this.reader.cancel();\r\n    }\r\n    async getMetadata() {\r\n        return this.metadata.promise;\r\n    }\r\n    async nextElement() {\r\n        // Makes sure metadata is read before proceeding.\r\n        await this.getMetadata();\r\n        return this.nextElementImpl();\r\n    }\r\n    /**\r\n     * Reads from the head of internal buffer, and pulling more data from\r\n     * underlying stream if a complete element cannot be found, until an\r\n     * element(including the prefixed length and the JSON string) is found.\r\n     *\r\n     * Once a complete element is read, it is dropped from internal buffer.\r\n     *\r\n     * Returns either the bundled element, or null if we have reached the end of\r\n     * the stream.\r\n     */\r\n    async nextElementImpl() {\r\n        const lengthBuffer = await this.readLength();\r\n        if (lengthBuffer === null) {\r\n            return null;\r\n        }\r\n        const lengthString = this.textDecoder.decode(lengthBuffer);\r\n        const length = Number(lengthString);\r\n        if (isNaN(length)) {\r\n            this.raiseError(`length string (${lengthString}) is not valid number`);\r\n        }\r\n        const jsonString = await this.readJsonString(length);\r\n        return new SizedBundleElement(JSON.parse(jsonString), lengthBuffer.length + length);\r\n    }\r\n    /** First index of '{' from the underlying buffer. */\r\n    indexOfOpenBracket() {\r\n        return this.buffer.findIndex(v => v === '{'.charCodeAt(0));\r\n    }\r\n    /**\r\n     * Reads from the beginning of the internal buffer, until the first '{', and\r\n     * return the content.\r\n     *\r\n     * If reached end of the stream, returns a null.\r\n     */\r\n    async readLength() {\r\n        while (this.indexOfOpenBracket() < 0) {\r\n            const done = await this.pullMoreDataToBuffer();\r\n            if (done) {\r\n                break;\r\n            }\r\n        }\r\n        // Broke out of the loop because underlying stream is closed, and there\r\n        // happens to be no more data to process.\r\n        if (this.buffer.length === 0) {\r\n            return null;\r\n        }\r\n        const position = this.indexOfOpenBracket();\r\n        // Broke out of the loop because underlying stream is closed, but still\r\n        // cannot find an open bracket.\r\n        if (position < 0) {\r\n            this.raiseError('Reached the end of bundle when a length string is expected.');\r\n        }\r\n        const result = this.buffer.slice(0, position);\r\n        // Update the internal buffer to drop the read length.\r\n        this.buffer = this.buffer.slice(position);\r\n        return result;\r\n    }\r\n    /**\r\n     * Reads from a specified position from the internal buffer, for a specified\r\n     * number of bytes, pulling more data from the underlying stream if needed.\r\n     *\r\n     * Returns a string decoded from the read bytes.\r\n     */\r\n    async readJsonString(length) {\r\n        while (this.buffer.length < length) {\r\n            const done = await this.pullMoreDataToBuffer();\r\n            if (done) {\r\n                this.raiseError('Reached the end of bundle when more is expected.');\r\n            }\r\n        }\r\n        const result = this.textDecoder.decode(this.buffer.slice(0, length));\r\n        // Update the internal buffer to drop the read json string.\r\n        this.buffer = this.buffer.slice(length);\r\n        return result;\r\n    }\r\n    raiseError(message) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.reader.cancel();\r\n        throw new Error(`Invalid bundle format: ${message}`);\r\n    }\r\n    /**\r\n     * Pulls more data from underlying stream to internal buffer.\r\n     * Returns a boolean indicating whether the stream is finished.\r\n     */\r\n    async pullMoreDataToBuffer() {\r\n        const result = await this.reader.read();\r\n        if (!result.done) {\r\n            const newBuffer = new Uint8Array(this.buffer.length + result.value.length);\r\n            newBuffer.set(this.buffer);\r\n            newBuffer.set(result.value, this.buffer.length);\r\n            this.buffer = newBuffer;\r\n        }\r\n        return result.done;\r\n    }\r\n}\r\nfunction newBundleReader(reader, serializer) {\r\n    return new BundleReaderImpl(reader, serializer);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Internal transaction object responsible for accumulating the mutations to\r\n * perform and the base versions for any documents read.\r\n */\r\nclass Transaction$2 {\r\n    constructor(datastore) {\r\n        this.datastore = datastore;\r\n        // The version of each document that was read during this transaction.\r\n        this.readVersions = new Map();\r\n        this.mutations = [];\r\n        this.committed = false;\r\n        /**\r\n         * A deferred usage error that occurred previously in this transaction that\r\n         * will cause the transaction to fail once it actually commits.\r\n         */\r\n        this.lastWriteError = null;\r\n        /**\r\n         * Set of documents that have been written in the transaction.\r\n         *\r\n         * When there's more than one write to the same key in a transaction, any\r\n         * writes after the first are handled differently.\r\n         */\r\n        this.writtenDocs = new Set();\r\n    }\r\n    async lookup(keys) {\r\n        this.ensureCommitNotCalled();\r\n        if (this.mutations.length > 0) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Firestore transactions require all reads to be executed before all writes.');\r\n        }\r\n        const docs = await invokeBatchGetDocumentsRpc(this.datastore, keys);\r\n        docs.forEach(doc => this.recordVersion(doc));\r\n        return docs;\r\n    }\r\n    set(key, data) {\r\n        this.write(data.toMutation(key, this.precondition(key)));\r\n        this.writtenDocs.add(key.toString());\r\n    }\r\n    update(key, data) {\r\n        try {\r\n            this.write(data.toMutation(key, this.preconditionForUpdate(key)));\r\n        }\r\n        catch (e) {\r\n            this.lastWriteError = e;\r\n        }\r\n        this.writtenDocs.add(key.toString());\r\n    }\r\n    delete(key) {\r\n        this.write(new DeleteMutation(key, this.precondition(key)));\r\n        this.writtenDocs.add(key.toString());\r\n    }\r\n    async commit() {\r\n        this.ensureCommitNotCalled();\r\n        if (this.lastWriteError) {\r\n            throw this.lastWriteError;\r\n        }\r\n        const unwritten = this.readVersions;\r\n        // For each mutation, note that the doc was written.\r\n        this.mutations.forEach(mutation => {\r\n            unwritten.delete(mutation.key.toString());\r\n        });\r\n        // For each document that was read but not written to, we want to perform\r\n        // a `verify` operation.\r\n        unwritten.forEach((_, path) => {\r\n            const key = DocumentKey.fromPath(path);\r\n            this.mutations.push(new VerifyMutation(key, this.precondition(key)));\r\n        });\r\n        await invokeCommitRpc(this.datastore, this.mutations);\r\n        this.committed = true;\r\n    }\r\n    recordVersion(doc) {\r\n        let docVersion;\r\n        if (doc.isFoundDocument()) {\r\n            docVersion = doc.version;\r\n        }\r\n        else if (doc.isNoDocument()) {\r\n            // Represent a deleted doc using SnapshotVersion.min().\r\n            docVersion = SnapshotVersion.min();\r\n        }\r\n        else {\r\n            throw fail();\r\n        }\r\n        const existingVersion = this.readVersions.get(doc.key.toString());\r\n        if (existingVersion) {\r\n            if (!docVersion.isEqual(existingVersion)) {\r\n                // This transaction will fail no matter what.\r\n                throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\r\n            }\r\n        }\r\n        else {\r\n            this.readVersions.set(doc.key.toString(), docVersion);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the version of this document when it was read in this transaction,\r\n     * as a precondition, or no precondition if it was not read.\r\n     */\r\n    precondition(key) {\r\n        const version = this.readVersions.get(key.toString());\r\n        if (!this.writtenDocs.has(key.toString()) && version) {\r\n            if (version.isEqual(SnapshotVersion.min())) {\r\n                return Precondition.exists(false);\r\n            }\r\n            else {\r\n                return Precondition.updateTime(version);\r\n            }\r\n        }\r\n        else {\r\n            return Precondition.none();\r\n        }\r\n    }\r\n    /**\r\n     * Returns the precondition for a document if the operation is an update.\r\n     */\r\n    preconditionForUpdate(key) {\r\n        const version = this.readVersions.get(key.toString());\r\n        // The first time a document is written, we want to take into account the\r\n        // read time and existence\r\n        if (!this.writtenDocs.has(key.toString()) && version) {\r\n            if (version.isEqual(SnapshotVersion.min())) {\r\n                // The document doesn't exist, so fail the transaction.\r\n                // This has to be validated locally because you can't send a\r\n                // precondition that a document does not exist without changing the\r\n                // semantics of the backend write to be an insert. This is the reverse\r\n                // of what we want, since we want to assert that the document doesn't\r\n                // exist but then send the update and have it fail. Since we can't\r\n                // express that to the backend, we have to validate locally.\r\n                // Note: this can change once we can send separate verify writes in the\r\n                // transaction.\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't update a document that doesn't exist.\");\r\n            }\r\n            // Document exists, base precondition on document update time.\r\n            return Precondition.updateTime(version);\r\n        }\r\n        else {\r\n            // Document was not read, so we just use the preconditions for a blind\r\n            // update.\r\n            return Precondition.exists(true);\r\n        }\r\n    }\r\n    write(mutation) {\r\n        this.ensureCommitNotCalled();\r\n        this.mutations.push(mutation);\r\n    }\r\n    ensureCommitNotCalled() {\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * TransactionRunner encapsulates the logic needed to run and retry transactions\r\n * with backoff.\r\n */\r\nclass TransactionRunner {\r\n    constructor(asyncQueue, datastore, options, updateFunction, deferred) {\r\n        this.asyncQueue = asyncQueue;\r\n        this.datastore = datastore;\r\n        this.options = options;\r\n        this.updateFunction = updateFunction;\r\n        this.deferred = deferred;\r\n        this.attemptsRemaining = options.maxAttempts;\r\n        this.backoff = new ExponentialBackoff(this.asyncQueue, \"transaction_retry\" /* TimerId.TransactionRetry */);\r\n    }\r\n    /** Runs the transaction and sets the result on deferred. */\r\n    run() {\r\n        this.attemptsRemaining -= 1;\r\n        this.runWithBackOff();\r\n    }\r\n    runWithBackOff() {\r\n        this.backoff.backoffAndRun(async () => {\r\n            const transaction = new Transaction$2(this.datastore);\r\n            const userPromise = this.tryRunUpdateFunction(transaction);\r\n            if (userPromise) {\r\n                userPromise\r\n                    .then(result => {\r\n                    this.asyncQueue.enqueueAndForget(() => {\r\n                        return transaction\r\n                            .commit()\r\n                            .then(() => {\r\n                            this.deferred.resolve(result);\r\n                        })\r\n                            .catch(commitError => {\r\n                            this.handleTransactionError(commitError);\r\n                        });\r\n                    });\r\n                })\r\n                    .catch(userPromiseError => {\r\n                    this.handleTransactionError(userPromiseError);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    tryRunUpdateFunction(transaction) {\r\n        try {\r\n            const userPromise = this.updateFunction(transaction);\r\n            if (isNullOrUndefined(userPromise) ||\r\n                !userPromise.catch ||\r\n                !userPromise.then) {\r\n                this.deferred.reject(Error('Transaction callback must return a Promise'));\r\n                return null;\r\n            }\r\n            return userPromise;\r\n        }\r\n        catch (error) {\r\n            // Do not retry errors thrown by user provided updateFunction.\r\n            this.deferred.reject(error);\r\n            return null;\r\n        }\r\n    }\r\n    handleTransactionError(error) {\r\n        if (this.attemptsRemaining > 0 && this.isRetryableTransactionError(error)) {\r\n            this.attemptsRemaining -= 1;\r\n            this.asyncQueue.enqueueAndForget(() => {\r\n                this.runWithBackOff();\r\n                return Promise.resolve();\r\n            });\r\n        }\r\n        else {\r\n            this.deferred.reject(error);\r\n        }\r\n    }\r\n    isRetryableTransactionError(error) {\r\n        if (error.name === 'FirebaseError') {\r\n            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\r\n            // non-matching document versions with ABORTED. These errors should be retried.\r\n            const code = error.code;\r\n            return (code === 'aborted' ||\r\n                code === 'failed-precondition' ||\r\n                code === 'already-exists' ||\r\n                !isPermanentError(code));\r\n        }\r\n        return false;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$2 = 'FirestoreClient';\r\nconst MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;\r\n/** DOMException error code constants. */\r\nconst DOM_EXCEPTION_INVALID_STATE = 11;\r\nconst DOM_EXCEPTION_ABORTED = 20;\r\nconst DOM_EXCEPTION_QUOTA_EXCEEDED = 22;\r\n/**\r\n * FirestoreClient is a top-level class that constructs and owns all of the //\r\n * pieces of the client SDK architecture. It is responsible for creating the //\r\n * async queue that is shared by all of the other components in the system. //\r\n */\r\nclass FirestoreClient {\r\n    constructor(authCredentials, appCheckCredentials, \r\n    /**\r\n     * Asynchronous queue responsible for all of our internal processing. When\r\n     * we get incoming work from the user (via public API) or the network\r\n     * (incoming GRPC messages), we should always schedule onto this queue.\r\n     * This ensures all of our work is properly serialized (e.g. we don't\r\n     * start processing a new operation while the previous one is waiting for\r\n     * an async I/O to complete).\r\n     */\r\n    asyncQueue, databaseInfo) {\r\n        this.authCredentials = authCredentials;\r\n        this.appCheckCredentials = appCheckCredentials;\r\n        this.asyncQueue = asyncQueue;\r\n        this.databaseInfo = databaseInfo;\r\n        this.user = User.UNAUTHENTICATED;\r\n        this.clientId = AutoId.newId();\r\n        this.authCredentialListener = () => Promise.resolve();\r\n        this.appCheckCredentialListener = () => Promise.resolve();\r\n        this.authCredentials.start(asyncQueue, async (user) => {\r\n            logDebug(LOG_TAG$2, 'Received user=', user.uid);\r\n            await this.authCredentialListener(user);\r\n            this.user = user;\r\n        });\r\n        this.appCheckCredentials.start(asyncQueue, newAppCheckToken => {\r\n            logDebug(LOG_TAG$2, 'Received new app check token=', newAppCheckToken);\r\n            return this.appCheckCredentialListener(newAppCheckToken, this.user);\r\n        });\r\n    }\r\n    async getConfiguration() {\r\n        return {\r\n            asyncQueue: this.asyncQueue,\r\n            databaseInfo: this.databaseInfo,\r\n            clientId: this.clientId,\r\n            authCredentials: this.authCredentials,\r\n            appCheckCredentials: this.appCheckCredentials,\r\n            initialUser: this.user,\r\n            maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS\r\n        };\r\n    }\r\n    setCredentialChangeListener(listener) {\r\n        this.authCredentialListener = listener;\r\n    }\r\n    setAppCheckTokenChangeListener(listener) {\r\n        this.appCheckCredentialListener = listener;\r\n    }\r\n    /**\r\n     * Checks that the client has not been terminated. Ensures that other methods on //\r\n     * this class cannot be called after the client is terminated. //\r\n     */\r\n    verifyNotTerminated() {\r\n        if (this.asyncQueue.isShuttingDown) {\r\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'The client has already been terminated.');\r\n        }\r\n    }\r\n    terminate() {\r\n        this.asyncQueue.enterRestrictedMode();\r\n        const deferred = new Deferred();\r\n        this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async () => {\r\n            try {\r\n                if (this._onlineComponents) {\r\n                    await this._onlineComponents.terminate();\r\n                }\r\n                if (this._offlineComponents) {\r\n                    await this._offlineComponents.terminate();\r\n                }\r\n                // The credentials provider must be terminated after shutting down the\r\n                // RemoteStore as it will prevent the RemoteStore from retrieving auth\r\n                // tokens.\r\n                this.authCredentials.shutdown();\r\n                this.appCheckCredentials.shutdown();\r\n                deferred.resolve();\r\n            }\r\n            catch (e) {\r\n                const firestoreError = wrapInUserErrorIfRecoverable(e, `Failed to shutdown persistence`);\r\n                deferred.reject(firestoreError);\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n}\r\nasync function setOfflineComponentProvider(client, offlineComponentProvider) {\r\n    client.asyncQueue.verifyOperationInProgress();\r\n    logDebug(LOG_TAG$2, 'Initializing OfflineComponentProvider');\r\n    const configuration = await client.getConfiguration();\r\n    await offlineComponentProvider.initialize(configuration);\r\n    let currentUser = configuration.initialUser;\r\n    client.setCredentialChangeListener(async (user) => {\r\n        if (!currentUser.isEqual(user)) {\r\n            await localStoreHandleUserChange(offlineComponentProvider.localStore, user);\r\n            currentUser = user;\r\n        }\r\n    });\r\n    // When a user calls clearPersistence() in one client, all other clients\r\n    // need to be terminated to allow the delete to succeed.\r\n    offlineComponentProvider.persistence.setDatabaseDeletedListener(() => client.terminate());\r\n    client._offlineComponents = offlineComponentProvider;\r\n}\r\nasync function setOnlineComponentProvider(client, onlineComponentProvider) {\r\n    client.asyncQueue.verifyOperationInProgress();\r\n    const offlineComponentProvider = await ensureOfflineComponents(client);\r\n    logDebug(LOG_TAG$2, 'Initializing OnlineComponentProvider');\r\n    const configuration = await client.getConfiguration();\r\n    await onlineComponentProvider.initialize(offlineComponentProvider, configuration);\r\n    // The CredentialChangeListener of the online component provider takes\r\n    // precedence over the offline component provider.\r\n    client.setCredentialChangeListener(user => remoteStoreHandleCredentialChange(onlineComponentProvider.remoteStore, user));\r\n    client.setAppCheckTokenChangeListener((_, user) => remoteStoreHandleCredentialChange(onlineComponentProvider.remoteStore, user));\r\n    client._onlineComponents = onlineComponentProvider;\r\n}\r\n/**\r\n * Decides whether the provided error allows us to gracefully disable\r\n * persistence (as opposed to crashing the client).\r\n */\r\nfunction canFallbackFromIndexedDbError(error) {\r\n    if (error.name === 'FirebaseError') {\r\n        return (error.code === Code.FAILED_PRECONDITION ||\r\n            error.code === Code.UNIMPLEMENTED);\r\n    }\r\n    else if (typeof DOMException !== 'undefined' &&\r\n        error instanceof DOMException) {\r\n        // There are a few known circumstances where we can open IndexedDb but\r\n        // trying to read/write will fail (e.g. quota exceeded). For\r\n        // well-understood cases, we attempt to detect these and then gracefully\r\n        // fall back to memory persistence.\r\n        // NOTE: Rather than continue to add to this list, we could decide to\r\n        // always fall back, with the risk that we might accidentally hide errors\r\n        // representing actual SDK bugs.\r\n        return (\r\n        // When the browser is out of quota we could get either quota exceeded\r\n        // or an aborted error depending on whether the error happened during\r\n        // schema migration.\r\n        error.code === DOM_EXCEPTION_QUOTA_EXCEEDED ||\r\n            error.code === DOM_EXCEPTION_ABORTED ||\r\n            // Firefox Private Browsing mode disables IndexedDb and returns\r\n            // INVALID_STATE for any usage.\r\n            error.code === DOM_EXCEPTION_INVALID_STATE);\r\n    }\r\n    return true;\r\n}\r\nasync function ensureOfflineComponents(client) {\r\n    if (!client._offlineComponents) {\r\n        if (client._uninitializedComponentsProvider) {\r\n            logDebug(LOG_TAG$2, 'Using user provided OfflineComponentProvider');\r\n            try {\r\n                await setOfflineComponentProvider(client, client._uninitializedComponentsProvider._offline);\r\n            }\r\n            catch (e) {\r\n                const error = e;\r\n                if (!canFallbackFromIndexedDbError(error)) {\r\n                    throw error;\r\n                }\r\n                logWarn('Error using user provided cache. Falling back to ' +\r\n                    'memory cache: ' +\r\n                    error);\r\n                await setOfflineComponentProvider(client, new MemoryOfflineComponentProvider());\r\n            }\r\n        }\r\n        else {\r\n            logDebug(LOG_TAG$2, 'Using default OfflineComponentProvider');\r\n            await setOfflineComponentProvider(client, new MemoryOfflineComponentProvider());\r\n        }\r\n    }\r\n    return client._offlineComponents;\r\n}\r\nasync function ensureOnlineComponents(client) {\r\n    if (!client._onlineComponents) {\r\n        if (client._uninitializedComponentsProvider) {\r\n            logDebug(LOG_TAG$2, 'Using user provided OnlineComponentProvider');\r\n            await setOnlineComponentProvider(client, client._uninitializedComponentsProvider._online);\r\n        }\r\n        else {\r\n            logDebug(LOG_TAG$2, 'Using default OnlineComponentProvider');\r\n            await setOnlineComponentProvider(client, new OnlineComponentProvider());\r\n        }\r\n    }\r\n    return client._onlineComponents;\r\n}\r\nfunction getPersistence(client) {\r\n    return ensureOfflineComponents(client).then(c => c.persistence);\r\n}\r\nfunction getLocalStore(client) {\r\n    return ensureOfflineComponents(client).then(c => c.localStore);\r\n}\r\nfunction getRemoteStore(client) {\r\n    return ensureOnlineComponents(client).then(c => c.remoteStore);\r\n}\r\nfunction getSyncEngine(client) {\r\n    return ensureOnlineComponents(client).then(c => c.syncEngine);\r\n}\r\nfunction getDatastore(client) {\r\n    return ensureOnlineComponents(client).then(c => c.datastore);\r\n}\r\nasync function getEventManager(client) {\r\n    const onlineComponentProvider = await ensureOnlineComponents(client);\r\n    const eventManager = onlineComponentProvider.eventManager;\r\n    eventManager.onListen = syncEngineListen.bind(null, onlineComponentProvider.syncEngine);\r\n    eventManager.onUnlisten = syncEngineUnlisten.bind(null, onlineComponentProvider.syncEngine);\r\n    return eventManager;\r\n}\r\n/** Enables the network connection and re-enqueues all pending operations. */\r\nfunction firestoreClientEnableNetwork(client) {\r\n    return client.asyncQueue.enqueue(async () => {\r\n        const persistence = await getPersistence(client);\r\n        const remoteStore = await getRemoteStore(client);\r\n        persistence.setNetworkEnabled(true);\r\n        return remoteStoreEnableNetwork(remoteStore);\r\n    });\r\n}\r\n/** Disables the network connection. Pending operations will not complete. */\r\nfunction firestoreClientDisableNetwork(client) {\r\n    return client.asyncQueue.enqueue(async () => {\r\n        const persistence = await getPersistence(client);\r\n        const remoteStore = await getRemoteStore(client);\r\n        persistence.setNetworkEnabled(false);\r\n        return remoteStoreDisableNetwork(remoteStore);\r\n    });\r\n}\r\n/**\r\n * Returns a Promise that resolves when all writes that were pending at the time\r\n * this method was called received server acknowledgement. An acknowledgement\r\n * can be either acceptance or rejection.\r\n */\r\nfunction firestoreClientWaitForPendingWrites(client) {\r\n    const deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(async () => {\r\n        const syncEngine = await getSyncEngine(client);\r\n        return syncEngineRegisterPendingWritesCallback(syncEngine, deferred);\r\n    });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientListen(client, query, options, observer) {\r\n    const wrappedObserver = new AsyncObserver(observer);\r\n    const listener = new QueryListener(query, wrappedObserver, options);\r\n    client.asyncQueue.enqueueAndForget(async () => {\r\n        const eventManager = await getEventManager(client);\r\n        return eventManagerListen(eventManager, listener);\r\n    });\r\n    return () => {\r\n        wrappedObserver.mute();\r\n        client.asyncQueue.enqueueAndForget(async () => {\r\n            const eventManager = await getEventManager(client);\r\n            return eventManagerUnlisten(eventManager, listener);\r\n        });\r\n    };\r\n}\r\nfunction firestoreClientGetDocumentFromLocalCache(client, docKey) {\r\n    const deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(async () => {\r\n        const localStore = await getLocalStore(client);\r\n        return readDocumentFromCache(localStore, docKey, deferred);\r\n    });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientGetDocumentViaSnapshotListener(client, key, options = {}) {\r\n    const deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(async () => {\r\n        const eventManager = await getEventManager(client);\r\n        return readDocumentViaSnapshotListener(eventManager, client.asyncQueue, key, options, deferred);\r\n    });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientGetDocumentsFromLocalCache(client, query) {\r\n    const deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(async () => {\r\n        const localStore = await getLocalStore(client);\r\n        return executeQueryFromCache(localStore, query, deferred);\r\n    });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientGetDocumentsViaSnapshotListener(client, query, options = {}) {\r\n    const deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(async () => {\r\n        const eventManager = await getEventManager(client);\r\n        return executeQueryViaSnapshotListener(eventManager, client.asyncQueue, query, options, deferred);\r\n    });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientRunAggregateQuery(client, query, aggregates) {\r\n    const deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(async () => {\r\n        // TODO (sum/avg) should we update this to use the event manager?\r\n        // Implement and call executeAggregateQueryViaSnapshotListener, similar\r\n        // to the implementation in firestoreClientGetDocumentsViaSnapshotListener\r\n        // above\r\n        try {\r\n            // TODO(b/277628384): check `canUseNetwork()` and handle multi-tab.\r\n            const datastore = await getDatastore(client);\r\n            deferred.resolve(invokeRunAggregationQueryRpc(datastore, query, aggregates));\r\n        }\r\n        catch (e) {\r\n            deferred.reject(e);\r\n        }\r\n    });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientWrite(client, mutations) {\r\n    const deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(async () => {\r\n        const syncEngine = await getSyncEngine(client);\r\n        return syncEngineWrite(syncEngine, mutations, deferred);\r\n    });\r\n    return deferred.promise;\r\n}\r\nfunction firestoreClientAddSnapshotsInSyncListener(client, observer) {\r\n    const wrappedObserver = new AsyncObserver(observer);\r\n    client.asyncQueue.enqueueAndForget(async () => {\r\n        const eventManager = await getEventManager(client);\r\n        return addSnapshotsInSyncListener(eventManager, wrappedObserver);\r\n    });\r\n    return () => {\r\n        wrappedObserver.mute();\r\n        client.asyncQueue.enqueueAndForget(async () => {\r\n            const eventManager = await getEventManager(client);\r\n            return removeSnapshotsInSyncListener(eventManager, wrappedObserver);\r\n        });\r\n    };\r\n}\r\n/**\r\n * Takes an updateFunction in which a set of reads and writes can be performed\r\n * atomically. In the updateFunction, the client can read and write values\r\n * using the supplied transaction object. After the updateFunction, all\r\n * changes will be committed. If a retryable error occurs (ex: some other\r\n * client has changed any of the data referenced), then the updateFunction\r\n * will be called again after a backoff. If the updateFunction still fails\r\n * after all retries, then the transaction will be rejected.\r\n *\r\n * The transaction object passed to the updateFunction contains methods for\r\n * accessing documents and collections. Unlike other datastore access, data\r\n * accessed with the transaction will not reflect local changes that have not\r\n * been committed. For this reason, it is required that all reads are\r\n * performed before any writes. Transactions must be performed while online.\r\n */\r\nfunction firestoreClientTransaction(client, updateFunction, options) {\r\n    const deferred = new Deferred();\r\n    client.asyncQueue.enqueueAndForget(async () => {\r\n        const datastore = await getDatastore(client);\r\n        new TransactionRunner(client.asyncQueue, datastore, options, updateFunction, deferred).run();\r\n    });\r\n    return deferred.promise;\r\n}\r\nasync function readDocumentFromCache(localStore, docKey, result) {\r\n    try {\r\n        const document = await localStoreReadDocument(localStore, docKey);\r\n        if (document.isFoundDocument()) {\r\n            result.resolve(document);\r\n        }\r\n        else if (document.isNoDocument()) {\r\n            result.resolve(null);\r\n        }\r\n        else {\r\n            result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from cache. (However, this document may ' +\r\n                \"exist on the server. Run again without setting 'source' in \" +\r\n                'the GetOptions to attempt to retrieve the document from the ' +\r\n                'server.)'));\r\n        }\r\n    }\r\n    catch (e) {\r\n        const firestoreError = wrapInUserErrorIfRecoverable(e, `Failed to get document '${docKey} from cache`);\r\n        result.reject(firestoreError);\r\n    }\r\n}\r\n/**\r\n * Retrieves a latency-compensated document from the backend via a\r\n * SnapshotListener.\r\n */\r\nfunction readDocumentViaSnapshotListener(eventManager, asyncQueue, key, options, result) {\r\n    const wrappedObserver = new AsyncObserver({\r\n        next: (snap) => {\r\n            // Remove query first before passing event to user to avoid\r\n            // user actions affecting the now stale query.\r\n            asyncQueue.enqueueAndForget(() => eventManagerUnlisten(eventManager, listener));\r\n            const exists = snap.docs.has(key);\r\n            if (!exists && snap.fromCache) {\r\n                // TODO(dimond): If we're online and the document doesn't\r\n                // exist then we resolve with a doc.exists set to false. If\r\n                // we're offline however, we reject the Promise in this\r\n                // case. Two options: 1) Cache the negative response from\r\n                // the server so we can deliver that even when you're\r\n                // offline 2) Actually reject the Promise in the online case\r\n                // if the document doesn't exist.\r\n                result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document because the client is offline.'));\r\n            }\r\n            else if (exists &&\r\n                snap.fromCache &&\r\n                options &&\r\n                options.source === 'server') {\r\n                result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from server. (However, this ' +\r\n                    'document does exist in the local cache. Run again ' +\r\n                    'without setting source to \"server\" to ' +\r\n                    'retrieve the cached document.)'));\r\n            }\r\n            else {\r\n                result.resolve(snap);\r\n            }\r\n        },\r\n        error: e => result.reject(e)\r\n    });\r\n    const listener = new QueryListener(newQueryForPath(key.path), wrappedObserver, {\r\n        includeMetadataChanges: true,\r\n        waitForSyncWhenOnline: true\r\n    });\r\n    return eventManagerListen(eventManager, listener);\r\n}\r\nasync function executeQueryFromCache(localStore, query, result) {\r\n    try {\r\n        const queryResult = await localStoreExecuteQuery(localStore, query, \r\n        /* usePreviousResults= */ true);\r\n        const view = new View(query, queryResult.remoteKeys);\r\n        const viewDocChanges = view.computeDocChanges(queryResult.documents);\r\n        const viewChange = view.applyChanges(viewDocChanges, \r\n        /* updateLimboDocuments= */ false);\r\n        result.resolve(viewChange.snapshot);\r\n    }\r\n    catch (e) {\r\n        const firestoreError = wrapInUserErrorIfRecoverable(e, `Failed to execute query '${query} against cache`);\r\n        result.reject(firestoreError);\r\n    }\r\n}\r\n/**\r\n * Retrieves a latency-compensated query snapshot from the backend via a\r\n * SnapshotListener.\r\n */\r\nfunction executeQueryViaSnapshotListener(eventManager, asyncQueue, query, options, result) {\r\n    const wrappedObserver = new AsyncObserver({\r\n        next: snapshot => {\r\n            // Remove query first before passing event to user to avoid\r\n            // user actions affecting the now stale query.\r\n            asyncQueue.enqueueAndForget(() => eventManagerUnlisten(eventManager, listener));\r\n            if (snapshot.fromCache && options.source === 'server') {\r\n                result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get documents from server. (However, these ' +\r\n                    'documents may exist in the local cache. Run again ' +\r\n                    'without setting source to \"server\" to ' +\r\n                    'retrieve the cached documents.)'));\r\n            }\r\n            else {\r\n                result.resolve(snapshot);\r\n            }\r\n        },\r\n        error: e => result.reject(e)\r\n    });\r\n    const listener = new QueryListener(query, wrappedObserver, {\r\n        includeMetadataChanges: true,\r\n        waitForSyncWhenOnline: true\r\n    });\r\n    return eventManagerListen(eventManager, listener);\r\n}\r\nfunction firestoreClientLoadBundle(client, databaseId, data, resultTask) {\r\n    const reader = createBundleReader(data, newSerializer(databaseId));\r\n    client.asyncQueue.enqueueAndForget(async () => {\r\n        syncEngineLoadBundle(await getSyncEngine(client), reader, resultTask);\r\n    });\r\n}\r\nfunction firestoreClientGetNamedQuery(client, queryName) {\r\n    return client.asyncQueue.enqueue(async () => localStoreGetNamedQuery(await getLocalStore(client), queryName));\r\n}\r\nfunction createBundleReader(data, serializer) {\r\n    let content;\r\n    if (typeof data === 'string') {\r\n        content = newTextEncoder().encode(data);\r\n    }\r\n    else {\r\n        content = data;\r\n    }\r\n    return newBundleReader(toByteStreamReader(content), serializer);\r\n}\r\nfunction firestoreClientSetIndexConfiguration(client, indexes) {\r\n    return client.asyncQueue.enqueue(async () => {\r\n        return localStoreConfigureFieldIndexes(await getLocalStore(client), indexes);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Compares two `ExperimentalLongPollingOptions` objects for equality.\r\n */\r\nfunction longPollingOptionsEqual(options1, options2) {\r\n    return options1.timeoutSeconds === options2.timeoutSeconds;\r\n}\r\n/**\r\n * Creates and returns a new `ExperimentalLongPollingOptions` with the same\r\n * option values as the given instance.\r\n */\r\nfunction cloneLongPollingOptions(options) {\r\n    const clone = {};\r\n    if (options.timeoutSeconds !== undefined) {\r\n        clone.timeoutSeconds = options.timeoutSeconds;\r\n    }\r\n    return clone;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG$1 = 'ComponentProvider';\r\n/**\r\n * An instance map that ensures only one Datastore exists per Firestore\r\n * instance.\r\n */\r\nconst datastoreInstances = new Map();\r\n/**\r\n * Removes all components associated with the provided instance. Must be called\r\n * when the `Firestore` instance is terminated.\r\n */\r\nfunction removeComponents(firestore) {\r\n    const datastore = datastoreInstances.get(firestore);\r\n    if (datastore) {\r\n        logDebug(LOG_TAG$1, 'Removing Datastore');\r\n        datastoreInstances.delete(firestore);\r\n        datastore.terminate();\r\n    }\r\n}\r\nfunction makeDatabaseInfo(databaseId, appId, persistenceKey, settings) {\r\n    return new DatabaseInfo(databaseId, appId, persistenceKey, settings.host, settings.ssl, settings.experimentalForceLongPolling, settings.experimentalAutoDetectLongPolling, cloneLongPollingOptions(settings.experimentalLongPollingOptions), settings.useFetchStreams);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// settings() defaults:\r\nconst DEFAULT_HOST = 'firestore.googleapis.com';\r\nconst DEFAULT_SSL = true;\r\n// The minimum long-polling timeout is hardcoded on the server. The value here\r\n// should be kept in sync with the value used by the server, as the server will\r\n// silently ignore a value below the minimum and fall back to the default.\r\n// Googlers see b/266868871 for relevant discussion.\r\nconst MIN_LONG_POLLING_TIMEOUT_SECONDS = 5;\r\n// No maximum long-polling timeout is configured in the server, and defaults to\r\n// 30 seconds, which is what Watch appears to use.\r\n// Googlers see b/266868871 for relevant discussion.\r\nconst MAX_LONG_POLLING_TIMEOUT_SECONDS = 30;\r\n// Whether long-polling auto-detected is enabled by default.\r\nconst DEFAULT_AUTO_DETECT_LONG_POLLING = true;\r\n/**\r\n * A concrete type describing all the values that can be applied via a\r\n * user-supplied `FirestoreSettings` object. This is a separate type so that\r\n * defaults can be supplied and the value can be checked for equality.\r\n */\r\nclass FirestoreSettingsImpl {\r\n    constructor(settings) {\r\n        var _a, _b;\r\n        if (settings.host === undefined) {\r\n            if (settings.ssl !== undefined) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\r\n            }\r\n            this.host = DEFAULT_HOST;\r\n            this.ssl = DEFAULT_SSL;\r\n        }\r\n        else {\r\n            this.host = settings.host;\r\n            this.ssl = (_a = settings.ssl) !== null && _a !== void 0 ? _a : DEFAULT_SSL;\r\n        }\r\n        this.credentials = settings.credentials;\r\n        this.ignoreUndefinedProperties = !!settings.ignoreUndefinedProperties;\r\n        this.cache = settings.localCache;\r\n        if (settings.cacheSizeBytes === undefined) {\r\n            this.cacheSizeBytes = LRU_DEFAULT_CACHE_SIZE_BYTES;\r\n        }\r\n        else {\r\n            if (settings.cacheSizeBytes !== LRU_COLLECTION_DISABLED &&\r\n                settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, `cacheSizeBytes must be at least ${LRU_MINIMUM_CACHE_SIZE_BYTES}`);\r\n            }\r\n            else {\r\n                this.cacheSizeBytes = settings.cacheSizeBytes;\r\n            }\r\n        }\r\n        validateIsNotUsedTogether('experimentalForceLongPolling', settings.experimentalForceLongPolling, 'experimentalAutoDetectLongPolling', settings.experimentalAutoDetectLongPolling);\r\n        this.experimentalForceLongPolling = !!settings.experimentalForceLongPolling;\r\n        if (this.experimentalForceLongPolling) {\r\n            this.experimentalAutoDetectLongPolling = false;\r\n        }\r\n        else if (settings.experimentalAutoDetectLongPolling === undefined) {\r\n            this.experimentalAutoDetectLongPolling = DEFAULT_AUTO_DETECT_LONG_POLLING;\r\n        }\r\n        else {\r\n            // For backwards compatibility, coerce the value to boolean even though\r\n            // the TypeScript compiler has narrowed the type to boolean already.\r\n            // noinspection PointlessBooleanExpressionJS\r\n            this.experimentalAutoDetectLongPolling =\r\n                !!settings.experimentalAutoDetectLongPolling;\r\n        }\r\n        this.experimentalLongPollingOptions = cloneLongPollingOptions((_b = settings.experimentalLongPollingOptions) !== null && _b !== void 0 ? _b : {});\r\n        validateLongPollingOptions(this.experimentalLongPollingOptions);\r\n        this.useFetchStreams = !!settings.useFetchStreams;\r\n    }\r\n    isEqual(other) {\r\n        return (this.host === other.host &&\r\n            this.ssl === other.ssl &&\r\n            this.credentials === other.credentials &&\r\n            this.cacheSizeBytes === other.cacheSizeBytes &&\r\n            this.experimentalForceLongPolling ===\r\n                other.experimentalForceLongPolling &&\r\n            this.experimentalAutoDetectLongPolling ===\r\n                other.experimentalAutoDetectLongPolling &&\r\n            longPollingOptionsEqual(this.experimentalLongPollingOptions, other.experimentalLongPollingOptions) &&\r\n            this.ignoreUndefinedProperties === other.ignoreUndefinedProperties &&\r\n            this.useFetchStreams === other.useFetchStreams);\r\n    }\r\n}\r\nfunction validateLongPollingOptions(options) {\r\n    if (options.timeoutSeconds !== undefined) {\r\n        if (isNaN(options.timeoutSeconds)) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, `invalid long polling timeout: ` +\r\n                `${options.timeoutSeconds} (must not be NaN)`);\r\n        }\r\n        if (options.timeoutSeconds < MIN_LONG_POLLING_TIMEOUT_SECONDS) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, `invalid long polling timeout: ${options.timeoutSeconds} ` +\r\n                `(minimum allowed value is ${MIN_LONG_POLLING_TIMEOUT_SECONDS})`);\r\n        }\r\n        if (options.timeoutSeconds > MAX_LONG_POLLING_TIMEOUT_SECONDS) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, `invalid long polling timeout: ${options.timeoutSeconds} ` +\r\n                `(maximum allowed value is ${MAX_LONG_POLLING_TIMEOUT_SECONDS})`);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The Cloud Firestore service interface.\r\n *\r\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\r\n */\r\nclass Firestore$1 {\r\n    /** @hideconstructor */\r\n    constructor(_authCredentials, _appCheckCredentials, _databaseId, _app) {\r\n        this._authCredentials = _authCredentials;\r\n        this._appCheckCredentials = _appCheckCredentials;\r\n        this._databaseId = _databaseId;\r\n        this._app = _app;\r\n        /**\r\n         * Whether it's a Firestore or Firestore Lite instance.\r\n         */\r\n        this.type = 'firestore-lite';\r\n        this._persistenceKey = '(lite)';\r\n        this._settings = new FirestoreSettingsImpl({});\r\n        this._settingsFrozen = false;\r\n    }\r\n    /**\r\n     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\r\n     * instance.\r\n     */\r\n    get app() {\r\n        if (!this._app) {\r\n            throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" +\r\n                'not available');\r\n        }\r\n        return this._app;\r\n    }\r\n    get _initialized() {\r\n        return this._settingsFrozen;\r\n    }\r\n    get _terminated() {\r\n        return this._terminateTask !== undefined;\r\n    }\r\n    _setSettings(settings) {\r\n        if (this._settingsFrozen) {\r\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' +\r\n                'be changed. You can only modify settings before calling any other ' +\r\n                'methods on a Firestore object.');\r\n        }\r\n        this._settings = new FirestoreSettingsImpl(settings);\r\n        if (settings.credentials !== undefined) {\r\n            this._authCredentials = makeAuthCredentialsProvider(settings.credentials);\r\n        }\r\n    }\r\n    _getSettings() {\r\n        return this._settings;\r\n    }\r\n    _freezeSettings() {\r\n        this._settingsFrozen = true;\r\n        return this._settings;\r\n    }\r\n    _delete() {\r\n        if (!this._terminateTask) {\r\n            this._terminateTask = this._terminate();\r\n        }\r\n        return this._terminateTask;\r\n    }\r\n    /** Returns a JSON-serializable representation of this `Firestore` instance. */\r\n    toJSON() {\r\n        return {\r\n            app: this._app,\r\n            databaseId: this._databaseId,\r\n            settings: this._settings\r\n        };\r\n    }\r\n    /**\r\n     * Terminates all components used by this client. Subclasses can override\r\n     * this method to clean up their own dependencies, but must also call this\r\n     * method.\r\n     *\r\n     * Only ever called once.\r\n     */\r\n    _terminate() {\r\n        removeComponents(this);\r\n        return Promise.resolve();\r\n    }\r\n}\r\n/**\r\n * Modify this instance to communicate with the Cloud Firestore emulator.\r\n *\r\n * Note: This must be called before this instance has been used to do any\r\n * operations.\r\n *\r\n * @param firestore - The `Firestore` instance to configure to connect to the\r\n * emulator.\r\n * @param host - the emulator host (ex: localhost).\r\n * @param port - the emulator port (ex: 9000).\r\n * @param options.mockUserToken - the mock auth token to use for unit testing\r\n * Security Rules.\r\n */\r\nfunction connectFirestoreEmulator(firestore, host, port, options = {}) {\r\n    var _a;\r\n    firestore = cast(firestore, Firestore$1);\r\n    const settings = firestore._getSettings();\r\n    const newHostSetting = `${host}:${port}`;\r\n    if (settings.host !== DEFAULT_HOST && settings.host !== newHostSetting) {\r\n        logWarn('Host has been set in both settings() and connectFirestoreEmulator(), emulator host ' +\r\n            'will be used.');\r\n    }\r\n    firestore._setSettings(Object.assign(Object.assign({}, settings), { host: newHostSetting, ssl: false }));\r\n    if (options.mockUserToken) {\r\n        let token;\r\n        let user;\r\n        if (typeof options.mockUserToken === 'string') {\r\n            token = options.mockUserToken;\r\n            user = User.MOCK_USER;\r\n        }\r\n        else {\r\n            // Let createMockUserToken validate first (catches common mistakes like\r\n            // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\r\n            token = createMockUserToken(options.mockUserToken, (_a = firestore._app) === null || _a === void 0 ? void 0 : _a.options.projectId);\r\n            const uid = options.mockUserToken.sub || options.mockUserToken.user_id;\r\n            if (!uid) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, \"mockUserToken must contain 'sub' or 'user_id' field!\");\r\n            }\r\n            user = new User(uid);\r\n        }\r\n        firestore._authCredentials = new EmulatorAuthCredentialsProvider(new OAuthToken(token, user));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A `DocumentReference` refers to a document location in a Firestore database\r\n * and can be used to write, read, or listen to the location. The document at\r\n * the referenced location may or may not exist.\r\n */\r\nclass DocumentReference {\r\n    /** @hideconstructor */\r\n    constructor(firestore, \r\n    /**\r\n     * If provided, the `FirestoreDataConverter` associated with this instance.\r\n     */\r\n    converter, _key) {\r\n        this.converter = converter;\r\n        this._key = _key;\r\n        /** The type of this Firestore reference. */\r\n        this.type = 'document';\r\n        this.firestore = firestore;\r\n    }\r\n    get _path() {\r\n        return this._key.path;\r\n    }\r\n    /**\r\n     * The document's identifier within its collection.\r\n     */\r\n    get id() {\r\n        return this._key.path.lastSegment();\r\n    }\r\n    /**\r\n     * A string representing the path of the referenced document (relative\r\n     * to the root of the database).\r\n     */\r\n    get path() {\r\n        return this._key.path.canonicalString();\r\n    }\r\n    /**\r\n     * The collection this `DocumentReference` belongs to.\r\n     */\r\n    get parent() {\r\n        return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());\r\n    }\r\n    withConverter(converter) {\r\n        return new DocumentReference(this.firestore, converter, this._key);\r\n    }\r\n}\r\n/**\r\n * A `Query` refers to a query which you can read or listen to. You can also\r\n * construct refined `Query` objects by adding filters and ordering.\r\n */\r\nclass Query {\r\n    // This is the lite version of the Query class in the main SDK.\r\n    /** @hideconstructor protected */\r\n    constructor(firestore, \r\n    /**\r\n     * If provided, the `FirestoreDataConverter` associated with this instance.\r\n     */\r\n    converter, _query) {\r\n        this.converter = converter;\r\n        this._query = _query;\r\n        /** The type of this Firestore reference. */\r\n        this.type = 'query';\r\n        this.firestore = firestore;\r\n    }\r\n    withConverter(converter) {\r\n        return new Query(this.firestore, converter, this._query);\r\n    }\r\n}\r\n/**\r\n * A `CollectionReference` object can be used for adding documents, getting\r\n * document references, and querying for documents (using {@link (query:1)}).\r\n */\r\nclass CollectionReference extends Query {\r\n    /** @hideconstructor */\r\n    constructor(firestore, converter, _path) {\r\n        super(firestore, converter, newQueryForPath(_path));\r\n        this._path = _path;\r\n        /** The type of this Firestore reference. */\r\n        this.type = 'collection';\r\n    }\r\n    /** The collection's identifier. */\r\n    get id() {\r\n        return this._query.path.lastSegment();\r\n    }\r\n    /**\r\n     * A string representing the path of the referenced collection (relative\r\n     * to the root of the database).\r\n     */\r\n    get path() {\r\n        return this._query.path.canonicalString();\r\n    }\r\n    /**\r\n     * A reference to the containing `DocumentReference` if this is a\r\n     * subcollection. If this isn't a subcollection, the reference is null.\r\n     */\r\n    get parent() {\r\n        const parentPath = this._path.popLast();\r\n        if (parentPath.isEmpty()) {\r\n            return null;\r\n        }\r\n        else {\r\n            return new DocumentReference(this.firestore, \r\n            /* converter= */ null, new DocumentKey(parentPath));\r\n        }\r\n    }\r\n    withConverter(converter) {\r\n        return new CollectionReference(this.firestore, converter, this._path);\r\n    }\r\n}\r\nfunction collection(parent, path, ...pathSegments) {\r\n    parent = getModularInstance(parent);\r\n    validateNonEmptyArgument('collection', 'path', path);\r\n    if (parent instanceof Firestore$1) {\r\n        const absolutePath = ResourcePath.fromString(path, ...pathSegments);\r\n        validateCollectionPath(absolutePath);\r\n        return new CollectionReference(parent, /* converter= */ null, absolutePath);\r\n    }\r\n    else {\r\n        if (!(parent instanceof DocumentReference) &&\r\n            !(parent instanceof CollectionReference)) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Expected first argument to collection() to be a CollectionReference, ' +\r\n                'a DocumentReference or FirebaseFirestore');\r\n        }\r\n        const absolutePath = parent._path.child(ResourcePath.fromString(path, ...pathSegments));\r\n        validateCollectionPath(absolutePath);\r\n        return new CollectionReference(parent.firestore, \r\n        /* converter= */ null, absolutePath);\r\n    }\r\n}\r\n// TODO(firestorelite): Consider using ErrorFactory -\r\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\r\n/**\r\n * Creates and returns a new `Query` instance that includes all documents in the\r\n * database that are contained in a collection or subcollection with the\r\n * given `collectionId`.\r\n *\r\n * @param firestore - A reference to the root `Firestore` instance.\r\n * @param collectionId - Identifies the collections to query over. Every\r\n * collection or subcollection with this ID as the last segment of its path\r\n * will be included. Cannot contain a slash.\r\n * @returns The created `Query`.\r\n */\r\nfunction collectionGroup(firestore, collectionId) {\r\n    firestore = cast(firestore, Firestore$1);\r\n    validateNonEmptyArgument('collectionGroup', 'collection id', collectionId);\r\n    if (collectionId.indexOf('/') >= 0) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid collection ID '${collectionId}' passed to function ` +\r\n            `collectionGroup(). Collection IDs must not contain '/'.`);\r\n    }\r\n    return new Query(firestore, \r\n    /* converter= */ null, newQueryForCollectionGroup(collectionId));\r\n}\r\nfunction doc(parent, path, ...pathSegments) {\r\n    parent = getModularInstance(parent);\r\n    // We allow omission of 'pathString' but explicitly prohibit passing in both\r\n    // 'undefined' and 'null'.\r\n    if (arguments.length === 1) {\r\n        path = AutoId.newId();\r\n    }\r\n    validateNonEmptyArgument('doc', 'path', path);\r\n    if (parent instanceof Firestore$1) {\r\n        const absolutePath = ResourcePath.fromString(path, ...pathSegments);\r\n        validateDocumentPath(absolutePath);\r\n        return new DocumentReference(parent, \r\n        /* converter= */ null, new DocumentKey(absolutePath));\r\n    }\r\n    else {\r\n        if (!(parent instanceof DocumentReference) &&\r\n            !(parent instanceof CollectionReference)) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Expected first argument to collection() to be a CollectionReference, ' +\r\n                'a DocumentReference or FirebaseFirestore');\r\n        }\r\n        const absolutePath = parent._path.child(ResourcePath.fromString(path, ...pathSegments));\r\n        validateDocumentPath(absolutePath);\r\n        return new DocumentReference(parent.firestore, parent instanceof CollectionReference ? parent.converter : null, new DocumentKey(absolutePath));\r\n    }\r\n}\r\n/**\r\n * Returns true if the provided references are equal.\r\n *\r\n * @param left - A reference to compare.\r\n * @param right - A reference to compare.\r\n * @returns true if the references point to the same location in the same\r\n * Firestore database.\r\n */\r\nfunction refEqual(left, right) {\r\n    left = getModularInstance(left);\r\n    right = getModularInstance(right);\r\n    if ((left instanceof DocumentReference ||\r\n        left instanceof CollectionReference) &&\r\n        (right instanceof DocumentReference || right instanceof CollectionReference)) {\r\n        return (left.firestore === right.firestore &&\r\n            left.path === right.path &&\r\n            left.converter === right.converter);\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Returns true if the provided queries point to the same collection and apply\r\n * the same constraints.\r\n *\r\n * @param left - A `Query` to compare.\r\n * @param right - A `Query` to compare.\r\n * @returns true if the references point to the same location in the same\r\n * Firestore database.\r\n */\r\nfunction queryEqual(left, right) {\r\n    left = getModularInstance(left);\r\n    right = getModularInstance(right);\r\n    if (left instanceof Query && right instanceof Query) {\r\n        return (left.firestore === right.firestore &&\r\n            queryEquals(left._query, right._query) &&\r\n            left.converter === right.converter);\r\n    }\r\n    return false;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_TAG = 'AsyncQueue';\r\nclass AsyncQueueImpl {\r\n    constructor() {\r\n        // The last promise in the queue.\r\n        this.tail = Promise.resolve();\r\n        // A list of retryable operations. Retryable operations are run in order and\r\n        // retried with backoff.\r\n        this.retryableOps = [];\r\n        // Is this AsyncQueue being shut down? Once it is set to true, it will not\r\n        // be changed again.\r\n        this._isShuttingDown = false;\r\n        // Operations scheduled to be queued in the future. Operations are\r\n        // automatically removed after they are run or canceled.\r\n        this.delayedOperations = [];\r\n        // visible for testing\r\n        this.failure = null;\r\n        // Flag set while there's an outstanding AsyncQueue operation, used for\r\n        // assertion sanity-checks.\r\n        this.operationInProgress = false;\r\n        // Enabled during shutdown on Safari to prevent future access to IndexedDB.\r\n        this.skipNonRestrictedTasks = false;\r\n        // List of TimerIds to fast-forward delays for.\r\n        this.timerIdsToSkip = [];\r\n        // Backoff timer used to schedule retries for retryable operations\r\n        this.backoff = new ExponentialBackoff(this, \"async_queue_retry\" /* TimerId.AsyncQueueRetry */);\r\n        // Visibility handler that triggers an immediate retry of all retryable\r\n        // operations. Meant to speed up recovery when we regain file system access\r\n        // after page comes into foreground.\r\n        this.visibilityHandler = () => {\r\n            this.backoff.skipBackoff();\r\n        };\r\n    }\r\n    get isShuttingDown() {\r\n        return this._isShuttingDown;\r\n    }\r\n    /**\r\n     * Adds a new operation to the queue without waiting for it to complete (i.e.\r\n     * we ignore the Promise result).\r\n     */\r\n    enqueueAndForget(op) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.enqueue(op);\r\n    }\r\n    enqueueAndForgetEvenWhileRestricted(op) {\r\n        this.verifyNotFailed();\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.enqueueInternal(op);\r\n    }\r\n    enterRestrictedMode(purgeExistingTasks) {\r\n        if (!this._isShuttingDown) {\r\n            this._isShuttingDown = true;\r\n            this.skipNonRestrictedTasks = purgeExistingTasks || false;\r\n        }\r\n    }\r\n    enqueue(op) {\r\n        this.verifyNotFailed();\r\n        if (this._isShuttingDown) {\r\n            // Return a Promise which never resolves.\r\n            return new Promise(() => { });\r\n        }\r\n        // Create a deferred Promise that we can return to the callee. This\r\n        // allows us to return a \"hanging Promise\" only to the callee and still\r\n        // advance the queue even when the operation is not run.\r\n        const task = new Deferred();\r\n        return this.enqueueInternal(() => {\r\n            if (this._isShuttingDown && this.skipNonRestrictedTasks) {\r\n                // We do not resolve 'task'\r\n                return Promise.resolve();\r\n            }\r\n            op().then(task.resolve, task.reject);\r\n            return task.promise;\r\n        }).then(() => task.promise);\r\n    }\r\n    enqueueRetryable(op) {\r\n        this.enqueueAndForget(() => {\r\n            this.retryableOps.push(op);\r\n            return this.retryNextOp();\r\n        });\r\n    }\r\n    /**\r\n     * Runs the next operation from the retryable queue. If the operation fails,\r\n     * reschedules with backoff.\r\n     */\r\n    async retryNextOp() {\r\n        if (this.retryableOps.length === 0) {\r\n            return;\r\n        }\r\n        try {\r\n            await this.retryableOps[0]();\r\n            this.retryableOps.shift();\r\n            this.backoff.reset();\r\n        }\r\n        catch (e) {\r\n            if (isIndexedDbTransactionError(e)) {\r\n                logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e);\r\n            }\r\n            else {\r\n                throw e; // Failure will be handled by AsyncQueue\r\n            }\r\n        }\r\n        if (this.retryableOps.length > 0) {\r\n            // If there are additional operations, we re-schedule `retryNextOp()`.\r\n            // This is necessary to run retryable operations that failed during\r\n            // their initial attempt since we don't know whether they are already\r\n            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\r\n            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\r\n            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\r\n            // call scheduled here.\r\n            // Since `backoffAndRun()` cancels an existing backoff and schedules a\r\n            // new backoff on every call, there is only ever a single additional\r\n            // operation in the queue.\r\n            this.backoff.backoffAndRun(() => this.retryNextOp());\r\n        }\r\n    }\r\n    enqueueInternal(op) {\r\n        const newTail = this.tail.then(() => {\r\n            this.operationInProgress = true;\r\n            return op()\r\n                .catch((error) => {\r\n                this.failure = error;\r\n                this.operationInProgress = false;\r\n                const message = getMessageOrStack(error);\r\n                logError('INTERNAL UNHANDLED ERROR: ', message);\r\n                // Re-throw the error so that this.tail becomes a rejected Promise and\r\n                // all further attempts to chain (via .then) will just short-circuit\r\n                // and return the rejected Promise.\r\n                throw error;\r\n            })\r\n                .then(result => {\r\n                this.operationInProgress = false;\r\n                return result;\r\n            });\r\n        });\r\n        this.tail = newTail;\r\n        return newTail;\r\n    }\r\n    enqueueAfterDelay(timerId, delayMs, op) {\r\n        this.verifyNotFailed();\r\n        // Fast-forward delays for timerIds that have been overriden.\r\n        if (this.timerIdsToSkip.indexOf(timerId) > -1) {\r\n            delayMs = 0;\r\n        }\r\n        const delayedOp = DelayedOperation.createAndSchedule(this, timerId, delayMs, op, removedOp => this.removeDelayedOperation(removedOp));\r\n        this.delayedOperations.push(delayedOp);\r\n        return delayedOp;\r\n    }\r\n    verifyNotFailed() {\r\n        if (this.failure) {\r\n            fail();\r\n        }\r\n    }\r\n    verifyOperationInProgress() {\r\n    }\r\n    /**\r\n     * Waits until all currently queued tasks are finished executing. Delayed\r\n     * operations are not run.\r\n     */\r\n    async drain() {\r\n        // Operations in the queue prior to draining may have enqueued additional\r\n        // operations. Keep draining the queue until the tail is no longer advanced,\r\n        // which indicates that no more new operations were enqueued and that all\r\n        // operations were executed.\r\n        let currentTail;\r\n        do {\r\n            currentTail = this.tail;\r\n            await currentTail;\r\n        } while (currentTail !== this.tail);\r\n    }\r\n    /**\r\n     * For Tests: Determine if a delayed operation with a particular TimerId\r\n     * exists.\r\n     */\r\n    containsDelayedOperation(timerId) {\r\n        for (const op of this.delayedOperations) {\r\n            if (op.timerId === timerId) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * For Tests: Runs some or all delayed operations early.\r\n     *\r\n     * @param lastTimerId - Delayed operations up to and including this TimerId\r\n     * will be drained. Pass TimerId.All to run all delayed operations.\r\n     * @returns a Promise that resolves once all operations have been run.\r\n     */\r\n    runAllDelayedOperationsUntil(lastTimerId) {\r\n        // Note that draining may generate more delayed ops, so we do that first.\r\n        return this.drain().then(() => {\r\n            // Run ops in the same order they'd run if they ran naturally.\r\n            this.delayedOperations.sort((a, b) => a.targetTimeMs - b.targetTimeMs);\r\n            for (const op of this.delayedOperations) {\r\n                op.skipDelay();\r\n                if (lastTimerId !== \"all\" /* TimerId.All */ && op.timerId === lastTimerId) {\r\n                    break;\r\n                }\r\n            }\r\n            return this.drain();\r\n        });\r\n    }\r\n    /**\r\n     * For Tests: Skip all subsequent delays for a timer id.\r\n     */\r\n    skipDelaysForTimerId(timerId) {\r\n        this.timerIdsToSkip.push(timerId);\r\n    }\r\n    /** Called once a DelayedOperation is run or canceled. */\r\n    removeDelayedOperation(op) {\r\n        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\r\n        const index = this.delayedOperations.indexOf(op);\r\n        this.delayedOperations.splice(index, 1);\r\n    }\r\n}\r\nfunction newAsyncQueue() {\r\n    return new AsyncQueueImpl();\r\n}\r\n/**\r\n * Chrome includes Error.message in Error.stack. Other browsers do not.\r\n * This returns expected output of message + stack when available.\r\n * @param error - Error or FirestoreError\r\n */\r\nfunction getMessageOrStack(error) {\r\n    let message = error.message || '';\r\n    if (error.stack) {\r\n        if (error.stack.includes(error.message)) {\r\n            message = error.stack;\r\n        }\r\n        else {\r\n            message = error.message + '\\n' + error.stack;\r\n        }\r\n    }\r\n    return message;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents the task of loading a Firestore bundle. It provides progress of bundle\r\n * loading, as well as task completion and error events.\r\n *\r\n * The API is compatible with `Promise<LoadBundleTaskProgress>`.\r\n */\r\nclass LoadBundleTask {\r\n    constructor() {\r\n        this._progressObserver = {};\r\n        this._taskCompletionResolver = new Deferred();\r\n        this._lastProgress = {\r\n            taskState: 'Running',\r\n            totalBytes: 0,\r\n            totalDocuments: 0,\r\n            bytesLoaded: 0,\r\n            documentsLoaded: 0\r\n        };\r\n    }\r\n    /**\r\n     * Registers functions to listen to bundle loading progress events.\r\n     * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur\r\n     *   each time a Firestore document is loaded from the bundle.\r\n     * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the\r\n     *   error, and there should be no more updates after this.\r\n     * @param complete - Called when the loading task is complete.\r\n     */\r\n    onProgress(next, error, complete) {\r\n        this._progressObserver = {\r\n            next,\r\n            error,\r\n            complete\r\n        };\r\n    }\r\n    /**\r\n     * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.\r\n     *\r\n     * @param onRejected - Called when an error occurs during bundle loading.\r\n     */\r\n    catch(onRejected) {\r\n        return this._taskCompletionResolver.promise.catch(onRejected);\r\n    }\r\n    /**\r\n     * Implements the `Promise<LoadBundleTaskProgress>.then` interface.\r\n     *\r\n     * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.\r\n     *   The update will always have its `taskState` set to `\"Success\"`.\r\n     * @param onRejected - Called when an error occurs during bundle loading.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        return this._taskCompletionResolver.promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Notifies all observers that bundle loading has completed, with a provided\r\n     * `LoadBundleTaskProgress` object.\r\n     *\r\n     * @private\r\n     */\r\n    _completeWith(progress) {\r\n        this._updateProgress(progress);\r\n        if (this._progressObserver.complete) {\r\n            this._progressObserver.complete();\r\n        }\r\n        this._taskCompletionResolver.resolve(progress);\r\n    }\r\n    /**\r\n     * Notifies all observers that bundle loading has failed, with a provided\r\n     * `Error` as the reason.\r\n     *\r\n     * @private\r\n     */\r\n    _failWith(error) {\r\n        this._lastProgress.taskState = 'Error';\r\n        if (this._progressObserver.next) {\r\n            this._progressObserver.next(this._lastProgress);\r\n        }\r\n        if (this._progressObserver.error) {\r\n            this._progressObserver.error(error);\r\n        }\r\n        this._taskCompletionResolver.reject(error);\r\n    }\r\n    /**\r\n     * Notifies a progress update of loading a bundle.\r\n     * @param progress - The new progress.\r\n     *\r\n     * @private\r\n     */\r\n    _updateProgress(progress) {\r\n        this._lastProgress = progress;\r\n        if (this._progressObserver.next) {\r\n            this._progressObserver.next(progress);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Constant used to indicate the LRU garbage collection should be disabled.\r\n * Set this value as the `cacheSizeBytes` on the settings passed to the\r\n * {@link Firestore} instance.\r\n */\r\nconst CACHE_SIZE_UNLIMITED = LRU_COLLECTION_DISABLED;\r\n/**\r\n * The Cloud Firestore service interface.\r\n *\r\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\r\n */\r\nclass Firestore extends Firestore$1 {\r\n    /** @hideconstructor */\r\n    constructor(authCredentialsProvider, appCheckCredentialsProvider, databaseId, app) {\r\n        super(authCredentialsProvider, appCheckCredentialsProvider, databaseId, app);\r\n        /**\r\n         * Whether it's a {@link Firestore} or Firestore Lite instance.\r\n         */\r\n        this.type = 'firestore';\r\n        this._queue = newAsyncQueue();\r\n        this._persistenceKey = (app === null || app === void 0 ? void 0 : app.name) || '[DEFAULT]';\r\n    }\r\n    _terminate() {\r\n        if (!this._firestoreClient) {\r\n            // The client must be initialized to ensure that all subsequent API\r\n            // usage throws an exception.\r\n            configureFirestore(this);\r\n        }\r\n        return this._firestoreClient.terminate();\r\n    }\r\n}\r\n/**\r\n * Initializes a new instance of {@link Firestore} with the provided settings.\r\n * Can only be called before any other function, including\r\n * {@link (getFirestore:1)}. If the custom settings are empty, this function is\r\n * equivalent to calling {@link (getFirestore:1)}.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} with which the {@link Firestore} instance will\r\n * be associated.\r\n * @param settings - A settings object to configure the {@link Firestore} instance.\r\n * @param databaseId - The name of the database.\r\n * @returns A newly initialized {@link Firestore} instance.\r\n */\r\nfunction initializeFirestore(app, settings, databaseId) {\r\n    if (!databaseId) {\r\n        databaseId = DEFAULT_DATABASE_NAME;\r\n    }\r\n    const provider = _getProvider(app, 'firestore');\r\n    if (provider.isInitialized(databaseId)) {\r\n        const existingInstance = provider.getImmediate({\r\n            identifier: databaseId\r\n        });\r\n        const initialSettings = provider.getOptions(databaseId);\r\n        if (deepEqual(initialSettings, settings)) {\r\n            return existingInstance;\r\n        }\r\n        else {\r\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'initializeFirestore() has already been called with ' +\r\n                'different options. To avoid this error, call initializeFirestore() with the ' +\r\n                'same options as when it was originally called, or call getFirestore() to return the' +\r\n                ' already initialized instance.');\r\n        }\r\n    }\r\n    if (settings.cacheSizeBytes !== undefined &&\r\n        settings.localCache !== undefined) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `cache and cacheSizeBytes cannot be specified at the same time as cacheSizeBytes will` +\r\n            `be deprecated. Instead, specify the cache size in the cache object`);\r\n    }\r\n    if (settings.cacheSizeBytes !== undefined &&\r\n        settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED &&\r\n        settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `cacheSizeBytes must be at least ${LRU_MINIMUM_CACHE_SIZE_BYTES}`);\r\n    }\r\n    return provider.initialize({\r\n        options: settings,\r\n        instanceIdentifier: databaseId\r\n    });\r\n}\r\nfunction getFirestore(appOrDatabaseId, optionalDatabaseId) {\r\n    const app = typeof appOrDatabaseId === 'object' ? appOrDatabaseId : getApp();\r\n    const databaseId = typeof appOrDatabaseId === 'string'\r\n        ? appOrDatabaseId\r\n        : optionalDatabaseId || DEFAULT_DATABASE_NAME;\r\n    const db = _getProvider(app, 'firestore').getImmediate({\r\n        identifier: databaseId\r\n    });\r\n    if (!db._initialized) {\r\n        const emulator = getDefaultEmulatorHostnameAndPort('firestore');\r\n        if (emulator) {\r\n            connectFirestoreEmulator(db, ...emulator);\r\n        }\r\n    }\r\n    return db;\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction ensureFirestoreConfigured(firestore) {\r\n    if (!firestore._firestoreClient) {\r\n        configureFirestore(firestore);\r\n    }\r\n    firestore._firestoreClient.verifyNotTerminated();\r\n    return firestore._firestoreClient;\r\n}\r\nfunction configureFirestore(firestore) {\r\n    var _a, _b, _c;\r\n    const settings = firestore._freezeSettings();\r\n    const databaseInfo = makeDatabaseInfo(firestore._databaseId, ((_a = firestore._app) === null || _a === void 0 ? void 0 : _a.options.appId) || '', firestore._persistenceKey, settings);\r\n    firestore._firestoreClient = new FirestoreClient(firestore._authCredentials, firestore._appCheckCredentials, firestore._queue, databaseInfo);\r\n    if (((_b = settings.cache) === null || _b === void 0 ? void 0 : _b._offlineComponentProvider) &&\r\n        ((_c = settings.cache) === null || _c === void 0 ? void 0 : _c._onlineComponentProvider)) {\r\n        firestore._firestoreClient._uninitializedComponentsProvider = {\r\n            _offlineKind: settings.cache.kind,\r\n            _offline: settings.cache._offlineComponentProvider,\r\n            _online: settings.cache._onlineComponentProvider\r\n        };\r\n    }\r\n}\r\n/**\r\n * Attempts to enable persistent storage, if possible.\r\n *\r\n * Must be called before any other functions (other than\r\n * {@link initializeFirestore}, {@link (getFirestore:1)} or\r\n * {@link clearIndexedDbPersistence}.\r\n *\r\n * If this fails, `enableIndexedDbPersistence()` will reject the promise it\r\n * returns. Note that even after this failure, the {@link Firestore} instance will\r\n * remain usable, however offline persistence will be disabled.\r\n *\r\n * There are several reasons why this can fail, which can be identified by\r\n * the `code` on the error.\r\n *\r\n *   * failed-precondition: The app is already open in another browser tab.\r\n *   * unimplemented: The browser is incompatible with the offline\r\n *     persistence implementation.\r\n *\r\n * Persistence cannot be used in a Node.js environment.\r\n *\r\n * @param firestore - The {@link Firestore} instance to enable persistence for.\r\n * @param persistenceSettings - Optional settings object to configure\r\n * persistence.\r\n * @returns A `Promise` that represents successfully enabling persistent storage.\r\n * @deprecated This function will be removed in a future major release. Instead, set\r\n * `FirestoreSettings.cache` to an instance of `IndexedDbLocalCache` to\r\n * turn on IndexedDb cache. Calling this function when `FirestoreSettings.cache`\r\n * is already specified will throw an exception.\r\n */\r\nfunction enableIndexedDbPersistence(firestore, persistenceSettings) {\r\n    firestore = cast(firestore, Firestore);\r\n    verifyNotInitialized(firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    if (client._uninitializedComponentsProvider) {\r\n        throw new FirestoreError(Code.FAILED_PRECONDITION, 'SDK cache is already specified.');\r\n    }\r\n    logWarn('enableIndexedDbPersistence() will be deprecated in the future, ' +\r\n        'you can use `FirestoreSettings.cache` instead.');\r\n    const settings = firestore._freezeSettings();\r\n    const onlineComponentProvider = new OnlineComponentProvider();\r\n    const offlineComponentProvider = new IndexedDbOfflineComponentProvider(onlineComponentProvider, settings.cacheSizeBytes, persistenceSettings === null || persistenceSettings === void 0 ? void 0 : persistenceSettings.forceOwnership);\r\n    return setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider);\r\n}\r\n/**\r\n * Attempts to enable multi-tab persistent storage, if possible. If enabled\r\n * across all tabs, all operations share access to local persistence, including\r\n * shared execution of queries and latency-compensated local document updates\r\n * across all connected instances.\r\n *\r\n * If this fails, `enableMultiTabIndexedDbPersistence()` will reject the promise\r\n * it returns. Note that even after this failure, the {@link Firestore} instance will\r\n * remain usable, however offline persistence will be disabled.\r\n *\r\n * There are several reasons why this can fail, which can be identified by\r\n * the `code` on the error.\r\n *\r\n *   * failed-precondition: The app is already open in another browser tab and\r\n *     multi-tab is not enabled.\r\n *   * unimplemented: The browser is incompatible with the offline\r\n *     persistence implementation.\r\n *\r\n * @param firestore - The {@link Firestore} instance to enable persistence for.\r\n * @returns A `Promise` that represents successfully enabling persistent\r\n * storage.\r\n * @deprecated This function will be removed in a future major release. Instead, set\r\n * `FirestoreSettings.cache` to an instance of `IndexedDbLocalCache` to\r\n * turn on indexeddb cache. Calling this function when `FirestoreSettings.cache`\r\n * is already specified will throw an exception.\r\n */\r\nfunction enableMultiTabIndexedDbPersistence(firestore) {\r\n    firestore = cast(firestore, Firestore);\r\n    verifyNotInitialized(firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    if (client._uninitializedComponentsProvider) {\r\n        throw new FirestoreError(Code.FAILED_PRECONDITION, 'SDK cache is already specified.');\r\n    }\r\n    logWarn('enableMultiTabIndexedDbPersistence() will be deprecated in the future, ' +\r\n        'you can use `FirestoreSettings.cache` instead.');\r\n    const settings = firestore._freezeSettings();\r\n    const onlineComponentProvider = new OnlineComponentProvider();\r\n    const offlineComponentProvider = new MultiTabOfflineComponentProvider(onlineComponentProvider, settings.cacheSizeBytes);\r\n    return setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider);\r\n}\r\n/**\r\n * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.\r\n * If the operation fails with a recoverable error (see\r\n * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected\r\n * but the client remains usable.\r\n */\r\nfunction setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider) {\r\n    const persistenceResult = new Deferred();\r\n    return client.asyncQueue\r\n        .enqueue(async () => {\r\n        try {\r\n            await setOfflineComponentProvider(client, offlineComponentProvider);\r\n            await setOnlineComponentProvider(client, onlineComponentProvider);\r\n            persistenceResult.resolve();\r\n        }\r\n        catch (e) {\r\n            const error = e;\r\n            if (!canFallbackFromIndexedDbError(error)) {\r\n                throw error;\r\n            }\r\n            logWarn('Error enabling indexeddb cache. Falling back to ' +\r\n                'memory cache: ' +\r\n                error);\r\n            persistenceResult.reject(error);\r\n        }\r\n    })\r\n        .then(() => persistenceResult.promise);\r\n}\r\n/**\r\n * Clears the persistent storage. This includes pending writes and cached\r\n * documents.\r\n *\r\n * Must be called while the {@link Firestore} instance is not started (after the app is\r\n * terminated or when the app is first initialized). On startup, this function\r\n * must be called before other functions (other than {@link\r\n * initializeFirestore} or {@link (getFirestore:1)})). If the {@link Firestore}\r\n * instance is still running, the promise will be rejected with the error code\r\n * of `failed-precondition`.\r\n *\r\n * Note: `clearIndexedDbPersistence()` is primarily intended to help write\r\n * reliable tests that use Cloud Firestore. It uses an efficient mechanism for\r\n * dropping existing data but does not attempt to securely overwrite or\r\n * otherwise make cached data unrecoverable. For applications that are sensitive\r\n * to the disclosure of cached data in between user sessions, we strongly\r\n * recommend not enabling persistence at all.\r\n *\r\n * @param firestore - The {@link Firestore} instance to clear persistence for.\r\n * @returns A `Promise` that is resolved when the persistent storage is\r\n * cleared. Otherwise, the promise is rejected with an error.\r\n */\r\nfunction clearIndexedDbPersistence(firestore) {\r\n    if (firestore._initialized && !firestore._terminated) {\r\n        throw new FirestoreError(Code.FAILED_PRECONDITION, 'Persistence can only be cleared before a Firestore instance is ' +\r\n            'initialized or after it is terminated.');\r\n    }\r\n    const deferred = new Deferred();\r\n    firestore._queue.enqueueAndForgetEvenWhileRestricted(async () => {\r\n        try {\r\n            await indexedDbClearPersistence(indexedDbStoragePrefix(firestore._databaseId, firestore._persistenceKey));\r\n            deferred.resolve();\r\n        }\r\n        catch (e) {\r\n            deferred.reject(e);\r\n        }\r\n    });\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Waits until all currently pending writes for the active user have been\r\n * acknowledged by the backend.\r\n *\r\n * The returned promise resolves immediately if there are no outstanding writes.\r\n * Otherwise, the promise waits for all previously issued writes (including\r\n * those written in a previous app session), but it does not wait for writes\r\n * that were added after the function is called. If you want to wait for\r\n * additional writes, call `waitForPendingWrites()` again.\r\n *\r\n * Any outstanding `waitForPendingWrites()` promises are rejected during user\r\n * changes.\r\n *\r\n * @returns A `Promise` which resolves when all currently pending writes have been\r\n * acknowledged by the backend.\r\n */\r\nfunction waitForPendingWrites(firestore) {\r\n    firestore = cast(firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientWaitForPendingWrites(client);\r\n}\r\n/**\r\n * Re-enables use of the network for this {@link Firestore} instance after a prior\r\n * call to {@link disableNetwork}.\r\n *\r\n * @returns A `Promise` that is resolved once the network has been enabled.\r\n */\r\nfunction enableNetwork(firestore) {\r\n    firestore = cast(firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientEnableNetwork(client);\r\n}\r\n/**\r\n * Disables network usage for this instance. It can be re-enabled via {@link\r\n * enableNetwork}. While the network is disabled, any snapshot listeners,\r\n * `getDoc()` or `getDocs()` calls will return results from cache, and any write\r\n * operations will be queued until the network is restored.\r\n *\r\n * @returns A `Promise` that is resolved once the network has been disabled.\r\n */\r\nfunction disableNetwork(firestore) {\r\n    firestore = cast(firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientDisableNetwork(client);\r\n}\r\n/**\r\n * Terminates the provided {@link Firestore} instance.\r\n *\r\n * After calling `terminate()` only the `clearIndexedDbPersistence()` function\r\n * may be used. Any other function will throw a `FirestoreError`.\r\n *\r\n * To restart after termination, create a new instance of FirebaseFirestore with\r\n * {@link (getFirestore:1)}.\r\n *\r\n * Termination does not cancel any pending writes, and any promises that are\r\n * awaiting a response from the server will not be resolved. If you have\r\n * persistence enabled, the next time you start this instance, it will resume\r\n * sending these writes to the server.\r\n *\r\n * Note: Under normal circumstances, calling `terminate()` is not required. This\r\n * function is useful only when you want to force this instance to release all\r\n * of its resources or in combination with `clearIndexedDbPersistence()` to\r\n * ensure that all local state is destroyed between test runs.\r\n *\r\n * @returns A `Promise` that is resolved when the instance has been successfully\r\n * terminated.\r\n */\r\nfunction terminate(firestore) {\r\n    _removeServiceInstance(firestore.app, 'firestore', firestore._databaseId.database);\r\n    return firestore._delete();\r\n}\r\n/**\r\n * Loads a Firestore bundle into the local cache.\r\n *\r\n * @param firestore - The {@link Firestore} instance to load bundles for.\r\n * @param bundleData - An object representing the bundle to be loaded. Valid\r\n * objects are `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.\r\n *\r\n * @returns A `LoadBundleTask` object, which notifies callers with progress\r\n * updates, and completion or error events. It can be used as a\r\n * `Promise<LoadBundleTaskProgress>`.\r\n */\r\nfunction loadBundle(firestore, bundleData) {\r\n    firestore = cast(firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    const resultTask = new LoadBundleTask();\r\n    firestoreClientLoadBundle(client, firestore._databaseId, bundleData, resultTask);\r\n    return resultTask;\r\n}\r\n/**\r\n * Reads a Firestore {@link Query} from local cache, identified by the given\r\n * name.\r\n *\r\n * The named queries are packaged  into bundles on the server side (along\r\n * with resulting documents), and loaded to local cache using `loadBundle`. Once\r\n * in local cache, use this method to extract a {@link Query} by name.\r\n *\r\n * @param firestore - The {@link Firestore} instance to read the query from.\r\n * @param name - The name of the query.\r\n * @returns A `Promise` that is resolved with the Query or `null`.\r\n */\r\nfunction namedQuery(firestore, name) {\r\n    firestore = cast(firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientGetNamedQuery(client, name).then(namedQuery => {\r\n        if (!namedQuery) {\r\n            return null;\r\n        }\r\n        return new Query(firestore, null, namedQuery.query);\r\n    });\r\n}\r\nfunction verifyNotInitialized(firestore) {\r\n    if (firestore._initialized || firestore._terminated) {\r\n        throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer be ' +\r\n            'enabled. You can only enable persistence before calling any other ' +\r\n            'methods on a Firestore object.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerFirestore(variant, useFetchStreams = true) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('firestore', (container, { instanceIdentifier: databaseId, options: settings }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const firestoreInstance = new Firestore(new FirebaseAuthCredentialsProvider(container.getProvider('auth-internal')), new FirebaseAppCheckTokenProvider(container.getProvider('app-check-internal')), databaseIdFromApp(app, databaseId), app);\r\n        settings = Object.assign({ useFetchStreams }, settings);\r\n        firestoreInstance._setSettings(settings);\r\n        return firestoreInstance;\r\n    }, 'PUBLIC').setMultipleInstances(true));\r\n    registerVersion(name, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version$1, '__BUILD_TARGET__');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Concrete implementation of the Aggregate type.\r\n */\r\nclass AggregateImpl {\r\n    constructor(alias, aggregateType, fieldPath) {\r\n        this.alias = alias;\r\n        this.aggregateType = aggregateType;\r\n        this.fieldPath = fieldPath;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents an aggregation that can be performed by Firestore.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nclass AggregateField {\r\n    /**\r\n     * Create a new AggregateField<T>\r\n     * @param _aggregateType Specifies the type of aggregation operation to perform.\r\n     * @param _internalFieldPath Optionally specifies the field that is aggregated.\r\n     * @internal\r\n     */\r\n    constructor(\r\n    // TODO (sum/avg) make aggregateType public when the feature is supported\r\n    _aggregateType = 'count', _internalFieldPath) {\r\n        this._aggregateType = _aggregateType;\r\n        this._internalFieldPath = _internalFieldPath;\r\n        /** A type string to uniquely identify instances of this class. */\r\n        this.type = 'AggregateField';\r\n    }\r\n}\r\n/**\r\n * The results of executing an aggregation query.\r\n */\r\nclass AggregateQuerySnapshot {\r\n    /** @hideconstructor */\r\n    constructor(query, _userDataWriter, _data) {\r\n        this._userDataWriter = _userDataWriter;\r\n        this._data = _data;\r\n        /** A type string to uniquely identify instances of this class. */\r\n        this.type = 'AggregateQuerySnapshot';\r\n        this.query = query;\r\n    }\r\n    /**\r\n     * Returns the results of the aggregations performed over the underlying\r\n     * query.\r\n     *\r\n     * The keys of the returned object will be the same as those of the\r\n     * `AggregateSpec` object specified to the aggregation method, and the values\r\n     * will be the corresponding aggregation result.\r\n     *\r\n     * @returns The results of the aggregations performed over the underlying\r\n     * query.\r\n     */\r\n    data() {\r\n        return this._userDataWriter.convertObjectMap(this._data);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing an array of bytes.\r\n */\r\nclass Bytes {\r\n    /** @hideconstructor */\r\n    constructor(byteString) {\r\n        this._byteString = byteString;\r\n    }\r\n    /**\r\n     * Creates a new `Bytes` object from the given Base64 string, converting it to\r\n     * bytes.\r\n     *\r\n     * @param base64 - The Base64 string used to create the `Bytes` object.\r\n     */\r\n    static fromBase64String(base64) {\r\n        try {\r\n            return new Bytes(ByteString.fromBase64String(base64));\r\n        }\r\n        catch (e) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct data from Base64 string: ' + e);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new `Bytes` object from the given Uint8Array.\r\n     *\r\n     * @param array - The Uint8Array used to create the `Bytes` object.\r\n     */\r\n    static fromUint8Array(array) {\r\n        return new Bytes(ByteString.fromUint8Array(array));\r\n    }\r\n    /**\r\n     * Returns the underlying bytes as a Base64-encoded string.\r\n     *\r\n     * @returns The Base64-encoded string created from the `Bytes` object.\r\n     */\r\n    toBase64() {\r\n        return this._byteString.toBase64();\r\n    }\r\n    /**\r\n     * Returns the underlying bytes in a new `Uint8Array`.\r\n     *\r\n     * @returns The Uint8Array created from the `Bytes` object.\r\n     */\r\n    toUint8Array() {\r\n        return this._byteString.toUint8Array();\r\n    }\r\n    /**\r\n     * Returns a string representation of the `Bytes` object.\r\n     *\r\n     * @returns A string representation of the `Bytes` object.\r\n     */\r\n    toString() {\r\n        return 'Bytes(base64: ' + this.toBase64() + ')';\r\n    }\r\n    /**\r\n     * Returns true if this `Bytes` object is equal to the provided one.\r\n     *\r\n     * @param other - The `Bytes` object to compare against.\r\n     * @returns true if this `Bytes` object is equal to the provided one.\r\n     */\r\n    isEqual(other) {\r\n        return this._byteString.isEqual(other._byteString);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A `FieldPath` refers to a field in a document. The path may consist of a\r\n * single field name (referring to a top-level field in the document), or a\r\n * list of field names (referring to a nested field in the document).\r\n *\r\n * Create a `FieldPath` by providing field names. If more than one field\r\n * name is provided, the path will point to a nested field in a document.\r\n */\r\nclass FieldPath {\r\n    /**\r\n     * Creates a `FieldPath` from the provided field names. If more than one field\r\n     * name is provided, the path will point to a nested field in a document.\r\n     *\r\n     * @param fieldNames - A list of field names.\r\n     */\r\n    constructor(...fieldNames) {\r\n        for (let i = 0; i < fieldNames.length; ++i) {\r\n            if (fieldNames[i].length === 0) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid field name at argument $(i + 1). ` +\r\n                    'Field names must not be empty.');\r\n            }\r\n        }\r\n        this._internalPath = new FieldPath$1(fieldNames);\r\n    }\r\n    /**\r\n     * Returns true if this `FieldPath` is equal to the provided one.\r\n     *\r\n     * @param other - The `FieldPath` to compare against.\r\n     * @returns true if this `FieldPath` is equal to the provided one.\r\n     */\r\n    isEqual(other) {\r\n        return this._internalPath.isEqual(other._internalPath);\r\n    }\r\n}\r\n/**\r\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\r\n * It can be used in queries to sort or filter by the document ID.\r\n */\r\nfunction documentId() {\r\n    return new FieldPath(DOCUMENT_KEY_NAME);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Sentinel values that can be used when writing document fields with `set()`\r\n * or `update()`.\r\n */\r\nclass FieldValue {\r\n    /**\r\n     * @param _methodName - The public API endpoint that returns this class.\r\n     * @hideconstructor\r\n     */\r\n    constructor(_methodName) {\r\n        this._methodName = _methodName;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a geographic location in Firestore. The\r\n * location is represented as latitude/longitude pair.\r\n *\r\n * Latitude values are in the range of [-90, 90].\r\n * Longitude values are in the range of [-180, 180].\r\n */\r\nclass GeoPoint {\r\n    /**\r\n     * Creates a new immutable `GeoPoint` object with the provided latitude and\r\n     * longitude values.\r\n     * @param latitude - The latitude as number between -90 and 90.\r\n     * @param longitude - The longitude as number between -180 and 180.\r\n     */\r\n    constructor(latitude, longitude) {\r\n        if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\r\n        }\r\n        if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\r\n        }\r\n        this._lat = latitude;\r\n        this._long = longitude;\r\n    }\r\n    /**\r\n     * The latitude of this `GeoPoint` instance.\r\n     */\r\n    get latitude() {\r\n        return this._lat;\r\n    }\r\n    /**\r\n     * The longitude of this `GeoPoint` instance.\r\n     */\r\n    get longitude() {\r\n        return this._long;\r\n    }\r\n    /**\r\n     * Returns true if this `GeoPoint` is equal to the provided one.\r\n     *\r\n     * @param other - The `GeoPoint` to compare against.\r\n     * @returns true if this `GeoPoint` is equal to the provided one.\r\n     */\r\n    isEqual(other) {\r\n        return this._lat === other._lat && this._long === other._long;\r\n    }\r\n    /** Returns a JSON-serializable representation of this GeoPoint. */\r\n    toJSON() {\r\n        return { latitude: this._lat, longitude: this._long };\r\n    }\r\n    /**\r\n     * Actually private to JS consumers of our API, so this function is prefixed\r\n     * with an underscore.\r\n     */\r\n    _compareTo(other) {\r\n        return (primitiveComparator(this._lat, other._lat) ||\r\n            primitiveComparator(this._long, other._long));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RESERVED_FIELD_REGEX = /^__.*__$/;\r\n/** The result of parsing document data (e.g. for a setData call). */\r\nclass ParsedSetData {\r\n    constructor(data, fieldMask, fieldTransforms) {\r\n        this.data = data;\r\n        this.fieldMask = fieldMask;\r\n        this.fieldTransforms = fieldTransforms;\r\n    }\r\n    toMutation(key, precondition) {\r\n        if (this.fieldMask !== null) {\r\n            return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);\r\n        }\r\n        else {\r\n            return new SetMutation(key, this.data, precondition, this.fieldTransforms);\r\n        }\r\n    }\r\n}\r\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\r\nclass ParsedUpdateData {\r\n    constructor(data, \r\n    // The fieldMask does not include document transforms.\r\n    fieldMask, fieldTransforms) {\r\n        this.data = data;\r\n        this.fieldMask = fieldMask;\r\n        this.fieldTransforms = fieldTransforms;\r\n    }\r\n    toMutation(key, precondition) {\r\n        return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);\r\n    }\r\n}\r\nfunction isWrite(dataSource) {\r\n    switch (dataSource) {\r\n        case 0 /* UserDataSource.Set */: // fall through\r\n        case 2 /* UserDataSource.MergeSet */: // fall through\r\n        case 1 /* UserDataSource.Update */:\r\n            return true;\r\n        case 3 /* UserDataSource.Argument */:\r\n        case 4 /* UserDataSource.ArrayArgument */:\r\n            return false;\r\n        default:\r\n            throw fail();\r\n    }\r\n}\r\n/** A \"context\" object passed around while parsing user data. */\r\nclass ParseContextImpl {\r\n    /**\r\n     * Initializes a ParseContext with the given source and path.\r\n     *\r\n     * @param settings - The settings for the parser.\r\n     * @param databaseId - The database ID of the Firestore instance.\r\n     * @param serializer - The serializer to use to generate the Value proto.\r\n     * @param ignoreUndefinedProperties - Whether to ignore undefined properties\r\n     * rather than throw.\r\n     * @param fieldTransforms - A mutable list of field transforms encountered\r\n     * while parsing the data.\r\n     * @param fieldMask - A mutable list of field paths encountered while parsing\r\n     * the data.\r\n     *\r\n     * TODO(b/34871131): We don't support array paths right now, so path can be\r\n     * null to indicate the context represents any location within an array (in\r\n     * which case certain features will not work and errors will be somewhat\r\n     * compromised).\r\n     */\r\n    constructor(settings, databaseId, serializer, ignoreUndefinedProperties, fieldTransforms, fieldMask) {\r\n        this.settings = settings;\r\n        this.databaseId = databaseId;\r\n        this.serializer = serializer;\r\n        this.ignoreUndefinedProperties = ignoreUndefinedProperties;\r\n        // Minor hack: If fieldTransforms is undefined, we assume this is an\r\n        // external call and we need to validate the entire path.\r\n        if (fieldTransforms === undefined) {\r\n            this.validatePath();\r\n        }\r\n        this.fieldTransforms = fieldTransforms || [];\r\n        this.fieldMask = fieldMask || [];\r\n    }\r\n    get path() {\r\n        return this.settings.path;\r\n    }\r\n    get dataSource() {\r\n        return this.settings.dataSource;\r\n    }\r\n    /** Returns a new context with the specified settings overwritten. */\r\n    contextWith(configuration) {\r\n        return new ParseContextImpl(Object.assign(Object.assign({}, this.settings), configuration), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\r\n    }\r\n    childContextForField(field) {\r\n        var _a;\r\n        const childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);\r\n        const context = this.contextWith({ path: childPath, arrayElement: false });\r\n        context.validatePathSegment(field);\r\n        return context;\r\n    }\r\n    childContextForFieldPath(field) {\r\n        var _a;\r\n        const childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);\r\n        const context = this.contextWith({ path: childPath, arrayElement: false });\r\n        context.validatePath();\r\n        return context;\r\n    }\r\n    childContextForArray(index) {\r\n        // TODO(b/34871131): We don't support array paths right now; so make path\r\n        // undefined.\r\n        return this.contextWith({ path: undefined, arrayElement: true });\r\n    }\r\n    createError(reason) {\r\n        return createError(reason, this.settings.methodName, this.settings.hasConverter || false, this.path, this.settings.targetDoc);\r\n    }\r\n    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\r\n    contains(fieldPath) {\r\n        return (this.fieldMask.find(field => fieldPath.isPrefixOf(field)) !== undefined ||\r\n            this.fieldTransforms.find(transform => fieldPath.isPrefixOf(transform.field)) !== undefined);\r\n    }\r\n    validatePath() {\r\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\r\n        // within arrays.\r\n        if (!this.path) {\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.path.length; i++) {\r\n            this.validatePathSegment(this.path.get(i));\r\n        }\r\n    }\r\n    validatePathSegment(segment) {\r\n        if (segment.length === 0) {\r\n            throw this.createError('Document fields must not be empty');\r\n        }\r\n        if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\r\n            throw this.createError('Document fields cannot begin and end with \"__\"');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Helper for parsing raw user input (provided via the API) into internal model\r\n * classes.\r\n */\r\nclass UserDataReader {\r\n    constructor(databaseId, ignoreUndefinedProperties, serializer) {\r\n        this.databaseId = databaseId;\r\n        this.ignoreUndefinedProperties = ignoreUndefinedProperties;\r\n        this.serializer = serializer || newSerializer(databaseId);\r\n    }\r\n    /** Creates a new top-level parse context. */\r\n    createContext(dataSource, methodName, targetDoc, hasConverter = false) {\r\n        return new ParseContextImpl({\r\n            dataSource,\r\n            methodName,\r\n            targetDoc,\r\n            path: FieldPath$1.emptyPath(),\r\n            arrayElement: false,\r\n            hasConverter\r\n        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\r\n    }\r\n}\r\nfunction newUserDataReader(firestore) {\r\n    const settings = firestore._freezeSettings();\r\n    const serializer = newSerializer(firestore._databaseId);\r\n    return new UserDataReader(firestore._databaseId, !!settings.ignoreUndefinedProperties, serializer);\r\n}\r\n/** Parse document data from a set() call. */\r\nfunction parseSetData(userDataReader, methodName, targetDoc, input, hasConverter, options = {}) {\r\n    const context = userDataReader.createContext(options.merge || options.mergeFields\r\n        ? 2 /* UserDataSource.MergeSet */\r\n        : 0 /* UserDataSource.Set */, methodName, targetDoc, hasConverter);\r\n    validatePlainObject('Data must be an object, but it was:', context, input);\r\n    const updateData = parseObject(input, context);\r\n    let fieldMask;\r\n    let fieldTransforms;\r\n    if (options.merge) {\r\n        fieldMask = new FieldMask(context.fieldMask);\r\n        fieldTransforms = context.fieldTransforms;\r\n    }\r\n    else if (options.mergeFields) {\r\n        const validatedFieldPaths = [];\r\n        for (const stringOrFieldPath of options.mergeFields) {\r\n            const fieldPath = fieldPathFromArgument$1(methodName, stringOrFieldPath, targetDoc);\r\n            if (!context.contains(fieldPath)) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, `Field '${fieldPath}' is specified in your field mask but missing from your input data.`);\r\n            }\r\n            if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {\r\n                validatedFieldPaths.push(fieldPath);\r\n            }\r\n        }\r\n        fieldMask = new FieldMask(validatedFieldPaths);\r\n        fieldTransforms = context.fieldTransforms.filter(transform => fieldMask.covers(transform.field));\r\n    }\r\n    else {\r\n        fieldMask = null;\r\n        fieldTransforms = context.fieldTransforms;\r\n    }\r\n    return new ParsedSetData(new ObjectValue(updateData), fieldMask, fieldTransforms);\r\n}\r\nclass DeleteFieldValueImpl extends FieldValue {\r\n    _toFieldTransform(context) {\r\n        if (context.dataSource === 2 /* UserDataSource.MergeSet */) {\r\n            // No transform to add for a delete, but we need to add it to our\r\n            // fieldMask so it gets deleted.\r\n            context.fieldMask.push(context.path);\r\n        }\r\n        else if (context.dataSource === 1 /* UserDataSource.Update */) {\r\n            throw context.createError(`${this._methodName}() can only appear at the top level ` +\r\n                'of your update data');\r\n        }\r\n        else {\r\n            // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\r\n            throw context.createError(`${this._methodName}() cannot be used with set() unless you pass ` +\r\n                '{merge:true}');\r\n        }\r\n        return null;\r\n    }\r\n    isEqual(other) {\r\n        return other instanceof DeleteFieldValueImpl;\r\n    }\r\n}\r\n/**\r\n * Creates a child context for parsing SerializableFieldValues.\r\n *\r\n * This is different than calling `ParseContext.contextWith` because it keeps\r\n * the fieldTransforms and fieldMask separate.\r\n *\r\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\r\n * Although these values are used with writes, any elements in these FieldValues\r\n * are not considered writes since they cannot contain any FieldValue sentinels,\r\n * etc.\r\n *\r\n * @param fieldValue - The sentinel FieldValue for which to create a child\r\n *     context.\r\n * @param context - The parent context.\r\n * @param arrayElement - Whether or not the FieldValue has an array.\r\n */\r\nfunction createSentinelChildContext(fieldValue, context, arrayElement) {\r\n    return new ParseContextImpl({\r\n        dataSource: 3 /* UserDataSource.Argument */,\r\n        targetDoc: context.settings.targetDoc,\r\n        methodName: fieldValue._methodName,\r\n        arrayElement\r\n    }, context.databaseId, context.serializer, context.ignoreUndefinedProperties);\r\n}\r\nclass ServerTimestampFieldValueImpl extends FieldValue {\r\n    _toFieldTransform(context) {\r\n        return new FieldTransform(context.path, new ServerTimestampTransform());\r\n    }\r\n    isEqual(other) {\r\n        return other instanceof ServerTimestampFieldValueImpl;\r\n    }\r\n}\r\nclass ArrayUnionFieldValueImpl extends FieldValue {\r\n    constructor(methodName, _elements) {\r\n        super(methodName);\r\n        this._elements = _elements;\r\n    }\r\n    _toFieldTransform(context) {\r\n        const parseContext = createSentinelChildContext(this, context, \r\n        /*array=*/ true);\r\n        const parsedElements = this._elements.map(element => parseData(element, parseContext));\r\n        const arrayUnion = new ArrayUnionTransformOperation(parsedElements);\r\n        return new FieldTransform(context.path, arrayUnion);\r\n    }\r\n    isEqual(other) {\r\n        // TODO(mrschmidt): Implement isEquals\r\n        return this === other;\r\n    }\r\n}\r\nclass ArrayRemoveFieldValueImpl extends FieldValue {\r\n    constructor(methodName, _elements) {\r\n        super(methodName);\r\n        this._elements = _elements;\r\n    }\r\n    _toFieldTransform(context) {\r\n        const parseContext = createSentinelChildContext(this, context, \r\n        /*array=*/ true);\r\n        const parsedElements = this._elements.map(element => parseData(element, parseContext));\r\n        const arrayUnion = new ArrayRemoveTransformOperation(parsedElements);\r\n        return new FieldTransform(context.path, arrayUnion);\r\n    }\r\n    isEqual(other) {\r\n        // TODO(mrschmidt): Implement isEquals\r\n        return this === other;\r\n    }\r\n}\r\nclass NumericIncrementFieldValueImpl extends FieldValue {\r\n    constructor(methodName, _operand) {\r\n        super(methodName);\r\n        this._operand = _operand;\r\n    }\r\n    _toFieldTransform(context) {\r\n        const numericIncrement = new NumericIncrementTransformOperation(context.serializer, toNumber(context.serializer, this._operand));\r\n        return new FieldTransform(context.path, numericIncrement);\r\n    }\r\n    isEqual(other) {\r\n        // TODO(mrschmidt): Implement isEquals\r\n        return this === other;\r\n    }\r\n}\r\n/** Parse update data from an update() call. */\r\nfunction parseUpdateData(userDataReader, methodName, targetDoc, input) {\r\n    const context = userDataReader.createContext(1 /* UserDataSource.Update */, methodName, targetDoc);\r\n    validatePlainObject('Data must be an object, but it was:', context, input);\r\n    const fieldMaskPaths = [];\r\n    const updateData = ObjectValue.empty();\r\n    forEach(input, (key, value) => {\r\n        const path = fieldPathFromDotSeparatedString(methodName, key, targetDoc);\r\n        // For Compat types, we have to \"extract\" the underlying types before\r\n        // performing validation.\r\n        value = getModularInstance(value);\r\n        const childContext = context.childContextForFieldPath(path);\r\n        if (value instanceof DeleteFieldValueImpl) {\r\n            // Add it to the field mask, but don't add anything to updateData.\r\n            fieldMaskPaths.push(path);\r\n        }\r\n        else {\r\n            const parsedValue = parseData(value, childContext);\r\n            if (parsedValue != null) {\r\n                fieldMaskPaths.push(path);\r\n                updateData.set(path, parsedValue);\r\n            }\r\n        }\r\n    });\r\n    const mask = new FieldMask(fieldMaskPaths);\r\n    return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\r\n}\r\n/** Parse update data from a list of field/value arguments. */\r\nfunction parseUpdateVarargs(userDataReader, methodName, targetDoc, field, value, moreFieldsAndValues) {\r\n    const context = userDataReader.createContext(1 /* UserDataSource.Update */, methodName, targetDoc);\r\n    const keys = [fieldPathFromArgument$1(methodName, field, targetDoc)];\r\n    const values = [value];\r\n    if (moreFieldsAndValues.length % 2 !== 0) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Function ${methodName}() needs to be called with an even number ` +\r\n            'of arguments that alternate between field names and values.');\r\n    }\r\n    for (let i = 0; i < moreFieldsAndValues.length; i += 2) {\r\n        keys.push(fieldPathFromArgument$1(methodName, moreFieldsAndValues[i]));\r\n        values.push(moreFieldsAndValues[i + 1]);\r\n    }\r\n    const fieldMaskPaths = [];\r\n    const updateData = ObjectValue.empty();\r\n    // We iterate in reverse order to pick the last value for a field if the\r\n    // user specified the field multiple times.\r\n    for (let i = keys.length - 1; i >= 0; --i) {\r\n        if (!fieldMaskContains(fieldMaskPaths, keys[i])) {\r\n            const path = keys[i];\r\n            let value = values[i];\r\n            // For Compat types, we have to \"extract\" the underlying types before\r\n            // performing validation.\r\n            value = getModularInstance(value);\r\n            const childContext = context.childContextForFieldPath(path);\r\n            if (value instanceof DeleteFieldValueImpl) {\r\n                // Add it to the field mask, but don't add anything to updateData.\r\n                fieldMaskPaths.push(path);\r\n            }\r\n            else {\r\n                const parsedValue = parseData(value, childContext);\r\n                if (parsedValue != null) {\r\n                    fieldMaskPaths.push(path);\r\n                    updateData.set(path, parsedValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const mask = new FieldMask(fieldMaskPaths);\r\n    return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\r\n}\r\n/**\r\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\r\n * bound).\r\n *\r\n * @param allowArrays - Whether the query value is an array that may directly\r\n * contain additional arrays (e.g. the operand of an `in` query).\r\n */\r\nfunction parseQueryValue(userDataReader, methodName, input, allowArrays = false) {\r\n    const context = userDataReader.createContext(allowArrays ? 4 /* UserDataSource.ArrayArgument */ : 3 /* UserDataSource.Argument */, methodName);\r\n    const parsed = parseData(input, context);\r\n    return parsed;\r\n}\r\n/**\r\n * Parses user data to Protobuf Values.\r\n *\r\n * @param input - Data to be parsed.\r\n * @param context - A context object representing the current path being parsed,\r\n * the source of the data being parsed, etc.\r\n * @returns The parsed value, or null if the value was a FieldValue sentinel\r\n * that should not be included in the resulting parsed data.\r\n */\r\nfunction parseData(input, context) {\r\n    // Unwrap the API type from the Compat SDK. This will return the API type\r\n    // from firestore-exp.\r\n    input = getModularInstance(input);\r\n    if (looksLikeJsonObject(input)) {\r\n        validatePlainObject('Unsupported field value:', context, input);\r\n        return parseObject(input, context);\r\n    }\r\n    else if (input instanceof FieldValue) {\r\n        // FieldValues usually parse into transforms (except deleteField())\r\n        // in which case we do not want to include this field in our parsed data\r\n        // (as doing so will overwrite the field directly prior to the transform\r\n        // trying to transform it). So we don't add this location to\r\n        // context.fieldMask and we return null as our parsing result.\r\n        parseSentinelFieldValue(input, context);\r\n        return null;\r\n    }\r\n    else if (input === undefined && context.ignoreUndefinedProperties) {\r\n        // If the input is undefined it can never participate in the fieldMask, so\r\n        // don't handle this below. If `ignoreUndefinedProperties` is false,\r\n        // `parseScalarValue` will reject an undefined value.\r\n        return null;\r\n    }\r\n    else {\r\n        // If context.path is null we are inside an array and we don't support\r\n        // field mask paths more granular than the top-level array.\r\n        if (context.path) {\r\n            context.fieldMask.push(context.path);\r\n        }\r\n        if (input instanceof Array) {\r\n            // TODO(b/34871131): Include the path containing the array in the error\r\n            // message.\r\n            // In the case of IN queries, the parsed data is an array (representing\r\n            // the set of values to be included for the IN query) that may directly\r\n            // contain additional arrays (each representing an individual field\r\n            // value), so we disable this validation.\r\n            if (context.settings.arrayElement &&\r\n                context.dataSource !== 4 /* UserDataSource.ArrayArgument */) {\r\n                throw context.createError('Nested arrays are not supported');\r\n            }\r\n            return parseArray(input, context);\r\n        }\r\n        else {\r\n            return parseScalarValue(input, context);\r\n        }\r\n    }\r\n}\r\nfunction parseObject(obj, context) {\r\n    const fields = {};\r\n    if (isEmpty(obj)) {\r\n        // If we encounter an empty object, we explicitly add it to the update\r\n        // mask to ensure that the server creates a map entry.\r\n        if (context.path && context.path.length > 0) {\r\n            context.fieldMask.push(context.path);\r\n        }\r\n    }\r\n    else {\r\n        forEach(obj, (key, val) => {\r\n            const parsedValue = parseData(val, context.childContextForField(key));\r\n            if (parsedValue != null) {\r\n                fields[key] = parsedValue;\r\n            }\r\n        });\r\n    }\r\n    return { mapValue: { fields } };\r\n}\r\nfunction parseArray(array, context) {\r\n    const values = [];\r\n    let entryIndex = 0;\r\n    for (const entry of array) {\r\n        let parsedEntry = parseData(entry, context.childContextForArray(entryIndex));\r\n        if (parsedEntry == null) {\r\n            // Just include nulls in the array for fields being replaced with a\r\n            // sentinel.\r\n            parsedEntry = { nullValue: 'NULL_VALUE' };\r\n        }\r\n        values.push(parsedEntry);\r\n        entryIndex++;\r\n    }\r\n    return { arrayValue: { values } };\r\n}\r\n/**\r\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\r\n * context.fieldTransforms.\r\n */\r\nfunction parseSentinelFieldValue(value, context) {\r\n    // Sentinels are only supported with writes, and not within arrays.\r\n    if (!isWrite(context.dataSource)) {\r\n        throw context.createError(`${value._methodName}() can only be used with update() and set()`);\r\n    }\r\n    if (!context.path) {\r\n        throw context.createError(`${value._methodName}() is not currently supported inside arrays`);\r\n    }\r\n    const fieldTransform = value._toFieldTransform(context);\r\n    if (fieldTransform) {\r\n        context.fieldTransforms.push(fieldTransform);\r\n    }\r\n}\r\n/**\r\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\r\n *\r\n * @returns The parsed value\r\n */\r\nfunction parseScalarValue(value, context) {\r\n    value = getModularInstance(value);\r\n    if (value === null) {\r\n        return { nullValue: 'NULL_VALUE' };\r\n    }\r\n    else if (typeof value === 'number') {\r\n        return toNumber(context.serializer, value);\r\n    }\r\n    else if (typeof value === 'boolean') {\r\n        return { booleanValue: value };\r\n    }\r\n    else if (typeof value === 'string') {\r\n        return { stringValue: value };\r\n    }\r\n    else if (value instanceof Date) {\r\n        const timestamp = Timestamp.fromDate(value);\r\n        return {\r\n            timestampValue: toTimestamp(context.serializer, timestamp)\r\n        };\r\n    }\r\n    else if (value instanceof Timestamp) {\r\n        // Firestore backend truncates precision down to microseconds. To ensure\r\n        // offline mode works the same with regards to truncation, perform the\r\n        // truncation immediately without waiting for the backend to do that.\r\n        const timestamp = new Timestamp(value.seconds, Math.floor(value.nanoseconds / 1000) * 1000);\r\n        return {\r\n            timestampValue: toTimestamp(context.serializer, timestamp)\r\n        };\r\n    }\r\n    else if (value instanceof GeoPoint) {\r\n        return {\r\n            geoPointValue: {\r\n                latitude: value.latitude,\r\n                longitude: value.longitude\r\n            }\r\n        };\r\n    }\r\n    else if (value instanceof Bytes) {\r\n        return { bytesValue: toBytes(context.serializer, value._byteString) };\r\n    }\r\n    else if (value instanceof DocumentReference) {\r\n        const thisDb = context.databaseId;\r\n        const otherDb = value.firestore._databaseId;\r\n        if (!otherDb.isEqual(thisDb)) {\r\n            throw context.createError('Document reference is for database ' +\r\n                `${otherDb.projectId}/${otherDb.database} but should be ` +\r\n                `for database ${thisDb.projectId}/${thisDb.database}`);\r\n        }\r\n        return {\r\n            referenceValue: toResourceName(value.firestore._databaseId || context.databaseId, value._key.path)\r\n        };\r\n    }\r\n    else {\r\n        throw context.createError(`Unsupported field value: ${valueDescription(value)}`);\r\n    }\r\n}\r\n/**\r\n * Checks whether an object looks like a JSON object that should be converted\r\n * into a struct. Normal class/prototype instances are considered to look like\r\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\r\n * GeoPoints, etc. are not considered to look like JSON objects since they map\r\n * to specific FieldValue types other than ObjectValue.\r\n */\r\nfunction looksLikeJsonObject(input) {\r\n    return (typeof input === 'object' &&\r\n        input !== null &&\r\n        !(input instanceof Array) &&\r\n        !(input instanceof Date) &&\r\n        !(input instanceof Timestamp) &&\r\n        !(input instanceof GeoPoint) &&\r\n        !(input instanceof Bytes) &&\r\n        !(input instanceof DocumentReference) &&\r\n        !(input instanceof FieldValue));\r\n}\r\nfunction validatePlainObject(message, context, input) {\r\n    if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\r\n        const description = valueDescription(input);\r\n        if (description === 'an object') {\r\n            // Massage the error if it was an object.\r\n            throw context.createError(message + ' a custom object');\r\n        }\r\n        else {\r\n            throw context.createError(message + ' ' + description);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\r\n */\r\nfunction fieldPathFromArgument$1(methodName, path, targetDoc) {\r\n    // If required, replace the FieldPath Compat class with with the firestore-exp\r\n    // FieldPath.\r\n    path = getModularInstance(path);\r\n    if (path instanceof FieldPath) {\r\n        return path._internalPath;\r\n    }\r\n    else if (typeof path === 'string') {\r\n        return fieldPathFromDotSeparatedString(methodName, path);\r\n    }\r\n    else {\r\n        const message = 'Field path arguments must be of type string or ';\r\n        throw createError(message, methodName, \r\n        /* hasConverter= */ false, \r\n        /* path= */ undefined, targetDoc);\r\n    }\r\n}\r\n/**\r\n * Matches any characters in a field path string that are reserved.\r\n */\r\nconst FIELD_PATH_RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\r\n/**\r\n * Wraps fromDotSeparatedString with an error message about the method that\r\n * was thrown.\r\n * @param methodName - The publicly visible method name\r\n * @param path - The dot-separated string form of a field path which will be\r\n * split on dots.\r\n * @param targetDoc - The document against which the field path will be\r\n * evaluated.\r\n */\r\nfunction fieldPathFromDotSeparatedString(methodName, path, targetDoc) {\r\n    const found = path.search(FIELD_PATH_RESERVED);\r\n    if (found >= 0) {\r\n        throw createError(`Invalid field path (${path}). Paths must not contain ` +\r\n            `'~', '*', '/', '[', or ']'`, methodName, \r\n        /* hasConverter= */ false, \r\n        /* path= */ undefined, targetDoc);\r\n    }\r\n    try {\r\n        return new FieldPath(...path.split('.'))._internalPath;\r\n    }\r\n    catch (e) {\r\n        throw createError(`Invalid field path (${path}). Paths must not be empty, ` +\r\n            `begin with '.', end with '.', or contain '..'`, methodName, \r\n        /* hasConverter= */ false, \r\n        /* path= */ undefined, targetDoc);\r\n    }\r\n}\r\nfunction createError(reason, methodName, hasConverter, path, targetDoc) {\r\n    const hasPath = path && !path.isEmpty();\r\n    const hasDocument = targetDoc !== undefined;\r\n    let message = `Function ${methodName}() called with invalid data`;\r\n    if (hasConverter) {\r\n        message += ' (via `toFirestore()`)';\r\n    }\r\n    message += '. ';\r\n    let description = '';\r\n    if (hasPath || hasDocument) {\r\n        description += ' (found';\r\n        if (hasPath) {\r\n            description += ` in field ${path}`;\r\n        }\r\n        if (hasDocument) {\r\n            description += ` in document ${targetDoc}`;\r\n        }\r\n        description += ')';\r\n    }\r\n    return new FirestoreError(Code.INVALID_ARGUMENT, message + reason + description);\r\n}\r\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\r\nfunction fieldMaskContains(haystack, needle) {\r\n    return haystack.some(v => v.isEqual(needle));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A `DocumentSnapshot` contains data read from a document in your Firestore\r\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\r\n * get a specific field.\r\n *\r\n * For a `DocumentSnapshot` that points to a non-existing document, any data\r\n * access will return 'undefined'. You can use the `exists()` method to\r\n * explicitly verify a document's existence.\r\n */\r\nclass DocumentSnapshot$1 {\r\n    // Note: This class is stripped down version of the DocumentSnapshot in\r\n    // the legacy SDK. The changes are:\r\n    // - No support for SnapshotMetadata.\r\n    // - No support for SnapshotOptions.\r\n    /** @hideconstructor protected */\r\n    constructor(_firestore, _userDataWriter, _key, _document, _converter) {\r\n        this._firestore = _firestore;\r\n        this._userDataWriter = _userDataWriter;\r\n        this._key = _key;\r\n        this._document = _document;\r\n        this._converter = _converter;\r\n    }\r\n    /** Property of the `DocumentSnapshot` that provides the document's ID. */\r\n    get id() {\r\n        return this._key.path.lastSegment();\r\n    }\r\n    /**\r\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\r\n     */\r\n    get ref() {\r\n        return new DocumentReference(this._firestore, this._converter, this._key);\r\n    }\r\n    /**\r\n     * Signals whether or not the document at the snapshot's location exists.\r\n     *\r\n     * @returns true if the document exists.\r\n     */\r\n    exists() {\r\n        return this._document !== null;\r\n    }\r\n    /**\r\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\r\n     * the document doesn't exist.\r\n     *\r\n     * @returns An `Object` containing all fields in the document or `undefined`\r\n     * if the document doesn't exist.\r\n     */\r\n    data() {\r\n        if (!this._document) {\r\n            return undefined;\r\n        }\r\n        else if (this._converter) {\r\n            // We only want to use the converter and create a new DocumentSnapshot\r\n            // if a converter has been provided.\r\n            const snapshot = new QueryDocumentSnapshot$1(this._firestore, this._userDataWriter, this._key, this._document, \r\n            /* converter= */ null);\r\n            return this._converter.fromFirestore(snapshot);\r\n        }\r\n        else {\r\n            return this._userDataWriter.convertValue(this._document.data.value);\r\n        }\r\n    }\r\n    /**\r\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\r\n     * document or field doesn't exist.\r\n     *\r\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\r\n     * field.\r\n     * @returns The data at the specified field location or undefined if no such\r\n     * field exists in the document.\r\n     */\r\n    // We are using `any` here to avoid an explicit cast by our users.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    get(fieldPath) {\r\n        if (this._document) {\r\n            const value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\r\n            if (value !== null) {\r\n                return this._userDataWriter.convertValue(value);\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * A `QueryDocumentSnapshot` contains data read from a document in your\r\n * Firestore database as part of a query. The document is guaranteed to exist\r\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\r\n * specific field.\r\n *\r\n * A `QueryDocumentSnapshot` offers the same API surface as a\r\n * `DocumentSnapshot`. Since query results contain only existing documents, the\r\n * `exists` property will always be true and `data()` will never return\r\n * 'undefined'.\r\n */\r\nclass QueryDocumentSnapshot$1 extends DocumentSnapshot$1 {\r\n    /**\r\n     * Retrieves all fields in the document as an `Object`.\r\n     *\r\n     * @override\r\n     * @returns An `Object` containing all fields in the document.\r\n     */\r\n    data() {\r\n        return super.data();\r\n    }\r\n}\r\n/**\r\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\r\n */\r\nfunction fieldPathFromArgument(methodName, arg) {\r\n    if (typeof arg === 'string') {\r\n        return fieldPathFromDotSeparatedString(methodName, arg);\r\n    }\r\n    else if (arg instanceof FieldPath) {\r\n        return arg._internalPath;\r\n    }\r\n    else {\r\n        return arg._delegate._internalPath;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction validateHasExplicitOrderByForLimitToLast(query) {\r\n    if (query.limitType === \"L\" /* LimitType.Last */ &&\r\n        query.explicitOrderBy.length === 0) {\r\n        throw new FirestoreError(Code.UNIMPLEMENTED, 'limitToLast() queries require specifying at least one orderBy() clause');\r\n    }\r\n}\r\n/**\r\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\r\n * to a Firestore query.\r\n */\r\nclass AppliableConstraint {\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\r\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\r\n * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and\r\n * can then be passed to {@link (query:1)} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint extends AppliableConstraint {\r\n}\r\nfunction query(query, queryConstraint, ...additionalQueryConstraints) {\r\n    let queryConstraints = [];\r\n    if (queryConstraint instanceof AppliableConstraint) {\r\n        queryConstraints.push(queryConstraint);\r\n    }\r\n    queryConstraints = queryConstraints.concat(additionalQueryConstraints);\r\n    validateQueryConstraintArray(queryConstraints);\r\n    for (const constraint of queryConstraints) {\r\n        query = constraint._apply(query);\r\n    }\r\n    return query;\r\n}\r\n/**\r\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\r\n * a Firestore query by filtering on one or more document fields.\r\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\r\n * be passed to {@link (query:1)} to create a new query instance that also contains\r\n * this `QueryFieldFilterConstraint`.\r\n */\r\nclass QueryFieldFilterConstraint extends QueryConstraint {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(_field, _op, _value) {\r\n        super();\r\n        this._field = _field;\r\n        this._op = _op;\r\n        this._value = _value;\r\n        /** The type of this query constraint */\r\n        this.type = 'where';\r\n    }\r\n    static _create(_field, _op, _value) {\r\n        return new QueryFieldFilterConstraint(_field, _op, _value);\r\n    }\r\n    _apply(query) {\r\n        const filter = this._parse(query);\r\n        validateNewFieldFilter(query._query, filter);\r\n        return new Query(query.firestore, query.converter, queryWithAddedFilter(query._query, filter));\r\n    }\r\n    _parse(query) {\r\n        const reader = newUserDataReader(query.firestore);\r\n        const filter = newQueryFilter(query._query, 'where', reader, query.firestore._databaseId, this._field, this._op, this._value);\r\n        return filter;\r\n    }\r\n}\r\n/**\r\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\r\n * must contain the specified field and that the value should satisfy the\r\n * relation constraint provided.\r\n *\r\n * @param fieldPath - The path to compare\r\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\r\n *   \"&lt;=\", \"!=\").\r\n * @param value - The value for comparison\r\n * @returns The created {@link QueryFieldFilterConstraint}.\r\n */\r\nfunction where(fieldPath, opStr, value) {\r\n    const op = opStr;\r\n    const field = fieldPathFromArgument('where', fieldPath);\r\n    return QueryFieldFilterConstraint._create(field, op, value);\r\n}\r\n/**\r\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\r\n * returned by a Firestore query by performing the logical OR or AND of multiple\r\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\r\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\r\n * {@link and} and can then be passed to {@link (query:1)} to create a new query\r\n * instance that also contains the `QueryCompositeFilterConstraint`.\r\n */\r\nclass QueryCompositeFilterConstraint extends AppliableConstraint {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(\r\n    /** The type of this query constraint */\r\n    type, _queryConstraints) {\r\n        super();\r\n        this.type = type;\r\n        this._queryConstraints = _queryConstraints;\r\n    }\r\n    static _create(type, _queryConstraints) {\r\n        return new QueryCompositeFilterConstraint(type, _queryConstraints);\r\n    }\r\n    _parse(query) {\r\n        const parsedFilters = this._queryConstraints\r\n            .map(queryConstraint => {\r\n            return queryConstraint._parse(query);\r\n        })\r\n            .filter(parsedFilter => parsedFilter.getFilters().length > 0);\r\n        if (parsedFilters.length === 1) {\r\n            return parsedFilters[0];\r\n        }\r\n        return CompositeFilter.create(parsedFilters, this._getOperator());\r\n    }\r\n    _apply(query) {\r\n        const parsedFilter = this._parse(query);\r\n        if (parsedFilter.getFilters().length === 0) {\r\n            // Return the existing query if not adding any more filters (e.g. an empty\r\n            // composite filter).\r\n            return query;\r\n        }\r\n        validateNewFilter(query._query, parsedFilter);\r\n        return new Query(query.firestore, query.converter, queryWithAddedFilter(query._query, parsedFilter));\r\n    }\r\n    _getQueryConstraints() {\r\n        return this._queryConstraints;\r\n    }\r\n    _getOperator() {\r\n        return this.type === 'and' ? \"and\" /* CompositeOperator.AND */ : \"or\" /* CompositeOperator.OR */;\r\n    }\r\n}\r\n/**\r\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\r\n * the given filter constraints. A disjunction filter includes a document if it\r\n * satisfies any of the given filters.\r\n *\r\n * @param queryConstraints - Optional. The list of\r\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\r\n * created with calls to {@link where}, {@link or}, or {@link and}.\r\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\r\n */\r\nfunction or(...queryConstraints) {\r\n    // Only support QueryFilterConstraints\r\n    queryConstraints.forEach(queryConstraint => validateQueryFilterConstraint('or', queryConstraint));\r\n    return QueryCompositeFilterConstraint._create(\"or\" /* CompositeOperator.OR */, queryConstraints);\r\n}\r\n/**\r\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\r\n * the given filter constraints. A conjunction filter includes a document if it\r\n * satisfies all of the given filters.\r\n *\r\n * @param queryConstraints - Optional. The list of\r\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\r\n * created with calls to {@link where}, {@link or}, or {@link and}.\r\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\r\n */\r\nfunction and(...queryConstraints) {\r\n    // Only support QueryFilterConstraints\r\n    queryConstraints.forEach(queryConstraint => validateQueryFilterConstraint('and', queryConstraint));\r\n    return QueryCompositeFilterConstraint._create(\"and\" /* CompositeOperator.AND */, queryConstraints);\r\n}\r\n/**\r\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\r\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\r\n * {@link orderBy} and can then be passed to {@link (query:1)} to create a new query\r\n * instance that also contains this `QueryOrderByConstraint`.\r\n *\r\n * Note: Documents that do not contain the orderBy field will not be present in\r\n * the query result.\r\n */\r\nclass QueryOrderByConstraint extends QueryConstraint {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(_field, _direction) {\r\n        super();\r\n        this._field = _field;\r\n        this._direction = _direction;\r\n        /** The type of this query constraint */\r\n        this.type = 'orderBy';\r\n    }\r\n    static _create(_field, _direction) {\r\n        return new QueryOrderByConstraint(_field, _direction);\r\n    }\r\n    _apply(query) {\r\n        const orderBy = newQueryOrderBy(query._query, this._field, this._direction);\r\n        return new Query(query.firestore, query.converter, queryWithAddedOrderBy(query._query, orderBy));\r\n    }\r\n}\r\n/**\r\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\r\n * specified field, optionally in descending order instead of ascending.\r\n *\r\n * Note: Documents that do not contain the specified field will not be present\r\n * in the query result.\r\n *\r\n * @param fieldPath - The field to sort by.\r\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\r\n * not specified, order will be ascending.\r\n * @returns The created {@link QueryOrderByConstraint}.\r\n */\r\nfunction orderBy(fieldPath, directionStr = 'asc') {\r\n    const direction = directionStr;\r\n    const path = fieldPathFromArgument('orderBy', fieldPath);\r\n    return QueryOrderByConstraint._create(path, direction);\r\n}\r\n/**\r\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\r\n * a Firestore query.\r\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\r\n * {@link limitToLast} and can then be passed to {@link (query:1)} to create a new\r\n * query instance that also contains this `QueryLimitConstraint`.\r\n */\r\nclass QueryLimitConstraint extends QueryConstraint {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(\r\n    /** The type of this query constraint */\r\n    type, _limit, _limitType) {\r\n        super();\r\n        this.type = type;\r\n        this._limit = _limit;\r\n        this._limitType = _limitType;\r\n    }\r\n    static _create(type, _limit, _limitType) {\r\n        return new QueryLimitConstraint(type, _limit, _limitType);\r\n    }\r\n    _apply(query) {\r\n        return new Query(query.firestore, query.converter, queryWithLimit(query._query, this._limit, this._limitType));\r\n    }\r\n}\r\n/**\r\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\r\n * documents.\r\n *\r\n * @param limit - The maximum number of items to return.\r\n * @returns The created {@link QueryLimitConstraint}.\r\n */\r\nfunction limit(limit) {\r\n    validatePositiveNumber('limit', limit);\r\n    return QueryLimitConstraint._create('limit', limit, \"F\" /* LimitType.First */);\r\n}\r\n/**\r\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\r\n * documents.\r\n *\r\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\r\n * otherwise an exception will be thrown during execution.\r\n *\r\n * @param limit - The maximum number of items to return.\r\n * @returns The created {@link QueryLimitConstraint}.\r\n */\r\nfunction limitToLast(limit) {\r\n    validatePositiveNumber('limitToLast', limit);\r\n    return QueryLimitConstraint._create('limitToLast', limit, \"L\" /* LimitType.Last */);\r\n}\r\n/**\r\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\r\n * result set returned by a Firestore query.\r\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\r\n * {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a\r\n * new query instance that also contains this `QueryStartAtConstraint`.\r\n */\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(\r\n    /** The type of this query constraint */\r\n    type, _docOrFields, _inclusive) {\r\n        super();\r\n        this.type = type;\r\n        this._docOrFields = _docOrFields;\r\n        this._inclusive = _inclusive;\r\n    }\r\n    static _create(type, _docOrFields, _inclusive) {\r\n        return new QueryStartAtConstraint(type, _docOrFields, _inclusive);\r\n    }\r\n    _apply(query) {\r\n        const bound = newQueryBoundFromDocOrFields(query, this.type, this._docOrFields, this._inclusive);\r\n        return new Query(query.firestore, query.converter, queryWithStartAt(query._query, bound));\r\n    }\r\n}\r\nfunction startAt(...docOrFields) {\r\n    return QueryStartAtConstraint._create('startAt', docOrFields, \r\n    /*inclusive=*/ true);\r\n}\r\nfunction startAfter(...docOrFields) {\r\n    return QueryStartAtConstraint._create('startAfter', docOrFields, \r\n    /*inclusive=*/ false);\r\n}\r\n/**\r\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\r\n * result set returned by a Firestore query.\r\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\r\n * {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new\r\n * query instance that also contains this `QueryEndAtConstraint`.\r\n */\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(\r\n    /** The type of this query constraint */\r\n    type, _docOrFields, _inclusive) {\r\n        super();\r\n        this.type = type;\r\n        this._docOrFields = _docOrFields;\r\n        this._inclusive = _inclusive;\r\n    }\r\n    static _create(type, _docOrFields, _inclusive) {\r\n        return new QueryEndAtConstraint(type, _docOrFields, _inclusive);\r\n    }\r\n    _apply(query) {\r\n        const bound = newQueryBoundFromDocOrFields(query, this.type, this._docOrFields, this._inclusive);\r\n        return new Query(query.firestore, query.converter, queryWithEndAt(query._query, bound));\r\n    }\r\n}\r\nfunction endBefore(...docOrFields) {\r\n    return QueryEndAtConstraint._create('endBefore', docOrFields, \r\n    /*inclusive=*/ false);\r\n}\r\nfunction endAt(...docOrFields) {\r\n    return QueryEndAtConstraint._create('endAt', docOrFields, \r\n    /*inclusive=*/ true);\r\n}\r\n/** Helper function to create a bound from a document or fields */\r\nfunction newQueryBoundFromDocOrFields(query, methodName, docOrFields, inclusive) {\r\n    docOrFields[0] = getModularInstance(docOrFields[0]);\r\n    if (docOrFields[0] instanceof DocumentSnapshot$1) {\r\n        return newQueryBoundFromDocument(query._query, query.firestore._databaseId, methodName, docOrFields[0]._document, inclusive);\r\n    }\r\n    else {\r\n        const reader = newUserDataReader(query.firestore);\r\n        return newQueryBoundFromFields(query._query, query.firestore._databaseId, reader, methodName, docOrFields, inclusive);\r\n    }\r\n}\r\nfunction newQueryFilter(query, methodName, dataReader, databaseId, fieldPath, op, value) {\r\n    let fieldValue;\r\n    if (fieldPath.isKeyField()) {\r\n        if (op === \"array-contains\" /* Operator.ARRAY_CONTAINS */ || op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid Query. You can't perform '${op}' queries on documentId().`);\r\n        }\r\n        else if (op === \"in\" /* Operator.IN */ || op === \"not-in\" /* Operator.NOT_IN */) {\r\n            validateDisjunctiveFilterElements(value, op);\r\n            const referenceList = [];\r\n            for (const arrayValue of value) {\r\n                referenceList.push(parseDocumentIdValue(databaseId, query, arrayValue));\r\n            }\r\n            fieldValue = { arrayValue: { values: referenceList } };\r\n        }\r\n        else {\r\n            fieldValue = parseDocumentIdValue(databaseId, query, value);\r\n        }\r\n    }\r\n    else {\r\n        if (op === \"in\" /* Operator.IN */ ||\r\n            op === \"not-in\" /* Operator.NOT_IN */ ||\r\n            op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */) {\r\n            validateDisjunctiveFilterElements(value, op);\r\n        }\r\n        fieldValue = parseQueryValue(dataReader, methodName, value, \r\n        /* allowArrays= */ op === \"in\" /* Operator.IN */ || op === \"not-in\" /* Operator.NOT_IN */);\r\n    }\r\n    const filter = FieldFilter.create(fieldPath, op, fieldValue);\r\n    return filter;\r\n}\r\nfunction newQueryOrderBy(query, fieldPath, direction) {\r\n    if (query.startAt !== null) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call startAt() or startAfter() before ' +\r\n            'calling orderBy().');\r\n    }\r\n    if (query.endAt !== null) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call endAt() or endBefore() before ' +\r\n            'calling orderBy().');\r\n    }\r\n    const orderBy = new OrderBy(fieldPath, direction);\r\n    validateNewOrderBy(query, orderBy);\r\n    return orderBy;\r\n}\r\n/**\r\n * Create a `Bound` from a query and a document.\r\n *\r\n * Note that the `Bound` will always include the key of the document\r\n * and so only the provided document will compare equal to the returned\r\n * position.\r\n *\r\n * Will throw if the document does not contain all fields of the order by\r\n * of the query or if any of the fields in the order by are an uncommitted\r\n * server timestamp.\r\n */\r\nfunction newQueryBoundFromDocument(query, databaseId, methodName, doc, inclusive) {\r\n    if (!doc) {\r\n        throw new FirestoreError(Code.NOT_FOUND, `Can't use a DocumentSnapshot that doesn't exist for ` +\r\n            `${methodName}().`);\r\n    }\r\n    const components = [];\r\n    // Because people expect to continue/end a query at the exact document\r\n    // provided, we need to use the implicit sort order rather than the explicit\r\n    // sort order, because it's guaranteed to contain the document key. That way\r\n    // the position becomes unambiguous and the query continues/ends exactly at\r\n    // the provided document. Without the key (by using the explicit sort\r\n    // orders), multiple documents could match the position, yielding duplicate\r\n    // results.\r\n    for (const orderBy of queryOrderBy(query)) {\r\n        if (orderBy.field.isKeyField()) {\r\n            components.push(refValue(databaseId, doc.key));\r\n        }\r\n        else {\r\n            const value = doc.data.field(orderBy.field);\r\n            if (isServerTimestamp(value)) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a ' +\r\n                    'document for which the field \"' +\r\n                    orderBy.field +\r\n                    '\" is an uncommitted server timestamp. (Since the value of ' +\r\n                    'this field is unknown, you cannot start/end a query with it.)');\r\n            }\r\n            else if (value !== null) {\r\n                components.push(value);\r\n            }\r\n            else {\r\n                const field = orderBy.field.canonicalString();\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a ` +\r\n                    `document for which the field '${field}' (used as the ` +\r\n                    `orderBy) does not exist.`);\r\n            }\r\n        }\r\n    }\r\n    return new Bound(components, inclusive);\r\n}\r\n/**\r\n * Converts a list of field values to a `Bound` for the given query.\r\n */\r\nfunction newQueryBoundFromFields(query, databaseId, dataReader, methodName, values, inclusive) {\r\n    // Use explicit order by's because it has to match the query the user made\r\n    const orderBy = query.explicitOrderBy;\r\n    if (values.length > orderBy.length) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Too many arguments provided to ${methodName}(). ` +\r\n            `The number of arguments must be less than or equal to the ` +\r\n            `number of orderBy() clauses`);\r\n    }\r\n    const components = [];\r\n    for (let i = 0; i < values.length; i++) {\r\n        const rawValue = values[i];\r\n        const orderByComponent = orderBy[i];\r\n        if (orderByComponent.field.isKeyField()) {\r\n            if (typeof rawValue !== 'string') {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ` +\r\n                    `${methodName}(), but got a ${typeof rawValue}`);\r\n            }\r\n            if (!isCollectionGroupQuery(query) && rawValue.indexOf('/') !== -1) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by documentId(), ` +\r\n                    `the value passed to ${methodName}() must be a plain document ID, but ` +\r\n                    `'${rawValue}' contains a slash.`);\r\n            }\r\n            const path = query.path.child(ResourcePath.fromString(rawValue));\r\n            if (!DocumentKey.isDocumentKey(path)) {\r\n                throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by ` +\r\n                    `documentId(), the value passed to ${methodName}() must result in a ` +\r\n                    `valid document path, but '${path}' is not because it contains an odd number ` +\r\n                    `of segments.`);\r\n            }\r\n            const key = new DocumentKey(path);\r\n            components.push(refValue(databaseId, key));\r\n        }\r\n        else {\r\n            const wrapped = parseQueryValue(dataReader, methodName, rawValue);\r\n            components.push(wrapped);\r\n        }\r\n    }\r\n    return new Bound(components, inclusive);\r\n}\r\n/**\r\n * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\r\n * appropriate errors if the value is anything other than a `DocumentReference`\r\n * or `string`, or if the string is malformed.\r\n */\r\nfunction parseDocumentIdValue(databaseId, query, documentIdValue) {\r\n    documentIdValue = getModularInstance(documentIdValue);\r\n    if (typeof documentIdValue === 'string') {\r\n        if (documentIdValue === '') {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. When querying with documentId(), you ' +\r\n                'must provide a valid document ID, but it was an empty string.');\r\n        }\r\n        if (!isCollectionGroupQuery(query) && documentIdValue.indexOf('/') !== -1) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying a collection by ` +\r\n                `documentId(), you must provide a plain document ID, but ` +\r\n                `'${documentIdValue}' contains a '/' character.`);\r\n        }\r\n        const path = query.path.child(ResourcePath.fromString(documentIdValue));\r\n        if (!DocumentKey.isDocumentKey(path)) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying a collection group by ` +\r\n                `documentId(), the value provided must result in a valid document path, ` +\r\n                `but '${path}' is not because it has an odd number of segments (${path.length}).`);\r\n        }\r\n        return refValue(databaseId, new DocumentKey(path));\r\n    }\r\n    else if (documentIdValue instanceof DocumentReference) {\r\n        return refValue(databaseId, documentIdValue._key);\r\n    }\r\n    else {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid ` +\r\n            `string or a DocumentReference, but it was: ` +\r\n            `${valueDescription(documentIdValue)}.`);\r\n    }\r\n}\r\n/**\r\n * Validates that the value passed into a disjunctive filter satisfies all\r\n * array requirements.\r\n */\r\nfunction validateDisjunctiveFilterElements(value, operator) {\r\n    if (!Array.isArray(value) || value.length === 0) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid Query. A non-empty array is required for ' +\r\n            `'${operator.toString()}' filters.`);\r\n    }\r\n}\r\n/**\r\n * Given an operator, returns the set of operators that cannot be used with it.\r\n *\r\n * This is not a comprehensive check, and this function should be removed in the\r\n * long term. Validations should occur in the Firestore backend.\r\n *\r\n * Operators in a query must adhere to the following set of rules:\r\n * 1. Only one inequality per query.\r\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\r\n */\r\nfunction conflictingOps(op) {\r\n    switch (op) {\r\n        case \"!=\" /* Operator.NOT_EQUAL */:\r\n            return [\"!=\" /* Operator.NOT_EQUAL */, \"not-in\" /* Operator.NOT_IN */];\r\n        case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */:\r\n        case \"in\" /* Operator.IN */:\r\n            return [\"not-in\" /* Operator.NOT_IN */];\r\n        case \"not-in\" /* Operator.NOT_IN */:\r\n            return [\r\n                \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */,\r\n                \"in\" /* Operator.IN */,\r\n                \"not-in\" /* Operator.NOT_IN */,\r\n                \"!=\" /* Operator.NOT_EQUAL */\r\n            ];\r\n        default:\r\n            return [];\r\n    }\r\n}\r\nfunction validateNewFieldFilter(query, fieldFilter) {\r\n    if (fieldFilter.isInequality()) {\r\n        const existingInequality = getInequalityFilterField(query);\r\n        const newInequality = fieldFilter.field;\r\n        if (existingInequality !== null &&\r\n            !existingInequality.isEqual(newInequality)) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' +\r\n                ' (<, <=, !=, not-in, >, or >=) must be on the same field. But you have' +\r\n                ` inequality filters on '${existingInequality.toString()}'` +\r\n                ` and '${newInequality.toString()}'`);\r\n        }\r\n        const firstOrderByField = getFirstOrderByField(query);\r\n        if (firstOrderByField !== null) {\r\n            validateOrderByAndInequalityMatch(query, newInequality, firstOrderByField);\r\n        }\r\n    }\r\n    const conflictingOp = findOpInsideFilters(query.filters, conflictingOps(fieldFilter.op));\r\n    if (conflictingOp !== null) {\r\n        // Special case when it's a duplicate op to give a slightly clearer error message.\r\n        if (conflictingOp === fieldFilter.op) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You cannot use more than one ' +\r\n                `'${fieldFilter.op.toString()}' filter.`);\r\n        }\r\n        else {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. You cannot use '${fieldFilter.op.toString()}' filters ` +\r\n                `with '${conflictingOp.toString()}' filters.`);\r\n        }\r\n    }\r\n}\r\nfunction validateNewFilter(query, filter) {\r\n    let testQuery = query;\r\n    const subFilters = filter.getFlattenedFilters();\r\n    for (const subFilter of subFilters) {\r\n        validateNewFieldFilter(testQuery, subFilter);\r\n        testQuery = queryWithAddedFilter(testQuery, subFilter);\r\n    }\r\n}\r\n// Checks if any of the provided filter operators are included in the given list of filters and\r\n// returns the first one that is, or null if none are.\r\nfunction findOpInsideFilters(filters, operators) {\r\n    for (const filter of filters) {\r\n        for (const fieldFilter of filter.getFlattenedFilters()) {\r\n            if (operators.indexOf(fieldFilter.op) >= 0) {\r\n                return fieldFilter.op;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction validateNewOrderBy(query, orderBy) {\r\n    if (getFirstOrderByField(query) === null) {\r\n        // This is the first order by. It must match any inequality.\r\n        const inequalityField = getInequalityFilterField(query);\r\n        if (inequalityField !== null) {\r\n            validateOrderByAndInequalityMatch(query, inequalityField, orderBy.field);\r\n        }\r\n    }\r\n}\r\nfunction validateOrderByAndInequalityMatch(baseQuery, inequality, orderBy) {\r\n    if (!orderBy.isEqual(inequality)) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. You have a where filter with an inequality ` +\r\n            `(<, <=, !=, not-in, >, or >=) on field '${inequality.toString()}' ` +\r\n            `and so you must also use '${inequality.toString()}' ` +\r\n            `as your first argument to orderBy(), but your first orderBy() ` +\r\n            `is on field '${orderBy.toString()}' instead.`);\r\n    }\r\n}\r\nfunction validateQueryFilterConstraint(functionName, queryConstraint) {\r\n    if (!(queryConstraint instanceof QueryFieldFilterConstraint) &&\r\n        !(queryConstraint instanceof QueryCompositeFilterConstraint)) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Function ${functionName}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);\r\n    }\r\n}\r\nfunction validateQueryConstraintArray(queryConstraint) {\r\n    const compositeFilterCount = queryConstraint.filter(filter => filter instanceof QueryCompositeFilterConstraint).length;\r\n    const fieldFilterCount = queryConstraint.filter(filter => filter instanceof QueryFieldFilterConstraint).length;\r\n    if (compositeFilterCount > 1 ||\r\n        (compositeFilterCount > 0 && fieldFilterCount > 0)) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'InvalidQuery. When using composite filters, you cannot use ' +\r\n            'more than one filter at the top level. Consider nesting the multiple ' +\r\n            'filters within an `and(...)` statement. For example: ' +\r\n            'change `query(query, where(...), or(...))` to ' +\r\n            '`query(query, and(where(...), or(...)))`.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Converts Firestore's internal types to the JavaScript types that we expose\r\n * to the user.\r\n *\r\n * @internal\r\n */\r\nclass AbstractUserDataWriter {\r\n    convertValue(value, serverTimestampBehavior = 'none') {\r\n        switch (typeOrder(value)) {\r\n            case 0 /* TypeOrder.NullValue */:\r\n                return null;\r\n            case 1 /* TypeOrder.BooleanValue */:\r\n                return value.booleanValue;\r\n            case 2 /* TypeOrder.NumberValue */:\r\n                return normalizeNumber(value.integerValue || value.doubleValue);\r\n            case 3 /* TypeOrder.TimestampValue */:\r\n                return this.convertTimestamp(value.timestampValue);\r\n            case 4 /* TypeOrder.ServerTimestampValue */:\r\n                return this.convertServerTimestamp(value, serverTimestampBehavior);\r\n            case 5 /* TypeOrder.StringValue */:\r\n                return value.stringValue;\r\n            case 6 /* TypeOrder.BlobValue */:\r\n                return this.convertBytes(normalizeByteString(value.bytesValue));\r\n            case 7 /* TypeOrder.RefValue */:\r\n                return this.convertReference(value.referenceValue);\r\n            case 8 /* TypeOrder.GeoPointValue */:\r\n                return this.convertGeoPoint(value.geoPointValue);\r\n            case 9 /* TypeOrder.ArrayValue */:\r\n                return this.convertArray(value.arrayValue, serverTimestampBehavior);\r\n            case 10 /* TypeOrder.ObjectValue */:\r\n                return this.convertObject(value.mapValue, serverTimestampBehavior);\r\n            default:\r\n                throw fail();\r\n        }\r\n    }\r\n    convertObject(mapValue, serverTimestampBehavior) {\r\n        return this.convertObjectMap(mapValue.fields, serverTimestampBehavior);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    convertObjectMap(fields, serverTimestampBehavior = 'none') {\r\n        const result = {};\r\n        forEach(fields, (key, value) => {\r\n            result[key] = this.convertValue(value, serverTimestampBehavior);\r\n        });\r\n        return result;\r\n    }\r\n    convertGeoPoint(value) {\r\n        return new GeoPoint(normalizeNumber(value.latitude), normalizeNumber(value.longitude));\r\n    }\r\n    convertArray(arrayValue, serverTimestampBehavior) {\r\n        return (arrayValue.values || []).map(value => this.convertValue(value, serverTimestampBehavior));\r\n    }\r\n    convertServerTimestamp(value, serverTimestampBehavior) {\r\n        switch (serverTimestampBehavior) {\r\n            case 'previous':\r\n                const previousValue = getPreviousValue(value);\r\n                if (previousValue == null) {\r\n                    return null;\r\n                }\r\n                return this.convertValue(previousValue, serverTimestampBehavior);\r\n            case 'estimate':\r\n                return this.convertTimestamp(getLocalWriteTime(value));\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    convertTimestamp(value) {\r\n        const normalizedValue = normalizeTimestamp(value);\r\n        return new Timestamp(normalizedValue.seconds, normalizedValue.nanos);\r\n    }\r\n    convertDocumentKey(name, expectedDatabaseId) {\r\n        const resourcePath = ResourcePath.fromString(name);\r\n        hardAssert(isValidResourceName(resourcePath));\r\n        const databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\r\n        const key = new DocumentKey(resourcePath.popFirst(5));\r\n        if (!databaseId.isEqual(expectedDatabaseId)) {\r\n            // TODO(b/64130202): Somehow support foreign references.\r\n            logError(`Document ${key} contains a document ` +\r\n                `reference within a different database (` +\r\n                `${databaseId.projectId}/${databaseId.database}) which is not ` +\r\n                `supported. It will be treated as a reference in the current ` +\r\n                `database (${expectedDatabaseId.projectId}/${expectedDatabaseId.database}) ` +\r\n                `instead.`);\r\n        }\r\n        return key;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Converts custom model object of type T into `DocumentData` by applying the\r\n * converter if it exists.\r\n *\r\n * This function is used when converting user objects to `DocumentData`\r\n * because we want to provide the user with a more specific error message if\r\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\r\n * call.\r\n */\r\nfunction applyFirestoreDataConverter(converter, value, options) {\r\n    let convertedValue;\r\n    if (converter) {\r\n        if (options && (options.merge || options.mergeFields)) {\r\n            // Cast to `any` in order to satisfy the union type constraint on\r\n            // toFirestore().\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            convertedValue = converter.toFirestore(value, options);\r\n        }\r\n        else {\r\n            convertedValue = converter.toFirestore(value);\r\n        }\r\n    }\r\n    else {\r\n        convertedValue = value;\r\n    }\r\n    return convertedValue;\r\n}\r\nclass LiteUserDataWriter extends AbstractUserDataWriter {\r\n    constructor(firestore) {\r\n        super();\r\n        this.firestore = firestore;\r\n    }\r\n    convertBytes(bytes) {\r\n        return new Bytes(bytes);\r\n    }\r\n    convertReference(name) {\r\n        const key = this.convertDocumentKey(name, this.firestore._databaseId);\r\n        return new DocumentReference(this.firestore, /* converter= */ null, key);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create an AggregateField object that can be used to compute the sum of\r\n * a specified field over a range of documents in the result set of a query.\r\n * @param field Specifies the field to sum across the result set.\r\n * @internal TODO (sum/avg) remove when public\r\n */\r\nfunction sum(field) {\r\n    return new AggregateField('sum', fieldPathFromArgument$1('sum', field));\r\n}\r\n/**\r\n * Create an AggregateField object that can be used to compute the average of\r\n * a specified field over a range of documents in the result set of a query.\r\n * @param field Specifies the field to average across the result set.\r\n * @internal TODO (sum/avg) remove when public\r\n */\r\nfunction average(field) {\r\n    return new AggregateField('avg', fieldPathFromArgument$1('average', field));\r\n}\r\n/**\r\n * Create an AggregateField object that can be used to compute the count of\r\n * documents in the result set of a query.\r\n * @internal TODO (sum/avg) remove when public\r\n */\r\nfunction count() {\r\n    return new AggregateField('count');\r\n}\r\n/**\r\n * Compares two 'AggregateField` instances for equality.\r\n *\r\n * @param left Compare this AggregateField to the `right`.\r\n * @param right Compare this AggregateField to the `left`.\r\n * @internal TODO (sum/avg) remove when public\r\n */\r\nfunction aggregateFieldEqual(left, right) {\r\n    var _a, _b;\r\n    return (left instanceof AggregateField &&\r\n        right instanceof AggregateField &&\r\n        left._aggregateType === right._aggregateType &&\r\n        ((_a = left._internalFieldPath) === null || _a === void 0 ? void 0 : _a.canonicalString()) ===\r\n            ((_b = right._internalFieldPath) === null || _b === void 0 ? void 0 : _b.canonicalString()));\r\n}\r\n/**\r\n * Compares two `AggregateQuerySnapshot` instances for equality.\r\n *\r\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\r\n * underlying queries that compare equal, and the same data.\r\n *\r\n * @param left - The first `AggregateQuerySnapshot` to compare.\r\n * @param right - The second `AggregateQuerySnapshot` to compare.\r\n *\r\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\r\n * otherwise.\r\n */\r\nfunction aggregateQuerySnapshotEqual(left, right) {\r\n    return (queryEqual(left.query, right.query) && deepEqual(left.data(), right.data()));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isPartialObserver(obj) {\r\n    return implementsAnyMethods(obj, ['next', 'error', 'complete']);\r\n}\r\n/**\r\n * Returns true if obj is an object and contains at least one of the specified\r\n * methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    const object = obj;\r\n    for (const method of methods) {\r\n        if (method in object && typeof object[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Metadata about a snapshot, describing the state of the snapshot.\r\n */\r\nclass SnapshotMetadata {\r\n    /** @hideconstructor */\r\n    constructor(hasPendingWrites, fromCache) {\r\n        this.hasPendingWrites = hasPendingWrites;\r\n        this.fromCache = fromCache;\r\n    }\r\n    /**\r\n     * Returns true if this `SnapshotMetadata` is equal to the provided one.\r\n     *\r\n     * @param other - The `SnapshotMetadata` to compare against.\r\n     * @returns true if this `SnapshotMetadata` is equal to the provided one.\r\n     */\r\n    isEqual(other) {\r\n        return (this.hasPendingWrites === other.hasPendingWrites &&\r\n            this.fromCache === other.fromCache);\r\n    }\r\n}\r\n/**\r\n * A `DocumentSnapshot` contains data read from a document in your Firestore\r\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\r\n * get a specific field.\r\n *\r\n * For a `DocumentSnapshot` that points to a non-existing document, any data\r\n * access will return 'undefined'. You can use the `exists()` method to\r\n * explicitly verify a document's existence.\r\n */\r\nclass DocumentSnapshot extends DocumentSnapshot$1 {\r\n    /** @hideconstructor protected */\r\n    constructor(_firestore, userDataWriter, key, document, metadata, converter) {\r\n        super(_firestore, userDataWriter, key, document, converter);\r\n        this._firestore = _firestore;\r\n        this._firestoreImpl = _firestore;\r\n        this.metadata = metadata;\r\n    }\r\n    /**\r\n     * Returns whether or not the data exists. True if the document exists.\r\n     */\r\n    exists() {\r\n        return super.exists();\r\n    }\r\n    /**\r\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\r\n     * the document doesn't exist.\r\n     *\r\n     * By default, `serverTimestamp()` values that have not yet been\r\n     * set to their final value will be returned as `null`. You can override\r\n     * this by passing an options object.\r\n     *\r\n     * @param options - An options object to configure how data is retrieved from\r\n     * the snapshot (for example the desired behavior for server timestamps that\r\n     * have not yet been set to their final value).\r\n     * @returns An `Object` containing all fields in the document or `undefined` if\r\n     * the document doesn't exist.\r\n     */\r\n    data(options = {}) {\r\n        if (!this._document) {\r\n            return undefined;\r\n        }\r\n        else if (this._converter) {\r\n            // We only want to use the converter and create a new DocumentSnapshot\r\n            // if a converter has been provided.\r\n            const snapshot = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, \r\n            /* converter= */ null);\r\n            return this._converter.fromFirestore(snapshot, options);\r\n        }\r\n        else {\r\n            return this._userDataWriter.convertValue(this._document.data.value, options.serverTimestamps);\r\n        }\r\n    }\r\n    /**\r\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\r\n     * document or field doesn't exist.\r\n     *\r\n     * By default, a `serverTimestamp()` that has not yet been set to\r\n     * its final value will be returned as `null`. You can override this by\r\n     * passing an options object.\r\n     *\r\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\r\n     * field.\r\n     * @param options - An options object to configure how the field is retrieved\r\n     * from the snapshot (for example the desired behavior for server timestamps\r\n     * that have not yet been set to their final value).\r\n     * @returns The data at the specified field location or undefined if no such\r\n     * field exists in the document.\r\n     */\r\n    // We are using `any` here to avoid an explicit cast by our users.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    get(fieldPath, options = {}) {\r\n        if (this._document) {\r\n            const value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\r\n            if (value !== null) {\r\n                return this._userDataWriter.convertValue(value, options.serverTimestamps);\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * A `QueryDocumentSnapshot` contains data read from a document in your\r\n * Firestore database as part of a query. The document is guaranteed to exist\r\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\r\n * specific field.\r\n *\r\n * A `QueryDocumentSnapshot` offers the same API surface as a\r\n * `DocumentSnapshot`. Since query results contain only existing documents, the\r\n * `exists` property will always be true and `data()` will never return\r\n * 'undefined'.\r\n */\r\nclass QueryDocumentSnapshot extends DocumentSnapshot {\r\n    /**\r\n     * Retrieves all fields in the document as an `Object`.\r\n     *\r\n     * By default, `serverTimestamp()` values that have not yet been\r\n     * set to their final value will be returned as `null`. You can override\r\n     * this by passing an options object.\r\n     *\r\n     * @override\r\n     * @param options - An options object to configure how data is retrieved from\r\n     * the snapshot (for example the desired behavior for server timestamps that\r\n     * have not yet been set to their final value).\r\n     * @returns An `Object` containing all fields in the document.\r\n     */\r\n    data(options = {}) {\r\n        return super.data(options);\r\n    }\r\n}\r\n/**\r\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\r\n * representing the results of a query. The documents can be accessed as an\r\n * array via the `docs` property or enumerated using the `forEach` method. The\r\n * number of documents can be determined via the `empty` and `size`\r\n * properties.\r\n */\r\nclass QuerySnapshot {\r\n    /** @hideconstructor */\r\n    constructor(_firestore, _userDataWriter, query, _snapshot) {\r\n        this._firestore = _firestore;\r\n        this._userDataWriter = _userDataWriter;\r\n        this._snapshot = _snapshot;\r\n        this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);\r\n        this.query = query;\r\n    }\r\n    /** An array of all the documents in the `QuerySnapshot`. */\r\n    get docs() {\r\n        const result = [];\r\n        this.forEach(doc => result.push(doc));\r\n        return result;\r\n    }\r\n    /** The number of documents in the `QuerySnapshot`. */\r\n    get size() {\r\n        return this._snapshot.docs.size;\r\n    }\r\n    /** True if there are no documents in the `QuerySnapshot`. */\r\n    get empty() {\r\n        return this.size === 0;\r\n    }\r\n    /**\r\n     * Enumerates all of the documents in the `QuerySnapshot`.\r\n     *\r\n     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\r\n     * each document in the snapshot.\r\n     * @param thisArg - The `this` binding for the callback.\r\n     */\r\n    forEach(callback, thisArg) {\r\n        this._snapshot.docs.forEach(doc => {\r\n            callback.call(thisArg, new QueryDocumentSnapshot(this._firestore, this._userDataWriter, doc.key, doc, new SnapshotMetadata(this._snapshot.mutatedKeys.has(doc.key), this._snapshot.fromCache), this.query.converter));\r\n        });\r\n    }\r\n    /**\r\n     * Returns an array of the documents changes since the last snapshot. If this\r\n     * is the first snapshot, all documents will be in the list as 'added'\r\n     * changes.\r\n     *\r\n     * @param options - `SnapshotListenOptions` that control whether metadata-only\r\n     * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger\r\n     * snapshot events.\r\n     */\r\n    docChanges(options = {}) {\r\n        const includeMetadataChanges = !!options.includeMetadataChanges;\r\n        if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {\r\n            throw new FirestoreError(Code.INVALID_ARGUMENT, 'To include metadata changes with your document changes, you must ' +\r\n                'also pass { includeMetadataChanges:true } to onSnapshot().');\r\n        }\r\n        if (!this._cachedChanges ||\r\n            this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges) {\r\n            this._cachedChanges = changesFromSnapshot(this, includeMetadataChanges);\r\n            this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;\r\n        }\r\n        return this._cachedChanges;\r\n    }\r\n}\r\n/** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */\r\nfunction changesFromSnapshot(querySnapshot, includeMetadataChanges) {\r\n    if (querySnapshot._snapshot.oldDocs.isEmpty()) {\r\n        let index = 0;\r\n        return querySnapshot._snapshot.docChanges.map(change => {\r\n            const doc = new QueryDocumentSnapshot(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query.converter);\r\n            change.doc;\r\n            return {\r\n                type: 'added',\r\n                doc,\r\n                oldIndex: -1,\r\n                newIndex: index++\r\n            };\r\n        });\r\n    }\r\n    else {\r\n        // A `DocumentSet` that is updated incrementally as changes are applied to use\r\n        // to lookup the index of a document.\r\n        let indexTracker = querySnapshot._snapshot.oldDocs;\r\n        return querySnapshot._snapshot.docChanges\r\n            .filter(change => includeMetadataChanges || change.type !== 3 /* ChangeType.Metadata */)\r\n            .map(change => {\r\n            const doc = new QueryDocumentSnapshot(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query.converter);\r\n            let oldIndex = -1;\r\n            let newIndex = -1;\r\n            if (change.type !== 0 /* ChangeType.Added */) {\r\n                oldIndex = indexTracker.indexOf(change.doc.key);\r\n                indexTracker = indexTracker.delete(change.doc.key);\r\n            }\r\n            if (change.type !== 1 /* ChangeType.Removed */) {\r\n                indexTracker = indexTracker.add(change.doc);\r\n                newIndex = indexTracker.indexOf(change.doc.key);\r\n            }\r\n            return {\r\n                type: resultChangeType(change.type),\r\n                doc,\r\n                oldIndex,\r\n                newIndex\r\n            };\r\n        });\r\n    }\r\n}\r\nfunction resultChangeType(type) {\r\n    switch (type) {\r\n        case 0 /* ChangeType.Added */:\r\n            return 'added';\r\n        case 2 /* ChangeType.Modified */:\r\n        case 3 /* ChangeType.Metadata */:\r\n            return 'modified';\r\n        case 1 /* ChangeType.Removed */:\r\n            return 'removed';\r\n        default:\r\n            return fail();\r\n    }\r\n}\r\n// TODO(firestoreexp): Add tests for snapshotEqual with different snapshot\r\n// metadata\r\n/**\r\n * Returns true if the provided snapshots are equal.\r\n *\r\n * @param left - A snapshot to compare.\r\n * @param right - A snapshot to compare.\r\n * @returns true if the snapshots are equal.\r\n */\r\nfunction snapshotEqual(left, right) {\r\n    if (left instanceof DocumentSnapshot && right instanceof DocumentSnapshot) {\r\n        return (left._firestore === right._firestore &&\r\n            left._key.isEqual(right._key) &&\r\n            (left._document === null\r\n                ? right._document === null\r\n                : left._document.isEqual(right._document)) &&\r\n            left._converter === right._converter);\r\n    }\r\n    else if (left instanceof QuerySnapshot && right instanceof QuerySnapshot) {\r\n        return (left._firestore === right._firestore &&\r\n            queryEqual(left.query, right.query) &&\r\n            left.metadata.isEqual(right.metadata) &&\r\n            left._snapshot.isEqual(right._snapshot));\r\n    }\r\n    return false;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Reads the document referred to by this `DocumentReference`.\r\n *\r\n * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting\r\n * for data from the server, but it may return cached data or fail if you are\r\n * offline and the server cannot be reached. To specify this behavior, invoke\r\n * {@link getDocFromCache} or {@link getDocFromServer}.\r\n *\r\n * @param reference - The reference of the document to fetch.\r\n * @returns A Promise resolved with a `DocumentSnapshot` containing the\r\n * current document contents.\r\n */\r\nfunction getDoc(reference) {\r\n    reference = cast(reference, DocumentReference);\r\n    const firestore = cast(reference.firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientGetDocumentViaSnapshotListener(client, reference._key).then(snapshot => convertToDocSnapshot(firestore, reference, snapshot));\r\n}\r\nclass ExpUserDataWriter extends AbstractUserDataWriter {\r\n    constructor(firestore) {\r\n        super();\r\n        this.firestore = firestore;\r\n    }\r\n    convertBytes(bytes) {\r\n        return new Bytes(bytes);\r\n    }\r\n    convertReference(name) {\r\n        const key = this.convertDocumentKey(name, this.firestore._databaseId);\r\n        return new DocumentReference(this.firestore, /* converter= */ null, key);\r\n    }\r\n}\r\n/**\r\n * Reads the document referred to by this `DocumentReference` from cache.\r\n * Returns an error if the document is not currently cached.\r\n *\r\n * @returns A `Promise` resolved with a `DocumentSnapshot` containing the\r\n * current document contents.\r\n */\r\nfunction getDocFromCache(reference) {\r\n    reference = cast(reference, DocumentReference);\r\n    const firestore = cast(reference.firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    const userDataWriter = new ExpUserDataWriter(firestore);\r\n    return firestoreClientGetDocumentFromLocalCache(client, reference._key).then(doc => new DocumentSnapshot(firestore, userDataWriter, reference._key, doc, new SnapshotMetadata(doc !== null && doc.hasLocalMutations, \r\n    /* fromCache= */ true), reference.converter));\r\n}\r\n/**\r\n * Reads the document referred to by this `DocumentReference` from the server.\r\n * Returns an error if the network is not available.\r\n *\r\n * @returns A `Promise` resolved with a `DocumentSnapshot` containing the\r\n * current document contents.\r\n */\r\nfunction getDocFromServer(reference) {\r\n    reference = cast(reference, DocumentReference);\r\n    const firestore = cast(reference.firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientGetDocumentViaSnapshotListener(client, reference._key, {\r\n        source: 'server'\r\n    }).then(snapshot => convertToDocSnapshot(firestore, reference, snapshot));\r\n}\r\n/**\r\n * Executes the query and returns the results as a `QuerySnapshot`.\r\n *\r\n * Note: `getDocs()` attempts to provide up-to-date data when possible by\r\n * waiting for data from the server, but it may return cached data or fail if\r\n * you are offline and the server cannot be reached. To specify this behavior,\r\n * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.\r\n *\r\n * @returns A `Promise` that will be resolved with the results of the query.\r\n */\r\nfunction getDocs(query) {\r\n    query = cast(query, Query);\r\n    const firestore = cast(query.firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    const userDataWriter = new ExpUserDataWriter(firestore);\r\n    validateHasExplicitOrderByForLimitToLast(query._query);\r\n    return firestoreClientGetDocumentsViaSnapshotListener(client, query._query).then(snapshot => new QuerySnapshot(firestore, userDataWriter, query, snapshot));\r\n}\r\n/**\r\n * Executes the query and returns the results as a `QuerySnapshot` from cache.\r\n * Returns an empty result set if no documents matching the query are currently\r\n * cached.\r\n *\r\n * @returns A `Promise` that will be resolved with the results of the query.\r\n */\r\nfunction getDocsFromCache(query) {\r\n    query = cast(query, Query);\r\n    const firestore = cast(query.firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    const userDataWriter = new ExpUserDataWriter(firestore);\r\n    return firestoreClientGetDocumentsFromLocalCache(client, query._query).then(snapshot => new QuerySnapshot(firestore, userDataWriter, query, snapshot));\r\n}\r\n/**\r\n * Executes the query and returns the results as a `QuerySnapshot` from the\r\n * server. Returns an error if the network is not available.\r\n *\r\n * @returns A `Promise` that will be resolved with the results of the query.\r\n */\r\nfunction getDocsFromServer(query) {\r\n    query = cast(query, Query);\r\n    const firestore = cast(query.firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    const userDataWriter = new ExpUserDataWriter(firestore);\r\n    return firestoreClientGetDocumentsViaSnapshotListener(client, query._query, {\r\n        source: 'server'\r\n    }).then(snapshot => new QuerySnapshot(firestore, userDataWriter, query, snapshot));\r\n}\r\nfunction setDoc(reference, data, options) {\r\n    reference = cast(reference, DocumentReference);\r\n    const firestore = cast(reference.firestore, Firestore);\r\n    const convertedValue = applyFirestoreDataConverter(reference.converter, data, options);\r\n    const dataReader = newUserDataReader(firestore);\r\n    const parsed = parseSetData(dataReader, 'setDoc', reference._key, convertedValue, reference.converter !== null, options);\r\n    const mutation = parsed.toMutation(reference._key, Precondition.none());\r\n    return executeWrite(firestore, [mutation]);\r\n}\r\nfunction updateDoc(reference, fieldOrUpdateData, value, ...moreFieldsAndValues) {\r\n    reference = cast(reference, DocumentReference);\r\n    const firestore = cast(reference.firestore, Firestore);\r\n    const dataReader = newUserDataReader(firestore);\r\n    // For Compat types, we have to \"extract\" the underlying types before\r\n    // performing validation.\r\n    fieldOrUpdateData = getModularInstance(fieldOrUpdateData);\r\n    let parsed;\r\n    if (typeof fieldOrUpdateData === 'string' ||\r\n        fieldOrUpdateData instanceof FieldPath) {\r\n        parsed = parseUpdateVarargs(dataReader, 'updateDoc', reference._key, fieldOrUpdateData, value, moreFieldsAndValues);\r\n    }\r\n    else {\r\n        parsed = parseUpdateData(dataReader, 'updateDoc', reference._key, fieldOrUpdateData);\r\n    }\r\n    const mutation = parsed.toMutation(reference._key, Precondition.exists(true));\r\n    return executeWrite(firestore, [mutation]);\r\n}\r\n/**\r\n * Deletes the document referred to by the specified `DocumentReference`.\r\n *\r\n * @param reference - A reference to the document to delete.\r\n * @returns A Promise resolved once the document has been successfully\r\n * deleted from the backend (note that it won't resolve while you're offline).\r\n */\r\nfunction deleteDoc(reference) {\r\n    const firestore = cast(reference.firestore, Firestore);\r\n    const mutations = [new DeleteMutation(reference._key, Precondition.none())];\r\n    return executeWrite(firestore, mutations);\r\n}\r\n/**\r\n * Add a new document to specified `CollectionReference` with the given data,\r\n * assigning it a document ID automatically.\r\n *\r\n * @param reference - A reference to the collection to add this document to.\r\n * @param data - An Object containing the data for the new document.\r\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\r\n * newly created document after it has been written to the backend (Note that it\r\n * won't resolve while you're offline).\r\n */\r\nfunction addDoc(reference, data) {\r\n    const firestore = cast(reference.firestore, Firestore);\r\n    const docRef = doc(reference);\r\n    const convertedValue = applyFirestoreDataConverter(reference.converter, data);\r\n    const dataReader = newUserDataReader(reference.firestore);\r\n    const parsed = parseSetData(dataReader, 'addDoc', docRef._key, convertedValue, reference.converter !== null, {});\r\n    const mutation = parsed.toMutation(docRef._key, Precondition.exists(false));\r\n    return executeWrite(firestore, [mutation]).then(() => docRef);\r\n}\r\nfunction onSnapshot(reference, ...args) {\r\n    var _a, _b, _c;\r\n    reference = getModularInstance(reference);\r\n    let options = {\r\n        includeMetadataChanges: false\r\n    };\r\n    let currArg = 0;\r\n    if (typeof args[currArg] === 'object' && !isPartialObserver(args[currArg])) {\r\n        options = args[currArg];\r\n        currArg++;\r\n    }\r\n    const internalOptions = {\r\n        includeMetadataChanges: options.includeMetadataChanges\r\n    };\r\n    if (isPartialObserver(args[currArg])) {\r\n        const userObserver = args[currArg];\r\n        args[currArg] = (_a = userObserver.next) === null || _a === void 0 ? void 0 : _a.bind(userObserver);\r\n        args[currArg + 1] = (_b = userObserver.error) === null || _b === void 0 ? void 0 : _b.bind(userObserver);\r\n        args[currArg + 2] = (_c = userObserver.complete) === null || _c === void 0 ? void 0 : _c.bind(userObserver);\r\n    }\r\n    let observer;\r\n    let firestore;\r\n    let internalQuery;\r\n    if (reference instanceof DocumentReference) {\r\n        firestore = cast(reference.firestore, Firestore);\r\n        internalQuery = newQueryForPath(reference._key.path);\r\n        observer = {\r\n            next: snapshot => {\r\n                if (args[currArg]) {\r\n                    args[currArg](convertToDocSnapshot(firestore, reference, snapshot));\r\n                }\r\n            },\r\n            error: args[currArg + 1],\r\n            complete: args[currArg + 2]\r\n        };\r\n    }\r\n    else {\r\n        const query = cast(reference, Query);\r\n        firestore = cast(query.firestore, Firestore);\r\n        internalQuery = query._query;\r\n        const userDataWriter = new ExpUserDataWriter(firestore);\r\n        observer = {\r\n            next: snapshot => {\r\n                if (args[currArg]) {\r\n                    args[currArg](new QuerySnapshot(firestore, userDataWriter, query, snapshot));\r\n                }\r\n            },\r\n            error: args[currArg + 1],\r\n            complete: args[currArg + 2]\r\n        };\r\n        validateHasExplicitOrderByForLimitToLast(reference._query);\r\n    }\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientListen(client, internalQuery, internalOptions, observer);\r\n}\r\nfunction onSnapshotsInSync(firestore, arg) {\r\n    firestore = cast(firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    const observer = isPartialObserver(arg)\r\n        ? arg\r\n        : {\r\n            next: arg\r\n        };\r\n    return firestoreClientAddSnapshotsInSyncListener(client, observer);\r\n}\r\n/**\r\n * Locally writes `mutations` on the async queue.\r\n * @internal\r\n */\r\nfunction executeWrite(firestore, mutations) {\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientWrite(client, mutations);\r\n}\r\n/**\r\n * Converts a {@link ViewSnapshot} that contains the single document specified by `ref`\r\n * to a {@link DocumentSnapshot}.\r\n */\r\nfunction convertToDocSnapshot(firestore, ref, snapshot) {\r\n    const doc = snapshot.docs.get(ref._key);\r\n    const userDataWriter = new ExpUserDataWriter(firestore);\r\n    return new DocumentSnapshot(firestore, userDataWriter, ref._key, doc, new SnapshotMetadata(snapshot.hasPendingWrites, snapshot.fromCache), ref.converter);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Calculates the number of documents in the result set of the given query,\r\n * without actually downloading the documents.\r\n *\r\n * Using this function to count the documents is efficient because only the\r\n * final count, not the documents' data, is downloaded. This function can even\r\n * count the documents if the result set would be prohibitively large to\r\n * download entirely (e.g. thousands of documents).\r\n *\r\n * The result received from the server is presented, unaltered, without\r\n * considering any local state. That is, documents in the local cache are not\r\n * taken into consideration, neither are local modifications not yet\r\n * synchronized with the server. Previously-downloaded results, if any, are not\r\n * used: every request using this source necessarily involves a round trip to\r\n * the server.\r\n *\r\n * @param query - The query whose result set size to calculate.\r\n * @returns A Promise that will be resolved with the count; the count can be\r\n * retrieved from `snapshot.data().count`, where `snapshot` is the\r\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\r\n */\r\nfunction getCountFromServer(query) {\r\n    const countQuerySpec = {\r\n        count: count()\r\n    };\r\n    return getAggregateFromServer(query, countQuerySpec);\r\n}\r\n/**\r\n * Calculates the specified aggregations over the documents in the result\r\n * set of the given query, without actually downloading the documents.\r\n *\r\n * Using this function to perform aggregations is efficient because only the\r\n * final aggregation values, not the documents' data, is downloaded. This\r\n * function can even perform aggregations of the documents if the result set\r\n * would be prohibitively large to download entirely (e.g. thousands of documents).\r\n *\r\n * The result received from the server is presented, unaltered, without\r\n * considering any local state. That is, documents in the local cache are not\r\n * taken into consideration, neither are local modifications not yet\r\n * synchronized with the server. Previously-downloaded results, if any, are not\r\n * used: every request using this source necessarily involves a round trip to\r\n * the server.\r\n *\r\n * @param query The query whose result set to aggregate over.\r\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\r\n * to perform over the result set. The AggregateSpec specifies aliases for each\r\n * aggregate, which can be used to retrieve the aggregate result.\r\n * @example\r\n * ```typescript\r\n * const aggregateSnapshot = await getAggregateFromServer(query, {\r\n *   countOfDocs: count(),\r\n *   totalHours: sum('hours'),\r\n *   averageScore: average('score')\r\n * });\r\n *\r\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\r\n * const totalHours: number = aggregateSnapshot.data().totalHours;\r\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\r\n * ```\r\n * @internal TODO (sum/avg) remove when public\r\n */\r\nfunction getAggregateFromServer(query, aggregateSpec) {\r\n    const firestore = cast(query.firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    const internalAggregates = mapToArray(aggregateSpec, (aggregate, alias) => {\r\n        return new AggregateImpl(alias, aggregate._aggregateType, aggregate._internalFieldPath);\r\n    });\r\n    // Run the aggregation and convert the results\r\n    return firestoreClientRunAggregateQuery(client, query._query, internalAggregates).then(aggregateResult => convertToAggregateQuerySnapshot(firestore, query, aggregateResult));\r\n}\r\n/**\r\n * Converts the core aggregration result to an `AggregateQuerySnapshot`\r\n * that can be returned to the consumer.\r\n * @param query\r\n * @param aggregateResult Core aggregation result\r\n * @internal\r\n */\r\nfunction convertToAggregateQuerySnapshot(firestore, query, aggregateResult) {\r\n    const userDataWriter = new ExpUserDataWriter(firestore);\r\n    const querySnapshot = new AggregateQuerySnapshot(query, userDataWriter, aggregateResult);\r\n    return querySnapshot;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass MemoryLocalCacheImpl {\r\n    constructor(settings) {\r\n        this.kind = 'memory';\r\n        this._onlineComponentProvider = new OnlineComponentProvider();\r\n        if (settings === null || settings === void 0 ? void 0 : settings.garbageCollector) {\r\n            this._offlineComponentProvider =\r\n                settings.garbageCollector._offlineComponentProvider;\r\n        }\r\n        else {\r\n            this._offlineComponentProvider = new MemoryOfflineComponentProvider();\r\n        }\r\n    }\r\n    toJSON() {\r\n        return { kind: this.kind };\r\n    }\r\n}\r\nclass PersistentLocalCacheImpl {\r\n    constructor(settings) {\r\n        this.kind = 'persistent';\r\n        let tabManager;\r\n        if (settings === null || settings === void 0 ? void 0 : settings.tabManager) {\r\n            settings.tabManager._initialize(settings);\r\n            tabManager = settings.tabManager;\r\n        }\r\n        else {\r\n            tabManager = persistentSingleTabManager(undefined);\r\n            tabManager._initialize(settings);\r\n        }\r\n        this._onlineComponentProvider = tabManager._onlineComponentProvider;\r\n        this._offlineComponentProvider = tabManager._offlineComponentProvider;\r\n    }\r\n    toJSON() {\r\n        return { kind: this.kind };\r\n    }\r\n}\r\nclass MemoryEagerGabageCollectorImpl {\r\n    constructor() {\r\n        this.kind = 'memoryEager';\r\n        this._offlineComponentProvider = new MemoryOfflineComponentProvider();\r\n    }\r\n    toJSON() {\r\n        return { kind: this.kind };\r\n    }\r\n}\r\nclass MemoryLruGabageCollectorImpl {\r\n    constructor(cacheSize) {\r\n        this.kind = 'memoryLru';\r\n        this._offlineComponentProvider = new LruGcMemoryOfflineComponentProvider(cacheSize);\r\n    }\r\n    toJSON() {\r\n        return { kind: this.kind };\r\n    }\r\n}\r\n/**\r\n * Creates an instance of `MemoryEagerGarbageCollector`. This is also the\r\n * default garbage collector unless it is explicitly specified otherwise.\r\n */\r\nfunction memoryEagerGarbageCollector() {\r\n    return new MemoryEagerGabageCollectorImpl();\r\n}\r\n/**\r\n * Creates an instance of `MemoryLruGarbageCollector`.\r\n *\r\n * A target size can be specified as part of the setting parameter. The\r\n * collector will start deleting documents once the cache size exceeds\r\n * the given size. The default cache size is 40MB (40 * 1024 * 1024 bytes).\r\n */\r\nfunction memoryLruGarbageCollector(settings) {\r\n    return new MemoryLruGabageCollectorImpl(settings === null || settings === void 0 ? void 0 : settings.cacheSizeBytes);\r\n}\r\n/**\r\n * Creates an instance of `MemoryLocalCache`. The instance can be set to\r\n * `FirestoreSettings.cache` to tell the SDK which cache layer to use.\r\n */\r\nfunction memoryLocalCache(settings) {\r\n    return new MemoryLocalCacheImpl(settings);\r\n}\r\n/**\r\n * Creates an instance of `PersistentLocalCache`. The instance can be set to\r\n * `FirestoreSettings.cache` to tell the SDK which cache layer to use.\r\n *\r\n * Persistent cache cannot be used in a Node.js environment.\r\n */\r\nfunction persistentLocalCache(settings) {\r\n    return new PersistentLocalCacheImpl(settings);\r\n}\r\nclass SingleTabManagerImpl {\r\n    constructor(forceOwnership) {\r\n        this.forceOwnership = forceOwnership;\r\n        this.kind = 'persistentSingleTab';\r\n    }\r\n    toJSON() {\r\n        return { kind: this.kind };\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _initialize(settings) {\r\n        this._onlineComponentProvider = new OnlineComponentProvider();\r\n        this._offlineComponentProvider = new IndexedDbOfflineComponentProvider(this._onlineComponentProvider, settings === null || settings === void 0 ? void 0 : settings.cacheSizeBytes, this.forceOwnership);\r\n    }\r\n}\r\nclass MultiTabManagerImpl {\r\n    constructor() {\r\n        this.kind = 'PersistentMultipleTab';\r\n    }\r\n    toJSON() {\r\n        return { kind: this.kind };\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _initialize(settings) {\r\n        this._onlineComponentProvider = new OnlineComponentProvider();\r\n        this._offlineComponentProvider = new MultiTabOfflineComponentProvider(this._onlineComponentProvider, settings === null || settings === void 0 ? void 0 : settings.cacheSizeBytes);\r\n    }\r\n}\r\n/**\r\n * Creates an instance of `PersistentSingleTabManager`.\r\n *\r\n * @param settings Configures the created tab manager.\r\n */\r\nfunction persistentSingleTabManager(settings) {\r\n    return new SingleTabManagerImpl(settings === null || settings === void 0 ? void 0 : settings.forceOwnership);\r\n}\r\n/**\r\n * Creates an instance of `PersistentMultipleTabManager`.\r\n */\r\nfunction persistentMultipleTabManager() {\r\n    return new MultiTabManagerImpl();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_TRANSACTION_OPTIONS = {\r\n    maxAttempts: 5\r\n};\r\nfunction validateTransactionOptions(options) {\r\n    if (options.maxAttempts < 1) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Max attempts must be at least 1');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A write batch, used to perform multiple writes as a single atomic unit.\r\n *\r\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\r\n * provides methods for adding writes to the write batch. None of the writes\r\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\r\n * called.\r\n */\r\nclass WriteBatch {\r\n    /** @hideconstructor */\r\n    constructor(_firestore, _commitHandler) {\r\n        this._firestore = _firestore;\r\n        this._commitHandler = _commitHandler;\r\n        this._mutations = [];\r\n        this._committed = false;\r\n        this._dataReader = newUserDataReader(_firestore);\r\n    }\r\n    set(documentRef, data, options) {\r\n        this._verifyNotCommitted();\r\n        const ref = validateReference(documentRef, this._firestore);\r\n        const convertedValue = applyFirestoreDataConverter(ref.converter, data, options);\r\n        const parsed = parseSetData(this._dataReader, 'WriteBatch.set', ref._key, convertedValue, ref.converter !== null, options);\r\n        this._mutations.push(parsed.toMutation(ref._key, Precondition.none()));\r\n        return this;\r\n    }\r\n    update(documentRef, fieldOrUpdateData, value, ...moreFieldsAndValues) {\r\n        this._verifyNotCommitted();\r\n        const ref = validateReference(documentRef, this._firestore);\r\n        // For Compat types, we have to \"extract\" the underlying types before\r\n        // performing validation.\r\n        fieldOrUpdateData = getModularInstance(fieldOrUpdateData);\r\n        let parsed;\r\n        if (typeof fieldOrUpdateData === 'string' ||\r\n            fieldOrUpdateData instanceof FieldPath) {\r\n            parsed = parseUpdateVarargs(this._dataReader, 'WriteBatch.update', ref._key, fieldOrUpdateData, value, moreFieldsAndValues);\r\n        }\r\n        else {\r\n            parsed = parseUpdateData(this._dataReader, 'WriteBatch.update', ref._key, fieldOrUpdateData);\r\n        }\r\n        this._mutations.push(parsed.toMutation(ref._key, Precondition.exists(true)));\r\n        return this;\r\n    }\r\n    /**\r\n     * Deletes the document referred to by the provided {@link DocumentReference}.\r\n     *\r\n     * @param documentRef - A reference to the document to be deleted.\r\n     * @returns This `WriteBatch` instance. Used for chaining method calls.\r\n     */\r\n    delete(documentRef) {\r\n        this._verifyNotCommitted();\r\n        const ref = validateReference(documentRef, this._firestore);\r\n        this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.none()));\r\n        return this;\r\n    }\r\n    /**\r\n     * Commits all of the writes in this write batch as a single atomic unit.\r\n     *\r\n     * The result of these writes will only be reflected in document reads that\r\n     * occur after the returned promise resolves. If the client is offline, the\r\n     * write fails. If you would like to see local modifications or buffer writes\r\n     * until the client is online, use the full Firestore SDK.\r\n     *\r\n     * @returns A `Promise` resolved once all of the writes in the batch have been\r\n     * successfully written to the backend as an atomic unit (note that it won't\r\n     * resolve while you're offline).\r\n     */\r\n    commit() {\r\n        this._verifyNotCommitted();\r\n        this._committed = true;\r\n        if (this._mutations.length > 0) {\r\n            return this._commitHandler(this._mutations);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _verifyNotCommitted() {\r\n        if (this._committed) {\r\n            throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' +\r\n                'has been called.');\r\n        }\r\n    }\r\n}\r\nfunction validateReference(documentRef, firestore) {\r\n    documentRef = getModularInstance(documentRef);\r\n    if (documentRef.firestore !== firestore) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\r\n    }\r\n    else {\r\n        return documentRef;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\r\n// legacy SDK.\r\n/**\r\n * A reference to a transaction.\r\n *\r\n * The `Transaction` object passed to a transaction's `updateFunction` provides\r\n * the methods to read and write data within the transaction context. See\r\n * {@link runTransaction}.\r\n */\r\nclass Transaction$1 {\r\n    /** @hideconstructor */\r\n    constructor(_firestore, _transaction) {\r\n        this._firestore = _firestore;\r\n        this._transaction = _transaction;\r\n        this._dataReader = newUserDataReader(_firestore);\r\n    }\r\n    /**\r\n     * Reads the document referenced by the provided {@link DocumentReference}.\r\n     *\r\n     * @param documentRef - A reference to the document to be read.\r\n     * @returns A `DocumentSnapshot` with the read data.\r\n     */\r\n    get(documentRef) {\r\n        const ref = validateReference(documentRef, this._firestore);\r\n        const userDataWriter = new LiteUserDataWriter(this._firestore);\r\n        return this._transaction.lookup([ref._key]).then(docs => {\r\n            if (!docs || docs.length !== 1) {\r\n                return fail();\r\n            }\r\n            const doc = docs[0];\r\n            if (doc.isFoundDocument()) {\r\n                return new DocumentSnapshot$1(this._firestore, userDataWriter, doc.key, doc, ref.converter);\r\n            }\r\n            else if (doc.isNoDocument()) {\r\n                return new DocumentSnapshot$1(this._firestore, userDataWriter, ref._key, null, ref.converter);\r\n            }\r\n            else {\r\n                throw fail();\r\n            }\r\n        });\r\n    }\r\n    set(documentRef, value, options) {\r\n        const ref = validateReference(documentRef, this._firestore);\r\n        const convertedValue = applyFirestoreDataConverter(ref.converter, value, options);\r\n        const parsed = parseSetData(this._dataReader, 'Transaction.set', ref._key, convertedValue, ref.converter !== null, options);\r\n        this._transaction.set(ref._key, parsed);\r\n        return this;\r\n    }\r\n    update(documentRef, fieldOrUpdateData, value, ...moreFieldsAndValues) {\r\n        const ref = validateReference(documentRef, this._firestore);\r\n        // For Compat types, we have to \"extract\" the underlying types before\r\n        // performing validation.\r\n        fieldOrUpdateData = getModularInstance(fieldOrUpdateData);\r\n        let parsed;\r\n        if (typeof fieldOrUpdateData === 'string' ||\r\n            fieldOrUpdateData instanceof FieldPath) {\r\n            parsed = parseUpdateVarargs(this._dataReader, 'Transaction.update', ref._key, fieldOrUpdateData, value, moreFieldsAndValues);\r\n        }\r\n        else {\r\n            parsed = parseUpdateData(this._dataReader, 'Transaction.update', ref._key, fieldOrUpdateData);\r\n        }\r\n        this._transaction.update(ref._key, parsed);\r\n        return this;\r\n    }\r\n    /**\r\n     * Deletes the document referred to by the provided {@link DocumentReference}.\r\n     *\r\n     * @param documentRef - A reference to the document to be deleted.\r\n     * @returns This `Transaction` instance. Used for chaining method calls.\r\n     */\r\n    delete(documentRef) {\r\n        const ref = validateReference(documentRef, this._firestore);\r\n        this._transaction.delete(ref._key);\r\n        return this;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A reference to a transaction.\r\n *\r\n * The `Transaction` object passed to a transaction's `updateFunction` provides\r\n * the methods to read and write data within the transaction context. See\r\n * {@link runTransaction}.\r\n */\r\nclass Transaction extends Transaction$1 {\r\n    // This class implements the same logic as the Transaction API in the Lite SDK\r\n    // but is subclassed in order to return its own DocumentSnapshot types.\r\n    /** @hideconstructor */\r\n    constructor(_firestore, _transaction) {\r\n        super(_firestore, _transaction);\r\n        this._firestore = _firestore;\r\n    }\r\n    /**\r\n     * Reads the document referenced by the provided {@link DocumentReference}.\r\n     *\r\n     * @param documentRef - A reference to the document to be read.\r\n     * @returns A `DocumentSnapshot` with the read data.\r\n     */\r\n    get(documentRef) {\r\n        const ref = validateReference(documentRef, this._firestore);\r\n        const userDataWriter = new ExpUserDataWriter(this._firestore);\r\n        return super\r\n            .get(documentRef)\r\n            .then(liteDocumentSnapshot => new DocumentSnapshot(this._firestore, userDataWriter, ref._key, liteDocumentSnapshot._document, new SnapshotMetadata(\r\n        /* hasPendingWrites= */ false, \r\n        /* fromCache= */ false), ref.converter));\r\n    }\r\n}\r\n/**\r\n * Executes the given `updateFunction` and then attempts to commit the changes\r\n * applied within the transaction. If any document read within the transaction\r\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\r\n * commit after 5 attempts, the transaction fails.\r\n *\r\n * The maximum number of writes allowed in a single transaction is 500.\r\n *\r\n * @param firestore - A reference to the Firestore database to run this\r\n * transaction against.\r\n * @param updateFunction - The function to execute within the transaction\r\n * context.\r\n * @param options - An options object to configure maximum number of attempts to\r\n * commit.\r\n * @returns If the transaction completed successfully or was explicitly aborted\r\n * (the `updateFunction` returned a failed promise), the promise returned by the\r\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\r\n * rejected promise with the corresponding failure error is returned.\r\n */\r\nfunction runTransaction(firestore, updateFunction, options) {\r\n    firestore = cast(firestore, Firestore);\r\n    const optionsWithDefaults = Object.assign(Object.assign({}, DEFAULT_TRANSACTION_OPTIONS), options);\r\n    validateTransactionOptions(optionsWithDefaults);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    return firestoreClientTransaction(client, internalTransaction => updateFunction(new Transaction(firestore, internalTransaction)), optionsWithDefaults);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\r\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\r\n */\r\nfunction deleteField() {\r\n    return new DeleteFieldValueImpl('deleteField');\r\n}\r\n/**\r\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\r\n * include a server-generated timestamp in the written data.\r\n */\r\nfunction serverTimestamp() {\r\n    return new ServerTimestampFieldValueImpl('serverTimestamp');\r\n}\r\n/**\r\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\r\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\r\n * value that already exists on the server. Each specified element that doesn't\r\n * already exist in the array will be added to the end. If the field being\r\n * modified is not already an array it will be overwritten with an array\r\n * containing exactly the specified elements.\r\n *\r\n * @param elements - The elements to union into the array.\r\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\r\n * `updateDoc()`.\r\n */\r\nfunction arrayUnion(...elements) {\r\n    // NOTE: We don't actually parse the data until it's used in set() or\r\n    // update() since we'd need the Firestore instance to do this.\r\n    return new ArrayUnionFieldValueImpl('arrayUnion', elements);\r\n}\r\n/**\r\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\r\n * updateDoc:1} that tells the server to remove the given elements from any\r\n * array value that already exists on the server. All instances of each element\r\n * specified will be removed from the array. If the field being modified is not\r\n * already an array it will be overwritten with an empty array.\r\n *\r\n * @param elements - The elements to remove from the array.\r\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\r\n * `updateDoc()`\r\n */\r\nfunction arrayRemove(...elements) {\r\n    // NOTE: We don't actually parse the data until it's used in set() or\r\n    // update() since we'd need the Firestore instance to do this.\r\n    return new ArrayRemoveFieldValueImpl('arrayRemove', elements);\r\n}\r\n/**\r\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\r\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\r\n * the given value.\r\n *\r\n * If either the operand or the current field value uses floating point\r\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\r\n * integers, values outside of JavaScript's safe number range\r\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\r\n * precision loss. Furthermore, once processed by the Firestore backend, all\r\n * integer operations are capped between -2^63 and 2^63-1.\r\n *\r\n * If the current field value is not of type `number`, or if the field does not\r\n * yet exist, the transformation sets the field to the given value.\r\n *\r\n * @param n - The value to increment by.\r\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\r\n * `updateDoc()`\r\n */\r\nfunction increment(n) {\r\n    return new NumericIncrementFieldValueImpl('increment', n);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Creates a write batch, used for performing multiple writes as a single\r\n * atomic operation. The maximum number of writes allowed in a single {@link WriteBatch}\r\n * is 500.\r\n *\r\n * Unlike transactions, write batches are persisted offline and therefore are\r\n * preferable when you don't need to condition your writes on read data.\r\n *\r\n * @returns A {@link WriteBatch} that can be used to atomically execute multiple\r\n * writes.\r\n */\r\nfunction writeBatch(firestore) {\r\n    firestore = cast(firestore, Firestore);\r\n    ensureFirestoreConfigured(firestore);\r\n    return new WriteBatch(firestore, mutations => executeWrite(firestore, mutations));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction setIndexConfiguration(firestore, jsonOrConfiguration) {\r\n    var _a;\r\n    firestore = cast(firestore, Firestore);\r\n    const client = ensureFirestoreConfigured(firestore);\r\n    if (!client._uninitializedComponentsProvider ||\r\n        ((_a = client._uninitializedComponentsProvider) === null || _a === void 0 ? void 0 : _a._offlineKind) === 'memory') {\r\n        // PORTING NOTE: We don't return an error if the user has not enabled\r\n        // persistence since `enableIndexeddbPersistence()` can fail on the Web.\r\n        logWarn('Cannot enable indexes when persistence is disabled');\r\n        return Promise.resolve();\r\n    }\r\n    const parsedIndexes = parseIndexes(jsonOrConfiguration);\r\n    return firestoreClientSetIndexConfiguration(client, parsedIndexes);\r\n}\r\nfunction parseIndexes(jsonOrConfiguration) {\r\n    const indexConfiguration = typeof jsonOrConfiguration === 'string'\r\n        ? tryParseJson(jsonOrConfiguration)\r\n        : jsonOrConfiguration;\r\n    const parsedIndexes = [];\r\n    if (Array.isArray(indexConfiguration.indexes)) {\r\n        for (const index of indexConfiguration.indexes) {\r\n            const collectionGroup = tryGetString(index, 'collectionGroup');\r\n            const segments = [];\r\n            if (Array.isArray(index.fields)) {\r\n                for (const field of index.fields) {\r\n                    const fieldPathString = tryGetString(field, 'fieldPath');\r\n                    const fieldPath = fieldPathFromDotSeparatedString('setIndexConfiguration', fieldPathString);\r\n                    if (field.arrayConfig === 'CONTAINS') {\r\n                        segments.push(new IndexSegment(fieldPath, 2 /* IndexKind.CONTAINS */));\r\n                    }\r\n                    else if (field.order === 'ASCENDING') {\r\n                        segments.push(new IndexSegment(fieldPath, 0 /* IndexKind.ASCENDING */));\r\n                    }\r\n                    else if (field.order === 'DESCENDING') {\r\n                        segments.push(new IndexSegment(fieldPath, 1 /* IndexKind.DESCENDING */));\r\n                    }\r\n                }\r\n            }\r\n            parsedIndexes.push(new FieldIndex(FieldIndex.UNKNOWN_ID, collectionGroup, segments, IndexState.empty()));\r\n        }\r\n    }\r\n    return parsedIndexes;\r\n}\r\nfunction tryParseJson(json) {\r\n    try {\r\n        return JSON.parse(json);\r\n    }\r\n    catch (e) {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to parse JSON: ' + (e === null || e === void 0 ? void 0 : e.message));\r\n    }\r\n}\r\nfunction tryGetString(data, property) {\r\n    if (typeof data[property] !== 'string') {\r\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Missing string value for: ' + property);\r\n    }\r\n    return data[property];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nregisterFirestore('node');\n\nexport { AbstractUserDataWriter, AggregateField, AggregateQuerySnapshot, Bytes, CACHE_SIZE_UNLIMITED, CollectionReference, DocumentReference, DocumentSnapshot, FieldPath, FieldValue, Firestore, FirestoreError, GeoPoint, LoadBundleTask, Query, QueryCompositeFilterConstraint, QueryConstraint, QueryDocumentSnapshot, QueryEndAtConstraint, QueryFieldFilterConstraint, QueryLimitConstraint, QueryOrderByConstraint, QuerySnapshot, QueryStartAtConstraint, SnapshotMetadata, Timestamp, Transaction, WriteBatch, DatabaseId as _DatabaseId, DocumentKey as _DocumentKey, EmptyAppCheckTokenProvider as _EmptyAppCheckTokenProvider, EmptyAuthCredentialsProvider as _EmptyAuthCredentialsProvider, FieldPath$1 as _FieldPath, TestingHooks as _TestingHooks, cast as _cast, debugAssert as _debugAssert, isBase64Available as _isBase64Available, logWarn as _logWarn, validateIsNotUsedTogether as _validateIsNotUsedTogether, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, average, clearIndexedDbPersistence, collection, collectionGroup, connectFirestoreEmulator, count, deleteDoc, deleteField, disableNetwork, doc, documentId, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, enableNetwork, endAt, endBefore, ensureFirestoreConfigured, executeWrite, getAggregateFromServer, getCountFromServer, getDoc, getDocFromCache, getDocFromServer, getDocs, getDocsFromCache, getDocsFromServer, getFirestore, increment, initializeFirestore, limit, limitToLast, loadBundle, memoryEagerGarbageCollector, memoryLocalCache, memoryLruGarbageCollector, namedQuery, onSnapshot, onSnapshotsInSync, or, orderBy, persistentLocalCache, persistentMultipleTabManager, persistentSingleTabManager, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setIndexConfiguration, setLogLevel, snapshotEqual, startAfter, startAt, sum, terminate, updateDoc, waitForPendingWrites, where, writeBatch };\n//# sourceMappingURL=index.node.mjs.map\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,MAAM,IAAI,GAAG,qBAAqB,CAAC;AACnC,MAAM,SAAS,GAAG,QAAQ,CAAC;AAE3B;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,IAAI,CAAC;IACP,WAAW,CAAC,GAAG,CAAE;QACb,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACvB,CAAK;IACD,eAAe,GAAG;QACd,OAAO,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC;IAChC,CAAK;IACL;;;KAGA,GACI,KAAK,GAAG;QACJ,IAAI,IAAI,CAAC,eAAe,EAAE,EAAE;YACxB,OAAO,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC;QACrC,CAAS,MACI;YACD,OAAO,gBAAgB,CAAC;QACpC,CAAS;IACT,CAAK;IACD,OAAO,CAAC,SAAS,EAAE;QACf,OAAO,SAAS,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC;IAC1C,CAAK;AACL,CAAC;AACD,4BAAA,GACA,IAAI,CAAC,eAAe,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;AACtC,iEAAA;AACA,8BAAA;AACA,IAAI,CAAC,kBAAkB,GAAG,IAAI,IAAI,CAAC,wBAAwB,CAAC,CAAC;AAC7D,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC;AAEvC,MAAM,OAAO,GAAG,QAAQ,CAAC;AAEzB;;;;;;;;;;;;;;;CAeA,GACA,IAAI,WAAW,GAAG,OAAO,CAAC;AAC1B,SAAS,aAAa,CAAC,OAAO,EAAE;IAC5B,WAAW,GAAG,OAAO,CAAC;AAC1B,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,8DAAA,GACA,SAAS,UAAU,CAAC,KAAK,EAAE;IAC3B,4EAAA;IACI,QAAO,+GAAA,AAAO,EAAC,KAAK,EAAE;QAAE,KAAK,EAAE,GAAG;IAAA,CAAE,CAAC,CAAC;AAC1C,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,4KAAI,SAAM,CAAC,qBAAqB,CAAC,CAAC;AACpD,8EAAA;AACA,SAAS,WAAW,GAAG;IACnB,OAAO,SAAS,CAAC,QAAQ,CAAC;AAC9B,CAAC;AACD;;;;;;;;;;;;CAYA,GACA,SAAS,WAAW,CAAC,QAAQ,EAAE;IAC3B,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AACpC,CAAC;AACD,SAAS,QAAQ,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE;IAC3B,IAAI,SAAS,CAAC,QAAQ,4KAAI,WAAQ,CAAC,KAAK,EAAE;QACtC,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAClC,SAAS,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;IACvE,CAAK;AACL,CAAC;AACD,SAAS,QAAQ,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE;IAC3B,IAAI,SAAS,CAAC,QAAQ,4KAAI,WAAQ,CAAC,KAAK,EAAE;QACtC,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAClC,SAAS,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;IACvE,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE;IAC1B,IAAI,SAAS,CAAC,QAAQ,2KAAI,YAAQ,CAAC,IAAI,EAAE;QACrC,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAClC,SAAS,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC;IACtE,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,WAAW,CAAC,GAAG,EAAE;IACtB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QACzB,OAAO,GAAG,CAAC;IACnB,CAAK,MACI;QACD,IAAI;YACA,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;QACnC,CAAS,CACD,OAAO,CAAC,EAAE;YAClB,0DAAA;YACY,OAAO,GAAG,CAAC;QACvB,CAAS;IACT,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;CAOA,GACA,SAAS,IAAI,CAAC,OAAO,GAAG,kBAAkB,EAAE;IAC5C,sEAAA;IACA,0BAAA;IACI,MAAM,OAAO,GAAG,CAAC,WAAW,EAAE,WAAW,CAAC,6BAA6B,CAAC,GAAG,OAAO,CAAC;IACnF,QAAQ,CAAC,OAAO,CAAC,CAAC;IACtB,6EAAA;IACA,uEAAA;IACA,uEAAA;IACI,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AAC7B,CAAC;AACD;;;;;CAKA,GACA,SAAS,UAAU,CAAC,SAAS,EAAE,OAAO,EAAE;IACpC,IAAI,CAAC,SAAS,EAAE;QACZ,IAAI,EAAE,CAAC;IACf,CAAK;AACL,CAAC;AACD;;;;;;;;;CASA,GACA,SAAS,WAAW,CAAC,SAAS,EAAE,OAAO,EAAE;IACrC,IAAI,CAAC,SAAS,EAAE;QACZ,IAAI,EAAE,CAAC;IACf,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,SAAS,CAAC,GAAG,EACtB,8DAAA;AACA,WAAW,EAAE;IACT,OAAO,GAAG,CAAC;AACf,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,IAAI,GAAG;IACb,0BAAA;IACA,gIAAA;IACA,uCAAA,GACI,EAAE,EAAE,IAAI;IACZ,2DAAA,GACI,SAAS,EAAE,WAAW;IAC1B,6DAAA,GACI,OAAO,EAAE,SAAS;IACtB;;;;;KAKA,GACI,gBAAgB,EAAE,kBAAkB;IACxC;;;;;;KAMA,GACI,iBAAiB,EAAE,mBAAmB;IAC1C,mEAAA,GACI,SAAS,EAAE,WAAW;IAC1B;;;KAGA,GACI,cAAc,EAAE,gBAAgB;IACpC;;;;;;KAMA,GACI,iBAAiB,EAAE,mBAAmB;IAC1C;;;KAGA,GACI,eAAe,EAAE,iBAAiB;IACtC;;;KAGA,GACI,kBAAkB,EAAE,oBAAoB;IAC5C;;;;;;;;;;;;;;;;;;;KAmBA,GACI,mBAAmB,EAAE,qBAAqB;IAC9C;;;;;;KAMA,GACI,OAAO,EAAE,SAAS;IACtB;;;;;;;;;;;;;;KAcA,GACI,YAAY,EAAE,cAAc;IAChC,2EAAA,GACI,aAAa,EAAE,eAAe;IAClC;;;KAGA,GACI,QAAQ,EAAE,UAAU;IACxB;;;;;;KAMA,GACI,WAAW,EAAE,aAAa;IAC9B,2CAAA,GACI,SAAS,EAAE,WAAW;AAC1B,CAAC,CAAC;AACF,gDAAA,GACA,MAAM,cAAc,0LAAS,iBAAa,CAAC;IAC3C,qBAAA,GACI,WAAW,CACf;;KAEA,GACI,IAAI,EACR;;KAEA,GACI,OAAO,CAAE;QACL,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAC/B,0EAAA;QACA,2EAAA;QACA,qEAAA;QACQ,IAAI,CAAC,QAAQ,GAAG,IAAM,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACnF,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,QAAQ,CAAC;IACX,WAAW,EAAG;QACV,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;YAC5C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACjC,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,UAAU,CAAC;IACb,WAAW,CAAC,KAAK,EAAE,IAAI,CAAE;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,MAAM,4BAA4B,CAAC;IAC/B,QAAQ,GAAG;QACP,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACrC,CAAK;IACD,eAAe,GAAG,CAAA,CAAG;IACrB,KAAK,CAAC,UAAU,EAAE,cAAc,EAAE;QACtC,0BAAA;QACQ,UAAU,CAAC,gBAAgB,CAAC,IAAM,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;IAChF,CAAK;IACD,QAAQ,GAAG,CAAA,CAAG;AAClB,CAAC;AACD;;;CAGA,GACA,MAAM,+BAA+B,CAAC;IAClC,WAAW,CAAC,KAAK,CAAE;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC3B;;;;SAIA,GACQ,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IACnC,CAAK;IACD,QAAQ,GAAG;QACP,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAK;IACD,eAAe,GAAG,CAAA,CAAG;IACrB,KAAK,CAAC,UAAU,EAAE,cAAc,EAAE;QAC9B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QAC7C,0BAAA;QACQ,UAAU,CAAC,gBAAgB,CAAC,IAAM,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3E,CAAK;IACD,QAAQ,GAAG;QACP,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IACnC,CAAK;AACL,CAAC;AACD,MAAM,+BAA+B,CAAC;IAClC,WAAW,CAAC,YAAY,CAAE;QACtB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACzC,6BAAA,GACQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC;QAChD;;;SAGA,GACQ,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,CAAK;IACD,KAAK,CAAC,UAAU,EAAE,cAAc,EAAE;QAC9B,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;QAC5C,2EAAA;QACQ,MAAM,qBAAqB,GAAG,IAAI,IAAI;YAClC,IAAI,IAAI,CAAC,YAAY,KAAK,WAAW,EAAE;gBACnC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;gBAChC,OAAO,cAAc,CAAC,IAAI,CAAC,CAAC;YAC5C,CAAa,MACI;gBACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;YACzC,CAAa;QACb,CAAS,CAAC;QACV,qEAAA;QACA,gDAAA;QACQ,IAAI,SAAS,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,MAAM;YACvB,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAClC,SAAS,CAAC,OAAO,EAAE,CAAC;YACpB,SAAS,GAAG,IAAI,QAAQ,EAAE,CAAC;YAC3B,UAAU,CAAC,gBAAgB,CAAC,IAAM,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QACvF,CAAS,CAAC;QACF,MAAM,cAAc,GAAG,MAAM;YACzB,MAAM,mBAAmB,GAAG,SAAS,CAAC;YACtC,UAAU,CAAC,gBAAgB,CAAC,YAAY;gBACpC,MAAM,mBAAmB,CAAC,OAAO,CAAC;gBAClC,MAAM,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC9D,CAAa,CAAC,CAAC;QACf,CAAS,CAAC;QACF,MAAM,YAAY,GAAG,CAAC,IAAI,KAAK;YAC3B,QAAQ,CAAC,iCAAiC,EAAE,eAAe,CAAC,CAAC;YAC7D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACnD,cAAc,EAAE,CAAC;QAC7B,CAAS,CAAC;QACF,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7D,qEAAA;QACA,qEAAA;QACA,yDAAA;QACQ,UAAU,CAAC,MAAM;YACb,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;gBACZ,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC;oBAAE,QAAQ,EAAE,IAAI;gBAAA,CAAE,CAAC,CAAC;gBAChE,IAAI,IAAI,EAAE;oBACN,YAAY,CAAC,IAAI,CAAC,CAAC;gBACvC,CAAiB,MACI;oBACrB,2DAAA;oBACoB,QAAQ,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,CAAC;oBACrE,SAAS,CAAC,OAAO,EAAE,CAAC;oBACpB,SAAS,GAAG,IAAI,QAAQ,EAAE,CAAC;gBAC/C,CAAiB;YACjB,CAAa;QACb,CAAS,EAAE,CAAC,CAAC,CAAC;QACN,cAAc,EAAE,CAAC;IACzB,CAAK;IACD,QAAQ,GAAG;QACf,yEAAA;QACA,wEAAA;QACA,0BAAA;QACQ,MAAM,mBAAmB,GAAG,IAAI,CAAC,YAAY,CAAC;QAC9C,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACzC,CAAS;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,EAAC,SAAS,IAAI;YAClE,mEAAA;YACA,wEAAA;YACA,2BAAA;YACY,IAAI,IAAI,CAAC,YAAY,KAAK,mBAAmB,EAAE;gBAC3C,QAAQ,CAAC,iCAAiC,EAAE,uCAAuC,CAAC,CAAC;gBACrF,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;YACvC,CAAa,MACI;gBACD,IAAI,SAAS,EAAE;oBACX,UAAU,CAAC,OAAO,SAAS,CAAC,WAAW,KAAK,QAAQ,CAAC,CAAC;oBACtD,OAAO,IAAI,UAAU,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;gBACnF,CAAiB,MACI;oBACD,OAAO,IAAI,CAAC;gBAChC,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,eAAe,GAAG;QACd,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IACjC,CAAK;IACD,QAAQ,GAAG;QACP,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAClE,CAAS;IACT,CAAK;IACL,0EAAA;IACA,6EAAA;IACA,sEAAA;IACA,uCAAA;IACI,OAAO,GAAG;QACN,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;QACnD,UAAU,CAAC,UAAU,KAAK,IAAI,IAAI,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC;QAClE,OAAO,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC;IACpC,CAAK;AACL,CAAC;AACD;;;;;;CAMA,GACA,MAAM,eAAe,CAAC;IAClB,WAAW,CAAC,YAAY,EAAE,QAAQ,EAAE,gBAAgB,CAAE;QAClD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;IAClC,CAAK;IACL;;;KAGA,GACI,YAAY,GAAG;QACX,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC3C,CAAS,MACI;YACD,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;IACD,IAAI,OAAO,GAAG;QACV,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAChE,6CAAA;QACQ,MAAM,oBAAoB,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACjD,IAAI,oBAAoB,EAAE;YACtB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,EAAE,oBAAoB,CAAC,CAAC;QACrE,CAAS;QACD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gCAAgC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/E,CAAS;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;IAC7B,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,MAAM,iCAAiC,CAAC;IACpC,WAAW,CAAC,YAAY,EAAE,QAAQ,EAAE,gBAAgB,CAAE;QAClD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IACjD,CAAK;IACD,QAAQ,GAAG;QACP,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAC7G,CAAK;IACD,KAAK,CAAC,UAAU,EAAE,cAAc,EAAE;QACtC,yBAAA;QACQ,UAAU,CAAC,gBAAgB,CAAC,IAAM,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAC5E,CAAK;IACD,QAAQ,GAAG,CAAA,CAAG;IACd,eAAe,GAAG,CAAA,CAAG;AACzB,CAAC;AACD,MAAM,aAAa,CAAC;IAChB,WAAW,CAAC,KAAK,CAAE;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAChE,CAAS;IACT,CAAK;AACL,CAAC;AACD,MAAM,6BAA6B,CAAC;IAChC,WAAW,CAAC,gBAAgB,CAAE;QAC1B,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACxC,CAAK;IACD,KAAK,CAAC,UAAU,EAAE,cAAc,EAAE;QAC9B,MAAM,cAAc,IAAG,WAAW,IAAI;YAClC,IAAI,WAAW,CAAC,KAAK,IAAI,IAAI,EAAE;gBAC3B,QAAQ,CAAC,+BAA+B,EAAE,CAAC,uEAAuE,EAAE,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACjK,CAAa;YACD,MAAM,YAAY,GAAG,WAAW,CAAC,KAAK,KAAK,IAAI,CAAC,mBAAmB,CAAC;YACpE,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,KAAK,CAAC;YAC7C,QAAQ,CAAC,+BAA+B,EAAE,CAAC,SAAS,EAAE,YAAY,GAAG,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YAClG,OAAO,YAAY,GACb,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,GACjC,OAAO,CAAC,OAAO,EAAE,CAAC;QACpC,CAAS,CAAC;QACF,IAAI,CAAC,aAAa,GAAG,CAAC,WAAW,KAAK;YAClC,UAAU,CAAC,gBAAgB,CAAC,IAAM,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC;QAC3E,CAAS,CAAC;QACF,MAAM,gBAAgB,GAAG,CAAC,QAAQ,KAAK;YACnC,QAAQ,CAAC,+BAA+B,EAAE,mBAAmB,CAAC,CAAC;YAC/D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC/D,CAAS,CAAC;QACF,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAC,QAAQ,GAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7E,mEAAA;QACA,4DAAA;QACQ,UAAU,CAAC,MAAM;YACb,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAChB,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;oBAAE,QAAQ,EAAE,IAAI;gBAAA,CAAE,CAAC,CAAC;gBACxE,IAAI,QAAQ,EAAE;oBACV,gBAAgB,CAAC,QAAQ,CAAC,CAAC;gBAC/C,CAAiB,MACI;oBACrB,0DAAA;oBACoB,QAAQ,CAAC,+BAA+B,EAAE,2BAA2B,CAAC,CAAC;gBAC3F,CAAiB;YACjB,CAAa;QACb,CAAS,EAAE,CAAC,CAAC,CAAC;IACd,CAAK;IACD,QAAQ,GAAG;QACP,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACzC,CAAS;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,EAAC,WAAW,IAAI;YAC5D,IAAI,WAAW,EAAE;gBACb,UAAU,CAAC,OAAO,WAAW,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC;gBAClD,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC,KAAK,CAAC;gBAC7C,OAAO,IAAI,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC5D,CAAa,MACI;gBACD,OAAO,IAAI,CAAC;YAC5B,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,eAAe,GAAG;QACd,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IACjC,CAAK;IACD,QAAQ,GAAG;QACP,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAClE,CAAS;IACT,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,MAAM,0BAA0B,CAAC;IAC7B,QAAQ,GAAG;QACP,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;IACtD,CAAK;IACD,eAAe,GAAG,CAAA,CAAG;IACrB,KAAK,CAAC,UAAU,EAAE,cAAc,EAAE,CAAA,CAAG;IACrC,QAAQ,GAAG,CAAA,CAAG;AAClB,CAAC;AACD;;;CAGA,GACA,SAAS,2BAA2B,CAAC,WAAW,EAAE;IAC9C,IAAI,CAAC,WAAW,EAAE;QACd,OAAO,IAAI,4BAA4B,EAAE,CAAC;IAClD,CAAK;IACD,OAAQ,WAAW,CAAC,MAAM,CAAC;QACvB,KAAK,YAAY;YACb,OAAO,IAAI,iCAAiC,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,GAAG,EAAE,WAAW,CAAC,UAAU,CAAC,IAAI,IAAI,EAAE,WAAW,CAAC,kBAAkB,CAAC,IAAI,IAAI,CAAC,CAAC;QAC/J,KAAK,UAAU;YACX,OAAO,WAAW,CAAC,QAAQ,CAAC,CAAC;QACjC;YACI,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,mEAAmE,CAAC,CAAC;IACjI,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;CAIA,GACA,SAAS,WAAW,CAAC,MAAM,EAAE;IACzB,iHAAO,cAAa,AAAb,EAAc,MAAM,CAAC,CAAC;AACjC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,MAAM,CAAC;IACT,OAAO,KAAK,GAAG;QACnB,0BAAA;QACQ,MAAM,KAAK,GAAG,gEAAgE,CAAC;QACvF,8DAAA;QACQ,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;QAClE,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,MAAM,YAAY,GAAG,EAAE,CAAC;QACxB,MAAO,MAAM,CAAC,MAAM,GAAG,YAAY,CAAE;YACjC,MAAM,KAAK,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;YAC9B,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;gBACnD,sEAAA;gBACA,iEAAA;gBACgB,IAAI,MAAM,CAAC,MAAM,GAAG,YAAY,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,WAAW,EAAE;oBACxD,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;gBACpE,CAAiB;YACjB,CAAa;QACb,CAAS;QACD,OAAO,MAAM,CAAC;IACtB,CAAK;AACL,CAAC;AACD,SAAS,mBAAmB,CAAC,IAAI,EAAE,KAAK,EAAE;IACtC,IAAI,IAAI,GAAG,KAAK,EAAE;QACd,OAAO,CAAC,CAAC,CAAC;IAClB,CAAK;IACD,IAAI,IAAI,GAAG,KAAK,EAAE;QACd,OAAO,CAAC,CAAC;IACjB,CAAK;IACD,OAAO,CAAC,CAAC;AACb,CAAC;AACD,8CAAA,GACA,SAAS,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE;IAC1C,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,EAAE;QAC9B,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,KAAK,GAAK,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC;AACD;;;CAGA,GACA,SAAS,kBAAkB,CAAC,CAAC,EAAE;IAC/B,iEAAA;IACI,OAAO,CAAC,GAAG,IAAI,CAAC;AACpB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,8EAAA;AACA,MAAM,WAAW,GAAG,CAAC,WAAW,CAAC;AACjC,0CAAA;AACA,MAAM,WAAW,GAAG,GAAG,CAAC;AACxB;;;;;;;;;;;;;CAaA,GACA,MAAM,SAAS,CAAC;IAChB;;;;;;;;;;KAUA,GACI,WAAW,CACf;;KAEA,GACI,OAAO,EACX;;KAEA,GACI,WAAW,CAAE;QACT,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,WAAW,GAAG,CAAC,EAAE;YACjB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,sCAAsC,GAAG,WAAW,CAAC,CAAC;QAClH,CAAS;QACD,IAAI,WAAW,IAAI,GAAG,EAAE;YACpB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,sCAAsC,GAAG,WAAW,CAAC,CAAC;QAClH,CAAS;QACD,IAAI,OAAO,GAAG,WAAW,EAAE;YACvB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,kCAAkC,GAAG,OAAO,CAAC,CAAC;QAC1G,CAAS;QACT,sCAAA;QACQ,IAAI,OAAO,IAAI,YAAY,EAAE;YACzB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,kCAAkC,GAAG,OAAO,CAAC,CAAC;QAC1G,CAAS;IACT,CAAK;IACL;;;;KAIA,GACI,OAAO,GAAG,GAAG;QACT,OAAO,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAChD,CAAK;IACL;;;;;;KAMA,GACI,OAAO,QAAQ,CAAC,IAAI,EAAE;QAClB,OAAO,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACpD,CAAK;IACL;;;;;;;KAOA,GACI,OAAO,UAAU,CAAC,YAAY,EAAE;QAC5B,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC;QAChD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,YAAY,GAAG,OAAO,GAAG,IAAI,IAAI,WAAW,CAAC,CAAC;QACxE,OAAO,IAAI,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAK;IACL;;;;;;;KAOA,GACI,MAAM,GAAG;QACL,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACzC,CAAK;IACL;;;;;;KAMA,GACI,QAAQ,GAAG;QACP,OAAO,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACpE,CAAK;IACD,UAAU,CAAC,KAAK,EAAE;QACd,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,EAAE;YAChC,OAAO,mBAAmB,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;QAC5E,CAAS;QACD,OAAO,mBAAmB,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IAChE,CAAK;IACL;;;;;KAKA,GACI,OAAO,CAAC,KAAK,EAAE;QACX,OAAQ,KAAK,CAAC,OAAO,KAAK,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW,EAAE;IAC1F,CAAK;IACL,0DAAA,GACI,QAAQ,GAAG;QACP,OAAQ,oBAAoB,GACxB,IAAI,CAAC,OAAO,GACZ,gBAAgB,GAChB,IAAI,CAAC,WAAW,GAChB,GAAG,EAAE;IACjB,CAAK;IACL,oEAAA,GACI,MAAM,GAAG;QACL,OAAO;YAAE,OAAO,EAAE,IAAI,CAAC,OAAO;YAAE,WAAW,EAAE,IAAI,CAAC,WAAW;QAAA,CAAE,CAAC;IACxE,CAAK;IACL;;;KAGA,GACI,OAAO,GAAG;QACd,yEAAA;QACA,0EAAA;QACA,2EAAA;QACA,4EAAA;QACA,2EAAA;QACA,uEAAA;QACA,kEAAA;QACQ,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC;QAC3D,oEAAA;QACA,oBAAA;QACQ,MAAM,gBAAgB,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QACnE,MAAM,oBAAoB,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACvE,OAAO,gBAAgB,GAAG,GAAG,GAAG,oBAAoB,CAAC;IAC7D,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,eAAe,CAAC;IAClB,WAAW,CAAC,SAAS,CAAE;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,CAAK;IACD,OAAO,aAAa,CAAC,KAAK,EAAE;QACxB,OAAO,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAK;IACD,OAAO,GAAG,GAAG;QACT,OAAO,IAAI,eAAe,CAAC,IAAI,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxD,CAAK;IACD,OAAO,GAAG,GAAG;QACT,OAAO,IAAI,eAAe,CAAC,IAAI,SAAS,CAAC,YAAY,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACzE,CAAK;IACD,SAAS,CAAC,KAAK,EAAE;QACb,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC1D,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACvD,CAAK;IACL,0EAAA,GACI,cAAc,GAAG;QACrB,2BAAA;QACQ,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC;IAChF,CAAK;IACD,QAAQ,GAAG;QACP,OAAO,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;IACpE,CAAK;IACD,WAAW,GAAG;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IAC9B,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,iBAAiB,GAAG,UAAU,CAAC;AACrC;;CAEA,GACA,MAAM,QAAQ,CAAC;IACX,WAAW,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAE;QAClC,IAAI,MAAM,KAAK,SAAS,EAAE;YACtB,MAAM,GAAG,CAAC,CAAC;QACvB,CAAS,MACI,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE;YAC/B,IAAI,EAAE,CAAC;QACnB,CAAS;QACD,IAAI,MAAM,KAAK,SAAS,EAAE;YACtB,MAAM,GAAG,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;QAC9C,CAAS,MACI,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,GAAG,MAAM,EAAE;YACxC,IAAI,EAAE,CAAC;QACnB,CAAS;QACD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC;IAC1B,CAAK;IACD,IAAI,MAAM,GAAG;QACT,OAAO,IAAI,CAAC,GAAG,CAAC;IACxB,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAO,QAAQ,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;IACtD,CAAK;IACD,KAAK,CAAC,UAAU,EAAE;QACd,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAChE,IAAI,UAAU,YAAY,QAAQ,EAAE;YAChC,UAAU,CAAC,OAAO,CAAC,OAAO,IAAI;gBAC1B,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACvC,CAAa,CAAC,CAAC;QACf,CAAS,MACI;YACD,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACtC,CAAS;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAK;IACL,wDAAA,GACI,KAAK,GAAG;QACJ,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACzC,CAAK;IACD,QAAQ,CAAC,IAAI,EAAE;QACX,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC;QACrC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;IACrF,CAAK;IACD,OAAO,GAAG;QACN,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC3E,CAAK;IACD,YAAY,GAAG;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1C,CAAK;IACD,WAAW,GAAG;QACV,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACzC,CAAK;IACD,GAAG,CAAC,KAAK,EAAE;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;IAClD,CAAK;IACD,OAAO,GAAG;QACN,OAAO,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;IACjC,CAAK;IACD,UAAU,CAAC,KAAK,EAAE;QACd,IAAI,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE;YAC5B,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;YAClC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBAC9B,OAAO,KAAK,CAAC;YAC7B,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,mBAAmB,CAAC,cAAc,EAAE;QAChC,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,KAAK,cAAc,CAAC,MAAM,EAAE;YAC3C,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;YAClC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBACvC,OAAO,KAAK,CAAC;YAC7B,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,OAAO,CAAC,EAAE,EAAE;QACR,IAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,CAAE;YACxD,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACjC,CAAS;IACT,CAAK;IACD,OAAO,GAAG;QACN,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAC9D,CAAK;IACD,OAAO,UAAU,CAAC,EAAE,EAAE,EAAE,EAAE;QACtB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,CAAE;YAC1B,MAAM,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,IAAI,GAAG,KAAK,EAAE;gBACd,OAAO,CAAC,CAAC,CAAC;YAC1B,CAAa;YACD,IAAI,IAAI,GAAG,KAAK,EAAE;gBACd,OAAO,CAAC,CAAC;YACzB,CAAa;QACb,CAAS;QACD,IAAI,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,EAAE;YACvB,OAAO,CAAC,CAAC,CAAC;QACtB,CAAS;QACD,IAAI,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,EAAE;YACvB,OAAO,CAAC,CAAC;QACrB,CAAS;QACD,OAAO,CAAC,CAAC;IACjB,CAAK;AACL,CAAC;AACD;;;;;CAKA,GACA,MAAM,YAAY,SAAS,QAAQ,CAAC;IAChC,SAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE;QAChC,OAAO,IAAI,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC1D,CAAK;IACD,eAAe,GAAG;QACtB,sEAAA;QACA,0EAAA;QACA,yDAAA;QACQ,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxC,CAAK;IACD,QAAQ,GAAG;QACP,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IACtC,CAAK;IACL;;;;KAIA,GACI,OAAO,UAAU,CAAC,GAAG,cAAc,EAAE;QACzC,sEAAA;QACA,0EAAA;QACA,yDAAA;QACQ,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,KAAK,MAAM,IAAI,IAAI,cAAc,CAAE;YAC/B,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACzB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAAC,qCAAqC,CAAC,CAAC,CAAC;YACjI,CAAa;YACb,qCAAA;YACY,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,EAAC,OAAO,GAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACpF,CAAS;QACD,OAAO,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAK;IACD,OAAO,SAAS,GAAG;QACf,OAAO,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC;IACpC,CAAK;AACL,CAAC;AACD,MAAM,gBAAgB,GAAG,0BAA0B,CAAC;AACpD;;;CAGA,GACA,MAAM,WAAW,SAAS,QAAQ,CAAC;IAC/B,SAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE;QAChC,OAAO,IAAI,WAAW,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACzD,CAAK;IACL;;;KAGA,GACI,OAAO,iBAAiB,CAAC,OAAO,EAAE;QAC9B,OAAO,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAK;IACD,eAAe,GAAG;QACd,OAAO,IAAI,CAAC,OAAO,EAAE,CAChB,GAAG,EAAC,GAAG,IAAI;YACZ,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtD,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE;gBACrC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;YACtC,CAAa;YACD,OAAO,GAAG,CAAC;QACvB,CAAS,CAAC,CACG,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,CAAK;IACD,QAAQ,GAAG;QACP,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IACtC,CAAK;IACL;;KAEA,GACI,UAAU,GAAG;QACT,OAAO,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,iBAAiB,CAAC;IACtE,CAAK;IACL;;KAEA,GACI,OAAO,QAAQ,GAAG;QACd,OAAO,IAAI,WAAW,CAAC;YAAC,iBAAiB;SAAC,CAAC,CAAC;IACpD,CAAK;IACL;;;;;;;;;KASA,GACI,OAAO,gBAAgB,CAAC,IAAI,EAAE;QAC1B,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,MAAM,iBAAiB,GAAG,MAAM;YAC5B,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,oBAAoB,EAAE,IAAI,CAAC,kCAAkC,CAAC,GAC3G,CAAC,uCAAuC,CAAC,CAAC,CAAC;YAC/D,CAAa;YACD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACvB,OAAO,GAAG,EAAE,CAAC;QACzB,CAAS,CAAC;QACF,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,MAAO,CAAC,GAAG,IAAI,CAAC,MAAM,CAAE;YACpB,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,KAAK,IAAI,EAAE;gBACZ,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,MAAM,EAAE;oBACvB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,sCAAsC,GAAG,IAAI,CAAC,CAAC;gBACnH,CAAiB;gBACD,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAA,CAAE,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;oBAClD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,oCAAoC,GAAG,IAAI,CAAC,CAAC;gBACjH,CAAiB;gBACD,OAAO,IAAI,IAAI,CAAC;gBAChB,CAAC,IAAI,CAAC,CAAC;YACvB,CAAa,MACI,IAAI,CAAC,KAAK,GAAG,EAAE;gBAChB,WAAW,GAAG,CAAC,WAAW,CAAC;gBAC3B,CAAC,EAAE,CAAC;YACpB,CAAa,MACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE;gBAChC,iBAAiB,EAAE,CAAC;gBACpB,CAAC,EAAE,CAAC;YACpB,CAAa,MACI;gBACD,OAAO,IAAI,CAAC,CAAC;gBACb,CAAC,EAAE,CAAC;YACpB,CAAa;QACb,CAAS;QACD,iBAAiB,EAAE,CAAC;QACpB,IAAI,WAAW,EAAE;YACb,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,0BAA0B,GAAG,IAAI,CAAC,CAAC;QAC/F,CAAS;QACD,OAAO,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAK;IACD,OAAO,SAAS,GAAG;QACf,OAAO,IAAI,WAAW,CAAC,EAAE,CAAC,CAAC;IACnC,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,MAAM,WAAW,CAAC;IACd,WAAW,CAAC,IAAI,CAAE;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,CAAK;IACD,OAAO,QAAQ,CAAC,IAAI,EAAE;QAClB,OAAO,IAAI,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9D,CAAK;IACD,OAAO,QAAQ,CAAC,IAAI,EAAE;QAClB,OAAO,IAAI,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1E,CAAK;IACD,OAAO,KAAK,GAAG;QACX,OAAO,IAAI,WAAW,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,CAAC;IACzD,CAAK;IACD,IAAI,eAAe,GAAG;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,WAAW,EAAE,CAAC;IACjD,CAAK;IACL,mEAAA,GACI,eAAe,CAAC,YAAY,EAAE;QAC1B,OAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IACzB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,YAAY,EAAE;IAClE,CAAK;IACL,wFAAA,GACI,kBAAkB,GAAG;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACnD,CAAK;IACL,+DAAA,GACI,iBAAiB,GAAG;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACnC,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAQ,KAAK,KAAK,IAAI,IAAI,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;IACxF,CAAK;IACD,QAAQ,GAAG;QACP,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IACpC,CAAK;IACD,OAAO,UAAU,CAAC,EAAE,EAAE,EAAE,EAAE;QACtB,OAAO,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;IACzD,CAAK;IACD,OAAO,aAAa,CAAC,IAAI,EAAE;QACvB,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC;IACrC,CAAK;IACL;;;;;KAKA,GACI,OAAO,YAAY,CAAC,QAAQ,EAAE;QAC1B,OAAO,IAAI,WAAW,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACnE,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,wBAAwB,GAAG,CAAC,CAAC,CAAC;AACpC;;;CAGA,GACA,MAAM,uBAAuB,GAAG,CAAC,CAAC;AAClC;;;;;;;;;;CAUA,GACA,MAAM,UAAU,CAAC;IACb,WAAW,CACf;;;KAGA,GACI,OAAO,EACX,6CAAA,GACI,eAAe,EACnB,uCAAA,GACI,MAAM,EACV,4DAAA,GACI,UAAU,CAAE;QACR,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;AACL,CAAC;AACD,oEAAA,GACA,UAAU,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;AAC3B,uEAAA,GACA,SAAS,yBAAyB,CAAC,UAAU,EAAE;IAC3C,OAAO,UAAU,CAAC,MAAM,CAAC,IAAI,EAAC,CAAC,GAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAA,sBAAA,GAA0B,CAAC;AAC9E,CAAC;AACD,4EAAA,GACA,SAAS,gCAAgC,CAAC,UAAU,EAAE;IAClD,OAAO,UAAU,CAAC,MAAM,CAAC,MAAM,EAAC,CAAC,GAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAA,sBAAA,GAA0B,CAAC;AAChF,CAAC;AACD;;;;CAIA,GACA,SAAS,qBAAqB,CAAC,UAAU,EAAE;IACvC,MAAM,mBAAmB,GAAG,gCAAgC,CAAC,UAAU,CAAC,CAAC;IACzE,OAAO,mBAAmB,CAAC,MAAM,KAAK,CAAC,GACjC,CAAC,CAAA,uBAAA,MACD,mBAAmB,CAAC,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;AACnE,CAAC;AACD;;;CAGA,GACA,SAAS,4BAA4B,CAAC,IAAI,EAAE,KAAK,EAAE;IAC/C,IAAI,GAAG,GAAG,mBAAmB,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,eAAe,CAAC,CAAC;IAC3E,IAAI,GAAG,KAAK,CAAC,EAAE;QACX,OAAO,GAAG,CAAC;IACnB,CAAK;IACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAE;QACxE,GAAG,GAAG,sBAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D,IAAI,GAAG,KAAK,CAAC,EAAE;YACX,OAAO,GAAG,CAAC;QACvB,CAAS;IACT,CAAK;IACD,OAAO,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACxE,CAAC;AACD,sDAAA,GACA,SAAS,kBAAkB,CAAC,UAAU,EAAE;IACpC,OAAO,CAAC,GAAG,EAAE,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,MAAM,CAAC,GAAG,EAAC,CAAC,GAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7I,CAAC;AACD,iEAAA,GACA,MAAM,YAAY,CAAC;IACf,WAAW,CACf,qCAAA,GACI,SAAS,EACb,8BAAA,GACI,IAAI,CAAE;QACF,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,CAAK;AACL,CAAC;AACD,SAAS,sBAAsB,CAAC,IAAI,EAAE,KAAK,EAAE;IACzC,MAAM,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;IACpE,IAAI,GAAG,KAAK,CAAC,EAAE;QACX,OAAO,GAAG,CAAC;IACnB,CAAK;IACD,OAAO,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;AACtD,CAAC;AACD;;;CAGA,GACA,MAAM,UAAU,CAAC;IACb,WAAW,CACf;;KAEA,GACI,cAAc,EAClB,6DAAA,GACI,MAAM,CAAE;QACJ,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,CAAK;IACL,4DAAA,GACI,OAAO,KAAK,GAAG;QACX,OAAO,IAAI,UAAU,CAAC,uBAAuB,EAAE,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;IAC1E,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,mCAAmC,CAAC,QAAQ,EAAE,cAAc,EAAE;IACvE,0EAAA;IACA,wEAAA;IACA,0EAAA;IACA,4EAAA;IACA,8EAAA;IACA,0BAAA;IACI,MAAM,gBAAgB,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC;IACxD,MAAM,cAAc,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,CAAC,CAAC;IAC9D,MAAM,SAAS,GAAG,eAAe,CAAC,aAAa,CAAC,cAAc,KAAK,GAAG,GAChE,IAAI,SAAS,CAAC,gBAAgB,GAAG,CAAC,EAAE,CAAC,CAAC,GACtC,IAAI,SAAS,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC,CAAC;IACvD,OAAO,IAAI,WAAW,CAAC,SAAS,EAAE,WAAW,CAAC,KAAK,EAAE,EAAE,cAAc,CAAC,CAAC;AAC3E,CAAC;AACD,yDAAA,GACA,SAAS,0BAA0B,CAAC,QAAQ,EAAE;IAC1C,OAAO,IAAI,WAAW,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;AACtF,CAAC;AACD;;;CAGA,GACA,MAAM,WAAW,CAAC;IACd,WAAW,CACf;;;KAGA,GACI,QAAQ,EACZ;;;KAGA,GACI,WAAW,EACf;;KAEA,GACI,cAAc,CAAE;QACZ,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IAC7C,CAAK;IACL,6DAAA,GACI,OAAO,GAAG,GAAG;QACT,OAAO,IAAI,WAAW,CAAC,eAAe,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,KAAK,EAAE,EAAE,wBAAwB,CAAC,CAAC;IACrG,CAAK;IACL,4DAAA,GACI,OAAO,GAAG,GAAG;QACT,OAAO,IAAI,WAAW,CAAC,eAAe,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,KAAK,EAAE,EAAE,wBAAwB,CAAC,CAAC;IACrG,CAAK;AACL,CAAC;AACD,SAAS,qBAAqB,CAAC,IAAI,EAAE,KAAK,EAAE;IACxC,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAClD,IAAI,GAAG,KAAK,CAAC,EAAE;QACX,OAAO,GAAG,CAAC;IACnB,CAAK;IACD,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;IAClE,IAAI,GAAG,KAAK,CAAC,EAAE;QACX,OAAO,GAAG,CAAC;IACnB,CAAK;IACD,OAAO,mBAAmB,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC;AAC1E,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,4BAA4B,GAAG,0EAA0E,GAC3G,mDAAmD,CAAC;AACxD;;;;;;;CAOA,GACA,MAAM,sBAAsB,CAAC;IACzB,WAAW,EAAG;QACV,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;IACvC,CAAK;IACD,sBAAsB,CAAC,QAAQ,EAAE;QAC7B,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAK;IACD,qBAAqB,GAAG;QACpB,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAC,QAAQ,GAAI,QAAQ,EAAE,CAAC,CAAC;IAClE,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;CASA,GACA,eAAe,wBAAwB,CAAC,GAAG,EAAE;IACzC,IAAI,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,mBAAmB,IACrC,GAAG,CAAC,OAAO,KAAK,4BAA4B,EAAE;QAC9C,QAAQ,CAAC,YAAY,EAAE,iCAAiC,CAAC,CAAC;IAClE,CAAK,MACI;QACD,MAAM,GAAG,CAAC;IAClB,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;;;CAYA,GACA,MAAM,kBAAkB,CAAC;IACrB,WAAW,CAAC,QAAQ,CAAE;QAC1B,2EAAA;QACA,kDAAA;QACQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAClC,0EAAA;QACQ,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAC5B,0EAAA;QACA,YAAA;QACQ,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,QAAQ,EAAC,KAAK,IAAI;YACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,IAAI,CAAC,YAAY,EAAE;gBACnC,iEAAA;gBACA,2BAAA;gBACgB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACzC,CAAa;QACb,CAAS,EAAE,KAAK,IAAI;YACR,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,IAAI,CAAC,aAAa,EAAE;gBACpB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC1C,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,KAAK,CAAC,EAAE,EAAE;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IACxC,CAAK;IACD,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE;QAClB,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,IAAI,EAAE,CAAC;QACnB,CAAS;QACD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBACb,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7D,CAAa,MACI;gBACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7D,CAAa;QACb,CAAS,MACI;YACD,OAAO,IAAI,kBAAkB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;gBAC/C,IAAI,CAAC,YAAY,GAAG,CAAC,KAAK,KAAK;oBAC3B,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC1E,CAAiB,CAAC;gBACF,IAAI,CAAC,aAAa,GAAG,CAAC,KAAK,KAAK;oBAC5B,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC3E,CAAiB,CAAC;YAClB,CAAa,CAAC,CAAC;QACf,CAAS;IACT,CAAK;IACD,SAAS,GAAG;QACR,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;YACpC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACvC,CAAS,CAAC,CAAC;IACX,CAAK;IACD,gBAAgB,CAAC,EAAE,EAAE;QACjB,IAAI;YACA,MAAM,MAAM,GAAG,EAAE,EAAE,CAAC;YACpB,IAAI,MAAM,YAAY,kBAAkB,EAAE;gBACtC,OAAO,MAAM,CAAC;YAC9B,CAAa,MACI;gBACD,OAAO,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC1D,CAAa;QACb,CAAS,CACD,OAAO,CAAC,EAAE;YACN,OAAO,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAChD,CAAS;IACT,CAAK;IACD,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE;QACvB,IAAI,MAAM,EAAE;YACR,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAM,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9D,CAAS,MACI;YACb,qDAAA;YACY,OAAO,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrD,CAAS;IACT,CAAK;IACD,WAAW,CAAC,OAAO,EAAE,KAAK,EAAE;QACxB,IAAI,OAAO,EAAE;YACT,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAM,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/D,CAAS,MACI;YACD,OAAO,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACpD,CAAS;IACT,CAAK;IACD,OAAO,OAAO,CAAC,MAAM,EAAE;QACnB,OAAO,IAAI,kBAAkB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;YAC/C,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,OAAO,MAAM,CAAC,KAAK,EAAE;QACjB,OAAO,IAAI,kBAAkB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;YAC/C,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,OAAO,OAAO,CAClB,yCAAA;IACA,8DAAA;IACI,GAAG,EAAE;QACD,OAAO,IAAI,kBAAkB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;YAC/C,IAAI,aAAa,GAAG,CAAC,CAAC;YACtB,IAAI,aAAa,GAAG,CAAC,CAAC;YACtB,IAAI,IAAI,GAAG,KAAK,CAAC;YACjB,GAAG,CAAC,OAAO,EAAC,OAAO,IAAI;gBACnB,EAAE,aAAa,CAAC;gBAChB,OAAO,CAAC,IAAI,CAAC,MAAM;oBACf,EAAE,aAAa,CAAC;oBAChB,IAAI,IAAI,IAAI,aAAa,KAAK,aAAa,EAAE;wBACzC,OAAO,EAAE,CAAC;oBAClC,CAAqB;gBACrB,CAAiB,EAAE,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACvC,CAAa,CAAC,CAAC;YACH,IAAI,GAAG,IAAI,CAAC;YACZ,IAAI,aAAa,KAAK,aAAa,EAAE;gBACjC,OAAO,EAAE,CAAC;YAC1B,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;;KAKA,GACI,OAAO,EAAE,CAAC,UAAU,EAAE;QAClB,IAAI,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1C,KAAK,MAAM,SAAS,IAAI,UAAU,CAAE;YAChC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAC,MAAM,IAAI;gBACjB,IAAI,MAAM,EAAE;oBACR,OAAO,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAC9D,CAAiB,MACI;oBACD,OAAO,SAAS,EAAE,CAAC;gBACvC,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS;QACD,OAAO,CAAC,CAAC;IACjB,CAAK;IACD,OAAO,OAAO,CAAC,UAAU,EAAE,CAAC,EAAE;QAC1B,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;YACzB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAS,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAK;IACL;;KAEA,GACI,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE;QACtB,OAAO,IAAI,kBAAkB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;YAC/C,MAAM,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC;YACnC,MAAM,OAAO,GAAG,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;YACzC,IAAI,aAAa,GAAG,CAAC,CAAC;YACtB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,CAAE;gBACpC,MAAM,OAAO,GAAG,CAAC,CAAC;gBAClB,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAC,MAAM,IAAI;oBAC7B,OAAO,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;oBAC1B,EAAE,aAAa,CAAC;oBAChB,IAAI,aAAa,KAAK,aAAa,EAAE;wBACjC,OAAO,CAAC,OAAO,CAAC,CAAC;oBACzC,CAAqB;gBACrB,CAAiB,GAAE,GAAG,GAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACvC,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;;KAKA,GACI,OAAO,OAAO,CAAC,SAAS,EAAE,MAAM,EAAE;QAC9B,OAAO,IAAI,kBAAkB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;YAC/C,MAAM,OAAO,IAAG,MAAM;gBAClB,IAAI,SAAS,EAAE,KAAK,IAAI,EAAE;oBACtB,MAAM,EAAE,CAAC,IAAI,CAAC,MAAM;wBAChB,OAAO,EAAE,CAAC;oBAClC,CAAqB,EAAE,MAAM,CAAC,CAAC;gBAC/B,CAAiB,MACI;oBACD,OAAO,EAAE,CAAC;gBAC9B,CAAiB;YACjB,CAAa,CAAC;YACF,OAAO,EAAE,CAAC;QACtB,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,+DAAA;AACA,wCAAA,GACA,MAAM,SAAS,GAAG,UAAU,CAAC;AAC7B;;;CAGA,GACA,MAAM,uBAAuB,GAAG,CAAC,CAAC;AAClC;;;CAGA,GACA,MAAM,mBAAmB,CAAC;IACtB,WAAW,CAAC,MAAM,EAAE,WAAW,CAAE;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QAC7B;;SAEA,GACQ,IAAI,CAAC,kBAAkB,GAAG,IAAI,QAAQ,EAAE,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,UAAU,GAAG,MAAM;YAChC,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;QAC9C,CAAS,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,OAAO,GAAG,MAAM;YAC7B,IAAI,WAAW,CAAC,KAAK,EAAE;gBACnB,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,yBAAyB,CAAC,MAAM,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACzG,CAAa,MACI;gBACD,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;YAClD,CAAa;QACb,CAAS,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,OAAO,GAAG,CAAC,KAAK,KAAK;YAClC,MAAM,KAAK,GAAG,yBAAyB,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5D,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,yBAAyB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;QACzF,CAAS,CAAC;IACV,CAAK;IACD,OAAO,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,gBAAgB,EAAE;QAC5C,IAAI;YACA,OAAO,IAAI,mBAAmB,CAAC,MAAM,EAAE,EAAE,CAAC,WAAW,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3F,CAAS,CACD,OAAO,CAAC,EAAE;YACN,MAAM,IAAI,yBAAyB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3D,CAAS;IACT,CAAK;IACD,IAAI,iBAAiB,GAAG;QACpB,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;IAC/C,CAAK;IACD,KAAK,CAAC,KAAK,EAAE;QACT,IAAI,KAAK,EAAE;YACP,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAClD,CAAS;QACD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,QAAQ,CAAC,SAAS,EAAE,uBAAuB,EAAE,KAAK,GAAG,KAAK,CAAC,OAAO,GAAG,wBAAwB,CAAC,CAAC;YAC/F,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACrC,CAAS;IACT,CAAK;IACD,WAAW,GAAG;QAClB,yEAAA;QACA,iEAAA;QACA,8DAAA;QACQ,MAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,OAAO,gBAAgB,CAAC,MAAM,KAAK,UAAU,EAAE;YAChE,gBAAgB,CAAC,MAAM,EAAE,CAAC;QACtC,CAAS;IACT,CAAK;IACL;;;;;;;;KAQA,GACI,KAAK,CAAC,SAAS,EAAE;QACb,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACtD,OAAO,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC;IACxC,CAAK;AACL,CAAC;AACD;;;;;;CAMA,GACA,MAAM,QAAQ,CAAC;IACf;;;;;;;;KAQA,GACI,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,eAAe,CAAE;QACxC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,uLAAC,QAAA,AAAK,EAAE,CAAC,CAAC;QAC3D,yEAAA;QACA,uEAAA;QACA,4EAAA;QACA,eAAA;QACQ,IAAI,UAAU,KAAK,IAAI,EAAE;YACrB,QAAQ,CAAC,uDAAuD,GAC5D,sDAAsD,GACtD,0DAA0D,GAC1D,6BAA6B,CAAC,CAAC;QAC/C,CAAS;IACT,CAAK;IACL,oCAAA,GACI,OAAO,MAAM,CAAC,IAAI,EAAE;QAChB,QAAQ,CAAC,SAAS,EAAE,oBAAoB,EAAE,IAAI,CAAC,CAAC;QAChD,OAAO,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IAC9E,CAAK;IACL,uEAAA,GACI,OAAO,WAAW,GAAG;QACjB,IAAI,uLAAC,uBAAA,AAAoB,EAAE,GAAE;YACzB,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,QAAQ,CAAC,iBAAiB,EAAE,EAAE;YAC9B,OAAO,IAAI,CAAC;QACxB,CAAS;QACT,6DAAA;QACA,uEAAA;QACA,yEAAA;QACA,gEAAA;QACA,kDAAA;QACA,4GAAA;QACA,+CAAA;QACQ,MAAM,EAAE,yLAAG,QAAA,AAAK,EAAE,CAAC;QAC3B,QAAA;QACA,2EAAA;QACA,QAAA;QACA,wEAAA;QACA,OAAA;QACA,wEAAA;QACA,4DAAA;QACA,0DAAA;QACQ,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;QAC9C,MAAM,gBAAgB,GAAG,CAAC,GAAG,UAAU,IAAI,UAAU,GAAG,EAAE,CAAC;QACnE,6DAAA;QACQ,MAAM,cAAc,GAAG,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QACtD,MAAM,oBAAoB,GAAG,CAAC,GAAG,cAAc,IAAI,cAAc,GAAG,GAAG,CAAC;QACxE,IAAI,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IACvB,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAC1B,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IACvB,gBAAgB,IAChB,oBAAoB,EAAE;YACtB,OAAO,KAAK,CAAC;QACzB,CAAS,MACI;YACD,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,OAAO,iBAAiB,GAAG;QACvB,IAAI,EAAE,CAAC;QACP,OAAQ,OAAO,OAAO,KAAK,WAAW,IAClC,CAAC,CAAC,EAAE,GAAG,OAAO,CAAC,GAAG,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,oBAAoB,MAAM,KAAK,EAAE;IACzG,CAAK;IACL,4DAAA,GACI,OAAO,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE;QACxB,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAChC,CAAK;IACL,sBAAA;IACA,wEAAA,GACI,OAAO,aAAa,CAAC,EAAE,EAAE;QACrB,MAAM,eAAe,GAAG,EAAE,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACpE,MAAM,OAAO,GAAG,eAAe,GACzB,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GACnD,IAAI,CAAC;QACX,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAK;IACL,sBAAA;IACA,4EAAA,GACI,OAAO,iBAAiB,CAAC,EAAE,EAAE;QACzB,MAAM,mBAAmB,GAAG,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC1D,MAAM,OAAO,GAAG,mBAAmB,GAC7B,mBAAmB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GACvD,IAAI,CAAC;QACX,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAK;IACL;;KAEA,GACI,MAAM,QAAQ,CAAC,MAAM,EAAE;QACnB,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;YACV,QAAQ,CAAC,SAAS,EAAE,mBAAmB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACpD,IAAI,CAAC,EAAE,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;gBAC7D,sDAAA;gBACA,iFAAA;gBACA,wDAAA;gBACA,0DAAA;gBACA,sFAAA;gBACgB,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBACxD,OAAO,CAAC,SAAS,GAAG,CAAC,KAAK,KAAK;oBAC3B,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;oBAC/B,OAAO,CAAC,EAAE,CAAC,CAAC;gBAChC,CAAiB,CAAC;gBACF,OAAO,CAAC,SAAS,GAAG,MAAM;oBACtB,MAAM,CAAC,IAAI,yBAAyB,CAAC,MAAM,EAAE,6DAA6D,GACtG,uEAAuE,CAAC,CAAC,CAAC;gBAClG,CAAiB,CAAC;gBACF,OAAO,CAAC,OAAO,GAAG,CAAC,KAAK,KAAK;oBACzB,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;oBACjC,IAAI,KAAK,CAAC,IAAI,KAAK,cAAc,EAAE;wBAC/B,MAAM,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,gFAAgF,GAChI,gFAAgF,GAChF,0EAA0E,GAC1E,iFAAiF,GACjF,mCAAmC,CAAC,CAAC,CAAC;oBAClE,CAAqB,MACI,IAAI,KAAK,CAAC,IAAI,KAAK,mBAAmB,EAAE;wBACzC,MAAM,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,4EAA4E,GAC5H,+EAA+E,GAC/E,qBAAqB,GACrB,KAAK,CAAC,CAAC,CAAC;oBACpC,CAAqB,MACI;wBACD,MAAM,CAAC,IAAI,yBAAyB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;oBAC7E,CAAqB;gBACrB,CAAiB,CAAC;gBACF,OAAO,CAAC,eAAe,GAAG,CAAC,KAAK,KAAK;oBACjC,QAAQ,CAAC,SAAS,EAAE,YAAY,GAAG,IAAI,CAAC,IAAI,GAAG,kCAAkC,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;oBACrG,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;oBAC/B,IAAI,CAAC,eAAe,CACf,eAAe,CAAC,EAAE,EAAE,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,CACxE,IAAI,CAAC,MAAM;wBACZ,QAAQ,CAAC,SAAS,EAAE,8BAA8B,GAAG,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,CAAC;oBACzG,CAAqB,CAAC,CAAC;gBACvB,CAAiB,CAAC;YAClB,CAAa,CAAC,CAAC;QACf,CAAS;QACD,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAC5B,IAAI,CAAC,EAAE,CAAC,eAAe,IAAG,KAAK,GAAI,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QACjF,CAAS;QACD,OAAO,IAAI,CAAC,EAAE,CAAC;IACvB,CAAK;IACD,wBAAwB,CAAC,qBAAqB,EAAE;QAC5C,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACnD,IAAI,IAAI,CAAC,EAAE,EAAE;YACT,IAAI,CAAC,EAAE,CAAC,eAAe,GAAG,CAAC,KAAK,KAAK;gBACjC,OAAO,qBAAqB,CAAC,KAAK,CAAC,CAAC;YACpD,CAAa,CAAC;QACd,CAAS;IACT,CAAK;IACD,MAAM,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,aAAa,EAAE;QAC5D,MAAM,QAAQ,GAAG,IAAI,KAAK,UAAU,CAAC;QACrC,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,MAAO,IAAI,CAAE;YACT,EAAE,aAAa,CAAC;YAChB,IAAI;gBACA,IAAI,CAAC,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACtC,MAAM,WAAW,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,QAAQ,GAAG,UAAU,GAAG,WAAW,EAAE,YAAY,CAAC,CAAC;gBACjH,MAAM,mBAAmB,GAAG,aAAa,CAAC,WAAW,CAAC,CACjD,IAAI,EAAC,MAAM,IAAI;oBAChB,WAAW,CAAC,WAAW,EAAE,CAAC;oBAC1B,OAAO,MAAM,CAAC;gBAClC,CAAiB,CAAC,CACG,KAAK,EAAC,KAAK,IAAI;oBACpC,+CAAA;oBACoB,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAC7C,iFAAA;oBACA,0EAAA;oBACA,mFAAA;oBACA,wEAAA;oBACoB,OAAO,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC5D,CAAiB,CAAC,CACG,SAAS,EAAE,CAAC;gBACjC,wEAAA;gBACA,0EAAA;gBACgB,mBAAmB,CAAC,KAAK,CAAC,KAAM,CAAA,AAAG,CAAC,CAAC;gBACrD,4EAAA;gBACA,uEAAA;gBACA,UAAA;gBACgB,MAAM,WAAW,CAAC,iBAAiB,CAAC;gBACpC,OAAO,mBAAmB,CAAC;YAC3C,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,MAAM,KAAK,GAAG,CAAC,CAAC;gBAChC,uEAAA;gBACA,oEAAA;gBACA,oBAAA;gBACA,4EAAA;gBACA,uEAAA;gBACgB,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,KAAK,eAAe,IAC5C,aAAa,GAAG,uBAAuB,CAAC;gBAC5C,QAAQ,CAAC,SAAS,EAAE,gCAAgC,EAAE,KAAK,CAAC,OAAO,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;gBAC7F,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,IAAI,CAAC,SAAS,EAAE;oBACZ,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACjD,CAAiB;YACjB,CAAa;QACb,CAAS;IACT,CAAK;IACD,KAAK,GAAG;QACJ,IAAI,IAAI,CAAC,EAAE,EAAE;YACT,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;QAC5B,CAAS;QACD,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC;IAC5B,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,MAAM,mBAAmB,CAAC;IACtB,WAAW,CAAC,QAAQ,CAAE;QAClB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IAC5B,CAAK;IACD,IAAI,MAAM,GAAG;QACT,OAAO,IAAI,CAAC,UAAU,CAAC;IAC/B,CAAK;IACD,IAAI,SAAS,GAAG;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC;IAC5B,CAAK;IACD,IAAI,MAAM,CAAC,KAAK,EAAE;QACd,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC9B,CAAK;IACL;;KAEA,GACI,IAAI,GAAG;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC/B,CAAK;IACL;;;KAGA,GACI,IAAI,CAAC,GAAG,EAAE;QACN,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;IAC3B,CAAK;IACL;;;;KAIA,GACI,MAAM,GAAG;QACL,OAAO,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;IACnD,CAAK;AACL,CAAC;AACD,2EAAA,GACA,MAAM,yBAAyB,SAAS,cAAc,CAAC;IACnD,WAAW,CAAC,UAAU,EAAE,KAAK,CAAE;QAC3B,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,uBAAuB,EAAE,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAClF,IAAI,CAAC,IAAI,GAAG,2BAA2B,CAAC;IAChD,CAAK;AACL,CAAC;AACD,0DAAA,GACA,SAAS,2BAA2B,CAAC,CAAC,EAAE;IACxC,2EAAA;IACA,0BAAA;IACI,OAAO,CAAC,CAAC,IAAI,KAAK,2BAA2B,CAAC;AAClD,CAAC;AACD;;;;;;;;;CASA,GACA,MAAM,aAAa,CAAC;IAChB,WAAW,CAAC,KAAK,CAAE;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,CAAK;IACD,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE;QACnB,IAAI,OAAO,CAAC;QACZ,IAAI,KAAK,KAAK,SAAS,EAAE;YACrB,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;YAC/D,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QACxD,CAAS,MACI;YACD,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;YACtE,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACjD,CAAS;QACD,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC;IACpC,CAAK;IACL;;;;;;KAMA,GACI,GAAG,CAAC,KAAK,EAAE;QACP,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QAC1D,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACtC,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC;IACpC,CAAK;IACL;;;;;;KAMA,GACI,GAAG,CAAC,GAAG,EAAE;QACL,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5C,2CAAA;QACA,8DAAA;QACQ,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI;YACnD,kCAAA;YACY,IAAI,MAAM,KAAK,SAAS,EAAE;gBACtB,MAAM,GAAG,IAAI,CAAC;YAC9B,CAAa;YACD,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;YACzD,OAAO,MAAM,CAAC;QAC1B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,MAAM,CAAC,GAAG,EAAE;QACR,QAAQ,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACvC,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC;IACpC,CAAK;IACL;;;;;KAKA,GACI,KAAK,GAAG;QACJ,QAAQ,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9C,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnC,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC;IACpC,CAAK;IACD,OAAO,CAAC,YAAY,EAAE,KAAK,EAAE;QACzB,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACjE,wEAAA;QACA,uEAAA;QACQ,IAAI,CAAC,cAAc,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,UAAU,EAAE;YAClE,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YACxD,OAAO,IAAI,kBAAkB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;gBAC/C,OAAO,CAAC,OAAO,GAAG,CAAC,KAAK,KAAK;oBACzB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC/C,CAAiB,CAAC;gBACF,OAAO,CAAC,SAAS,GAAG,CAAC,KAAK,KAAK;oBAC3B,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACjD,CAAiB,CAAC;YAClB,CAAa,CAAC,CAAC;QACf,CAAS,MACI;YACD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAC3C,MAAM,OAAO,GAAG,EAAE,CAAC;YACnB,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,KAAK,KAAK;gBAC9C,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpC,CAAa,CAAC,CAAC,IAAI,CAAC,MAAM;gBACV,OAAO,OAAO,CAAC;YAC/B,CAAa,CAAC,CAAC;QACf,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE;QACpB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,KAAK,IAAI,GAAG,SAAS,GAAG,KAAK,CAAC,CAAC;QAC7E,OAAO,IAAI,kBAAkB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;YAC/C,OAAO,CAAC,OAAO,GAAG,CAAC,KAAK,KAAK;gBACzB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC3C,CAAa,CAAC;YACF,OAAO,CAAC,SAAS,GAAG,CAAC,KAAK,KAAK;gBAC3B,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC7C,CAAa,CAAC;QACd,CAAS,CAAC,CAAC;IACX,CAAK;IACD,SAAS,CAAC,YAAY,EAAE,KAAK,EAAE;QAC3B,QAAQ,CAAC,SAAS,EAAE,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;QACzB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,KAAK;YACnE,0EAAA;YACA,wDAAA;YACA,4EAAA;YACA,2DAAA;YACA,0EAAA;YACA,sDAAA;YACY,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;QACpC,CAAS,CAAC,CAAC;IACX,CAAK;IACD,OAAO,CAAC,iBAAiB,EAAE,QAAQ,EAAE;QACjC,IAAI,OAAO,CAAC;QACZ,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,GAAG,CAAA,CAAE,CAAC;YACb,QAAQ,GAAG,iBAAiB,CAAC;QACzC,CAAS,MACI;YACD,OAAO,GAAG,iBAAiB,CAAC;QACxC,CAAS;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACpD,CAAK;IACL;;;;;;;KAOA,GACI,aAAa,CAAC,QAAQ,EAAE;QACpB,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,CAAA,CAAE,CAAC,CAAC;QACtC,OAAO,IAAI,kBAAkB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;YAC/C,aAAa,CAAC,OAAO,GAAG,CAAC,KAAK,KAAK;gBAC/B,MAAM,KAAK,GAAG,yBAAyB,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC5D,MAAM,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAa,CAAC;YACF,aAAa,CAAC,SAAS,GAAG,CAAC,KAAK,KAAK;gBACjC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;gBACnC,IAAI,CAAC,MAAM,EAAE;oBACT,OAAO,EAAE,CAAC;oBACV,OAAO;gBAC3B,CAAiB;gBACD,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,EAAC,cAAc,IAAI;oBAC7D,IAAI,cAAc,EAAE;wBAChB,MAAM,CAAC,QAAQ,EAAE,CAAC;oBAC1C,CAAqB,MACI;wBACD,OAAO,EAAE,CAAC;oBAClC,CAAqB;gBACrB,CAAiB,CAAC,CAAC;YACnB,CAAa,CAAC;QACd,CAAS,CAAC,CAAC;IACX,CAAK;IACD,aAAa,CAAC,aAAa,EAAE,EAAE,EAAE;QAC7B,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,OAAO,IAAI,kBAAkB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;YAC/C,aAAa,CAAC,OAAO,GAAG,CAAC,KAAK,KAAK;gBAC/B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC3C,CAAa,CAAC;YACF,aAAa,CAAC,SAAS,GAAG,CAAC,KAAK,KAAK;gBACjC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;gBACnC,IAAI,CAAC,MAAM,EAAE;oBACT,OAAO,EAAE,CAAC;oBACV,OAAO;gBAC3B,CAAiB;gBACD,MAAM,UAAU,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;gBACnD,MAAM,UAAU,GAAG,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gBACnE,IAAI,UAAU,YAAY,kBAAkB,EAAE;oBAC1C,MAAM,WAAW,GAAG,UAAU,CAAC,KAAK,EAAC,GAAG,IAAI;wBACxC,UAAU,CAAC,IAAI,EAAE,CAAC;wBAClB,OAAO,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC9D,CAAqB,CAAC,CAAC;oBACH,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC9C,CAAiB;gBACD,IAAI,UAAU,CAAC,MAAM,EAAE;oBACnB,OAAO,EAAE,CAAC;gBAC9B,CAAiB,MACI,IAAI,UAAU,CAAC,SAAS,KAAK,IAAI,EAAE;oBACpC,MAAM,CAAC,QAAQ,EAAE,CAAC;gBACtC,CAAiB,MACI;oBACD,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;gBAC1D,CAAiB;YACjB,CAAa,CAAC;QACd,CAAS,CAAC,CAAC,IAAI,CAAC,IAAM,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3D,CAAK;IACD,OAAO,CAAC,YAAY,EAAE,KAAK,EAAE;QACzB,IAAI,SAAS,GAAG,SAAS,CAAC;QAC1B,IAAI,YAAY,KAAK,SAAS,EAAE;YAC5B,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;gBAClC,SAAS,GAAG,YAAY,CAAC;YACzC,CAAa,MACI;gBACD,KAAK,GAAG,YAAY,CAAC;YACrC,CAAa;QACb,CAAS;QACD,OAAO;YAAE,KAAK,EAAE,SAAS;YAAE,KAAK;QAAA,CAAE,CAAC;IAC3C,CAAK;IACD,MAAM,CAAC,OAAO,EAAE;QACZ,IAAI,SAAS,GAAG,MAAM,CAAC;QACvB,IAAI,OAAO,CAAC,OAAO,EAAE;YACjB,SAAS,GAAG,MAAM,CAAC;QAC/B,CAAS;QACD,IAAI,OAAO,CAAC,KAAK,EAAE;YACf,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC9C,IAAI,OAAO,CAAC,QAAQ,EAAE;gBAClB,OAAO,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YACrE,CAAa,MACI;gBACD,OAAO,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YAClE,CAAa;QACb,CAAS,MACI;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QACnE,CAAS;IACT,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,WAAW,CAAC,OAAO,EAAE;IAC1B,OAAO,IAAI,kBAAkB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;QAC/C,OAAO,CAAC,SAAS,GAAG,CAAC,KAAK,KAAK;YAC3B,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;YACnC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5B,CAAS,CAAC;QACF,OAAO,CAAC,OAAO,GAAG,CAAC,KAAK,KAAK;YACzB,MAAM,KAAK,GAAG,yBAAyB,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5D,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAS,CAAC;IACV,CAAK,CAAC,CAAC;AACP,CAAC;AACD,0CAAA;AACA,IAAI,gBAAgB,GAAG,KAAK,CAAC;AAC7B,SAAS,yBAAyB,CAAC,KAAK,EAAE;IACtC,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,uLAAC,QAAA,AAAK,EAAE,CAAC,CAAC;IACnD,IAAI,UAAU,IAAI,IAAI,IAAI,UAAU,GAAG,EAAE,EAAE;QACvC,MAAM,SAAS,GAAG,kEAAkE,CAAC;QACrF,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACnD,wCAAA;YACY,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,UAAU,EAAE,CAAC,0CAA0C,EAAE,SAAS,CAAC,kBAAkB,CAAC,GACtH,CAAC,kFAAkF,CAAC,GACpF,CAAC,uCAAuC,CAAC,CAAC,CAAC;YAC/C,IAAI,CAAC,gBAAgB,EAAE;gBACnB,gBAAgB,GAAG,IAAI,CAAC;gBACxC,0EAAA;gBACA,qBAAA;gBACgB,UAAU,CAAC,MAAM;oBACb,MAAM,QAAQ,CAAC;gBACnC,CAAiB,EAAE,CAAC,CAAC,CAAC;YACtB,CAAa;YACD,OAAO,QAAQ,CAAC;QAC5B,CAAS;IACT,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,MAAM,SAAS,GAAG,gBAAgB,CAAC;AACnC,6EAAA,GACA,MAAM,yBAAyB,GAAG,EAAE,GAAG,IAAI,CAAC;AAC5C,yEAAA,GACA,MAAM,yBAAyB,GAAG,EAAE,GAAG,IAAI,CAAC;AAC5C,+EAAA,GACA,MAAM,wBAAwB,GAAG,EAAE,CAAC;AACpC,sEAAA,GACA,MAAM,wBAAwB,CAAC;IAC3B,WAAW,CAAC,UAAU,EAAE,UAAU,CAAE;QAChC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,CAAK;IACD,KAAK,GAAG;QACJ,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC,CAAC;IACjD,CAAK;IACD,IAAI,GAAG;QACH,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAC7B,CAAS;IACT,CAAK;IACD,IAAI,OAAO,GAAG;QACV,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC;IAClC,CAAK;IACD,QAAQ,CAAC,KAAK,EAAE;QACZ,QAAQ,CAAC,SAAS,EAAE,CAAC,aAAa,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,gBAAgB,CAAA,yBAAA,KAA8B,KAAK,EAAE,YAAY;YAC3G,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI;gBACA,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;gBAC5D,QAAQ,CAAC,SAAS,EAAE,CAAC,mBAAmB,EAAE,kBAAkB,CAAC,CAAC,CAAC,CAAC;YAChF,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,IAAI,2BAA2B,CAAC,CAAC,CAAC,EAAE;oBAChC,QAAQ,CAAC,SAAS,EAAE,kDAAkD,EAAE,CAAC,CAAC,CAAC;gBAC/F,CAAiB,MACI;oBACD,MAAM,wBAAwB,CAAC,CAAC,CAAC,CAAC;gBACtD,CAAiB;YACjB,CAAa;YACD,MAAM,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC,CAAC;QAC3D,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AACD,kDAAA,GACA,MAAM,eAAe,CAAC;IAClB,WAAW,CACf;;;;;;KAMA,GACI,UAAU,EAAE,WAAW,CAAE;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACvC,CAAK;IACD,MAAM,QAAQ,CAAC,qBAAqB,GAAG,wBAAwB,EAAE;QAC7D,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,kBAAkB,EAAE,mBAAmB,GAAE,GAAG,GAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC,CAAC;IACnJ,CAAK;IACL,8FAAA,GACI,iBAAiB,CAAC,UAAU,EAAE,qBAAqB,EAAE;QACjD,MAAM,yBAAyB,GAAG,IAAI,GAAG,EAAE,CAAC;QAC5C,IAAI,kBAAkB,GAAG,qBAAqB,CAAC;QAC/C,IAAI,YAAY,GAAG,IAAI,CAAC;QACxB,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAM,YAAY,KAAK,IAAI,IAAI,kBAAkB,GAAG,CAAC,EAAE,MAAM;YAC3F,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAC9B,8BAA8B,CAAC,UAAU,CAAC,CAC1C,IAAI,CAAC,CAAC,eAAe,KAAK;gBAC3B,IAAI,eAAe,KAAK,IAAI,IACxB,yBAAyB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;oBAChD,YAAY,GAAG,KAAK,CAAC;gBACzC,CAAiB,MACI;oBACD,QAAQ,CAAC,SAAS,EAAE,CAAC,uBAAuB,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC;oBACjE,OAAO,IAAI,CAAC,8BAA8B,CAAC,UAAU,EAAE,eAAe,EAAE,kBAAkB,CAAC,CAAC,IAAI,EAAC,kBAAkB,IAAI;wBACnH,kBAAkB,IAAI,kBAAkB,CAAC;wBACzC,yBAAyB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;oBACvE,CAAqB,CAAC,CAAC;gBACvB,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC,IAAI,CAAC,IAAM,qBAAqB,GAAG,kBAAkB,CAAC,CAAC;IAClE,CAAK;IACL;;KAEA,GACI,8BAA8B,CAAC,WAAW,EAAE,eAAe,EAAE,0BAA0B,EAAE;QAC7F,yEAAA;QACQ,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAC9B,+BAA+B,CAAC,WAAW,EAAE,eAAe,CAAC,CAC7D,IAAI,EAAC,cAAc,GAAI,IAAI,CAAC,UAAU,CAAC,cAAc,CACrD,gBAAgB,CAAC,WAAW,EAAE,eAAe,EAAE,cAAc,EAAE,0BAA0B,CAAC,CAC1F,IAAI,EAAC,SAAS,IAAI;gBACnB,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC;gBAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAC9B,kBAAkB,CAAC,WAAW,EAAE,IAAI,CAAC,CACrC,IAAI,CAAC,IAAM,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC,CACxD,IAAI,EAAC,SAAS,IAAI;oBACnB,QAAQ,CAAC,SAAS,EAAE,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;oBACrD,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,qBAAqB,CAAC,WAAW,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;gBACnH,CAAa,CAAC,CACG,IAAI,CAAC,IAAM,IAAI,CAAC,IAAI,CAAC,CAAC;YACvC,CAAS,CAAC,CAAC,CAAC;IACZ,CAAK;IACL,6DAAA,GACI,YAAY,CAAC,cAAc,EAAE,YAAY,EAAE;QACvC,IAAI,SAAS,GAAG,cAAc,CAAC;QAC/B,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,QAAQ,KAAK;YAC5C,MAAM,SAAS,GAAG,0BAA0B,CAAC,QAAQ,CAAC,CAAC;YACvD,IAAI,qBAAqB,CAAC,SAAS,EAAE,SAAS,CAAC,GAAG,CAAC,EAAE;gBACjD,SAAS,GAAG,SAAS,CAAC;YACtC,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,IAAI,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,EAAE,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC;IACzI,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;CAKA,GACA,MAAM,cAAc,CAAC;IACjB,WAAW,CAAC,aAAa,EAAE,oBAAoB,CAAE;QAC7C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,oBAAoB,EAAE;YACtB,oBAAoB,CAAC,qBAAqB,IAAG,cAAc,GAAI,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;YACrG,IAAI,CAAC,sBAAsB,IAAG,cAAc,GAAI,oBAAoB,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QACrH,CAAS;IACT,CAAK;IACD,gBAAgB,CAAC,qBAAqB,EAAE;QACpC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC,aAAa,CAAC;IAClC,CAAK;IACD,IAAI,GAAG;QACH,MAAM,SAAS,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC;QACvC,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC7B,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;QACnD,CAAS;QACD,OAAO,SAAS,CAAC;IACzB,CAAK;AACL,CAAC;AACD,cAAc,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;AAE5B;;;;;;;;;;;;;;;CAeA,GACA,MAAM,UAAU,GAAG,QAAQ,CAAC;AAC5B,MAAM,oBAAoB,GAAG,QAAQ,CAAC;AACtC,MAAM,UAAU,GAAG,QAAQ,CAAC;AAC5B,MAAM,aAAa,GAAG,QAAQ,CAAC;AAC/B;;CAEA,GACA,SAAS,kBAAkB,CAAC,IAAI,EAAE;IAC9B,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QAClC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAS;QACD,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IACpD,CAAK;IACD,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC;AACnC,CAAC;AACD,sEAAA,GACA,SAAS,aAAa,CAAC,OAAO,EAAE,SAAS,EAAE;IACvC,IAAI,MAAM,GAAG,SAAS,CAAC;IACvB,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAC9B,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,CAAE;QAC7B,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5B,OAAQ,CAAC;YACL,KAAK,IAAI;gBACL,MAAM,IAAI,UAAU,GAAG,UAAU,CAAC;gBAClC,MAAM;YACV,KAAK,UAAU;gBACX,MAAM,IAAI,UAAU,GAAG,aAAa,CAAC;gBACrC,MAAM;YACV;gBACI,MAAM,IAAI,CAAC,CAAC;QAC5B,CAAS;IACT,CAAK;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,mDAAA,GACA,SAAS,eAAe,CAAC,MAAM,EAAE;IAC7B,OAAO,MAAM,GAAG,UAAU,GAAG,oBAAoB,CAAC;AACtD,CAAC;AACD;;;;;CAKA,GACA,SAAS,kBAAkB,CAAC,IAAI,EAAE;IAClC,0EAAA;IACA,yCAAA;IACI,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAC3B,UAAU,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;IACxB,IAAI,MAAM,KAAK,CAAC,EAAE;QACd,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,oBAAoB,CAAC,CAAC;QACrF,OAAO,YAAY,CAAC,SAAS,EAAE,CAAC;IACxC,CAAK;IACL,yEAAA;IACA,gBAAA;IACI,MAAM,yBAAyB,GAAG,MAAM,GAAG,CAAC,CAAC;IAC7C,MAAM,QAAQ,GAAG,EAAE,CAAC;IACpB,IAAI,cAAc,GAAG,EAAE,CAAC;IACxB,IAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,MAAM,EAAG;QACzC,0EAAA;QACA,wCAAA;QACQ,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAC5C,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,yBAAyB,EAAE;YAC5C,IAAI,EAAE,CAAC;QACnB,CAAS;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAClC,OAAQ,IAAI;YACR,KAAK,oBAAoB;gBACrB,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBAChD,IAAI,OAAO,CAAC;gBACZ,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;oBACjD,kEAAA;oBACA,WAAA;oBACoB,OAAO,GAAG,YAAY,CAAC;gBAC3C,CAAiB,MACI;oBACD,cAAc,IAAI,YAAY,CAAC;oBAC/B,OAAO,GAAG,cAAc,CAAC;oBACzB,cAAc,GAAG,EAAE,CAAC;gBACxC,CAAiB;gBACD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvB,MAAM;YACV,KAAK,UAAU;gBACX,cAAc,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBAC7C,cAAc,IAAI,IAAI,CAAC;gBACvB,MAAM;YACV,KAAK,aAAa;gBAC9B,mEAAA;gBACgB,cAAc,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;gBACjD,MAAM;YACV;gBACI,IAAI,EAAE,CAAC;QACvB,CAAS;QACD,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC;IACxB,CAAK;IACD,OAAO,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC;AACtC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,uBAAuB,GAAG,iBAAiB,CAAC;AAElD;;;;;;;;;;;;;;;CAeA,GACA;;;;;;CAMA,GACA,MAAM,oBAAoB,GAAG,OAAO,CAAC;AACrC;;;CAGA,GACA,MAAM,kBAAkB,GAAG,OAAO,CAAC;AACnC,yCAAA,GACA,MAAM,oBAAoB,GAAG,gBAAgB,CAAC;AAC9C,6DAAA,GACA,MAAM,sBAAsB,GAAG,QAAQ,CAAC;AACxC,yCAAA,GACA,MAAM,oBAAoB,GAAG,WAAW,CAAC;AACzC,wEAAA,GACA,MAAM,sBAAsB,GAAG,SAAS,CAAC;AACzC,oDAAA,GACA,MAAM,iCAAiC,GAAG,oBAAoB,CAAC;AAC/D,kEAAA,GACA,MAAM,mCAAmC,GAAG;IAAC,QAAQ;IAAE,SAAS;CAAC,CAAC;AAClE;;;CAGA,GACA,SAAS,kCAAkC,CAAC,MAAM,EAAE;IAChD,OAAO;QAAC,MAAM;KAAC,CAAC;AACpB,CAAC;AACD;;;CAGA,GACA,SAAS,kCAAkC,CAAC,MAAM,EAAE,IAAI,EAAE;IACtD,OAAO;QAAC,MAAM;QAAE,kBAAkB,CAAC,IAAI,CAAC;KAAC,CAAC;AAC9C,CAAC;AACD;;;CAGA,GACA,SAAS,wBAAwB,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE;IACrD,OAAO;QAAC,MAAM;QAAE,kBAAkB,CAAC,IAAI,CAAC;QAAE,OAAO;KAAC,CAAC;AACvD,CAAC;AACD;;;;;CAKA,GACA,MAAM,6BAA6B,GAAG,CAAA,CAAE,CAAC;AACzC,MAAM,uBAAuB,GAAG,mBAAmB,CAAC;AACpD,MAAM,qBAAqB,GAAG,oBAAoB,CAAC;AACnD;;;CAGA,GACA,MAAM,uBAAuB,GAAG;IAC5B,YAAY;IACZ,iBAAiB;IACjB,UAAU;IACV,YAAY;CACf,CAAC;AACF,uDAAA,GACA,MAAM,gCAAgC,GAAG,kBAAkB,CAAC;AAC5D,MAAM,oCAAoC,GAAG;IACzC,YAAY;IACZ,iBAAiB;IACjB,YAAY;CACf,CAAC;AACF;;;;;CAKA,GACA,MAAM,oCAAoC,GAAG,sBAAsB,CAAC;AACpE,MAAM,wCAAwC,GAAG;IAC7C,iBAAiB;IACjB,UAAU;IACV,YAAY;IACZ,YAAY;CACf,CAAC;AACF,MAAM,2BAA2B,GAAG,sBAAsB,CAAC;AAC3D,MAAM,yBAAyB,GAAG,yBAAyB,CAAC;AAC5D,MAAM,aAAa,GAAG,SAAS,CAAC;AAChC,+DAAA,GACA,MAAM,eAAe,GAAG,UAAU,CAAC;AACnC,wCAAA,GACA,MAAM,6BAA6B,GAAG,mBAAmB,CAAC;AAC1D;;;;CAIA,GACA,MAAM,2BAA2B,GAAG;IAAC,aAAa;IAAE,UAAU;CAAC,CAAC;AAChE,yCAAA,GACA,MAAM,qBAAqB,GAAG,iBAAiB,CAAC;AAChD,uEAAA,GACA,MAAM,uBAAuB,GAAG;IAAC,UAAU;IAAE,MAAM;CAAC,CAAC;AACrD,0CAAA,GACA,MAAM,oCAAoC,GAAG,sBAAsB,CAAC;AACpE,mEAAA,GACA,MAAM,sCAAsC,GAAG;IAAC,MAAM;IAAE,UAAU;CAAC,CAAC;AACpE;;;CAGA,GACA,MAAM,iBAAiB,GAAG,iBAAiB,CAAC;AAC5C,MAAM,mBAAmB,GAAG,cAAc,CAAC;AAC3C,wCAAA,GACA,MAAM,uBAAuB,GAAG,mBAAmB,CAAC;AACpD,6EAAA,GACA,MAAM,yBAAyB,GAAG;IAAC,cAAc;IAAE,QAAQ;CAAC,CAAC;AAC7D,wCAAA,GACA,MAAM,qBAAqB,GAAG,gBAAgB,CAAC;AAC/C,iEAAA,GACA,MAAM,uBAAuB,GAAG,UAAU,CAAC;AAC3C,wCAAA,GACA,MAAM,aAAa,GAAG,SAAS,CAAC;AAChC,MAAM,eAAe,GAAG,UAAU,CAAC;AACnC,wCAAA,GACA,MAAM,iBAAiB,GAAG,cAAc,CAAC;AACzC,MAAM,mBAAmB,GAAG,MAAM,CAAC;AACnC,wCAAA,GACA,MAAM,yBAAyB,GAAG,oBAAoB,CAAC;AACvD,MAAM,2BAA2B,GAAG,SAAS,CAAC;AAC9C;;;;;;;CAOA,GACA,MAAM,wCAAwC,GAAG,sBAAsB,CAAC;AACxE,MAAM,4CAA4C,GAAG,iBAAiB,CAAC;AACvE,wCAAA,GACA,MAAM,iBAAiB,GAAG,YAAY,CAAC;AACvC,MAAM,mBAAmB,GAAG;IAAC,SAAS;IAAE,KAAK;CAAC,CAAC;AAC/C;;;;;;;CAOA,GACA,MAAM,+BAA+B,GAAG,qBAAqB,CAAC;AAC9D,MAAM,mCAAmC,GAAG;IAAC,KAAK;IAAE,gBAAgB;CAAC,CAAC;AACtE,wCAAA,GACA,MAAM,iBAAiB,GAAG,cAAc,CAAC;AACzC,MAAM,mBAAmB,GAAG;IACxB,SAAS;IACT,KAAK;IACL,YAAY;IACZ,kBAAkB;IAClB,oBAAoB;IACpB,aAAa;CAChB,CAAC;AACF,MAAM,4BAA4B,GAAG,kBAAkB,CAAC;AACxD,MAAM,gCAAgC,GAAG;IACrC,SAAS;IACT,KAAK;IACL,oBAAoB;CACvB,CAAC;AACF,wCAAA,GACA,MAAM,sBAAsB,GAAG,kBAAkB,CAAC;AAClD,MAAM,wBAAwB,GAAG;IAC7B,QAAQ;IACR,gBAAgB;IAChB,YAAY;CACf,CAAC;AACF,MAAM,2CAA2C,GAAG,4BAA4B,CAAC;AACjF,MAAM,+CAA+C,GAAG;IACpD,QAAQ;IACR,gBAAgB;IAChB,gBAAgB;CACnB,CAAC;AACF,MAAM,4CAA4C,GAAG,6BAA6B,CAAC;AACnF,MAAM,gDAAgD,GAAG;IACrD,QAAQ;IACR,iBAAiB;IACjB,gBAAgB;CACnB,CAAC;AACF,sBAAA;AACA,MAAM,SAAS,GAAG;IACd,oBAAoB;IACpB,oBAAoB;IACpB,uBAAuB;IACvB,uBAAuB;IACvB,aAAa;IACb,oBAAoB;IACpB,mBAAmB;IACnB,qBAAqB;CACxB,CAAC;AACF,sBAAA;AACA,MAAM,SAAS,GAAG,SAAS,CAAC;AAC5B,uEAAA;AACA,MAAM,SAAS,GAAG,CAAC;OAAG,SAAS;IAAE,qBAAqB;CAAC,CAAC;AACxD,MAAM,SAAS,GAAG,CAAC;OAAG,SAAS;IAAE,2BAA2B;CAAC,CAAC;AAC9D,MAAM,SAAS,GAAG,CAAC;OAAG,SAAS;IAAE,uBAAuB;CAAC,CAAC;AAC1D,MAAM,UAAU,GAAG,CAAC;OAAG,SAAS;IAAE,aAAa;IAAE,iBAAiB;CAAC,CAAC;AACpE,MAAM,UAAU,GAAG,CAAC;OAAG,UAAU;IAAE,sBAAsB;CAAC,CAAC;AAC3D,MAAM,UAAU,GAAG;IACf,oBAAoB;IACpB,oBAAoB;IACpB,uBAAuB;IACvB,qBAAqB;IACrB,aAAa;IACb,oBAAoB;IACpB,mBAAmB;IACnB,qBAAqB;IACrB,qBAAqB;IACrB,2BAA2B;IAC3B,uBAAuB;IACvB,aAAa;IACb,iBAAiB;IACjB,sBAAsB;CACzB,CAAC;AACF,MAAM,UAAU,GAAG,UAAU,CAAC;AAC9B,MAAM,UAAU,GAAG;OACZ,UAAU;IACb,yBAAyB;IACzB,iBAAiB;IACjB,iBAAiB;CACpB,CAAC;AACF,uDAAA,GACA,SAAS,eAAe,CAAC,aAAa,EAAE;IACpC,IAAI,aAAa,KAAK,EAAE,EAAE;QACtB,OAAO,UAAU,CAAC;IAC1B,CAAK,MACI,IAAI,aAAa,KAAK,EAAE,EAAE;QAC3B,OAAO,UAAU,CAAC;IAC1B,CAAK,MACI,IAAI,aAAa,KAAK,EAAE,EAAE;QAC3B,OAAO,UAAU,CAAC;IAC1B,CAAK,MACI,IAAI,aAAa,KAAK,EAAE,EAAE;QAC3B,OAAO,UAAU,CAAC;IAC1B,CAAK,MACI,IAAI,aAAa,KAAK,EAAE,EAAE;QAC3B,OAAO,UAAU,CAAC;IAC1B,CAAK,MACI;QACD,IAAI,EAAE,CAAC;IACf,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,oBAAoB,SAAS,sBAAsB,CAAC;IACtD,WAAW,CAAC,mBAAmB,EAAE,qBAAqB,CAAE;QACpD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;IAC3D,CAAK;AACL,CAAC;AACD,SAAS,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE;IAC1B,MAAM,oBAAoB,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;IAC5C,OAAO,QAAQ,CAAC,QAAQ,CAAC,oBAAoB,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;AAC9E,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,SAAS,UAAU,CAAC,GAAG,EAAE;IACrB,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAK,MAAM,GAAG,IAAI,GAAG,CAAE;QACnB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YAChD,KAAK,EAAE,CAAC;QACpB,CAAS;IACT,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AACD,SAAS,OAAO,CAAC,GAAG,EAAE,EAAE,EAAE;IACtB,IAAK,MAAM,GAAG,IAAI,GAAG,CAAE;QACnB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YAChD,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9B,CAAS;IACT,CAAK;AACL,CAAC;AACD,SAAS,UAAU,CAAC,GAAG,EAAE,EAAE,EAAE;IACzB,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,IAAK,MAAM,GAAG,IAAI,GAAG,CAAE;QACnB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YAChD,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QAChD,CAAS;IACT,CAAK;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,SAAS,OAAO,CAAC,GAAG,EAAE;IAClB,IAAK,MAAM,GAAG,IAAI,GAAG,CAAE;QACnB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YAChD,OAAO,KAAK,CAAC;QACzB,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,4EAAA;AACA,QAAA;AACA,MAAM,SAAS,CAAC;IACZ,WAAW,CAAC,UAAU,EAAE,IAAI,CAAE;QAC1B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC;IACjD,CAAK;IACL,6EAAA;IACI,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE;QACf,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAC1C,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,CACnC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAK;IACL,6DAAA;IACI,MAAM,CAAC,GAAG,EAAE;QACR,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAC1C,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,CAC5B,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAK;IACL,6DAAA;IACI,GAAG,CAAC,GAAG,EAAE;QACL,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACrB,MAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAE;YACpB,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAI,GAAG,KAAK,CAAC,EAAE;gBACX,OAAO,IAAI,CAAC,KAAK,CAAC;YAClC,CAAa,MACI,IAAI,GAAG,GAAG,CAAC,EAAE;gBACd,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACjC,CAAa,MACI,IAAI,GAAG,GAAG,CAAC,EAAE;gBACd,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YAClC,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL,2EAAA;IACA,SAAA;IACI,OAAO,CAAC,GAAG,EAAE;QACjB,yDAAA;QACQ,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACrB,MAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAE;YACpB,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAI,GAAG,KAAK,CAAC,EAAE;gBACX,OAAO,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YACpD,CAAa,MACI,IAAI,GAAG,GAAG,CAAC,EAAE;gBACd,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACjC,CAAa,MACI;gBACjB,wDAAA;gBACgB,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;gBAClC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YAClC,CAAa;QACb,CAAS;QACT,iBAAA;QACQ,OAAO,CAAC,CAAC,CAAC;IAClB,CAAK;IACD,OAAO,GAAG;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACnC,CAAK;IACL,gDAAA;IACI,IAAI,IAAI,GAAG;QACP,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAC9B,CAAK;IACL,sCAAA;IACI,MAAM,GAAG;QACL,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IAClC,CAAK;IACL,sCAAA;IACI,MAAM,GAAG;QACL,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IAClC,CAAK;IACL,yEAAA;IACA,yEAAA;IACA,wEAAA;IACA,4BAAA;IACI,gBAAgB,CAAC,MAAM,EAAE;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAClD,CAAK;IACD,OAAO,CAAC,EAAE,EAAE;QACR,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;YAC5B,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACT,OAAO,KAAK,CAAC;QACzB,CAAS,CAAC,CAAC;IACX,CAAK;IACD,QAAQ,GAAG;QACP,MAAM,YAAY,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;YAC5B,YAAY,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/B,OAAO,KAAK,CAAC;QACzB,CAAS,CAAC,CAAC;QACH,OAAO,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAK;IACL,wEAAA;IACA,yEAAA;IACA,WAAA;IACA,wEAAA;IACA,4BAAA;IACI,gBAAgB,CAAC,MAAM,EAAE;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAClD,CAAK;IACL,0CAAA;IACI,WAAW,GAAG;QACV,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC9E,CAAK;IACD,eAAe,CAAC,GAAG,EAAE;QACjB,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC7E,CAAK;IACD,kBAAkB,GAAG;QACjB,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAC7E,CAAK;IACD,sBAAsB,CAAC,GAAG,EAAE;QACxB,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAC5E,CAAK;AACL,CAAC,CAAA,gBAAA;AACD,gCAAA;AACA,MAAM,iBAAiB,CAAC;IACpB,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,CAAE;QAC/C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,MAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAE;YACpB,GAAG,GAAG,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;YAChE,gDAAA;YACY,IAAI,QAAQ,IAAI,SAAS,EAAE;gBACvB,GAAG,IAAI,CAAC,CAAC,CAAC;YAC1B,CAAa;YACD,IAAI,GAAG,GAAG,CAAC,EAAE;gBACzB,kDAAA;gBACgB,IAAI,IAAI,CAAC,SAAS,EAAE;oBAChB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACrC,CAAiB,MACI;oBACD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;gBACtC,CAAiB;YACjB,CAAa,MACI,IAAI,GAAG,KAAK,CAAC,EAAE;gBAChC,qEAAA;gBACA,sBAAA;gBACgB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1B,MAAM;YACtB,CAAa,MACI;gBACjB,wEAAA;gBACA,kBAAA;gBACgB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1B,IAAI,IAAI,CAAC,SAAS,EAAE;oBAChB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;gBACtC,CAAiB,MACI;oBACD,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACrC,CAAiB;YACjB,CAAa;QACb,CAAS;IACT,CAAK;IACD,OAAO,GAAG;QACN,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;QAChC,MAAM,MAAM,GAAG;YAAE,GAAG,EAAE,IAAI,CAAC,GAAG;YAAE,KAAK,EAAE,IAAI,CAAC,KAAK;QAAA,CAAE,CAAC;QACpD,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACjB,MAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAE;gBACpB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1B,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YAClC,CAAa;QACb,CAAS,MACI;YACD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YAClB,MAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAE;gBACpB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1B,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACjC,CAAa;QACb,CAAS;QACD,OAAO,MAAM,CAAC;IACtB,CAAK;IACD,OAAO,GAAG;QACN,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IACzC,CAAK;IACD,IAAI,GAAG;QACH,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7B,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACvD,OAAO;YAAE,GAAG,EAAE,IAAI,CAAC,GAAG;YAAE,KAAK,EAAE,IAAI,CAAC,KAAK;QAAA,CAAE,CAAC;IACpD,CAAK;AACL,CAAC,CAAA,wBAAA;AACD,sDAAA;AACA,MAAM,QAAQ,CAAC;IACX,WAAW,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAE;QACxC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC;QAClD,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC;QACjD,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QACpD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzD,CAAK;IACL,yEAAA;IACI,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;QACjC,OAAO,IAAI,QAAQ,CAAC,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,KAAK,IAAI,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,KAAK,IAAI,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,KAAK,IAAI,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;IACvM,CAAK;IACD,OAAO,GAAG;QACN,OAAO,KAAK,CAAC;IACrB,CAAK;IACL,0EAAA;IACA,+DAAA;IACA,wEAAA;IACA,4BAAA;IACI,gBAAgB,CAAC,MAAM,EAAE;QACrB,OAAQ,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IACtC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAC5B,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE;IACjD,CAAK;IACL,yEAAA;IACA,wEAAA;IACA,wEAAA;IACA,4BAAA;IACI,gBAAgB,CAAC,MAAM,EAAE;QACrB,OAAQ,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,IACvC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAC5B,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE;IAChD,CAAK;IACL,wCAAA;IACI,GAAG,GAAG;QACF,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;YACrB,OAAO,IAAI,CAAC;QACxB,CAAS,MACI;YACD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QACnC,CAAS;IACT,CAAK;IACL,uCAAA;IACI,MAAM,GAAG;QACL,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;IAC9B,CAAK;IACL,uCAAA;IACI,MAAM,GAAG;QACL,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE;YACtB,OAAO,IAAI,CAAC,GAAG,CAAC;QAC5B,CAAS,MACI;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;QACvC,CAAS;IACT,CAAK;IACL,8CAAA;IACI,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE;QAC3B,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,MAAM,GAAG,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,GAAG,GAAG,CAAC,EAAE;YACT,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC;QACtF,CAAS,MACI,IAAI,GAAG,KAAK,CAAC,EAAE;YAChB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACtD,CAAS,MACI;YACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;QACvF,CAAS;QACD,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;IACzB,CAAK;IACD,SAAS,GAAG;QACR,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;YACrB,OAAO,QAAQ,CAAC,KAAK,CAAC;QAClC,CAAS;QACD,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;YACzC,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAChC,CAAS;QACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;QACvD,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;IACzB,CAAK;IACL,qDAAA;IACI,MAAM,CAAC,GAAG,EAAE,UAAU,EAAE;QACpB,IAAI,QAAQ,CAAC;QACb,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,IAAI,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC5B,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;gBAC9D,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;YACpC,CAAa;YACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC;QAC/E,CAAS,MACI;YACD,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;gBAChB,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;YACpC,CAAa;YACD,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;gBACjE,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC;YACrC,CAAa;YACD,IAAI,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBAC9B,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE;oBACnB,OAAO,QAAQ,CAAC,KAAK,CAAC;gBAC1C,CAAiB,MACI;oBACD,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;oBACzB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC9F,CAAiB;YACjB,CAAa;YACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;QAChF,CAAS;QACD,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;IACzB,CAAK;IACD,KAAK,GAAG;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC;IAC1B,CAAK;IACL,0DAAA;IACI,KAAK,GAAG;QACJ,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;YACpC,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;QAC/B,CAAS;QACD,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;YACvC,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAChC,CAAS;QACD,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE;YACnC,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;QAC9B,CAAS;QACD,OAAO,CAAC,CAAC;IACjB,CAAK;IACD,WAAW,GAAG;QACV,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QACzB,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;YACtB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;YAC1D,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;YACnB,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;QAC9B,CAAS;QACD,OAAO,CAAC,CAAC;IACjB,CAAK;IACD,YAAY,GAAG;QACX,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QACzB,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;YACrB,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;YACpB,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;QAC9B,CAAS;QACD,OAAO,CAAC,CAAC;IACjB,CAAK;IACD,UAAU,GAAG;QACT,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACtE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;IACjE,CAAK;IACD,WAAW,GAAG;QACV,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACtE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAChE,CAAK;IACD,SAAS,GAAG;QACR,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACtE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC/D,CAAK;IACL,eAAA;IACI,aAAa,GAAG;QACZ,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;QAChC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,IAAI,CAAC,IAAI,GAAG,CAAC,EAAE;YAC5C,OAAO,IAAI,CAAC;QACxB,CAAS,MACI;YACD,OAAO,KAAK,CAAC;QACzB,CAAS;IACT,CAAK;IACL,8EAAA;IACA,0EAAA;IACI,KAAK,GAAG;QACJ,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;YACnC,MAAM,IAAI,EAAE,CAAC;QACzB,CAAS;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE;YACpB,MAAM,IAAI,EAAE,CAAC;QACzB,CAAS;QACD,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QACrC,IAAI,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE;YACnC,MAAM,IAAI,EAAE,CAAC;QACzB,CAAS,MACI;YACD,OAAO,UAAU,GAAA,CAAI,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvD,CAAS;IACT,CAAK;AACL,CAAC,CAAA,eAAA;AACD,+CAAA;AACA,8DAAA;AACA,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;AACtB,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC;AACpB,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;AACvB,gEAAA;AACA,MAAM,aAAa,CAAC;IAChB,WAAW,EAAG;QACV,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IACtB,CAAK;IACD,IAAI,GAAG,GAAG;QACN,MAAM,IAAI,EAAE,CAAC;IACrB,CAAK;IACD,IAAI,KAAK,GAAG;QACR,MAAM,IAAI,EAAE,CAAC;IACrB,CAAK;IACD,IAAI,KAAK,GAAG;QACR,MAAM,IAAI,EAAE,CAAC;IACrB,CAAK;IACD,IAAI,IAAI,GAAG;QACP,MAAM,IAAI,EAAE,CAAC;IACrB,CAAK;IACD,IAAI,KAAK,GAAG;QACR,MAAM,IAAI,EAAE,CAAC;IACrB,CAAK;IACL,sCAAA;IACI,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;QACjC,OAAO,IAAI,CAAC;IACpB,CAAK;IACL,kEAAA;IACI,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE;QAC3B,OAAO,IAAI,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACxC,CAAK;IACL,8DAAA;IACI,MAAM,CAAC,GAAG,EAAE,UAAU,EAAE;QACpB,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,OAAO,GAAG;QACN,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,gBAAgB,CAAC,MAAM,EAAE;QACrB,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,gBAAgB,CAAC,MAAM,EAAE;QACrB,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,MAAM,GAAG;QACL,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,MAAM,GAAG;QACL,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,KAAK,GAAG;QACJ,OAAO,KAAK,CAAC;IACrB,CAAK;IACL,eAAA;IACI,aAAa,GAAG;QACZ,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,KAAK,GAAG;QACJ,OAAO,CAAC,CAAC;IACjB,CAAK;AACL,CAAC,CAAA,oBAAA;AACD,QAAQ,CAAC,KAAK,GAAG,IAAI,aAAa,EAAE,CAAC;AAErC;;;;;;;;;;;;;;;CAeA,GACA;;;;;;CAMA,GACA,MAAM,SAAS,CAAC;IACZ,WAAW,CAAC,UAAU,CAAE;QACpB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACnD,CAAK;IACD,GAAG,CAAC,IAAI,EAAE;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC;IAC5C,CAAK;IACD,KAAK,GAAG;QACJ,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IAClC,CAAK;IACD,IAAI,GAAG;QACH,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IAClC,CAAK;IACD,IAAI,IAAI,GAAG;QACP,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAC9B,CAAK;IACD,OAAO,CAAC,IAAI,EAAE;QACV,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACvC,CAAK;IACL,uDAAA,GACI,OAAO,CAAC,EAAE,EAAE;QACR,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;YACjC,EAAE,CAAC,CAAC,CAAC,CAAC;YACN,OAAO,KAAK,CAAC;QACzB,CAAS,CAAC,CAAC;IACX,CAAK;IACL,wEAAA,GACI,cAAc,CAAC,KAAK,EAAE,EAAE,EAAE;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,MAAO,IAAI,CAAC,OAAO,EAAE,CAAE;YACnB,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAC5B,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;gBAC1C,OAAO;YACvB,CAAa;YACD,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzB,CAAS;IACT,CAAK;IACL;;KAEA,GACI,YAAY,CAAC,EAAE,EAAE,KAAK,EAAE;QACpB,IAAI,IAAI,CAAC;QACT,IAAI,KAAK,KAAK,SAAS,EAAE;YACrB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACpD,CAAS,MACI;YACD,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAC3C,CAAS;QACD,MAAO,IAAI,CAAC,OAAO,EAAE,CAAE;YACnB,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAC5B,MAAM,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,CAAC,MAAM,EAAE;gBACT,OAAO;YACvB,CAAa;QACb,CAAS;IACT,CAAK;IACL,6DAAA,GACI,iBAAiB,CAAC,IAAI,EAAE;QACpB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC;IAC1D,CAAK;IACD,WAAW,GAAG;QACV,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IAC9D,CAAK;IACD,eAAe,CAAC,GAAG,EAAE;QACjB,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;IACrE,CAAK;IACL,kCAAA,GACI,GAAG,CAAC,IAAI,EAAE;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IACpE,CAAK;IACL,uBAAA,GACI,MAAM,CAAC,IAAI,EAAE;QACT,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACjB,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACjD,CAAK;IACD,OAAO,GAAG;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACnC,CAAK;IACD,SAAS,CAAC,KAAK,EAAE;QACb,IAAI,MAAM,GAAG,IAAI,CAAC;QAC1B,sEAAA;QACQ,IAAI,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE;YAC1B,MAAM,GAAG,KAAK,CAAC;YACf,KAAK,GAAG,IAAI,CAAC;QACzB,CAAS;QACD,KAAK,CAAC,OAAO,EAAC,IAAI,IAAI;YAClB,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACtC,CAAS,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IACtB,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,IAAI,CAAA,CAAE,KAAK,YAAY,SAAS,CAAC,EAAE;YAC/B,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;YAC1B,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACvC,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACzC,MAAO,MAAM,CAAC,OAAO,EAAE,CAAE;YACrB,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACtC,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACxC,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC,KAAK,CAAC,EAAE;gBAC5C,OAAO,KAAK,CAAC;YAC7B,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,OAAO,GAAG;QACN,MAAM,GAAG,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,OAAO,EAAC,QAAQ,IAAI;YACrB,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/B,CAAS,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACnB,CAAK;IACD,QAAQ,GAAG;QACP,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACxC,OAAO,YAAY,GAAG,MAAM,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;IACtD,CAAK;IACD,IAAI,CAAC,IAAI,EAAE;QACP,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC9C,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;QACnB,OAAO,MAAM,CAAC;IACtB,CAAK;AACL,CAAC;AACD,MAAM,iBAAiB,CAAC;IACpB,WAAW,CAAC,IAAI,CAAE;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,CAAK;IACD,OAAO,GAAG;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;IACvC,CAAK;IACD,OAAO,GAAG;QACN,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACnC,CAAK;AACL,CAAC;AACD;;;;;;;;;;;;;;;;CAgBA,GACA,SAAS,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE;IAChE,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;IACtC,MAAM,OAAO,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;IACpC,IAAI,WAAW,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;IAC5C,IAAI,UAAU,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;IAC9C,4EAAA;IACA,gBAAA;IACI,MAAO,WAAW,IAAI,UAAU,CAAE;QAC9B,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,IAAI,WAAW,IAAI,UAAU,EAAE;YAC3B,MAAM,GAAG,GAAG,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;YAChD,IAAI,GAAG,GAAG,CAAC,EAAE;gBACzB,6DAAA;gBACA,mCAAA;gBACgB,OAAO,GAAG,IAAI,CAAC;YAC/B,CAAa,MACI,IAAI,GAAG,GAAG,CAAC,EAAE;gBAC9B,uEAAA;gBACA,sBAAA;gBACgB,KAAK,GAAG,IAAI,CAAC;YAC7B,CAAa;QACb,CAAS,MACI,IAAI,WAAW,IAAI,IAAI,EAAE;YAC1B,OAAO,GAAG,IAAI,CAAC;QAC3B,CAAS,MACI;YACD,KAAK,GAAG,IAAI,CAAC;QACzB,CAAS;QACD,IAAI,KAAK,EAAE;YACP,KAAK,CAAC,UAAU,CAAC,CAAC;YAClB,UAAU,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;QAClD,CAAS,MACI,IAAI,OAAO,EAAE;YACd,QAAQ,CAAC,WAAW,CAAC,CAAC;YACtB,WAAW,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;QACpD,CAAS,MACI;YACD,WAAW,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;YACxC,UAAU,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;QAClD,CAAS;IACT,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,eAAe,CAAC,EAAE,EAAE;IACzB,OAAO,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC;AACnD,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;CASA,GACA,MAAM,SAAS,CAAC;IACZ,WAAW,CAAC,MAAM,CAAE;QAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAC7B,wCAAA;QACA,yEAAA;QACQ,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAK;IACD,OAAO,KAAK,GAAG;QACX,OAAO,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC;IACjC,CAAK;IACL;;;KAGA,GACI,SAAS,CAAC,WAAW,EAAE;QACnB,IAAI,aAAa,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC1D,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,MAAM,CAAE;YACjC,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACzD,CAAS;QACD,KAAK,MAAM,SAAS,IAAI,WAAW,CAAE;YACjC,aAAa,GAAG,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACzD,CAAS;QACD,OAAO,IAAI,SAAS,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;IACtD,CAAK;IACL;;;;;KAKA,GACI,MAAM,CAAC,SAAS,EAAE;QACd,KAAK,MAAM,aAAa,IAAI,IAAI,CAAC,MAAM,CAAE;YACrC,IAAI,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;gBACrC,OAAO,IAAI,CAAC;YAC5B,CAAa;QACb,CAAS;QACD,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAO,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,GAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,yDAAA,GACA,SAAS,YAAY,CAAC,OAAO,EAAE;IAC/B,6EAAA;IACA,2DAAA;IACI,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC7D,CAAC;AACD,yDAAA,GACA,SAAS,YAAY,CAAC,GAAG,EAAE;IACvB,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACzD,CAAC;AACD,uEAAA,GACA,SAAS,iBAAiB,GAAG;IACzB,OAAO,IAAI,CAAC;AAChB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;CAQA,GACA,MAAM,UAAU,CAAC;IACb,WAAW,CAAC,YAAY,CAAE;QACtB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACzC,CAAK;IACD,OAAO,gBAAgB,CAAC,MAAM,EAAE;QAC5B,MAAM,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;QAC1C,OAAO,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAK;IACD,OAAO,cAAc,CAAC,KAAK,EAAE;QACjC,yEAAA;QACA,wCAAA;QACQ,MAAM,YAAY,GAAG,0BAA0B,CAAC,KAAK,CAAC,CAAC;QACvD,OAAO,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAK;IACD,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG;QAChB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO;YACH,IAAI,EAAE,MAAM;gBACR,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;oBAC9B,OAAO;wBAAE,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;wBAAE,IAAI,EAAE,KAAK;oBAAA,CAAE,CAAC;gBACrF,CAAiB,MACI;oBACD,OAAO;wBAAE,KAAK,EAAE,SAAS;wBAAE,IAAI,EAAE,IAAI;oBAAA,CAAE,CAAC;gBAC5D,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC;IACV,CAAK;IACD,QAAQ,GAAG;QACP,OAAO,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC/C,CAAK;IACD,YAAY,GAAG;QACX,OAAO,0BAA0B,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC7D,CAAK;IACD,mBAAmB,GAAG;QAClB,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5C,CAAK;IACD,SAAS,CAAC,KAAK,EAAE;QACb,OAAO,mBAAmB,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;IAC1E,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAO,IAAI,CAAC,YAAY,KAAK,KAAK,CAAC,YAAY,CAAC;IACxD,CAAK;AACL,CAAC;AACD,UAAU,CAAC,iBAAiB,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;AAClD;;CAEA,GACA,SAAS,0BAA0B,CAAC,KAAK,EAAE;IACvC,IAAI,YAAY,GAAG,EAAE,CAAC;IACtB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;QACnC,YAAY,IAAI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,CAAK;IACD,OAAO,YAAY,CAAC;AACxB,CAAC;AACD;;CAEA,GACA,SAAS,0BAA0B,CAAC,YAAY,EAAE;IAC9C,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACnD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QAC1C,MAAM,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAC/C,CAAK;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,oEAAA;AACA,MAAM,qBAAqB,GAAG,IAAI,MAAM,CAAC,+CAA+C,CAAC,CAAC;AAC1F;;;CAGA,GACA,SAAS,kBAAkB,CAAC,IAAI,EAAE;IAC9B,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACvB,4EAAA;IACA,sDAAA;IACA,sCAAA;IACI,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAClC,wEAAA;QACA,+CAAA;QACA,2CAAA;QACQ,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,QAAQ,GAAG,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClD,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QACvB,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE;YACzB,4CAAA;YACY,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC1B,OAAO,GAAG,CAAC,OAAO,GAAG,WAAW,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/C,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;QACpC,CAAS;QACT,qCAAA;QACQ,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QAClC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACxD,OAAO;YAAE,OAAO;YAAE,KAAK;QAAA,CAAE,CAAC;IAClC,CAAK,MACI;QACT,sDAAA;QACA,sCAAA;QACA,yDAAA;QACQ,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9C,MAAM,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1C,OAAO;YAAE,OAAO;YAAE,KAAK;QAAA,CAAE,CAAC;IAClC,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,eAAe,CAAC,KAAK,EAAE;IAChC,qDAAA;IACI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC3B,OAAO,KAAK,CAAC;IACrB,CAAK,MACI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAChC,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAK,MACI;QACD,OAAO,CAAC,CAAC;IACjB,CAAK;AACL,CAAC;AACD,mEAAA,GACA,SAAS,mBAAmB,CAAC,IAAI,EAAE;IAC/B,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC1B,OAAO,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACjD,CAAK,MACI;QACD,OAAO,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;;;;;;;;CAiBA,GACA,MAAM,yBAAyB,GAAG,kBAAkB,CAAC;AACrD,MAAM,QAAQ,GAAG,UAAU,CAAC;AAC5B,MAAM,kBAAkB,GAAG,oBAAoB,CAAC;AAChD,MAAM,oBAAoB,GAAG,sBAAsB,CAAC;AACpD,SAAS,iBAAiB,CAAC,KAAK,EAAE;IAC9B,IAAI,EAAE,EAAE,EAAE,CAAC;IACX,MAAM,IAAI,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC,QAAQ,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,MAAM,KAAK,CAAA,CAAE,CAAA,CAAE,QAAQ,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC;IAC/M,OAAO,IAAI,KAAK,yBAAyB,CAAC;AAC9C,CAAC;AACD;;CAEA,GACA,SAAS,iBAAiB,CAAC,cAAc,EAAE,aAAa,EAAE;IACtD,MAAM,QAAQ,GAAG;QACb,MAAM,EAAE;YACJ,CAAC,QAAQ,CAAA,EAAG;gBACR,WAAW,EAAE,yBAAyB;YACtD,CAAa;YACD,CAAC,oBAAoB,CAAA,EAAG;gBACpB,cAAc,EAAE;oBACZ,OAAO,EAAE,cAAc,CAAC,OAAO;oBAC/B,KAAK,EAAE,cAAc,CAAC,WAAW;gBACrD,CAAiB;YACjB,CAAa;QACb,CAAS;IACT,CAAK,CAAC;IACN,oEAAA;IACA,2DAAA;IACA,eAAA;IACA,4CAAA;IACA,kEAAA;IACA,wEAAA;IACA,yEAAA;IACA,sBAAA;IACI,IAAI,aAAa,IAAI,iBAAiB,CAAC,aAAa,CAAC,EAAE;QACnD,aAAa,GAAG,gBAAgB,CAAC,aAAa,CAAC,CAAC;IACxD,CAAK;IACD,IAAI,aAAa,EAAE;QACf,QAAQ,CAAC,MAAM,CAAC,kBAAkB,CAAC,GAAG,aAAa,CAAC;IAC5D,CAAK;IACD,OAAO;QAAE,QAAQ;IAAA,CAAE,CAAC;AACxB,CAAC;AACD;;;;;CAKA,GACA,SAAS,gBAAgB,CAAC,KAAK,EAAE;IAC7B,MAAM,aAAa,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IAChE,IAAI,iBAAiB,CAAC,aAAa,CAAC,EAAE;QAClC,OAAO,gBAAgB,CAAC,aAAa,CAAC,CAAC;IAC/C,CAAK;IACD,OAAO,aAAa,CAAC;AACzB,CAAC;AACD;;CAEA,GACA,SAAS,iBAAiB,CAAC,KAAK,EAAE;IAC9B,MAAM,cAAc,GAAG,kBAAkB,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,cAAc,CAAC,CAAC;IACtG,OAAO,IAAI,SAAS,CAAC,cAAc,CAAC,OAAO,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC;AACvE,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,YAAY,CAAC;IACnB;;;;;;;;;;;;;;;;;KAiBA,GACI,WAAW,CAAC,UAAU,EAAE,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,GAAG,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,kBAAkB,EAAE,eAAe,CAAE;QACpI,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACnD,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC/C,CAAK;AACL,CAAC;AACD,6CAAA,GACA,MAAM,qBAAqB,GAAG,WAAW,CAAC;AAC1C;;;CAGA,GACA,MAAM,UAAU,CAAC;IACb,WAAW,CAAC,SAAS,EAAE,QAAQ,CAAE;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG,qBAAqB,CAAC;IACpE,CAAK;IACD,OAAO,KAAK,GAAG;QACX,OAAO,IAAI,UAAU,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACtC,CAAK;IACD,IAAI,iBAAiB,GAAG;QACpB,OAAO,IAAI,CAAC,QAAQ,KAAK,qBAAqB,CAAC;IACvD,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAQ,KAAK,YAAY,UAAU,IAC/B,KAAK,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,IAClC,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,EAAE;IAC9C,CAAK;AACL,CAAC;AACD,SAAS,iBAAiB,CAAC,GAAG,EAAE,QAAQ,EAAE;IACtC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE;QAAC,WAAW;KAAC,CAAC,EAAE;QACpE,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,qDAAqD,CAAC,CAAC;IAC/G,CAAK;IACD,OAAO,IAAI,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AAC3D,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,4DAAA,GACA,MAAM,eAAe,GAAG,CAAC,CAAC,CAAC;AAC3B;;CAEA,GACA,SAAS,iBAAiB,CAAC,KAAK,EAAE;IAC9B,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;AACjD,CAAC;AACD,6CAAA,GACA,SAAS,cAAc,CAAC,KAAK,EAAE;IAC/B,sDAAA;IACA,6FAAA;IACI,OAAO,KAAK,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/C,CAAC;AACD;;;CAGA,GACA,SAAS,aAAa,CAAC,KAAK,EAAE;IAC1B,OAAQ,OAAO,KAAK,KAAK,QAAQ,IAC7B,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,IACvB,CAAC,cAAc,CAAC,KAAK,CAAC,IACtB,KAAK,IAAI,MAAM,CAAC,gBAAgB,IAChC,KAAK,IAAI,MAAM,CAAC,gBAAgB,EAAE;AAC1C,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,cAAc,GAAG,SAAS,CAAC;AACjC,MAAM,SAAS,GAAG;IACd,QAAQ,EAAE;QACN,MAAM,EAAE;YACJ,UAAU,EAAE;gBAAE,WAAW,EAAE,cAAc;YAAA,CAAE;QACvD,CAAS;IACT,CAAK;AACL,CAAC,CAAC;AACF,MAAM,SAAS,GAAG;IACd,SAAS,EAAE,YAAY;AAC3B,CAAC,CAAC;AACF,8DAAA,GACA,SAAS,SAAS,CAAC,KAAK,EAAE;IACtB,IAAI,WAAW,IAAI,KAAK,EAAE;QACtB,OAAO,CAAC,CAAA,uBAAA,GAA2B;IAC3C,CAAK,MACI,IAAI,cAAc,IAAI,KAAK,EAAE;QAC9B,OAAO,CAAC,CAAA,0BAAA,GAA8B;IAC9C,CAAK,MACI,IAAI,cAAc,IAAI,KAAK,IAAI,aAAa,IAAI,KAAK,EAAE;QACxD,OAAO,CAAC,CAAA,yBAAA,GAA6B;IAC7C,CAAK,MACI,IAAI,gBAAgB,IAAI,KAAK,EAAE;QAChC,OAAO,CAAC,CAAA,4BAAA,GAAgC;IAChD,CAAK,MACI,IAAI,aAAa,IAAI,KAAK,EAAE;QAC7B,OAAO,CAAC,CAAA,yBAAA,GAA6B;IAC7C,CAAK,MACI,IAAI,YAAY,IAAI,KAAK,EAAE;QAC5B,OAAO,CAAC,CAAA,uBAAA,GAA2B;IAC3C,CAAK,MACI,IAAI,gBAAgB,IAAI,KAAK,EAAE;QAChC,OAAO,CAAC,CAAA,sBAAA,GAA0B;IAC1C,CAAK,MACI,IAAI,eAAe,IAAI,KAAK,EAAE;QAC/B,OAAO,CAAC,CAAA,2BAAA,GAA+B;IAC/C,CAAK,MACI,IAAI,YAAY,IAAI,KAAK,EAAE;QAC5B,OAAO,CAAC,CAAA,wBAAA,GAA4B;IAC5C,CAAK,MACI,IAAI,UAAU,IAAI,KAAK,EAAE;QAC1B,IAAI,iBAAiB,CAAC,KAAK,CAAC,EAAE;YAC1B,OAAO,CAAC,CAAA,kCAAA,GAAsC;QAC1D,CAAS,MACI,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;YACxB,OAAO,gBAAgB,CAAA,sBAAA,GAA0B;QAC7D,CAAS;QACD,OAAO,EAAE,CAAA,yBAAA,GAA6B;IAC9C,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AACD,0EAAA,GACA,SAAS,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE;IAC9B,IAAI,IAAI,KAAK,KAAK,EAAE;QAChB,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;IACjC,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IACnC,IAAI,QAAQ,KAAK,SAAS,EAAE;QACxB,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,OAAQ,QAAQ;QACZ,KAAK,CAAC,CAAA,uBAAA;YACF,OAAO,IAAI,CAAC;QAChB,KAAK,CAAC,CAAA,0BAAA;YACF,OAAO,IAAI,CAAC,YAAY,KAAK,KAAK,CAAC,YAAY,CAAC;QACpD,KAAK,CAAC,CAAA,kCAAA;YACF,OAAO,iBAAiB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;QACrE,KAAK,CAAC,CAAA,4BAAA;YACF,OAAO,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACxC,KAAK,CAAC,CAAA,yBAAA;YACF,OAAO,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,WAAW,CAAC;QAClD,KAAK,CAAC,CAAA,uBAAA;YACF,OAAO,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACnC,KAAK,CAAC,CAAA,sBAAA;YACF,OAAO,IAAI,CAAC,cAAc,KAAK,KAAK,CAAC,cAAc,CAAC;QACxD,KAAK,CAAC,CAAA,2BAAA;YACF,OAAO,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACvC,KAAK,CAAC,CAAA,yBAAA;YACF,OAAO,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACrC,KAAK,CAAC,CAAA,wBAAA;YACF,OAAO,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,IAAI,EAAE,EAAE,KAAK,CAAC,UAAU,CAAC,MAAM,IAAI,EAAE,EAAE,WAAW,CAAC,CAAC;QACjG,KAAK,EAAE,CAAA,yBAAA;YACH,OAAO,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACrC,KAAK,gBAAgB,CAAA,sBAAA;YACjB,OAAO,IAAI,CAAC;QAChB;YACI,OAAO,IAAI,EAAE,CAAC;IAC1B,CAAK;AACL,CAAC;AACD,SAAS,eAAe,CAAC,IAAI,EAAE,KAAK,EAAE;IAClC,IAAI,OAAO,IAAI,CAAC,cAAc,KAAK,QAAQ,IACvC,OAAO,KAAK,CAAC,cAAc,KAAK,QAAQ,IACxC,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,KAAK,CAAC,cAAc,CAAC,MAAM,EAAE;QACpE,8CAAA;QACQ,OAAO,IAAI,CAAC,cAAc,KAAK,KAAK,CAAC,cAAc,CAAC;IAC5D,CAAK;IACD,MAAM,aAAa,GAAG,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9D,MAAM,cAAc,GAAG,kBAAkB,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IAChE,OAAQ,aAAa,CAAC,OAAO,KAAK,cAAc,CAAC,OAAO,IACpD,aAAa,CAAC,KAAK,KAAK,cAAc,CAAC,KAAK,EAAE;AACtD,CAAC;AACD,SAAS,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE;IACjC,OAAQ,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAChD,eAAe,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,CAAC,IAC7C,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KACzC,eAAe,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE;AAC5D,CAAC;AACD,SAAS,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE;IAC7B,OAAO,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;AAC/F,CAAC;AACD,SAAS,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE;IAC/B,IAAI,cAAc,IAAI,IAAI,IAAI,cAAc,IAAI,KAAK,EAAE;QACnD,OAAQ,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE;IAC5F,CAAK,MACI,IAAI,aAAa,IAAI,IAAI,IAAI,aAAa,IAAI,KAAK,EAAE;QACtD,MAAM,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7C,MAAM,EAAE,GAAG,eAAe,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC9C,IAAI,EAAE,KAAK,EAAE,EAAE;YACX,OAAO,cAAc,CAAC,EAAE,CAAC,KAAK,cAAc,CAAC,EAAE,CAAC,CAAC;QAC7D,CAAS,MACI;YACD,OAAO,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;QAC1C,CAAS;IACT,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AACD,SAAS,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE;IAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAA,CAAE,CAAC;IAC3C,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAA,CAAE,CAAC;IAC7C,IAAI,UAAU,CAAC,OAAO,CAAC,KAAK,UAAU,CAAC,QAAQ,CAAC,EAAE;QAC9C,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAK,MAAM,GAAG,IAAI,OAAO,CAAE;QACvB,IAAI,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;YAC7B,IAAI,QAAQ,CAAC,GAAG,CAAC,KAAK,SAAS,IAC3B,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;gBAC3C,OAAO,KAAK,CAAC;YAC7B,CAAa;QACb,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD,mEAAA,GACA,SAAS,kBAAkB,CAAC,QAAQ,EAAE,MAAM,EAAE;IAC1C,OAAQ,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,KAAK,SAAS,EAAE;AACrF,CAAC;AACD,SAAS,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE;IAC/B,IAAI,IAAI,KAAK,KAAK,EAAE;QAChB,OAAO,CAAC,CAAC;IACjB,CAAK;IACD,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;IACjC,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IACnC,IAAI,QAAQ,KAAK,SAAS,EAAE;QACxB,OAAO,mBAAmB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IACxD,CAAK;IACD,OAAQ,QAAQ;QACZ,KAAK,CAAC,CAAA,uBAAA,GAA2B;QACjC,KAAK,gBAAgB,CAAA,sBAAA;YACjB,OAAO,CAAC,CAAC;QACb,KAAK,CAAC,CAAA,0BAAA;YACF,OAAO,mBAAmB,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;QACtE,KAAK,CAAC,CAAA,yBAAA;YACF,OAAO,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACvC,KAAK,CAAC,CAAA,4BAAA;YACF,OAAO,iBAAiB,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC;QACxE,KAAK,CAAC,CAAA,kCAAA;YACF,OAAO,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;QAChF,KAAK,CAAC,CAAA,yBAAA;YACF,OAAO,mBAAmB,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;QACpE,KAAK,CAAC,CAAA,uBAAA;YACF,OAAO,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;QAC3D,KAAK,CAAC,CAAA,sBAAA;YACF,OAAO,iBAAiB,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC;QACxE,KAAK,CAAC,CAAA,2BAAA;YACF,OAAO,gBAAgB,CAAC,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC,aAAa,CAAC,CAAC;QACrE,KAAK,CAAC,CAAA,wBAAA;YACF,OAAO,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;QAC5D,KAAK,EAAE,CAAA,yBAAA;YACH,OAAO,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;QACtD;YACI,MAAM,IAAI,EAAE,CAAC;IACzB,CAAK;AACL,CAAC;AACD,SAAS,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE;IACjC,MAAM,UAAU,GAAG,eAAe,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC;IAC1E,MAAM,WAAW,GAAG,eAAe,CAAC,KAAK,CAAC,YAAY,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;IAC7E,IAAI,UAAU,GAAG,WAAW,EAAE;QAC1B,OAAO,CAAC,CAAC,CAAC;IAClB,CAAK,MACI,IAAI,UAAU,GAAG,WAAW,EAAE;QAC/B,OAAO,CAAC,CAAC;IACjB,CAAK,MACI,IAAI,UAAU,KAAK,WAAW,EAAE;QACjC,OAAO,CAAC,CAAC;IACjB,CAAK,MACI;QACT,uBAAA;QACQ,IAAI,KAAK,CAAC,UAAU,CAAC,EAAE;YACnB,OAAO,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/C,CAAS,MACI;YACD,OAAO,CAAC,CAAC;QACrB,CAAS;IACT,CAAK;AACL,CAAC;AACD,SAAS,iBAAiB,CAAC,IAAI,EAAE,KAAK,EAAE;IACpC,IAAI,OAAO,IAAI,KAAK,QAAQ,IACxB,OAAO,KAAK,KAAK,QAAQ,IACzB,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,EAAE;QAC9B,OAAO,mBAAmB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAChD,CAAK;IACD,MAAM,aAAa,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC/C,MAAM,cAAc,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACjD,MAAM,UAAU,GAAG,mBAAmB,CAAC,aAAa,CAAC,OAAO,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;IACtF,IAAI,UAAU,KAAK,CAAC,EAAE;QAClB,OAAO,UAAU,CAAC;IAC1B,CAAK;IACD,OAAO,mBAAmB,CAAC,aAAa,CAAC,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC;AAC1E,CAAC;AACD,SAAS,iBAAiB,CAAC,QAAQ,EAAE,SAAS,EAAE;IAC5C,MAAM,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACzC,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC3C,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,IAAI,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QACtE,MAAM,UAAU,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,IAAI,UAAU,KAAK,CAAC,EAAE;YAClB,OAAO,UAAU,CAAC;QAC9B,CAAS;IACT,CAAK;IACD,OAAO,mBAAmB,CAAC,YAAY,CAAC,MAAM,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;AAC1E,CAAC;AACD,SAAS,gBAAgB,CAAC,IAAI,EAAE,KAAK,EAAE;IACnC,MAAM,UAAU,GAAG,mBAAmB,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxG,IAAI,UAAU,KAAK,CAAC,EAAE;QAClB,OAAO,UAAU,CAAC;IAC1B,CAAK;IACD,OAAO,mBAAmB,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;AAClG,CAAC;AACD,SAAS,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE;IAC/B,MAAM,SAAS,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAC5C,MAAM,UAAU,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAC9C,OAAO,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AAC3C,CAAC;AACD,SAAS,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE;IAChC,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;IACpC,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC;IACtC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;QAChE,MAAM,OAAO,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D,IAAI,OAAO,EAAE;YACT,OAAO,OAAO,CAAC;QAC3B,CAAS;IACT,CAAK;IACD,OAAO,mBAAmB,CAAC,SAAS,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;AACpE,CAAC;AACD,SAAS,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE;IAC9B,IAAI,IAAI,KAAK,SAAS,CAAC,QAAQ,IAAI,KAAK,KAAK,SAAS,CAAC,QAAQ,EAAE;QAC7D,OAAO,CAAC,CAAC;IACjB,CAAK,MACI,IAAI,IAAI,KAAK,SAAS,CAAC,QAAQ,EAAE;QAClC,OAAO,CAAC,CAAC;IACjB,CAAK,MACI,IAAI,KAAK,KAAK,SAAS,CAAC,QAAQ,EAAE;QACnC,OAAO,CAAC,CAAC,CAAC;IAClB,CAAK;IACD,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,IAAI,CAAA,CAAE,CAAC;IAClC,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACtC,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,IAAI,CAAA,CAAE,CAAC;IACpC,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5C,6EAAA;IACA,6EAAA;IACA,wEAAA;IACA,oDAAA;IACI,QAAQ,CAAC,IAAI,EAAE,CAAC;IAChB,SAAS,CAAC,IAAI,EAAE,CAAC;IACjB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;QAC9D,MAAM,UAAU,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAClE,IAAI,UAAU,KAAK,CAAC,EAAE;YAClB,OAAO,UAAU,CAAC;QAC9B,CAAS;QACD,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3E,IAAI,OAAO,KAAK,CAAC,EAAE;YACf,OAAO,OAAO,CAAC;QAC3B,CAAS;IACT,CAAK;IACD,OAAO,mBAAmB,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;AAClE,CAAC;AACD;;;CAGA,GACA,SAAS,WAAW,CAAC,KAAK,EAAE;IACxB,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC;AAChC,CAAC;AACD,SAAS,aAAa,CAAC,KAAK,EAAE;IAC1B,IAAI,WAAW,IAAI,KAAK,EAAE;QACtB,OAAO,MAAM,CAAC;IACtB,CAAK,MACI,IAAI,cAAc,IAAI,KAAK,EAAE;QAC9B,OAAO,EAAE,GAAG,KAAK,CAAC,YAAY,CAAC;IACvC,CAAK,MACI,IAAI,cAAc,IAAI,KAAK,EAAE;QAC9B,OAAO,EAAE,GAAG,KAAK,CAAC,YAAY,CAAC;IACvC,CAAK,MACI,IAAI,aAAa,IAAI,KAAK,EAAE;QAC7B,OAAO,EAAE,GAAG,KAAK,CAAC,WAAW,CAAC;IACtC,CAAK,MACI,IAAI,gBAAgB,IAAI,KAAK,EAAE;QAChC,OAAO,iBAAiB,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IACvD,CAAK,MACI,IAAI,aAAa,IAAI,KAAK,EAAE;QAC7B,OAAO,KAAK,CAAC,WAAW,CAAC;IACjC,CAAK,MACI,IAAI,YAAY,IAAI,KAAK,EAAE;QAC5B,OAAO,kBAAkB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACpD,CAAK,MACI,IAAI,gBAAgB,IAAI,KAAK,EAAE;QAChC,OAAO,iBAAiB,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IACvD,CAAK,MACI,IAAI,eAAe,IAAI,KAAK,EAAE;QAC/B,OAAO,gBAAgB,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACrD,CAAK,MACI,IAAI,YAAY,IAAI,KAAK,EAAE;QAC5B,OAAO,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAC/C,CAAK,MACI,IAAI,UAAU,IAAI,KAAK,EAAE;QAC1B,OAAO,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AACD,SAAS,kBAAkB,CAAC,UAAU,EAAE;IACpC,OAAO,mBAAmB,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC;AACtD,CAAC;AACD,SAAS,iBAAiB,CAAC,SAAS,EAAE;IAClC,MAAM,mBAAmB,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC;IAC1D,OAAO,CAAC,KAAK,EAAE,mBAAmB,CAAC,OAAO,CAAC,CAAC,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC/E,CAAC;AACD,SAAS,gBAAgB,CAAC,QAAQ,EAAE;IAChC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC;AACD,SAAS,iBAAiB,CAAC,cAAc,EAAE;IACvC,OAAO,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,CAAC;AAC3D,CAAC;AACD,SAAS,WAAW,CAAC,QAAQ,EAAE;IAC/B,8EAAA;IACA,uEAAA;IACI,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAA,CAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7D,IAAI,MAAM,GAAG,GAAG,CAAC;IACjB,IAAI,KAAK,GAAG,IAAI,CAAC;IACjB,KAAK,MAAM,GAAG,IAAI,UAAU,CAAE;QAC1B,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,GAAG,CAAC;QAC1B,CAAS,MACI;YACD,KAAK,GAAG,KAAK,CAAC;QAC1B,CAAS;QACD,MAAM,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,CAAK;IACD,OAAO,MAAM,GAAG,GAAG,CAAC;AACxB,CAAC;AACD,SAAS,aAAa,CAAC,UAAU,EAAE;IAC/B,IAAI,MAAM,GAAG,GAAG,CAAC;IACjB,IAAI,KAAK,GAAG,IAAI,CAAC;IACjB,KAAK,MAAM,KAAK,IAAI,UAAU,CAAC,MAAM,IAAI,EAAE,CAAE;QACzC,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,GAAG,CAAC;QAC1B,CAAS,MACI;YACD,KAAK,GAAG,KAAK,CAAC;QAC1B,CAAS;QACD,MAAM,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC;IACvC,CAAK;IACD,OAAO,MAAM,GAAG,GAAG,CAAC;AACxB,CAAC;AACD;;;;;;CAMA,GACA,SAAS,gBAAgB,CAAC,KAAK,EAAE;IAC7B,OAAQ,SAAS,CAAC,KAAK,CAAC;QACpB,KAAK,CAAC,CAAA,uBAAA;YACF,OAAO,CAAC,CAAC;QACb,KAAK,CAAC,CAAA,0BAAA;YACF,OAAO,CAAC,CAAC;QACb,KAAK,CAAC,CAAA,yBAAA;YACF,OAAO,CAAC,CAAC;QACb,KAAK,CAAC,CAAA,4BAAA;YACd,yEAAA;YACY,OAAO,EAAE,CAAC;QACd,KAAK,CAAC,CAAA,kCAAA;YACF,MAAM,aAAa,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAC9C,OAAO,aAAa,GAAG,EAAE,GAAG,gBAAgB,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;QACrE,KAAK,CAAC,CAAA,yBAAA;YACd,+EAAA;YACA,0EAAA;YACA,kBAAA;YACY,OAAO,KAAK,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;QACxC,KAAK,CAAC,CAAA,uBAAA;YACF,OAAO,mBAAmB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,mBAAmB,EAAE,CAAC;QACvE,KAAK,CAAC,CAAA,sBAAA;YACF,OAAO,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC;QACvC,KAAK,CAAC,CAAA,2BAAA;YACd,uEAAA;YACY,OAAO,EAAE,CAAC;QACd,KAAK,CAAC,CAAA,wBAAA;YACF,OAAO,qBAAqB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACnD,KAAK,EAAE,CAAA,yBAAA;YACH,OAAO,mBAAmB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC/C;YACI,MAAM,IAAI,EAAE,CAAC;IACzB,CAAK;AACL,CAAC;AACD,SAAS,mBAAmB,CAAC,QAAQ,EAAE;IACnC,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK;QACnC,IAAI,IAAI,GAAG,CAAC,MAAM,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACnD,CAAK,CAAC,CAAC;IACH,OAAO,IAAI,CAAC;AAChB,CAAC;AACD,SAAS,qBAAqB,CAAC,UAAU,EAAE;IACvC,OAAO,CAAC,UAAU,CAAC,MAAM,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC,YAAY,EAAE,KAAK,GAAK,YAAY,GAAG,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;AAChH,CAAC;AACD,iEAAA,GACA,SAAS,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;IAC/B,OAAO;QACH,cAAc,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;IACnI,CAAK,CAAC;AACN,CAAC;AACD,iDAAA,GACA,SAAS,SAAS,CAAC,KAAK,EAAE;IACtB,OAAO,CAAC,CAAC,KAAK,IAAI,cAAc,IAAI,KAAK,CAAC;AAC9C,CAAC;AACD,8CAAA,GACA,SAAS,QAAQ,CAAC,KAAK,EAAE;IACrB,OAAO,CAAC,CAAC,KAAK,IAAI,aAAa,IAAI,KAAK,CAAC;AAC7C,CAAC;AACD,wEAAA,GACA,SAAS,QAAQ,CAAC,KAAK,EAAE;IACrB,OAAO,SAAS,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC/C,CAAC;AACD,8CAAA,GACA,SAAS,OAAO,CAAC,KAAK,EAAE;IACpB,OAAO,CAAC,CAAC,KAAK,IAAI,YAAY,IAAI,KAAK,CAAC;AAC5C,CAAC;AACD,4CAAA,GACA,SAAS,WAAW,CAAC,KAAK,EAAE;IACxB,OAAO,CAAC,CAAC,KAAK,IAAI,WAAW,IAAI,KAAK,CAAC;AAC3C,CAAC;AACD,oCAAA,GACA,SAAS,UAAU,CAAC,KAAK,EAAE;IACvB,OAAO,CAAC,CAAC,KAAK,IAAI,aAAa,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;AACjF,CAAC;AACD,2CAAA,GACA,SAAS,UAAU,CAAC,KAAK,EAAE;IACvB,OAAO,CAAC,CAAC,KAAK,IAAI,UAAU,IAAI,KAAK,CAAC;AAC1C,CAAC;AACD,qCAAA,GACA,SAAS,SAAS,CAAC,MAAM,EAAE;IACvB,IAAI,MAAM,CAAC,aAAa,EAAE;QACtB,OAAO;YAAE,aAAa,EAAE,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,MAAM,CAAC,aAAa,CAAC;QAAA,CAAE,CAAC;IAC1E,CAAK,MACI,IAAI,MAAM,CAAC,cAAc,IAC1B,OAAO,MAAM,CAAC,cAAc,KAAK,QAAQ,EAAE;QAC3C,OAAO;YAAE,cAAc,EAAE,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,MAAM,CAAC,cAAc,CAAC;QAAA,CAAE,CAAC;IAC5E,CAAK,MACI,IAAI,MAAM,CAAC,QAAQ,EAAE;QACtB,MAAM,MAAM,GAAG;YAAE,QAAQ,EAAE;gBAAE,MAAM,EAAE,CAAA,CAAE;YAAA,CAAE;QAAA,CAAE,CAAC;QAC5C,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,GAAM,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9F,OAAO,MAAM,CAAC;IACtB,CAAK,MACI,IAAI,MAAM,CAAC,UAAU,EAAE;QACxB,MAAM,MAAM,GAAG;YAAE,UAAU,EAAE;gBAAE,MAAM,EAAE,EAAE;YAAA,CAAE;QAAA,CAAE,CAAC;QAC9C,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,IAAI,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAE;YAC9D,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QACjF,CAAS;QACD,OAAO,MAAM,CAAC;IACtB,CAAK,MACI;QACD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,MAAM,CAAC,CAAC;IACzC,CAAK;AACL,CAAC;AACD,4EAAA,GACA,SAAS,UAAU,CAAC,KAAK,EAAE;IACvB,OAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAA,CAAE,EAAE,MAAM,IAAI,CAAA,CAAE,CAAA,CAAE,UAAU,CAAC,IAAI,CAAA,CAAE,EAAE,WAAW,KACzE,cAAc,EAAE;AACxB,CAAC;AACD,mEAAA,GACA,SAAS,mBAAmB,CAAC,KAAK,EAAE;IAChC,IAAI,WAAW,IAAI,KAAK,EAAE;QACtB,OAAO,SAAS,CAAC;IACzB,CAAK,MACI,IAAI,cAAc,IAAI,KAAK,EAAE;QAC9B,OAAO;YAAE,YAAY,EAAE,KAAK;QAAA,CAAE,CAAC;IACvC,CAAK,MACI,IAAI,cAAc,IAAI,KAAK,IAAI,aAAa,IAAI,KAAK,EAAE;QACxD,OAAO;YAAE,WAAW,EAAE,GAAG;QAAA,CAAE,CAAC;IACpC,CAAK,MACI,IAAI,gBAAgB,IAAI,KAAK,EAAE;QAChC,OAAO;YAAE,cAAc,EAAE;gBAAE,OAAO,EAAE,MAAM,CAAC,gBAAgB;YAAA,CAAE;QAAA,CAAE,CAAC;IACxE,CAAK,MACI,IAAI,aAAa,IAAI,KAAK,EAAE;QAC7B,OAAO;YAAE,WAAW,EAAE,EAAE;QAAA,CAAE,CAAC;IACnC,CAAK,MACI,IAAI,YAAY,IAAI,KAAK,EAAE;QAC5B,OAAO;YAAE,UAAU,EAAE,EAAE;QAAA,CAAE,CAAC;IAClC,CAAK,MACI,IAAI,gBAAgB,IAAI,KAAK,EAAE;QAChC,OAAO,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;IACjE,CAAK,MACI,IAAI,eAAe,IAAI,KAAK,EAAE;QAC/B,OAAO;YAAE,aAAa,EAAE;gBAAE,QAAQ,EAAE,CAAC,EAAE;gBAAE,SAAS,EAAE,CAAC,GAAG;YAAA,CAAE;QAAA,CAAE,CAAC;IACrE,CAAK,MACI,IAAI,YAAY,IAAI,KAAK,EAAE;QAC5B,OAAO;YAAE,UAAU,EAAE,CAAA,CAAE;QAAA,CAAE,CAAC;IAClC,CAAK,MACI,IAAI,UAAU,IAAI,KAAK,EAAE;QAC1B,OAAO;YAAE,QAAQ,EAAE,CAAA,CAAE;QAAA,CAAE,CAAC;IAChC,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AACD,oEAAA,GACA,SAAS,mBAAmB,CAAC,KAAK,EAAE;IAChC,IAAI,WAAW,IAAI,KAAK,EAAE;QACtB,OAAO;YAAE,YAAY,EAAE,KAAK;QAAA,CAAE,CAAC;IACvC,CAAK,MACI,IAAI,cAAc,IAAI,KAAK,EAAE;QAC9B,OAAO;YAAE,WAAW,EAAE,GAAG;QAAA,CAAE,CAAC;IACpC,CAAK,MACI,IAAI,cAAc,IAAI,KAAK,IAAI,aAAa,IAAI,KAAK,EAAE;QACxD,OAAO;YAAE,cAAc,EAAE;gBAAE,OAAO,EAAE,MAAM,CAAC,gBAAgB;YAAA,CAAE;QAAA,CAAE,CAAC;IACxE,CAAK,MACI,IAAI,gBAAgB,IAAI,KAAK,EAAE;QAChC,OAAO;YAAE,WAAW,EAAE,EAAE;QAAA,CAAE,CAAC;IACnC,CAAK,MACI,IAAI,aAAa,IAAI,KAAK,EAAE;QAC7B,OAAO;YAAE,UAAU,EAAE,EAAE;QAAA,CAAE,CAAC;IAClC,CAAK,MACI,IAAI,YAAY,IAAI,KAAK,EAAE;QAC5B,OAAO,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;IACjE,CAAK,MACI,IAAI,gBAAgB,IAAI,KAAK,EAAE;QAChC,OAAO;YAAE,aAAa,EAAE;gBAAE,QAAQ,EAAE,CAAC,EAAE;gBAAE,SAAS,EAAE,CAAC,GAAG;YAAA,CAAE;QAAA,CAAE,CAAC;IACrE,CAAK,MACI,IAAI,eAAe,IAAI,KAAK,EAAE;QAC/B,OAAO;YAAE,UAAU,EAAE,CAAA,CAAE;QAAA,CAAE,CAAC;IAClC,CAAK,MACI,IAAI,YAAY,IAAI,KAAK,EAAE;QAC5B,OAAO;YAAE,QAAQ,EAAE,CAAA,CAAE;QAAA,CAAE,CAAC;IAChC,CAAK,MACI,IAAI,UAAU,IAAI,KAAK,EAAE;QAC1B,OAAO,SAAS,CAAC;IACzB,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AACD,SAAS,iBAAiB,CAAC,IAAI,EAAE,KAAK,EAAE;IACpC,MAAM,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;IAClD,IAAI,GAAG,KAAK,CAAC,EAAE;QACX,OAAO,GAAG,CAAC;IACnB,CAAK;IACD,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;QACpC,OAAO,CAAC,CAAC,CAAC;IAClB,CAAK,MACI,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,EAAE;QACzC,OAAO,CAAC,CAAC;IACjB,CAAK;IACD,OAAO,CAAC,CAAC;AACb,CAAC;AACD,SAAS,iBAAiB,CAAC,IAAI,EAAE,KAAK,EAAE;IACpC,MAAM,GAAG,GAAG,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;IAClD,IAAI,GAAG,KAAK,CAAC,EAAE;QACX,OAAO,GAAG,CAAC;IACnB,CAAK;IACD,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;QACpC,OAAO,CAAC,CAAC;IACjB,CAAK,MACI,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,EAAE;QACzC,OAAO,CAAC,CAAC,CAAC;IAClB,CAAK;IACD,OAAO,CAAC,CAAC;AACb,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,WAAW,CAAC;IACd,WAAW,CAAC,KAAK,CAAE;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,CAAK;IACD,OAAO,KAAK,GAAG;QACX,OAAO,IAAI,WAAW,CAAC;YAAE,QAAQ,EAAE,CAAA,CAAE;QAAA,CAAE,CAAC,CAAC;IACjD,CAAK;IACL;;;;;KAKA,GACI,KAAK,CAAC,IAAI,EAAE;QACR,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAChB,OAAO,IAAI,CAAC,KAAK,CAAC;QAC9B,CAAS,MACI;YACD,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;YAC9B,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC,CAAE;gBACtC,YAAY,GAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAA,CAAE,CAAA,CAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjE,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;oBAC3B,OAAO,IAAI,CAAC;gBAChC,CAAiB;YACjB,CAAa;YACD,YAAY,GAAG,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAA,CAAE,CAAA,CAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YACxE,OAAO,YAAY,IAAI,IAAI,CAAC;QACxC,CAAS;IACT,CAAK;IACL;;;;;KAKA,GACI,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE;QACb,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACpD,SAAS,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IACzD,CAAK;IACL;;;;KAIA,GACI,MAAM,CAAC,IAAI,EAAE;QACT,IAAI,MAAM,GAAG,WAAW,CAAC,SAAS,EAAE,CAAC;QACrC,IAAI,OAAO,GAAG,CAAA,CAAE,CAAC;QACjB,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,IAAI,KAAK;YAC1B,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE;gBACnD,yDAAA;gBACgB,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;gBAC5C,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;gBAC/C,OAAO,GAAG,CAAA,CAAE,CAAC;gBACb,OAAO,GAAG,EAAE,CAAC;gBACb,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YACxC,CAAa;YACD,IAAI,KAAK,EAAE;gBACP,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;YAC/D,CAAa,MACI;gBACD,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YACjD,CAAa;QACb,CAAS,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC5C,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IACvD,CAAK;IACL;;;;;KAKA,GACI,MAAM,CAAC,IAAI,EAAE;QACT,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAC/C,IAAI,UAAU,CAAC,WAAW,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE;YACxD,OAAO,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QACnE,CAAS;IACT,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAO,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;IACpD,CAAK;IACL;;;KAGA,GACI,YAAY,CAAC,IAAI,EAAE;QACf,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAE;YAC1B,OAAO,CAAC,QAAQ,GAAG;gBAAE,MAAM,EAAE,CAAA,CAAE;YAAA,CAAE,CAAC;QAC9C,CAAS;QACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;YAClC,IAAI,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBAC5C,IAAI,GAAG;oBAAE,QAAQ,EAAE;wBAAE,MAAM,EAAE,CAAA,CAAE;oBAAA,CAAE;gBAAA,CAAE,CAAC;gBACpC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;YAC5D,CAAa;YACD,OAAO,GAAG,IAAI,CAAC;QAC3B,CAAS;QACD,OAAO,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;IACvC,CAAK;IACL;;;KAGA,GACI,YAAY,CAAC,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE;QACtC,OAAO,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,GAAM,SAAS,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QACvD,KAAK,MAAM,KAAK,IAAI,OAAO,CAAE;YACzB,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC;QACpC,CAAS;IACT,CAAK;IACD,KAAK,GAAG;QACJ,OAAO,IAAI,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACtD,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,gBAAgB,CAAC,KAAK,EAAE;IAC7B,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,KAAK,KAAK;QAClC,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC;YAAC,GAAG;SAAC,CAAC,CAAC;QAC3C,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;YACnB,MAAM,UAAU,GAAG,gBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACpD,MAAM,YAAY,GAAG,UAAU,CAAC,MAAM,CAAC;YACvC,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC3C,wDAAA;gBACgB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACzC,CAAa,MACI;gBACjB,kEAAA;gBACA,cAAA;gBACgB,KAAK,MAAM,UAAU,IAAI,YAAY,CAAE;oBACnC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC/D,CAAiB;YACjB,CAAa;QACb,CAAS,MACI;YACb,uEAAA;YACA,SAAA;YACY,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACrC,CAAS;IACT,CAAK,CAAC,CAAC;IACH,OAAO,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC;AACjC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;CASA,GACA,MAAM,eAAe,CAAC;IAClB,WAAW,CAAC,GAAG,EAAE,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,aAAa,CAAE;QAC/E,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IAC3C,CAAK;IACL;;;KAGA,GACI,OAAO,kBAAkB,CAAC,WAAW,EAAE;QACnC,OAAO,IAAI,eAAe,CAAC,WAAW,EAAE,CAAC,CAAA,wBAAA,KACjD,WAAA,GAAsB,eAAe,CAAC,GAAG,EAAE,EAC3C,YAAA,GAAuB,eAAe,CAAC,GAAG,EAAE,EAC5C,cAAA,GAAyB,eAAe,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA,wBAAA,GAA4B,CAAC;IACnG,CAAK;IACL;;;KAGA,GACI,OAAO,gBAAgB,CAAC,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE;QAC7D,OAAO,IAAI,eAAe,CAAC,WAAW,EAAE,CAAC,CAAA,+BAAA,KACjD,WAAA,GAAsB,OAAO,EAC7B,YAAA,GAAuB,eAAe,CAAC,GAAG,EAAE,EAC5C,cAAA,GAAyB,UAAU,EAAE,KAAK,EAAE,CAAC,CAAA,wBAAA,GAA4B,CAAC;IAC1E,CAAK;IACL,4EAAA,GACI,OAAO,aAAa,CAAC,WAAW,EAAE,OAAO,EAAE;QACvC,OAAO,IAAI,eAAe,CAAC,WAAW,EAAE,CAAC,CAAA,4BAAA,KACjD,WAAA,GAAsB,OAAO,EAC7B,YAAA,GAAuB,eAAe,CAAC,GAAG,EAAE,EAC5C,cAAA,GAAyB,eAAe,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA,wBAAA,GAA4B,CAAC;IACnG,CAAK;IACL;;;;KAIA,GACI,OAAO,kBAAkB,CAAC,WAAW,EAAE,OAAO,EAAE;QAC5C,OAAO,IAAI,eAAe,CAAC,WAAW,EAAE,CAAC,CAAA,iCAAA,KACjD,WAAA,GAAsB,OAAO,EAC7B,YAAA,GAAuB,eAAe,CAAC,GAAG,EAAE,EAC5C,cAAA,GAAyB,eAAe,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA,yCAAA,GAA6C,CAAC;IACpH,CAAK;IACL;;;KAGA,GACI,sBAAsB,CAAC,OAAO,EAAE,KAAK,EAAE;QAC3C,oEAAA;QACA,4EAAA;QACA,mEAAA;QACA,0EAAA;QACA,kEAAA;QACQ,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,IAC1D,CAAa,IAAI,CAAC,YAAY,KAAK,CAAC,CAAA,4BAAA,OACpB,IAAI,CAAC,YAAY,KAAK,CAAC,CAAA,wBAAA,GAAA,CAA4B,EAAE;YACzD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;QACtC,CAAS;QACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAA,+BAAA,GAAmC;QACxD,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAA,wBAAA,GAA4B;QAClD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;KAGA,GACI,mBAAmB,CAAC,OAAO,EAAE;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAA,4BAAA,GAAgC;QACrD,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAA,wBAAA,GAA4B;QAClD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;;KAIA,GACI,wBAAwB,CAAC,OAAO,EAAE;QAC9B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAA,iCAAA,GAAqC;QAC1D,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAA,yCAAA,GAA6C;QACnE,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,wBAAwB,GAAG;QACvB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAA,yCAAA,GAA6C;QACnE,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,oBAAoB,GAAG;QACnB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAA,qCAAA,GAAyC;QAC/D,IAAI,CAAC,OAAO,GAAG,eAAe,CAAC,GAAG,EAAE,CAAC;QACrC,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,WAAW,CAAC,QAAQ,EAAE;QAClB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,IAAI,iBAAiB,GAAG;QACpB,OAAO,IAAI,CAAC,aAAa,KAAK,CAAC,CAAA,qCAAA,GAAyC;IAChF,CAAK;IACD,IAAI,qBAAqB,GAAG;QACxB,OAAO,IAAI,CAAC,aAAa,KAAK,CAAC,CAAA,yCAAA,GAA6C;IACpF,CAAK;IACD,IAAI,gBAAgB,GAAG;QACnB,OAAO,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,qBAAqB,CAAC;IACpE,CAAK;IACD,eAAe,GAAG;QACd,OAAO,IAAI,CAAC,YAAY,KAAK,CAAC,CAAA,wBAAA,GAA4B;IAClE,CAAK;IACD,eAAe,GAAG;QACd,OAAO,IAAI,CAAC,YAAY,KAAK,CAAC,CAAA,+BAAA,GAAmC;IACzE,CAAK;IACD,YAAY,GAAG;QACX,OAAO,IAAI,CAAC,YAAY,KAAK,CAAC,CAAA,4BAAA,GAAgC;IACtE,CAAK;IACD,iBAAiB,GAAG;QAChB,OAAO,IAAI,CAAC,YAAY,KAAK,CAAC,CAAA,iCAAA,GAAqC;IAC3E,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAQ,KAAK,YAAY,eAAe,IACpC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAC3B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IACnC,IAAI,CAAC,YAAY,KAAK,KAAK,CAAC,YAAY,IACxC,IAAI,CAAC,aAAa,KAAK,KAAK,CAAC,aAAa,IAC1C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;IAC3C,CAAK;IACD,WAAW,GAAG;QACV,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACrJ,CAAK;IACD,QAAQ,GAAG;QACP,OAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GACjF,CAAC,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GACrC,CAAC,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GACzC,CAAC,gBAAgB,EAAE,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,EAAE;IACvD,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,uBAAuB,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE;IAC5C,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAChC,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAChC,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,EAAE;QAC5B,OAAO,YAAY,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACpC,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;;;;CAaA,GACA,MAAM,KAAK,CAAC;IACR,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAE;QAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,CAAK;AACL,CAAC;AACD,SAAS,sBAAsB,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE;IACjD,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QAC5C,MAAM,gBAAgB,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACpC,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,gBAAgB,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE;YACrC,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;QACzG,CAAS,MACI;YACD,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YACxD,UAAU,GAAG,YAAY,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC3D,CAAS;QACD,IAAI,gBAAgB,CAAC,GAAG,KAAK,MAAM,CAAA,wBAAA,KAA6B;YAC5D,UAAU,GAAG,UAAU,GAAG,CAAC,CAAC,CAAC;QACzC,CAAS;QACD,IAAI,UAAU,KAAK,CAAC,EAAE;YAClB,MAAM;QAClB,CAAS;IACT,CAAK;IACD,OAAO,UAAU,CAAC;AACtB,CAAC;AACD;;;CAGA,GACA,SAAS,uBAAuB,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE;IAClD,MAAM,UAAU,GAAG,sBAAsB,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;IAC/D,OAAO,KAAK,CAAC,SAAS,GAAG,UAAU,IAAI,CAAC,GAAG,UAAU,GAAG,CAAC,CAAC;AAC9D,CAAC;AACD;;;CAGA,GACA,SAAS,wBAAwB,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE;IACnD,MAAM,UAAU,GAAG,sBAAsB,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;IAC/D,OAAO,KAAK,CAAC,SAAS,GAAG,UAAU,IAAI,CAAC,GAAG,UAAU,GAAG,CAAC,CAAC;AAC9D,CAAC;AACD,SAAS,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE;IAC9B,IAAI,IAAI,KAAK,IAAI,EAAE;QACf,OAAO,KAAK,KAAK,IAAI,CAAC;IAC9B,CAAK,MACI,IAAI,KAAK,KAAK,IAAI,EAAE;QACrB,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,IAClC,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;QAChD,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QAC3C,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,aAAa,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,aAAa,CAAC,EAAE;YAC3C,OAAO,KAAK,CAAC;QACzB,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,MAAM,OAAO,CAAC;IACV,WAAW,CAAC,KAAK,EAAE,GAAG,GAAG,MAAK,uBAAA,GAAA,CAA4B;QACtD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACvB,CAAK;AACL,CAAC;AACD,SAAS,eAAe,CAAC,OAAO,EAAE;IAClC,gDAAA;IACI,OAAO,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC;AACzD,CAAC;AACD,SAAS,gBAAgB,CAAC,OAAO,EAAE;IAC/B,OAAO,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC;AACD,SAAS,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE;IAChC,OAAO,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACrE,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,MAAM,CAAC;AACb,CAAC;AACD,MAAM,WAAW,SAAS,MAAM,CAAC;IAC7B,WAAW,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAE;QAC1B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,CAAK;IACL;;KAEA,GACI,OAAO,MAAM,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE;QAC5B,IAAI,KAAK,CAAC,UAAU,EAAE,EAAE;YACpB,IAAI,EAAE,KAAK,IAAI,CAAA,eAAA,OAAsB,EAAE,KAAK,QAAQ,CAAA,mBAAA,KAAwB;gBACxE,OAAO,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YACrE,CAAa,MACI;gBACD,OAAO,IAAI,cAAc,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;YAC5D,CAAa;QACb,CAAS,MACI,IAAI,EAAE,KAAK,gBAAgB,CAAA,2BAAA,KAAgC;YAC5D,OAAO,IAAI,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACzD,CAAS,MACI,IAAI,EAAE,KAAK,IAAI,CAAA,eAAA,KAAoB;YACpC,OAAO,IAAI,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC9C,CAAS,MACI,IAAI,EAAE,KAAK,QAAQ,CAAA,mBAAA,KAAwB;YAC5C,OAAO,IAAI,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACjD,CAAS,MACI,IAAI,EAAE,KAAK,oBAAoB,CAAA,+BAAA,KAAoC;YACpE,OAAO,IAAI,sBAAsB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC5D,CAAS,MACI;YACD,OAAO,IAAI,WAAW,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACrD,CAAS;IACT,CAAK;IACD,OAAO,sBAAsB,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE;QAC5C,OAAO,EAAE,KAAK,IAAI,CAAA,eAAA,MACZ,IAAI,gBAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,GAClC,IAAI,mBAAmB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACpD,CAAK;IACD,OAAO,CAAC,GAAG,EAAE;QACT,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,mDAAA;QACQ,IAAI,IAAI,CAAC,EAAE,KAAK,IAAI,CAAA,sBAAA,KAA2B;YAC3C,OAAQ,KAAK,KAAK,IAAI,IAClB,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QACzE,CAAS;QACT,2EAAA;QACQ,OAAQ,KAAK,KAAK,IAAI,IAClB,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,SAAS,CAAC,KAAK,CAAC,IAC1C,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;IACrE,CAAK;IACD,iBAAiB,CAAC,UAAU,EAAE;QAC1B,OAAQ,IAAI,CAAC,EAAE;YACX,KAAK,GAAG,CAAA,sBAAA;gBACJ,OAAO,UAAU,GAAG,CAAC,CAAC;YAC1B,KAAK,IAAI,CAAA,+BAAA;gBACL,OAAO,UAAU,IAAI,CAAC,CAAC;YAC3B,KAAK,IAAI,CAAA,kBAAA;gBACL,OAAO,UAAU,KAAK,CAAC,CAAC;YAC5B,KAAK,IAAI,CAAA,sBAAA;gBACL,OAAO,UAAU,KAAK,CAAC,CAAC;YAC5B,KAAK,GAAG,CAAA,yBAAA;gBACJ,OAAO,UAAU,GAAG,CAAC,CAAC;YAC1B,KAAK,IAAI,CAAA,kCAAA;gBACL,OAAO,UAAU,IAAI,CAAC,CAAC;YAC3B;gBACI,OAAO,IAAI,EAAE,CAAC;QAC9B,CAAS;IACT,CAAK;IACD,YAAY,GAAG;QACX,OAAQ;YACJ,GAAG,CAAA,sBAAA;YACH,IAAI,CAAA,+BAAA;YACJ,GAAG,CAAA,yBAAA;YACH,IAAI,CAAA,kCAAA;YACJ,IAAI,CAAA,sBAAA;YACJ,QAAQ,CAAA,mBAAA;SACX,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;IACjC,CAAK;IACD,mBAAmB,GAAG;QAClB,OAAO;YAAC,IAAI;SAAC,CAAC;IACtB,CAAK;IACD,UAAU,GAAG;QACT,OAAO;YAAC,IAAI;SAAC,CAAC;IACtB,CAAK;IACD,uBAAuB,GAAG;QACtB,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YACrB,OAAO,IAAI,CAAC,KAAK,CAAC;QAC9B,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;AACL,CAAC;AACD,MAAM,eAAe,SAAS,MAAM,CAAC;IACjC,WAAW,CAAC,OAAO,EAAE,EAAE,CAAE;QACrB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;IAC7C,CAAK;IACL;;KAEA,GACI,OAAO,MAAM,CAAC,OAAO,EAAE,EAAE,EAAE;QACvB,OAAO,IAAI,eAAe,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAChD,CAAK;IACD,OAAO,CAAC,GAAG,EAAE;QACT,IAAI,4BAA4B,CAAC,IAAI,CAAC,EAAE;YAChD,yFAAA;YACY,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAC,MAAM,GAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,SAAS,CAAC;QACnF,CAAS,MACI;YACb,sDAAA;YACY,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,EAAC,MAAM,GAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,SAAS,CAAC;QAClF,CAAS;IACT,CAAK;IACD,mBAAmB,GAAG;QAClB,IAAI,IAAI,CAAC,wBAAwB,KAAK,IAAI,EAAE;YACxC,OAAO,IAAI,CAAC,wBAAwB,CAAC;QACjD,CAAS;QACD,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,SAAS,KAAK;YACvE,OAAO,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAClE,CAAS,EAAE,EAAE,CAAC,CAAC;QACP,OAAO,IAAI,CAAC,wBAAwB,CAAC;IAC7C,CAAK;IACL,2CAAA;IACI,UAAU,GAAG;QACT,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC/C,CAAK;IACD,uBAAuB,GAAG;QACtB,MAAM,KAAK,GAAG,IAAI,CAAC,uBAAuB,EAAC,MAAM,GAAI,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;QAC5E,IAAI,KAAK,KAAK,IAAI,EAAE;YAChB,OAAO,KAAK,CAAC,KAAK,CAAC;QAC/B,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL,iGAAA;IACA,uFAAA;IACA,aAAA;IACI,uBAAuB,CAAC,SAAS,EAAE;QAC/B,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAE;YAClD,IAAI,SAAS,CAAC,WAAW,CAAC,EAAE;gBACxB,OAAO,WAAW,CAAC;YACnC,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;AACL,CAAC;AACD,SAAS,4BAA4B,CAAC,eAAe,EAAE;IACnD,OAAO,eAAe,CAAC,EAAE,KAAK,KAAK,CAAA,yBAAA,GAA6B;AACpE,CAAC;AACD,SAAS,4BAA4B,CAAC,eAAe,EAAE;IACnD,OAAO,eAAe,CAAC,EAAE,KAAK,IAAI,CAAA,wBAAA,GAA4B;AAClE,CAAC;AACD;;CAEA,GACA,SAAS,gCAAgC,CAAC,eAAe,EAAE;IACvD,OAAQ,qBAAqB,CAAC,eAAe,CAAC,IAC1C,4BAA4B,CAAC,eAAe,CAAC,EAAE;AACvD,CAAC;AACD;;CAEA,GACA,SAAS,qBAAqB,CAAC,eAAe,EAAE;IAC5C,KAAK,MAAM,MAAM,IAAI,eAAe,CAAC,OAAO,CAAE;QAC1C,IAAI,MAAM,YAAY,eAAe,EAAE;YACnC,OAAO,KAAK,CAAC;QACzB,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD,SAAS,cAAc,CAAC,MAAM,EAAE;IAC5B,IAAI,MAAM,YAAY,WAAW,EAAE;QACvC,yEAAA;QACA,2EAAA;QACA,sCAAA;QACQ,OAAQ,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,GAClC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,GACpB,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;IACvC,CAAK,MACI,IAAI,gCAAgC,CAAC,MAAM,CAAC,EAAE;QACvD,0EAAA;QACA,yEAAA;QACA,0EAAA;QACA,4DAAA;QACA,qEAAA;QACA,kEAAA;QACQ,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,EAAC,MAAM,GAAI,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9E,CAAK,MACI;QACT,oCAAA;QACQ,MAAM,kBAAkB,GAAG,MAAM,CAAC,OAAO,CACpC,GAAG,EAAC,MAAM,GAAI,cAAc,CAAC,MAAM,CAAC,CAAC,CACrC,IAAI,CAAC,GAAG,CAAC,CAAC;QACf,OAAO,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACrD,CAAK;AACL,CAAC;AACD,SAAS,YAAY,CAAC,EAAE,EAAE,EAAE,EAAE;IAC1B,IAAI,EAAE,YAAY,WAAW,EAAE;QAC3B,OAAO,iBAAiB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACzC,CAAK,MACI,IAAI,EAAE,YAAY,eAAe,EAAE;QACpC,OAAO,qBAAqB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC7C,CAAK,MACI;QACD,IAAI,EAAE,CAAC;IACf,CAAK;AACL,CAAC;AACD,SAAS,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE;IAC/B,OAAQ,EAAE,YAAY,WAAW,IAC7B,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IACf,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,IAC1B,WAAW,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE;AACzC,CAAC;AACD,SAAS,qBAAqB,CAAC,EAAE,EAAE,EAAE,EAAE;IACnC,IAAI,EAAE,YAAY,eAAe,IAC7B,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IACf,EAAE,CAAC,OAAO,CAAC,MAAM,KAAK,EAAE,CAAC,OAAO,CAAC,MAAM,EAAE;QACzC,MAAM,eAAe,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,GAAK,MAAM,IAAI,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;QAClI,OAAO,eAAe,CAAC;IAC/B,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AACD;;;CAGA,GACA,SAAS,+BAA+B,CAAC,eAAe,EAAE,YAAY,EAAE;IACpE,MAAM,aAAa,GAAG,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACnE,OAAO,eAAe,CAAC,MAAM,CAAC,aAAa,EAAE,eAAe,CAAC,EAAE,CAAC,CAAC;AACrE,CAAC;AACD,8CAAA,GACA,SAAS,eAAe,CAAC,MAAM,EAAE;IAC7B,IAAI,MAAM,YAAY,WAAW,EAAE;QAC/B,OAAO,oBAAoB,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAK,MACI,IAAI,MAAM,YAAY,eAAe,EAAE;QACxC,OAAO,wBAAwB,CAAC,MAAM,CAAC,CAAC;IAChD,CAAK,MACI;QACD,OAAO,QAAQ,CAAC;IACxB,CAAK;AACL,CAAC;AACD,SAAS,wBAAwB,CAAC,MAAM,EAAE;IACtC,OAAQ,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,GACxB,CAAC,EAAE,CAAC,GACJ,MAAM,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GACnD,GAAG,EAAE;AACb,CAAC;AACD,SAAS,oBAAoB,CAAC,MAAM,EAAE;IAClC,OAAO,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACzF,CAAC;AACD,yDAAA,GACA,MAAM,cAAc,SAAS,WAAW,CAAC;IACrC,WAAW,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAE;QAC1B,KAAK,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IAC9D,CAAK;IACD,OAAO,CAAC,GAAG,EAAE;QACT,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7D,OAAO,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;IAClD,CAAK;AACL,CAAC;AACD,uDAAA,GACA,MAAM,gBAAgB,SAAS,WAAW,CAAC;IACvC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAE;QACtB,KAAK,CAAC,KAAK,EAAE,IAAI,CAAA,eAAA,KAAoB,KAAK,CAAC,CAAC;QAC5C,IAAI,CAAC,IAAI,GAAG,iCAAiC,CAAC,IAAI,CAAA,eAAA,KAAoB,KAAK,CAAC,CAAC;IACrF,CAAK;IACD,OAAO,CAAC,GAAG,EAAE;QACT,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAC,GAAG,GAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3D,CAAK;AACL,CAAC;AACD,mEAAA,GACA,MAAM,mBAAmB,SAAS,WAAW,CAAC;IAC1C,WAAW,CAAC,KAAK,EAAE,KAAK,CAAE;QACtB,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAA,mBAAA,KAAwB,KAAK,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,GAAG,iCAAiC,CAAC,QAAQ,CAAA,mBAAA,KAAwB,KAAK,CAAC,CAAC;IAC7F,CAAK;IACD,OAAO,CAAC,GAAG,EAAE;QACT,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAC,GAAG,GAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5D,CAAK;AACL,CAAC;AACD,SAAS,iCAAiC,CAAC,EAAE,EAAE,KAAK,EAAE;IAClD,IAAI,EAAE,CAAC;IACP,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC,UAAU,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,MAAM,KAAK,EAAE,EAAE,GAAG,EAAC,CAAC,IAAI;QAC7F,OAAO,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;IACtD,CAAK,CAAC,CAAC;AACP,CAAC;AACD,0DAAA,GACA,MAAM,mBAAmB,SAAS,WAAW,CAAC;IAC1C,WAAW,CAAC,KAAK,EAAE,KAAK,CAAE;QACtB,KAAK,CAAC,KAAK,EAAE,gBAAgB,CAAA,2BAAA,KAAgC,KAAK,CAAC,CAAC;IAC5E,CAAK;IACD,OAAO,CAAC,GAAG,EAAE;QACT,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAClF,CAAK;AACL,CAAC;AACD,8CAAA,GACA,MAAM,QAAQ,SAAS,WAAW,CAAC;IAC/B,WAAW,CAAC,KAAK,EAAE,KAAK,CAAE;QACtB,KAAK,CAAC,KAAK,EAAE,IAAI,CAAA,eAAA,KAAoB,KAAK,CAAC,CAAC;IACpD,CAAK;IACD,OAAO,CAAC,GAAG,EAAE;QACT,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,OAAO,KAAK,KAAK,IAAI,IAAI,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAClF,CAAK;AACL,CAAC;AACD,kDAAA,GACA,MAAM,WAAW,SAAS,WAAW,CAAC;IAClC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAE;QACtB,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAA,mBAAA,KAAwB,KAAK,CAAC,CAAC;IAC5D,CAAK;IACD,OAAO,CAAC,GAAG,EAAE;QACT,IAAI,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;YAAE,SAAS,EAAE,YAAY;QAAA,CAAE,CAAC,EAAE;YACxE,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,OAAO,KAAK,KAAK,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACnF,CAAK;AACL,CAAC;AACD,8DAAA,GACA,MAAM,sBAAsB,SAAS,WAAW,CAAC;IAC7C,WAAW,CAAC,KAAK,EAAE,KAAK,CAAE;QACtB,KAAK,CAAC,KAAK,EAAE,oBAAoB,CAAA,+BAAA,KAAoC,KAAK,CAAC,CAAC;IACpF,CAAK;IACD,OAAO,CAAC,GAAG,EAAE;QACT,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE;YAC7C,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,OAAO,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAC,GAAG,GAAI,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;IACnG,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,sBAAA;AACA,MAAM,UAAU,CAAC;IACb,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,IAAI,EAAE,OAAO,GAAG,EAAE,EAAE,OAAO,GAAG,EAAE,EAAE,KAAK,GAAG,IAAI,EAAE,OAAO,GAAG,IAAI,EAAE,KAAK,GAAG,IAAI,CAAE;QAC9G,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACxC,CAAK;AACL,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,SAAS,CAAC,IAAI,EAAE,eAAe,GAAG,IAAI,EAAE,OAAO,GAAG,EAAE,EAAE,OAAO,GAAG,EAAE,EAAE,KAAK,GAAG,IAAI,EAAE,OAAO,GAAG,IAAI,EAAE,KAAK,GAAG,IAAI,EAAE;IACrH,OAAO,IAAI,UAAU,CAAC,IAAI,EAAE,eAAe,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAC1F,CAAC;AACD,SAAS,cAAc,CAAC,MAAM,EAAE;IAC5B,MAAM,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IACrC,IAAI,UAAU,CAAC,mBAAmB,KAAK,IAAI,EAAE;QACzC,IAAI,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;QAC5C,IAAI,UAAU,CAAC,eAAe,KAAK,IAAI,EAAE;YACrC,GAAG,IAAI,MAAM,GAAG,UAAU,CAAC,eAAe,CAAC;QACvD,CAAS;QACD,GAAG,IAAI,KAAK,CAAC;QACb,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,GAAG,EAAC,CAAC,GAAI,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChE,GAAG,IAAI,MAAM,CAAC;QACd,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,GAAG,EAAC,CAAC,GAAI,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjE,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YACtC,GAAG,IAAI,KAAK,CAAC;YACb,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC;QACpC,CAAS;QACD,IAAI,UAAU,CAAC,OAAO,EAAE;YACpB,GAAG,IAAI,MAAM,CAAC;YACd,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC;YAClD,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAC,CAAC,GAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClF,CAAS;QACD,IAAI,UAAU,CAAC,KAAK,EAAE;YAClB,GAAG,IAAI,MAAM,CAAC;YACd,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC;YAChD,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAC,CAAC,GAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChF,CAAS;QACD,UAAU,CAAC,mBAAmB,GAAG,GAAG,CAAC;IAC7C,CAAK;IACD,OAAO,UAAU,CAAC,mBAAmB,CAAC;AAC1C,CAAC;AACD,SAAS,eAAe,CAAC,MAAM,EAAE;IAC7B,IAAI,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;IACxC,IAAI,MAAM,CAAC,eAAe,KAAK,IAAI,EAAE;QACjC,GAAG,IAAI,mBAAmB,GAAG,MAAM,CAAC,eAAe,CAAC;IAC5D,CAAK;IACD,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3B,GAAG,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,OAAO,CAC/B,GAAG,EAAC,CAAC,GAAI,eAAe,CAAC,CAAC,CAAC,CAAC,CAC5B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAK;IACD,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;QAClC,GAAG,IAAI,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC;IAC1C,CAAK;IACD,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3B,GAAG,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,OAAO,CAC/B,GAAG,EAAC,CAAC,GAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAC7B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAK;IACD,IAAI,MAAM,CAAC,OAAO,EAAE;QAChB,GAAG,IAAI,aAAa,CAAC;QACrB,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC;QAC9C,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAC,CAAC,GAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1E,CAAK;IACD,IAAI,MAAM,CAAC,KAAK,EAAE;QACd,GAAG,IAAI,WAAW,CAAC;QACnB,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC;QAC5C,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAC,CAAC,GAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxE,CAAK;IACD,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC;AACD,SAAS,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE;IAC/B,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,EAAE;QAC5B,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE;QAC9C,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QAC1C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;YACnD,OAAO,KAAK,CAAC;QACzB,CAAS;IACT,CAAK;IACD,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE;QAC9C,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QAC1C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;YAClD,OAAO,KAAK,CAAC;QACzB,CAAS;IACT,CAAK;IACD,IAAI,IAAI,CAAC,eAAe,KAAK,KAAK,CAAC,eAAe,EAAE;QAChD,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QAChC,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,EAAE;QAC3C,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,OAAO,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;AAChD,CAAC;AACD,SAAS,sBAAsB,CAAC,MAAM,EAAE;IACpC,OAAQ,WAAW,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,IAC1C,MAAM,CAAC,eAAe,KAAK,IAAI,IAC/B,MAAM,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;AACrC,CAAC;AACD,gEAAA,GACA,SAAS,4BAA4B,CAAC,MAAM,EAAE,IAAI,EAAE;IAChD,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,EAAC,CAAC,GAAI,CAAC,YAAY,WAAW,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AACzF,CAAC;AACD;;;CAGA,GACA,SAAS,oBAAoB,CAAC,MAAM,EAAE,UAAU,EAAE;IAC9C,MAAM,OAAO,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAC;IACtD,IAAI,OAAO,KAAK,SAAS,EAAE;QACvB,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,KAAK,MAAM,WAAW,IAAI,4BAA4B,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,CAAC,CAAE;QAC/E,OAAQ,WAAW,CAAC,EAAE;YAClB,KAAK,oBAAoB,CAAA,+BAAA;gBACrB,OAAO,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,IAAI,EAAE,CAAC;YACrD,KAAK,gBAAgB,CAAA,2BAAA;gBACjB,OAAO;oBAAC,WAAW,CAAC,KAAK;iBAAC,CAAC;QAE3C,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD;;;CAGA,GACA,SAAS,oBAAoB,CAAC,MAAM,EAAE,UAAU,EAAE;IAC9C,MAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;IACzB,KAAK,MAAM,OAAO,IAAI,gCAAgC,CAAC,UAAU,CAAC,CAAE;QAChE,KAAK,MAAM,WAAW,IAAI,4BAA4B,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,CAAC,CAAE;YAC/E,OAAQ,WAAW,CAAC,EAAE;gBAClB,KAAK,IAAI,CAAA,kBAAA,GAAsB;gBAC/B,KAAK,IAAI,CAAA,eAAA;oBACzB,qEAAA;oBACA,4DAAA;oBACA,oBAAA;oBACoB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,eAAe,EAAE,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;oBACnE,MAAM;gBACV,KAAK,QAAQ,CAAA,mBAAA,GAAuB;gBACpC,KAAK,IAAI,CAAA,sBAAA;oBACzB,mEAAA;oBACA,+CAAA;oBACoB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,eAAe,EAAE,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;oBACnE,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;YAEvD,CAAa;QACb,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD;;;;CAIA,GACA,SAAS,mBAAmB,CAAC,MAAM,EAAE,UAAU,EAAE;IAC7C,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,IAAI,SAAS,GAAG,IAAI,CAAC;IACzB,4EAAA;IACA,WAAA;IACI,KAAK,MAAM,OAAO,IAAI,gCAAgC,CAAC,UAAU,CAAC,CAAE;QAChE,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,KAAK,CAAC,CAAA,uBAAA,MACjC,uBAAuB,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,GAClE,wBAAwB,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAC1E,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAChC,SAAS,IAAA,CAAK,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;IAC1D,CAAK;IACD,OAAO,IAAI,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AACxC,CAAC;AACD;;;;CAIA,GACA,SAAS,mBAAmB,CAAC,MAAM,EAAE,UAAU,EAAE;IAC7C,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,IAAI,SAAS,GAAG,IAAI,CAAC;IACzB,6EAAA;IACA,SAAA;IACI,KAAK,MAAM,OAAO,IAAI,gCAAgC,CAAC,UAAU,CAAC,CAAE;QAChE,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,KAAK,CAAC,CAAA,uBAAA,MACjC,wBAAwB,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,KAAK,CAAC,GACjE,uBAAuB,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAChC,SAAS,IAAA,CAAK,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;IAC1D,CAAK;IACD,OAAO,IAAI,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AACxC,CAAC;AACD;;;CAGA,GACA,SAAS,uBAAuB,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE;IACvD,IAAI,KAAK,GAAG,SAAS,CAAC;IACtB,IAAI,SAAS,GAAG,IAAI,CAAC;IACzB,oEAAA;IACI,KAAK,MAAM,WAAW,IAAI,4BAA4B,CAAC,MAAM,EAAE,SAAS,CAAC,CAAE;QACvE,IAAI,WAAW,GAAG,SAAS,CAAC;QAC5B,IAAI,eAAe,GAAG,IAAI,CAAC;QAC3B,OAAQ,WAAW,CAAC,EAAE;YAClB,KAAK,GAAG,CAAA,sBAAA,GAA0B;YAClC,KAAK,IAAI,CAAA,+BAAA;gBACL,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACrD,MAAM;YACV,KAAK,IAAI,CAAA,kBAAA,GAAsB;YAC/B,KAAK,IAAI,CAAA,eAAA,GAAmB;YAC5B,KAAK,IAAI,CAAA,kCAAA;gBACL,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC;gBAChC,MAAM;YACV,KAAK,GAAG,CAAA,yBAAA;gBACJ,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC;gBAChC,eAAe,GAAG,KAAK,CAAC;gBACxB,MAAM;YACV,KAAK,IAAI,CAAA,sBAAA,GAA0B;YACnC,KAAK,QAAQ,CAAA,mBAAA;gBACT,WAAW,GAAG,SAAS,CAAC;gBACxB,MAAM;QAEtB,CAAS;QACD,IAAI,iBAAiB,CAAC;YAAE,KAAK;YAAE,SAAS;QAAA,CAAE,EAAE;YAAE,KAAK,EAAE,WAAW;YAAE,SAAS,EAAE,eAAe;QAAA,CAAE,CAAC,GAAG,CAAC,EAAE;YACjG,KAAK,GAAG,WAAW,CAAC;YACpB,SAAS,GAAG,eAAe,CAAC;QACxC,CAAS;IACT,CAAK;IACL,2EAAA;IACA,2CAAA;IACI,IAAI,KAAK,KAAK,IAAI,EAAE;QAChB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;YAC5C,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBAClC,MAAM,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtC,IAAI,iBAAiB,CAAC;oBAAE,KAAK;oBAAE,SAAS;gBAAA,CAAE,EAAE;oBAAE,KAAK,EAAE,WAAW;oBAAE,SAAS,EAAE,KAAK,CAAC,SAAS;gBAAA,CAAE,CAAC,GAAG,CAAC,EAAE;oBACjG,KAAK,GAAG,WAAW,CAAC;oBACpB,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;gBAChD,CAAiB;gBACD,MAAM;YACtB,CAAa;QACb,CAAS;IACT,CAAK;IACD,OAAO;QAAE,KAAK;QAAE,SAAS;IAAA,CAAE,CAAC;AAChC,CAAC;AACD;;;CAGA,GACA,SAAS,wBAAwB,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE;IACxD,IAAI,KAAK,GAAG,SAAS,CAAC;IACtB,IAAI,SAAS,GAAG,IAAI,CAAC;IACzB,oEAAA;IACI,KAAK,MAAM,WAAW,IAAI,4BAA4B,CAAC,MAAM,EAAE,SAAS,CAAC,CAAE;QACvE,IAAI,WAAW,GAAG,SAAS,CAAC;QAC5B,IAAI,eAAe,GAAG,IAAI,CAAC;QAC3B,OAAQ,WAAW,CAAC,EAAE;YAClB,KAAK,IAAI,CAAA,kCAAA,GAAsC;YAC/C,KAAK,GAAG,CAAA,yBAAA;gBACJ,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACrD,eAAe,GAAG,KAAK,CAAC;gBACxB,MAAM;YACV,KAAK,IAAI,CAAA,kBAAA,GAAsB;YAC/B,KAAK,IAAI,CAAA,eAAA,GAAmB;YAC5B,KAAK,IAAI,CAAA,+BAAA;gBACL,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC;gBAChC,MAAM;YACV,KAAK,GAAG,CAAA,sBAAA;gBACJ,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC;gBAChC,eAAe,GAAG,KAAK,CAAC;gBACxB,MAAM;YACV,KAAK,IAAI,CAAA,sBAAA,GAA0B;YACnC,KAAK,QAAQ,CAAA,mBAAA;gBACT,WAAW,GAAG,SAAS,CAAC;gBACxB,MAAM;QAEtB,CAAS;QACD,IAAI,iBAAiB,CAAC;YAAE,KAAK;YAAE,SAAS;QAAA,CAAE,EAAE;YAAE,KAAK,EAAE,WAAW;YAAE,SAAS,EAAE,eAAe;QAAA,CAAE,CAAC,GAAG,CAAC,EAAE;YACjG,KAAK,GAAG,WAAW,CAAC;YACpB,SAAS,GAAG,eAAe,CAAC;QACxC,CAAS;IACT,CAAK;IACL,2EAAA;IACA,2CAAA;IACI,IAAI,KAAK,KAAK,IAAI,EAAE;QAChB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;YAC5C,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBAClC,MAAM,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtC,IAAI,iBAAiB,CAAC;oBAAE,KAAK;oBAAE,SAAS;gBAAA,CAAE,EAAE;oBAAE,KAAK,EAAE,WAAW;oBAAE,SAAS,EAAE,KAAK,CAAC,SAAS;gBAAA,CAAE,CAAC,GAAG,CAAC,EAAE;oBACjG,KAAK,GAAG,WAAW,CAAC;oBACpB,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;gBAChD,CAAiB;gBACD,MAAM;YACtB,CAAa;QACb,CAAS;IACT,CAAK;IACD,OAAO;QAAE,KAAK;QAAE,SAAS;IAAA,CAAE,CAAC;AAChC,CAAC;AACD,uEAAA,GACA,SAAS,qBAAqB,CAAC,MAAM,EAAE;IACnC,IAAI,MAAM,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACnD,IAAI,eAAe,GAAG,KAAK,CAAC;IAC5B,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,OAAO,CAAE;QACjC,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,mBAAmB,EAAE,CAAE;YAC9D,wEAAA;YACA,YAAA;YACY,IAAI,SAAS,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE;gBAC9B,SAAS;YACzB,CAAa;YACb,2EAAA;YACA,0EAAA;YACA,oEAAA;YACA,iCAAA;YACY,IAAI,SAAS,CAAC,EAAE,KAAK,gBAAgB,CAAA,2BAAA,OACjC,SAAS,CAAC,EAAE,KAAK,oBAAoB,CAAA,+BAAA,KAAoC;gBACzE,eAAe,GAAG,IAAI,CAAC;YACvC,CAAa,MACI;gBACD,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACrD,CAAa;QACb,CAAS;IACT,CAAK;IACD,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,OAAO,CAAE;QAC1C,wEAAA;QACA,YAAA;QACQ,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE;YAC7B,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC/C,CAAS;IACT,CAAK;IACD,OAAO,MAAM,CAAC,IAAI,GAAA,CAAI,eAAe,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AACnD,CAAC;AACD,SAAS,cAAc,CAAC,MAAM,EAAE;IAC5B,OAAO,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC;AACjC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;CAMA,GACA,MAAM,SAAS,CAAC;IAChB;;;KAGA,GACI,WAAW,CAAC,IAAI,EAAE,eAAe,GAAG,IAAI,EAAE,eAAe,GAAG,EAAE,EAAE,OAAO,GAAG,EAAE,EAAE,KAAK,GAAG,IAAI,EAAE,SAAS,GAAG,IAAG,mBAAA,GAAA,EAAwB,OAAO,GAAG,IAAI,EAAE,KAAK,GAAG,IAAI,CAAE;QAC7J,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QACpC,uDAAA;QACQ,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;QACnB,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;IACzB,CAAK;AACL,CAAC;AACD,4DAAA,GACA,SAAS,QAAQ,CAAC,IAAI,EAAE,eAAe,EAAE,eAAe,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE;IACjG,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE,eAAe,EAAE,eAAe,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAC5G,CAAC;AACD,yEAAA,GACA,SAAS,eAAe,CAAC,IAAI,EAAE;IAC3B,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC;AACD;;;;;CAKA,GACA,SAAS,uBAAuB,CAAC,KAAK,EAAE,IAAI,EAAE;IAC1C,OAAO,IAAI,SAAS,CAAC,IAAI,EAC7B,kBAAA,GAAyB,IAAI,EAAE,KAAK,CAAC,eAAe,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;AAC/I,CAAC;AACD;;;CAGA,GACA,SAAS,wBAAwB,CAAC,KAAK,EAAE;IACrC,OAAQ,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,IAC9B,KAAK,CAAC,KAAK,KAAK,IAAI,IACpB,KAAK,CAAC,OAAO,IAAI,IAAI,IACrB,KAAK,CAAC,KAAK,IAAI,IAAI,IAC3B,CAAS,KAAK,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,IAC9B,KAAK,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,IAC/B,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,AAAC,CAAC,EAAE;AAC/D,CAAC;AACD,SAAS,oBAAoB,CAAC,KAAK,EAAE;IACjC,OAAO,KAAK,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,GACjC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,GAC9B,IAAI,CAAC;AACf,CAAC;AACD,SAAS,wBAAwB,CAAC,KAAK,EAAE;IACrC,KAAK,MAAM,MAAM,IAAI,KAAK,CAAC,OAAO,CAAE;QAChC,MAAM,MAAM,GAAG,MAAM,CAAC,uBAAuB,EAAE,CAAC;QAChD,IAAI,MAAM,KAAK,IAAI,EAAE;YACjB,OAAO,MAAM,CAAC;QAC1B,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD;;;CAGA,GACA,SAAS,0BAA0B,CAAC,YAAY,EAAE;IAC9C,OAAO,IAAI,SAAS,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,YAAY,CAAC,CAAC;AACjE,CAAC;AACD;;;CAGA,GACA,SAAS,iBAAiB,CAAC,KAAK,EAAE;IAC9B,OAAQ,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,IACzC,KAAK,CAAC,eAAe,KAAK,IAAI,IAC9B,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;AACpC,CAAC;AACD;;;CAGA,GACA,SAAS,sBAAsB,CAAC,KAAK,EAAE;IACnC,OAAO,KAAK,CAAC,eAAe,KAAK,IAAI,CAAC;AAC1C,CAAC;AACD;;;;CAIA,GACA,SAAS,YAAY,CAAC,KAAK,EAAE;IACzB,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IACnC,IAAI,SAAS,CAAC,eAAe,KAAK,IAAI,EAAE;QACpC,SAAS,CAAC,eAAe,GAAG,EAAE,CAAC;QAC/B,MAAM,eAAe,GAAG,wBAAwB,CAAC,SAAS,CAAC,CAAC;QAC5D,MAAM,iBAAiB,GAAG,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAC1D,IAAI,eAAe,KAAK,IAAI,IAAI,iBAAiB,KAAK,IAAI,EAAE;YACpE,gEAAA;YACA,sDAAA;YACA,wEAAA;YACY,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,EAAE;gBAC/B,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;YAC7E,CAAa;YACD,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAA,uBAAA,GAA2B,CAAC,CAAC;QACjH,CAAS,MACI;YACD,IAAI,gBAAgB,GAAG,KAAK,CAAC;YAC7B,KAAK,MAAM,OAAO,IAAI,SAAS,CAAC,eAAe,CAAE;gBAC7C,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACxC,IAAI,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE;oBAC5B,gBAAgB,GAAG,IAAI,CAAC;gBAC5C,CAAiB;YACjB,CAAa;YACD,IAAI,CAAC,gBAAgB,EAAE;gBACnC,iEAAA;gBACA,oBAAA;gBACgB,MAAM,aAAa,GAAG,SAAS,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,GACpD,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAC5D,GAAG,GACN,KAAK,CAAA,uBAAA,GAA2B;gBACtC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,aAAa,CAAC,CAAC,CAAC;YACnG,CAAa;QACb,CAAS;IACT,CAAK;IACD,OAAO,SAAS,CAAC,eAAe,CAAC;AACrC,CAAC;AACD;;CAEA,GACA,SAAS,aAAa,CAAC,KAAK,EAAE;IAC1B,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IACnC,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE;QAC3B,IAAI,SAAS,CAAC,SAAS,KAAK,GAAG,CAAA,mBAAA,KAAwB;YACnD,SAAS,CAAC,cAAc,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,eAAe,EAAE,YAAY,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;QAC7L,CAAS,MACI;YACb,6DAAA;YACY,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,KAAK,MAAM,OAAO,IAAI,YAAY,CAAC,SAAS,CAAC,CAAE;gBAC3C,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,KAAK,MAAM,CAAA,wBAAA,MAC5B,KAAK,CAAA,uBAAA,MACL,MAAM,CAAA,wBAAA,GAA4B;gBACxC,QAAQ,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;YAC/D,CAAa;YACb,uEAAA;YACY,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,GACzB,IAAI,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,GAC9D,IAAI,CAAC;YACX,MAAM,KAAK,GAAG,SAAS,CAAC,OAAO,GACzB,IAAI,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,GAClE,IAAI,CAAC;YACvB,yCAAA;YACY,SAAS,CAAC,cAAc,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,eAAe,EAAE,QAAQ,EAAE,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAC1J,CAAS;IACT,CAAK;IACD,OAAO,SAAS,CAAC,cAAc,CAAC;AACpC,CAAC;AACD,SAAS,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE;IACzC,MAAM,CAAC,uBAAuB,EAAE,CAAC;IACjC,wBAAwB,CAAC,KAAK,CAAC,CAAC;IAChC,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;QAAC,MAAM;KAAC,CAAC,CAAC;IAClD,OAAO,IAAI,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,eAAe,CAAC,KAAK,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;AACjK,CAAC;AACD,SAAS,qBAAqB,CAAC,KAAK,EAAE,OAAO,EAAE;IAC/C,wEAAA;IACI,MAAM,UAAU,GAAG,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC;QAAC,OAAO;KAAC,CAAC,CAAC;IAC3D,OAAO,IAAI,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,eAAe,EAAE,UAAU,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;AACzJ,CAAC;AACD,SAAS,cAAc,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE;IAC7C,OAAO,IAAI,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,eAAe,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;AAChK,CAAC;AACD,SAAS,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE;IACpC,OAAO,IAAI,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,eAAe,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;AACpK,CAAC;AACD,SAAS,cAAc,CAAC,KAAK,EAAE,KAAK,EAAE;IAClC,OAAO,IAAI,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,eAAe,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AACtK,CAAC;AACD,SAAS,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE;IAC9B,OAAQ,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,IAC3D,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,EAAE;AAC5C,CAAC;AACD,6EAAA;AACA,yEAAA;AACA,sCAAA;AACA,SAAS,aAAa,CAAC,KAAK,EAAE;IAC1B,OAAO,CAAC,EAAE,cAAc,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;AAC3E,CAAC;AACD,SAAS,cAAc,CAAC,KAAK,EAAE;IAC3B,OAAO,CAAC,aAAa,EAAE,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AAClG,CAAC;AACD,8DAAA,GACA,SAAS,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE;IAC9B,OAAQ,GAAG,CAAC,eAAe,EAAE,IACzB,kCAAkC,CAAC,KAAK,EAAE,GAAG,CAAC,IAC9C,mBAAmB,CAAC,KAAK,EAAE,GAAG,CAAC,IAC/B,mBAAmB,CAAC,KAAK,EAAE,GAAG,CAAC,IAC/B,kBAAkB,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE;AACxC,CAAC;AACD,SAAS,kCAAkC,CAAC,KAAK,EAAE,GAAG,EAAE;IACpD,MAAM,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;IAC7B,IAAI,KAAK,CAAC,eAAe,KAAK,IAAI,EAAE;QACxC,6EAAA;QACA,+CAAA;QACQ,OAAQ,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,CAAC,IAClD,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;IAC5C,CAAK,MACI,IAAI,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QACpD,mCAAA;QACQ,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAK,MACI;QACT,sCAAA;QACQ,OAAO,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IACvD,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,mBAAmB,CAAC,KAAK,EAAE,GAAG,EAAE;IACzC,6FAAA;IACA,gGAAA;IACA,gGAAA;IACA,8EAAA;IACA,+FAAA;IACA,8BAAA;IACI,KAAK,MAAM,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC,CAAE;QAC/C,8BAAA;QACQ,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE;YACvE,OAAO,KAAK,CAAC;QACzB,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD,SAAS,mBAAmB,CAAC,KAAK,EAAE,GAAG,EAAE;IACrC,KAAK,MAAM,MAAM,IAAI,KAAK,CAAC,OAAO,CAAE;QAChC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACtB,OAAO,KAAK,CAAC;QACzB,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD,6DAAA,GACA,SAAS,kBAAkB,CAAC,KAAK,EAAE,GAAG,EAAE;IACpC,IAAI,KAAK,CAAC,OAAO,IACb,CAAC,wBAAwB,CAAC,KAAK,CAAC,OAAO,EAAE,YAAY,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,EAAE;QACpE,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAI,KAAK,CAAC,KAAK,IACX,CAAC,uBAAuB,CAAC,KAAK,CAAC,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,EAAE;QACjE,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD;;;;;CAKA,GACA,SAAS,oBAAoB,CAAC,KAAK,EAAE;IACjC,OAAQ,KAAK,CAAC,eAAe,IACjC,CAAS,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,GACtB,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,GACxB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;AACtD,CAAC;AACD;;;CAGA,GACA,SAAS,kBAAkB,CAAC,KAAK,EAAE;IAC/B,OAAO,CAAC,EAAE,EAAE,EAAE,KAAK;QACf,IAAI,kBAAkB,GAAG,KAAK,CAAC;QAC/B,KAAK,MAAM,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC,CAAE;YACvC,MAAM,IAAI,GAAG,WAAW,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAC1C,IAAI,IAAI,KAAK,CAAC,EAAE;gBACZ,OAAO,IAAI,CAAC;YAC5B,CAAa;YACD,kBAAkB,GAAG,kBAAkB,IAAI,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;QAClF,CAAS;QACD,OAAO,CAAC,CAAC;IACjB,CAAK,CAAC;AACN,CAAC;AACD,SAAS,WAAW,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE;IAClC,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,GACvC,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GACtC,uBAAuB,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACrD,OAAQ,OAAO,CAAC,GAAG;QACf,KAAK,KAAK,CAAA,uBAAA;YACN,OAAO,UAAU,CAAC;QACtB,KAAK,MAAM,CAAA,wBAAA;YACP,OAAO,CAAC,CAAC,GAAG,UAAU,CAAC;QAC3B;YACI,OAAO,IAAI,EAAE,CAAC;IAC1B,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;CAKA,GACA,MAAM,SAAS,CAAC;IACZ,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAE;QAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACjC;;;;;SAKA,GACQ,IAAI,CAAC,KAAK,GAAG,CAAA,CAAE,CAAC;QACxB,4CAAA,GACQ,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;IAC3B,CAAK;IACL,iEAAA,GACI,GAAG,CAAC,GAAG,EAAE;QACL,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC/B,IAAI,OAAO,KAAK,SAAS,EAAE;YACvB,OAAO,SAAS,CAAC;QAC7B,CAAS;QACD,KAAK,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,OAAO,CAAE;YACrC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE;gBAC9B,OAAO,KAAK,CAAC;YAC7B,CAAa;QACb,CAAS;QACD,OAAO,SAAS,CAAC;IACzB,CAAK;IACD,GAAG,CAAC,GAAG,EAAE;QACL,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC;IAC3C,CAAK;IACL,uCAAA,GACI,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE;QACZ,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC/B,IAAI,OAAO,KAAK,SAAS,EAAE;YACvB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG;gBAAC;oBAAC,GAAG;oBAAE,KAAK;iBAAC;aAAC,CAAC;YAChC,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,OAAO;QACnB,CAAS;QACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;YACrC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;gBACnD,wEAAA;gBACgB,OAAO,CAAC,CAAC,CAAC,GAAG;oBAAC,GAAG;oBAAE,KAAK;iBAAC,CAAC;gBAC1B,OAAO;YACvB,CAAa;QACb,CAAS;QACD,OAAO,CAAC,IAAI,CAAC;YAAC,GAAG;YAAE,KAAK;SAAC,CAAC,CAAC;QAC3B,IAAI,CAAC,SAAS,EAAE,CAAC;IACzB,CAAK;IACL;;KAEA,GACI,MAAM,CAAC,GAAG,EAAE;QACR,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC/B,IAAI,OAAO,KAAK,SAAS,EAAE;YACvB,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;YACrC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;gBACnC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;oBACtB,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBAC1C,CAAiB,MACI;oBACD,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzC,CAAiB;gBACD,IAAI,CAAC,SAAS,EAAE,CAAC;gBACjB,OAAO,IAAI,CAAC;YAC5B,CAAa;QACb,CAAS;QACD,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,OAAO,CAAC,EAAE,EAAE;QACR,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,OAAO,KAAK;YAChC,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,OAAO,CAAE;gBAC1B,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACzB,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,OAAO,GAAG;QACN,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnC,CAAK;IACD,IAAI,GAAG;QACH,OAAO,IAAI,CAAC,SAAS,CAAC;IAC9B,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,0BAA0B,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACzE,SAAS,kBAAkB,GAAG;IAC1B,OAAO,0BAA0B,CAAC;AACtC,CAAC;AACD,MAAM,kBAAkB,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACjE,SAAS,WAAW,CAAC,GAAG,IAAI,EAAE;IAC1B,IAAI,GAAG,GAAG,kBAAkB,CAAC;IAC7B,KAAK,MAAM,GAAG,IAAI,IAAI,CAAE;QACpB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACvC,CAAK;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AACD,SAAS,uBAAuB,GAAG;IAC/B,OAAO,iBAAiB,EAAE,CAAC;AAC/B,CAAC;AACD,SAAS,wCAAwC,CAAC,UAAU,EAAE;IAC1D,IAAI,SAAS,GAAG,kBAAkB,CAAC;IACnC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,GAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACrF,OAAO,SAAS,CAAC;AACrB,CAAC;AACD,SAAS,aAAa,GAAG;IACrB,OAAO,iBAAiB,EAAE,CAAC;AAC/B,CAAC;AACD,SAAS,cAAc,GAAG;IACtB,OAAO,iBAAiB,EAAE,CAAC;AAC/B,CAAC;AACD,SAAS,iBAAiB,GAAG;IACzB,OAAO,IAAI,SAAS,EAAC,GAAG,GAAI,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,GAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC;AACD,MAAM,0BAA0B,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACzE,SAAS,kBAAkB,GAAG;IAC1B,OAAO,0BAA0B,CAAC;AACtC,CAAC;AACD,MAAM,sBAAsB,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACrE,SAAS,cAAc,CAAC,GAAG,IAAI,EAAE;IAC7B,IAAI,GAAG,GAAG,sBAAsB,CAAC;IACjC,KAAK,MAAM,GAAG,IAAI,IAAI,CAAE;QACpB,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAK;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AACD,MAAM,mBAAmB,GAAG,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;AAC/D,SAAS,WAAW,GAAG;IACnB,OAAO,mBAAmB,CAAC;AAC/B,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,SAAS,QAAQ,CAAC,UAAU,EAAE,KAAK,EAAE;IACjC,IAAI,UAAU,CAAC,aAAa,EAAE;QAC1B,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;YACd,OAAO;gBAAE,WAAW,EAAE,KAAK;YAAA,CAAE,CAAC;QAC1C,CAAS,MACI,IAAI,KAAK,KAAK,QAAQ,EAAE;YACzB,OAAO;gBAAE,WAAW,EAAE,UAAU;YAAA,CAAE,CAAC;QAC/C,CAAS,MACI,IAAI,KAAK,KAAK,CAAC,QAAQ,EAAE;YAC1B,OAAO;gBAAE,WAAW,EAAE,WAAW;YAAA,CAAE,CAAC;QAChD,CAAS;IACT,CAAK;IACD,OAAO;QAAE,WAAW,EAAE,cAAc,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK;IAAA,CAAE,CAAC;AACjE,CAAC;AACD;;CAEA,GACA,SAAS,SAAS,CAAC,KAAK,EAAE;IACtB,OAAO;QAAE,YAAY,EAAE,EAAE,GAAG,KAAK;IAAA,CAAE,CAAC;AACxC,CAAC;AACD;;;;CAIA,GACA,SAAS,QAAQ,CAAC,UAAU,EAAE,KAAK,EAAE;IACjC,OAAO,aAAa,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;AACjF,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,uDAAA,GACA,MAAM,kBAAkB,CAAC;IACrB,WAAW,EAAG;QAClB,wEAAA;QACA,0DAAA;QACQ,IAAI,CAAC,CAAC,GAAG,SAAS,CAAC;IAC3B,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,kCAAkC,CAAC,SAAS,EAAE,aAAa,EAAE,cAAc,EAAE;IAClF,IAAI,SAAS,YAAY,wBAAwB,EAAE;QAC/C,OAAO,iBAAiB,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;IAChE,CAAK,MACI,IAAI,SAAS,YAAY,4BAA4B,EAAE;QACxD,OAAO,iCAAiC,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAC3E,CAAK,MACI,IAAI,SAAS,YAAY,6BAA6B,EAAE;QACzD,OAAO,kCAAkC,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAC5E,CAAK,MACI;QACD,OAAO,kDAAkD,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAC5F,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,uCAAuC,CAAC,SAAS,EAAE,aAAa,EAAE,eAAe,EAAE;IAC5F,2EAAA;IACA,+DAAA;IACA,gBAAA;IACI,IAAI,SAAS,YAAY,4BAA4B,EAAE;QACnD,OAAO,iCAAiC,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAC3E,CAAK,MACI,IAAI,SAAS,YAAY,6BAA6B,EAAE;QACzD,OAAO,kCAAkC,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAC5E,CAAK;IACD,OAAO,eAAe,CAAC;AAC3B,CAAC;AACD;;;;;;;;;;;;;;CAcA,GACA,SAAS,kCAAkC,CAAC,SAAS,EAAE,aAAa,EAAE;IAClE,IAAI,SAAS,YAAY,kCAAkC,EAAE;QACzD,OAAO,QAAQ,CAAC,aAAa,CAAC,GAAG,aAAa,GAAG;YAAE,YAAY,EAAE,CAAC;QAAA,CAAE,CAAC;IAC7E,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD,SAAS,wBAAwB,CAAC,IAAI,EAAE,KAAK,EAAE;IAC3C,IAAI,IAAI,YAAY,4BAA4B,IAC5C,KAAK,YAAY,4BAA4B,EAAE;QAC/C,OAAO,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IACvE,CAAK,MACI,IAAI,IAAI,YAAY,6BAA6B,IAClD,KAAK,YAAY,6BAA6B,EAAE;QAChD,OAAO,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IACvE,CAAK,MACI,IAAI,IAAI,YAAY,kCAAkC,IACvD,KAAK,YAAY,kCAAkC,EAAE;QACrD,OAAO,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IACxD,CAAK;IACD,OAAQ,IAAI,YAAY,wBAAwB,IAC5C,KAAK,YAAY,wBAAwB,EAAE;AACnD,CAAC;AACD,0DAAA,GACA,MAAM,wBAAwB,SAAS,kBAAkB,CAAC;AAC1D,CAAC;AACD,qDAAA,GACA,MAAM,4BAA4B,SAAS,kBAAkB,CAAC;IAC1D,WAAW,CAAC,QAAQ,CAAE;QAClB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACjC,CAAK;AACL,CAAC;AACD,SAAS,iCAAiC,CAAC,SAAS,EAAE,aAAa,EAAE;IACjE,MAAM,MAAM,GAAG,uBAAuB,CAAC,aAAa,CAAC,CAAC;IACtD,KAAK,MAAM,OAAO,IAAI,SAAS,CAAC,QAAQ,CAAE;QACtC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAC,OAAO,GAAI,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,EAAE;YACxD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjC,CAAS;IACT,CAAK;IACD,OAAO;QAAE,UAAU,EAAE;YAAE,MAAM;QAAA,CAAE;IAAA,CAAE,CAAC;AACtC,CAAC;AACD,sDAAA,GACA,MAAM,6BAA6B,SAAS,kBAAkB,CAAC;IAC3D,WAAW,CAAC,QAAQ,CAAE;QAClB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACjC,CAAK;AACL,CAAC;AACD,SAAS,kCAAkC,CAAC,SAAS,EAAE,aAAa,EAAE;IAClE,IAAI,MAAM,GAAG,uBAAuB,CAAC,aAAa,CAAC,CAAC;IACpD,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAC,QAAQ,CAAE;QACvC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAC,OAAO,GAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC3E,CAAK;IACD,OAAO;QAAE,UAAU,EAAE;YAAE,MAAM;QAAA,CAAE;IAAA,CAAE,CAAC;AACtC,CAAC;AACD;;;;;CAKA,GACA,MAAM,kCAAkC,SAAS,kBAAkB,CAAC;IAChE,WAAW,CAAC,UAAU,EAAE,OAAO,CAAE;QAC7B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC/B,CAAK;AACL,CAAC;AACD,SAAS,kDAAkD,CAAC,SAAS,EAAE,aAAa,EAAE;IACtF,2EAAA;IACA,oEAAA;IACA,kCAAA;IACI,MAAM,SAAS,GAAG,kCAAkC,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAC/E,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC9D,IAAI,SAAS,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;QACtD,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAK,MACI;QACD,OAAO,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;IACnD,CAAK;AACL,CAAC;AACD,SAAS,QAAQ,CAAC,KAAK,EAAE;IACrB,OAAO,eAAe,CAAC,KAAK,CAAC,YAAY,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;AACpE,CAAC;AACD,SAAS,uBAAuB,CAAC,KAAK,EAAE;IACpC,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,GAC1C,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,GAC/B,EAAE,CAAC;AACb,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,gEAAA,GACA,MAAM,cAAc,CAAC;IACjB,WAAW,CAAC,KAAK,EAAE,SAAS,CAAE;QAC1B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,CAAK;AACL,CAAC;AACD,SAAS,oBAAoB,CAAC,IAAI,EAAE,KAAK,EAAE;IACvC,OAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IACnC,wBAAwB,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,EAAE;AACnE,CAAC;AACD,SAAS,uBAAuB,CAAC,IAAI,EAAE,KAAK,EAAE;IAC1C,IAAI,IAAI,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS,EAAE;QAC3C,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,IAAI,IAAI,IAAI,KAAK,EAAE;QACf,OAAO,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,GAAK,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AACD,mEAAA,GACA,MAAM,cAAc,CAAC;IACjB,WAAW,CACf;;;;;;;;;KASA,GACI,OAAO,EACX;;;;;;KAMA,GACI,gBAAgB,CAAE;QACd,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IACjD,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,MAAM,YAAY,CAAC;IACf,WAAW,CAAC,UAAU,EAAE,MAAM,CAAE;QAC5B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,CAAK;IACL,sCAAA,GACI,OAAO,IAAI,GAAG;QACV,OAAO,IAAI,YAAY,EAAE,CAAC;IAClC,CAAK;IACL,oDAAA,GACI,OAAO,MAAM,CAAC,MAAM,EAAE;QAClB,OAAO,IAAI,YAAY,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IACnD,CAAK;IACL,wEAAA,GACI,OAAO,UAAU,CAAC,OAAO,EAAE;QACvB,OAAO,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC;IACzC,CAAK;IACL,gDAAA,GACI,IAAI,MAAM,GAAG;QACT,OAAO,IAAI,CAAC,UAAU,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC;IAC1E,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAQ,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,IAC5C,CAAa,IAAI,CAAC,UAAU,GACV,CAAC,CAAC,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,GAC/D,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;IACtC,CAAK;AACL,CAAC;AACD,uEAAA,GACA,SAAS,8BAA8B,CAAC,YAAY,EAAE,QAAQ,EAAE;IAC5D,IAAI,YAAY,CAAC,UAAU,KAAK,SAAS,EAAE;QACvC,OAAQ,QAAQ,CAAC,eAAe,EAAE,IAC9B,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;IAC/D,CAAK,MACI,IAAI,YAAY,CAAC,MAAM,KAAK,SAAS,EAAE;QACxC,OAAO,YAAY,CAAC,MAAM,KAAK,QAAQ,CAAC,eAAe,EAAE,CAAC;IAClE,CAAK,MACI;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;AACL,CAAC;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2CA,GACA,MAAM,QAAQ,CAAC;AACf,CAAC;AACD;;;;CAIA,GACA,SAAS,wBAAwB,CAAC,GAAG,EAAE,IAAI,EAAE;IACzC,IAAI,CAAC,GAAG,CAAC,iBAAiB,IAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAE;QAC9D,OAAO,IAAI,CAAC;IACpB,CAAK;IACL,yEAAA;IACI,IAAI,IAAI,KAAK,IAAI,EAAE;QACf,IAAI,GAAG,CAAC,YAAY,EAAE,EAAE;YACpB,OAAO,IAAI,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;QACpE,CAAS,MACI;YACD,OAAO,IAAI,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3E,CAAS;IACT,CAAK,MACI;QACD,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC;QAC1B,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;QACvC,IAAI,OAAO,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QACpD,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,CAAE;YAC1B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACpB,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACjD,qEAAA;gBACA,qDAAA;gBACA,uEAAA;gBACA,oEAAA;gBACA,8DAAA;gBACA,mEAAA;gBACA,sEAAA;gBACA,oEAAA;gBACA,6BAAA;gBACgB,IAAI,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;oBACnC,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;oBACtB,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACjD,CAAiB;gBACD,IAAI,KAAK,KAAK,IAAI,EAAE;oBAChB,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC5C,CAAiB,MACI;oBACD,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAChD,CAAiB;gBACD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC5C,CAAa;QACb,CAAS;QACD,OAAO,IAAI,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,EAAE,IAAI,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;IAC7G,CAAK;AACL,CAAC;AACD;;;;;;;;;;;CAWA,GACA,SAAS,6BAA6B,CAAC,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE;IACvE,IAAI,QAAQ,YAAY,WAAW,EAAE;QACjC,gCAAgC,CAAC,QAAQ,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;IAC7E,CAAK,MACI,IAAI,QAAQ,YAAY,aAAa,EAAE;QACxC,kCAAkC,CAAC,QAAQ,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;IAC/E,CAAK,MACI;QACD,mCAAmC,CAAC,QAAQ,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;IAChF,CAAK;AACL,CAAC;AACD;;;;;;;;;;;;;CAaA,GACA,SAAS,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAE;IAChF,IAAI,QAAQ,YAAY,WAAW,EAAE;QACjC,OAAO,2BAA2B,CAAC,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;IAC7F,CAAK,MACI,IAAI,QAAQ,YAAY,aAAa,EAAE;QACxC,OAAO,6BAA6B,CAAC,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;IAC/F,CAAK,MACI;QACD,OAAO,8BAA8B,CAAC,QAAQ,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;IAChF,CAAK;AACL,CAAC;AACD;;;;;;;;;;;;;;;CAeA,GACA,SAAS,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,EAAE;IAClD,IAAI,UAAU,GAAG,IAAI,CAAC;IACtB,KAAK,MAAM,cAAc,IAAI,QAAQ,CAAC,eAAe,CAAE;QACnD,MAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAChE,MAAM,YAAY,GAAG,kCAAkC,CAAC,cAAc,CAAC,SAAS,EAAE,aAAa,IAAI,IAAI,CAAC,CAAC;QACzG,IAAI,YAAY,IAAI,IAAI,EAAE;YACtB,IAAI,UAAU,KAAK,IAAI,EAAE;gBACrB,UAAU,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;YACjD,CAAa;YACD,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QAC/D,CAAS;IACT,CAAK;IACD,OAAO,UAAU,GAAG,UAAU,GAAG,IAAI,CAAC;AAC1C,CAAC;AACD,SAAS,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE;IACjC,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;QAC1B,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;QAC9B,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE;QAChD,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,eAAe,CAAC,EAAE;QACvE,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,CAAA,oBAAA,KAAyB;QACxC,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAK;IACD,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,CAAA,sBAAA,KAA2B;QAC1C,OAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IACjC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;IACrD,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD;;;CAGA,GACA,MAAM,WAAW,SAAS,QAAQ,CAAC;IAC/B,WAAW,CAAC,GAAG,EAAE,KAAK,EAAE,YAAY,EAAE,eAAe,GAAG,EAAE,CAAE;QACxD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAA,oBAAA,GAAwB;IAC7C,CAAK;IACD,YAAY,GAAG;QACX,OAAO,IAAI,CAAC;IACpB,CAAK;AACL,CAAC;AACD,SAAS,gCAAgC,CAAC,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE;IAC9E,wEAAA;IACA,2EAAA;IACA,kBAAA;IACI,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACvC,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,QAAQ,CAAC,eAAe,EAAE,QAAQ,EAAE,cAAc,CAAC,gBAAgB,CAAC,CAAC;IACrH,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IACjC,QAAQ,CACH,sBAAsB,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CACvD,wBAAwB,EAAE,CAAC;AACpC,CAAC;AACD,SAAS,2BAA2B,CAAC,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAE;IACnF,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE;QAC1E,sEAAA;QACA,4BAAA;QACQ,OAAO,YAAY,CAAC;IAC5B,CAAK;IACD,MAAM,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACvC,MAAM,gBAAgB,GAAG,qBAAqB,CAAC,QAAQ,CAAC,eAAe,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;IACnG,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IACjC,QAAQ,CACH,sBAAsB,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CACjD,oBAAoB,EAAE,CAAC;IAC5B,OAAO,IAAI,CAAC,CAAA,qCAAA;AAChB,CAAC;AACD;;;;;;;;;;;;CAYA,GACA,MAAM,aAAa,SAAS,QAAQ,CAAC;IACjC,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,YAAY,EAAE,eAAe,GAAG,EAAE,CAAE;QAClE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAA,sBAAA,GAA0B;IAC/C,CAAK;IACD,YAAY,GAAG;QACX,OAAO,IAAI,CAAC,SAAS,CAAC;IAC9B,CAAK;AACL,CAAC;AACD,SAAS,kCAAkC,CAAC,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE;IAC5E,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE;QAC1E,qEAAA;QACA,0EAAA;QACA,wEAAA;QACA,oBAAA;QACQ,QAAQ,CAAC,wBAAwB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC1D,OAAO;IACf,CAAK;IACD,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,QAAQ,CAAC,eAAe,EAAE,QAAQ,EAAE,cAAc,CAAC,gBAAgB,CAAC,CAAC;IACrH,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC;IAC9B,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IACnC,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IACjC,QAAQ,CACH,sBAAsB,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CACvD,wBAAwB,EAAE,CAAC;AACpC,CAAC;AACD,SAAS,6BAA6B,CAAC,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAE;IACrF,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE;QAClE,OAAO,YAAY,CAAC;IAC5B,CAAK;IACD,MAAM,gBAAgB,GAAG,qBAAqB,CAAC,QAAQ,CAAC,eAAe,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;IACnG,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC;IAC9B,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;IACnC,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IACjC,QAAQ,CACH,sBAAsB,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CACjD,oBAAoB,EAAE,CAAC;IAC5B,IAAI,YAAY,KAAK,IAAI,EAAE;QACvB,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,OAAO,YAAY,CACd,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CACpC,SAAS,CAAC,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAC,SAAS,GAAI,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/E,CAAC;AACD;;CAEA,GACA,SAAS,QAAQ,CAAC,QAAQ,EAAE;IACxB,MAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;IACzB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,EAAC,SAAS,IAAI;QAC3C,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE;YACtB,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAChD,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC5C,CAAS;IACT,CAAK,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAClB,CAAC;AACD;;;;;;;;;;CAUA,GACA,SAAS,sBAAsB,CAAC,eAAe,EAAE,eAAe,EAAE,sBAAsB,EAAE;IACtF,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;IACnC,UAAU,CAAC,eAAe,CAAC,MAAM,KAAK,sBAAsB,CAAC,MAAM,CAAC,CAAC;IACrE,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QACpD,MAAM,cAAc,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC;QAC3C,MAAM,aAAa,GAAG,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACvE,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,EAAE,uCAAuC,CAAC,SAAS,EAAE,aAAa,EAAE,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjJ,CAAK;IACD,OAAO,gBAAgB,CAAC;AAC5B,CAAC;AACD;;;;;;;;;;CAUA,GACA,SAAS,qBAAqB,CAAC,eAAe,EAAE,cAAc,EAAE,eAAe,EAAE;IAC7E,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;IACnC,KAAK,MAAM,cAAc,IAAI,eAAe,CAAE;QAC1C,MAAM,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC;QAC3C,MAAM,aAAa,GAAG,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACvE,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,EAAE,kCAAkC,CAAC,SAAS,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC,CAAC;IACjI,CAAK;IACD,OAAO,gBAAgB,CAAC;AAC5B,CAAC;AACD,2DAAA,GACA,MAAM,cAAc,SAAS,QAAQ,CAAC;IAClC,WAAW,CAAC,GAAG,EAAE,YAAY,CAAE;QAC3B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAA,uBAAA,GAA2B;QACxC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAClC,CAAK;IACD,YAAY,GAAG;QACX,OAAO,IAAI,CAAC;IACpB,CAAK;AACL,CAAC;AACD,SAAS,mCAAmC,CAAC,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE;IACjF,oEAAA;IACA,yEAAA;IACA,aAAA;IACI,QAAQ,CACH,mBAAmB,CAAC,cAAc,CAAC,OAAO,CAAC,CAC3C,wBAAwB,EAAE,CAAC;AACpC,CAAC;AACD,SAAS,8BAA8B,CAAC,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE;IACtE,IAAI,8BAA8B,CAAC,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE;QACjE,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,oBAAoB,EAAE,CAAC;QACtE,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,OAAO,YAAY,CAAC;AACxB,CAAC;AACD;;;;;;CAMA,GACA,MAAM,cAAc,SAAS,QAAQ,CAAC;IAClC,WAAW,CAAC,GAAG,EAAE,YAAY,CAAE;QAC3B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAA,uBAAA,GAA2B;QACxC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAClC,CAAK;IACD,YAAY,GAAG;QACX,OAAO,IAAI,CAAC;IACpB,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,MAAM,aAAa,CAAC;IACpB;;;;;;;;;;KAUA,GACI,WAAW,CAAC,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,SAAS,CAAE;QAC3D,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,CAAK;IACL;;;;;;;KAOA,GACI,qBAAqB,CAAC,QAAQ,EAAE,WAAW,EAAE;QACzC,MAAM,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACpD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;YAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACpC,MAAM,cAAc,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;gBAC1C,6BAA6B,CAAC,QAAQ,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;YAClF,CAAa;QACb,CAAS;IACT,CAAK;IACL;;;;;;;KAOA,GACI,gBAAgB,CAAC,QAAQ,EAAE,aAAa,EAAE;QAC9C,sEAAA;QACA,gDAAA;QACQ,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAE;YACvC,IAAI,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACpC,aAAa,GAAG,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YACjH,CAAa;QACb,CAAS;QACT,6CAAA;QACQ,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAE;YACnC,IAAI,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACpC,aAAa,GAAG,wBAAwB,CAAC,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YACjH,CAAa;QACb,CAAS;QACD,OAAO,aAAa,CAAC;IAC7B,CAAK;IACL;;;;KAIA,GACI,uBAAuB,CAAC,WAAW,EAAE,6BAA6B,EAAE;QACxE,4EAAA;QACA,2EAAA;QACA,WAAA;QACQ,MAAM,QAAQ,GAAG,cAAc,EAAE,CAAC;QAClC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAC,CAAC,IAAI;YACxB,MAAM,iBAAiB,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAC7D,uEAAA;YACA,kCAAA;YACY,MAAM,eAAe,GAAG,iBAAiB,CAAC,iBAAiB,CAAC;YAC5D,IAAI,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,iBAAiB,CAAC,aAAa,CAAC,CAAC;YACxG,0EAAA;YACA,uEAAA;YACA,iCAAA;YACY,aAAa,GAAG,6BAA6B,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAClD,IAAI,GACJ,aAAa,CAAC;YACpB,MAAM,OAAO,GAAG,wBAAwB,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;YACzE,IAAI,OAAO,KAAK,IAAI,EAAE;gBAClB,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC7C,CAAa;YACD,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,EAAE;gBACpC,eAAe,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC;YAC3E,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IACxB,CAAK;IACD,IAAI,GAAG;QACH,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,GAAK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;IACrF,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAQ,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,IAClC,WAAW,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,GAAK,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAC5E,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,GAAK,cAAc,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAClG,CAAK;AACL,CAAC;AACD,4DAAA,GACA,MAAM,mBAAmB,CAAC;IACtB,WAAW,CAAC,KAAK,EAAE,aAAa,EAAE,eAAe,EACrD;;;KAGA,GACI,WAAW,CAAE;QACT,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACvC,CAAK;IACL;;;;KAIA,GACI,OAAO,IAAI,CAAC,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE;QACvC,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;QACtD,IAAI,UAAU,GAAG,kBAAkB,EAAE,CAAC;QACtC,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;QAClC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;YACvC,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QACjF,CAAS;QACD,OAAO,IAAI,mBAAmB,CAAC,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;IAClF,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;CAKA,GACA,MAAM,OAAO,CAAC;IACV,WAAW,CAAC,cAAc,EAAE,QAAQ,CAAE;QAClC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACjC,CAAK;IACD,MAAM,GAAG;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;IACjC,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAO,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ,CAAC;IAClE,CAAK;IACD,QAAQ,GAAG;QACP,OAAO,CAAC;sBACM,EAAE,IAAI,CAAC,cAAc,CAAC;gBAC5B,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;KACtC,CAAC,CAAC;IACP,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,eAAe,CAAC;IAClB,WAAW,CAAC,KAAK,EAAE,cAAc,CAAE;QAC/B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IAC7C,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;CASA,GACA,IAAI,OAAO,CAAC;AACZ,CAAC,SAAU,OAAO,EAAE;IAChB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IAClC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;IAChD,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IAC5C,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,GAAG,kBAAkB,CAAC;IAC9D,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,mBAAmB,CAAC;IAChE,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;IAChD,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC;IAC1D,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,mBAAmB,CAAC;IAChE,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC,GAAG,iBAAiB,CAAC;IAC7D,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,GAAG,oBAAoB,CAAC;IAClE,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,GAAG,qBAAqB,CAAC;IACpE,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,SAAS,CAAC;IAC7C,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,GAAG,cAAc,CAAC;IACvD,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,GAAG,eAAe,CAAC;IACzD,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,UAAU,CAAC;IAC/C,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,GAAG,aAAa,CAAC;IACrD,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW,CAAC;AACrD,CAAC,EAAE,OAAO,IAAA,CAAK,OAAO,GAAG,CAAA,CAAE,CAAC,CAAC,CAAC;AAC9B;;;;;CAKA,GACA,SAAS,gBAAgB,CAAC,IAAI,EAAE;IAC5B,OAAQ,IAAI;QACR,KAAK,IAAI,CAAC,EAAE;YACR,OAAO,IAAI,EAAE,CAAC;QAClB,KAAK,IAAI,CAAC,SAAS,CAAC;QACpB,KAAK,IAAI,CAAC,OAAO,CAAC;QAClB,KAAK,IAAI,CAAC,iBAAiB,CAAC;QAC5B,KAAK,IAAI,CAAC,kBAAkB,CAAC;QAC7B,KAAK,IAAI,CAAC,QAAQ,CAAC;QACnB,KAAK,IAAI,CAAC,WAAW,CAAC;QAC9B,wEAAA;QACA,iEAAA;QACQ,KAAK,IAAI,CAAC,eAAe;YACrB,OAAO,KAAK,CAAC;QACjB,KAAK,IAAI,CAAC,gBAAgB,CAAC;QAC3B,KAAK,IAAI,CAAC,SAAS,CAAC;QACpB,KAAK,IAAI,CAAC,cAAc,CAAC;QACzB,KAAK,IAAI,CAAC,iBAAiB,CAAC;QAC5B,KAAK,IAAI,CAAC,mBAAmB,CAAC;QACtC,uEAAA;QACA,mEAAA;QACA,mDAAA;QACQ,KAAK,IAAI,CAAC,OAAO,CAAC;QAClB,KAAK,IAAI,CAAC,YAAY,CAAC;QACvB,KAAK,IAAI,CAAC,aAAa,CAAC;QACxB,KAAK,IAAI,CAAC,SAAS;YACf,OAAO,IAAI,CAAC;QAChB;YACI,OAAO,IAAI,EAAE,CAAC;IAC1B,CAAK;AACL,CAAC;AACD;;;;;;;;;;;CAWA,GACA,SAAS,qBAAqB,CAAC,IAAI,EAAE;IACjC,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC;AAC3D,CAAC;AACD;;;;;;CAMA,GACA,SAAS,kBAAkB,CAAC,IAAI,EAAE;IAC9B,IAAI,IAAI,KAAK,SAAS,EAAE;QAC5B,0EAAA;QACA,yEAAA;QACQ,QAAQ,CAAC,yBAAyB,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,OAAO,CAAC;IAC5B,CAAK;IACD,OAAQ,IAAI;QACR,KAAK,OAAO,CAAC,EAAE;YACX,OAAO,IAAI,CAAC,EAAE,CAAC;QACnB,KAAK,OAAO,CAAC,SAAS;YAClB,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,KAAK,OAAO,CAAC,OAAO;YAChB,OAAO,IAAI,CAAC,OAAO,CAAC;QACxB,KAAK,OAAO,CAAC,iBAAiB;YAC1B,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAClC,KAAK,OAAO,CAAC,kBAAkB;YAC3B,OAAO,IAAI,CAAC,kBAAkB,CAAC;QACnC,KAAK,OAAO,CAAC,QAAQ;YACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;QACzB,KAAK,OAAO,CAAC,WAAW;YACpB,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,KAAK,OAAO,CAAC,eAAe;YACxB,OAAO,IAAI,CAAC,eAAe,CAAC;QAChC,KAAK,OAAO,CAAC,gBAAgB;YACzB,OAAO,IAAI,CAAC,gBAAgB,CAAC;QACjC,KAAK,OAAO,CAAC,SAAS;YAClB,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,KAAK,OAAO,CAAC,cAAc;YACvB,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,KAAK,OAAO,CAAC,iBAAiB;YAC1B,OAAO,IAAI,CAAC,iBAAiB,CAAC;QAClC,KAAK,OAAO,CAAC,mBAAmB;YAC5B,OAAO,IAAI,CAAC,mBAAmB,CAAC;QACpC,KAAK,OAAO,CAAC,OAAO;YAChB,OAAO,IAAI,CAAC,OAAO,CAAC;QACxB,KAAK,OAAO,CAAC,YAAY;YACrB,OAAO,IAAI,CAAC,YAAY,CAAC;QAC7B,KAAK,OAAO,CAAC,aAAa;YACtB,OAAO,IAAI,CAAC,aAAa,CAAC;QAC9B,KAAK,OAAO,CAAC,SAAS;YAClB,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B;YACI,OAAO,IAAI,EAAE,CAAC;IAC1B,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,MAAM,iBAAiB,SAAS,KAAK,CAAC;IAClC,WAAW,EAAG;QACV,KAAK,CAAC,GAAG,SAAS,CAAC,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC;IACxC,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;;;;;;CAeA,GACA,MAAM,YAAY,CAAC;IACf,WAAW,EAAG;QACV,IAAI,CAAC,kCAAkC,GAAG,IAAI,GAAG,EAAE,CAAC;IAC5D,CAAK;IACL;;;KAGA,GACI,WAAW,QAAQ,GAAG;QAClB,OAAO,8BAA8B,CAAC;IAC9C,CAAK;IACL;;;KAGA,GACI,OAAO,mBAAmB,GAAG;QACzB,IAAI,8BAA8B,KAAK,IAAI,EAAE;YACzC,8BAA8B,GAAG,IAAI,YAAY,EAAE,CAAC;QAChE,CAAS;QACD,OAAO,8BAA8B,CAAC;IAC9C,CAAK;IACL;;;;;;;;;;;;;KAaA,GACI,yBAAyB,CAAC,QAAQ,EAAE;QAChC,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC;QACrB,IAAI,CAAC,kCAAkC,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QAC3D,OAAO,IAAM,IAAI,CAAC,kCAAkC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACzE,CAAK;IACL;;;KAGA,GACI,+BAA+B,CAAC,IAAI,EAAE;QAClC,IAAI,CAAC,kCAAkC,CAAC,OAAO,EAAC,QAAQ,GAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IACpF,CAAK;AACL,CAAC;AACD,qDAAA,GACA,IAAI,8BAA8B,GAAG,IAAI,CAAC;AAE1C;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,SAAS,cAAc,GAAG;IACtB,OAAO,sGAAI,cAAW,EAAE,CAAC;AAC7B,CAAC;AACD;;CAEA,GACA,SAAS,cAAc,GAAG;IACtB,OAAO,sGAAI,cAAW,CAAC,OAAO,CAAC,CAAC;AACpC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,2BAA2B,GAAG,IAAI,iMAAO,CAAC;IAAC,UAAU;IAAE,UAAU;CAAC,EAAE,CAAC,CAAC,CAAC;AAC7E,6CAAA;AACA,SAAS,eAAe,CAAC,KAAK,EAAE;IAC5B,MAAM,YAAY,GAAG,cAAc,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACpD,MAAM,GAAG,GAAG,2LAAI,MAAG,EAAE,CAAC;IACtB,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;IACzB,OAAO,IAAI,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;AACxC,CAAC;AACD,8EAAA;AACA,sCAAA;AACA,SAAS,aAAa,CAAC,KAAK,EAAE;IAC1B,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC5C,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAA,iBAAA,GAAsB,IAAI,CAAC,CAAC;IAC/D,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAA,iBAAA,GAAsB,IAAI,CAAC,CAAC;IAC/D,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAA,iBAAA,GAAsB,IAAI,CAAC,CAAC;IAC/D,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,EAAE,EAAA,iBAAA,GAAsB,IAAI,CAAC,CAAC;IAChE,MAAM,QAAQ,GAAG,2LAAI,UAAO,CAAC;QAAC,MAAM;QAAE,MAAM;KAAC,EAAE,CAAC,CAAC,CAAC;IAClD,MAAM,QAAQ,GAAG,2LAAI,UAAO,CAAC;QAAC,MAAM;QAAE,MAAM;KAAC,EAAE,CAAC,CAAC,CAAC;IAClD,OAAO;QAAC,QAAQ;QAAE,QAAQ;KAAC,CAAC;AAChC,CAAC;AACD,MAAM,WAAW,CAAC;IACd,WAAW,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAE;QACpC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,OAAO,GAAG,CAAC,IAAI,OAAO,IAAI,CAAC,EAAE;YAC7B,MAAM,IAAI,gBAAgB,CAAC,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QACtE,CAAS;QACD,IAAI,SAAS,GAAG,CAAC,EAAE;YACf,MAAM,IAAI,gBAAgB,CAAC,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QAC3E,CAAS;QACD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,SAAS,KAAK,CAAC,EAAE;YACvD,iDAAA;YACY,MAAM,IAAI,gBAAgB,CAAC,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QAC3E,CAAS;QACD,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,EAAE;YAClD,4CAAA;YACY,MAAM,IAAI,gBAAgB,CAAC,CAAC,yCAAyC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QAC9F,CAAS;QACD,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,OAAO,CAAC;QACpD,sEAAA;QACQ,IAAI,CAAC,iBAAiB,0LAAG,UAAO,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnE,CAAK;IACL,mEAAA;IACA,yEAAA;IACI,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE;QACvC,+CAAA;QACQ,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,wLAAC,UAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC/E,qCAAA;QACQ,IAAI,SAAS,CAAC,OAAO,CAAC,2BAA2B,CAAC,KAAK,CAAC,EAAE;YACtD,SAAS,GAAG,2LAAI,UAAO,CAAC;gBAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;gBAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;aAAC,EAAE,CAAC,CAAC,CAAC;QACrF,CAAS;QACD,OAAO,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC;IACnE,CAAK;IACL,uEAAA;IACI,QAAQ,CAAC,KAAK,EAAE;QACpB,qEAAA;QACQ,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;QAChD,MAAM,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;QACzB,OAAO,CAAC,IAAI,GAAI,IAAI,IAAI,MAAM,AAAC,MAAM,CAAC,CAAC;IAC/C,CAAK;IACD,YAAY,CAAC,KAAK,EAAE;QACxB,+DAAA;QACQ,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,EAAE;YACrB,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,MAAM,cAAc,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,aAAa,CAAC,cAAc,CAAC,CAAC;QACrD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAE;YACrC,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACvB,OAAO,KAAK,CAAC;YAC7B,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL,mDAAA,GACI,OAAO,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE;QACzC,MAAM,OAAO,GAAG,QAAQ,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;QAC5D,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;QACvD,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QAChE,QAAQ,CAAC,OAAO,EAAC,IAAI,GAAI,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACnD,OAAO,WAAW,CAAC;IAC3B,CAAK;IACD,MAAM,CAAC,KAAK,EAAE;QACV,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,EAAE;YACrB,OAAO;QACnB,CAAS;QACD,MAAM,cAAc,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,aAAa,CAAC,cAAc,CAAC,CAAC;QACrD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAE;YACrC,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAS;IACT,CAAK;IACD,MAAM,CAAC,KAAK,EAAE;QACV,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAC1C,MAAM,MAAM,GAAG,KAAK,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC;IACnD,CAAK;AACL,CAAC;AACD,MAAM,gBAAgB,SAAS,KAAK,CAAC;IACjC,WAAW,EAAG;QACV,KAAK,CAAC,GAAG,SAAS,CAAC,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC;IACvC,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;CAIA,GACA,MAAM,WAAW,CAAC;IACd,WAAW,CACf;;KAEA,GACI,eAAe,EACnB;;KAEA,GACI,aAAa,EACjB;;;;KAIA,GACI,gBAAgB,EACpB;;;KAGA,GACI,eAAe,EACnB;;KAEA,GACI,sBAAsB,CAAE;QACpB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;IAC7D,CAAK;IACL;;;;;KAKA,GACA,+BAAA;IACI,OAAO,4CAA4C,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE;QAChF,MAAM,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;QAChC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC,6CAA6C,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;QACxH,OAAO,IAAI,WAAW,CAAC,eAAe,CAAC,GAAG,EAAE,EAAE,aAAa,EAAE,IAAI,SAAS,CAAC,mBAAmB,CAAC,EAAE,kBAAkB,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;IACjJ,CAAK;AACL,CAAC;AACD;;;;;;;CAOA,GACA,MAAM,YAAY,CAAC;IACf,WAAW,CACf;;;;;KAKA,GACI,WAAW,EACf;;;;KAIA,GACI,OAAO,EACX;;;KAGA,GACI,cAAc,EAClB;;;KAGA,GACI,iBAAiB,EACrB;;;KAGA,GACI,gBAAgB,CAAE;QACd,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IACjD,CAAK;IACL;;;;KAIA,GACI,OAAO,6CAA6C,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE;QACjF,OAAO,IAAI,YAAY,CAAC,WAAW,EAAE,OAAO,EAAE,cAAc,EAAE,EAAE,cAAc,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;IAC5G,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;CAKA,GACA,MAAM,mBAAmB,CAAC;IACtB,WAAW,CACf,sDAAA,GACI,gBAAgB,EACpB,2DAAA,GACI,gBAAgB,EACpB,6CAAA,GACI,GAAG,EACP;;;KAGA,GACI,MAAM,CAAE;QACJ,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,CAAK;AACL,CAAC;AACD,MAAM,qBAAqB,CAAC;IACxB,WAAW,CAAC,QAAQ,EAAE,eAAe,CAAE;QACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC/C,CAAK;AACL,CAAC;AACD,MAAM,iBAAiB,CAAC;IACpB,WAAW,CACf,sDAAA,GACI,KAAK,EACT,gDAAA,GACI,SAAS,EACb;;;;;KAKA,GACI,WAAW,GAAG,UAAU,CAAC,iBAAiB,EAC9C,kDAAA,GACI,KAAK,GAAG,IAAI,CAAE;QACV,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,CAAK;AACL,CAAC;AACD,iDAAA,GACA,MAAM,WAAW,CAAC;IACd,WAAW,EAAG;QAClB;;;SAGA,GACQ,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAClC;;;;;SAKA,GACQ,IAAI,CAAC,eAAe,GAAG,kBAAkB,EAAE,CAAC;QACpD,yDAAA,GACQ,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,iBAAiB,CAAC;QACjD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAC9B;;;;SAIA,GACQ,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACvC,CAAK;IACL;;;;;;;KAOA,GACI,IAAI,OAAO,GAAG;QACV,OAAO,IAAI,CAAC,QAAQ,CAAC;IAC7B,CAAK;IACL,sDAAA,GACI,IAAI,WAAW,GAAG;QACd,OAAO,IAAI,CAAC,YAAY,CAAC;IACjC,CAAK;IACL,mEAAA,GACI,IAAI,SAAS,GAAG;QACZ,OAAO,IAAI,CAAC,gBAAgB,KAAK,CAAC,CAAC;IAC3C,CAAK;IACL,uEAAA,GACI,IAAI,iBAAiB,GAAG;QACpB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACvC,CAAK;IACL;;;KAGA,GACI,iBAAiB,CAAC,WAAW,EAAE;QAC3B,IAAI,WAAW,CAAC,mBAAmB,EAAE,GAAG,CAAC,EAAE;YACvC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAC5C,CAAS;IACT,CAAK;IACL;;;;;KAKA,GACI,cAAc,GAAG;QACb,IAAI,cAAc,GAAG,cAAc,EAAE,CAAC;QACtC,IAAI,iBAAiB,GAAG,cAAc,EAAE,CAAC;QACzC,IAAI,gBAAgB,GAAG,cAAc,EAAE,CAAC;QACxC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,UAAU,KAAK;YAC9C,OAAQ,UAAU;gBACd,KAAK,CAAC,CAAA,oBAAA;oBACF,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACzC,MAAM;gBACV,KAAK,CAAC,CAAA,uBAAA;oBACF,iBAAiB,GAAG,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBAC/C,MAAM;gBACV,KAAK,CAAC,CAAA,sBAAA;oBACF,gBAAgB,GAAG,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBAC7C,MAAM;gBACV;oBACI,IAAI,EAAE,CAAC;YAC3B,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,EAAE,cAAc,EAAE,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;IACvH,CAAK;IACL;;KAEA,GACI,mBAAmB,GAAG;QAClB,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,kBAAkB,EAAE,CAAC;IACpD,CAAK;IACD,iBAAiB,CAAC,GAAG,EAAE,UAAU,EAAE;QAC/B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;IAC5E,CAAK;IACD,oBAAoB,CAAC,GAAG,EAAE;QACtB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAChE,CAAK;IACD,0BAA0B,GAAG;QACzB,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC;IACnC,CAAK;IACD,oBAAoB,GAAG;QACnB,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC;IACnC,CAAK;IACD,WAAW,GAAG;QACV,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC7B,CAAK;AACL,CAAC;AACD,MAAM,SAAS,GAAG,uBAAuB,CAAC;AAC1C;;CAEA,GACA,MAAM,qBAAqB,CAAC;IACxB,WAAW,CAAC,gBAAgB,CAAE;QAC1B,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACjD,+CAAA,GACQ,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;QACtC,2EAAA,GACQ,IAAI,CAAC,sBAAsB,GAAG,kBAAkB,EAAE,CAAC;QAC3D,2DAAA,GACQ,IAAI,CAAC,4BAA4B,GAAG,iBAAiB,EAAE,CAAC;QAChE;;;;SAIA,GACQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;IACtE,CAAK;IACL;;KAEA,GACI,oBAAoB,CAAC,SAAS,EAAE;QAC5B,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAC,gBAAgB,CAAE;YAC/C,IAAI,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,eAAe,EAAE,EAAE;gBACxD,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;YACrE,CAAa,MACI;gBACD,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,SAAS,CAAC,GAAG,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;YACzF,CAAa;QACb,CAAS;QACD,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAC,gBAAgB,CAAE;YAC/C,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,SAAS,CAAC,GAAG,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;QACrF,CAAS;IACT,CAAK;IACL,4EAAA,GACI,kBAAkB,CAAC,YAAY,EAAE;QAC7B,IAAI,CAAC,aAAa,CAAC,YAAY,GAAE,QAAQ,IAAI;YACzC,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACrD,OAAQ,YAAY,CAAC,KAAK;gBACtB,KAAK,CAAC,CAAA,mCAAA;oBACF,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;wBAC/B,WAAW,CAAC,iBAAiB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;oBAChF,CAAqB;oBACD,MAAM;gBACV,KAAK,CAAC,CAAA,gCAAA;oBACtB,oEAAA;oBACA,qBAAA;oBACoB,WAAW,CAAC,oBAAoB,EAAE,CAAC;oBACnC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE;wBAChD,gEAAA;wBACA,mEAAA;wBACA,iDAAA;wBACwB,WAAW,CAAC,mBAAmB,EAAE,CAAC;oBAC1D,CAAqB;oBACD,WAAW,CAAC,iBAAiB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;oBACxD,MAAM;gBACV,KAAK,CAAC,CAAA,kCAAA;oBACtB,qEAAA;oBACA,6BAAA;oBACA,oEAAA;oBACA,qBAAA;oBACoB,WAAW,CAAC,oBAAoB,EAAE,CAAC;oBACnC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE;wBACxB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;oBACpD,CAAqB;oBACD,MAAM;gBACV,KAAK,CAAC,CAAA,kCAAA;oBACF,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;wBAC/B,WAAW,CAAC,WAAW,EAAE,CAAC;wBAC1B,WAAW,CAAC,iBAAiB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;oBAChF,CAAqB;oBACD,MAAM;gBACV,KAAK,CAAC,CAAA,gCAAA;oBACF,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;wBACvD,4DAAA;wBACA,8DAAA;wBACA,6DAAA;wBACwB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;wBAC3B,WAAW,CAAC,iBAAiB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;oBAChF,CAAqB;oBACD,MAAM;gBACV;oBACI,IAAI,EAAE,CAAC;YAC3B,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;KAIA,GACI,aAAa,CAAC,YAAY,EAAE,EAAE,EAAE;QAC5B,IAAI,YAAY,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACnC,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC/C,CAAS,MACI;YACD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,KAAK;gBACvC,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;oBAC/B,EAAE,CAAC,QAAQ,CAAC,CAAC;gBACjC,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS;IACT,CAAK;IACL;;;;KAIA,GACI,qBAAqB,CAAC,WAAW,EAAE;QAC/B,IAAI,EAAE,CAAC;QACP,MAAM,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QACtC,MAAM,aAAa,GAAG,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC;QACxD,MAAM,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;QAC5D,IAAI,UAAU,EAAE;YACZ,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;YACjC,IAAI,sBAAsB,CAAC,MAAM,CAAC,EAAE;gBAChC,IAAI,aAAa,KAAK,CAAC,EAAE;oBACzC,sEAAA;oBACA,oEAAA;oBACA,qEAAA;oBACA,oEAAA;oBACA,mEAAA;oBACA,WAAA;oBACoB,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACzC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,GAAG,EAAE,eAAe,CAAC,aAAa,CAAC,GAAG,EAAE,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC5H,CAAiB,MACI;oBACD,UAAU,CAAC,aAAa,KAAK,CAAC,CAAC,CAAC;gBACpD,CAAiB;YACjB,CAAa,MACI;gBACD,MAAM,WAAW,GAAG,IAAI,CAAC,gCAAgC,CAAC,QAAQ,CAAC,CAAC;gBACpF,uEAAA;gBACA,4CAAA;gBACgB,IAAI,WAAW,KAAK,aAAa,EAAE;oBACnD,6DAAA;oBACoB,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;oBAC/D,IAAI,MAAM,KAAK,CAAC,CAAA,wCAAA,KAA6C;wBACjF,8DAAA;wBACA,+BAAA;wBACwB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;wBAC3B,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,CAAA,8CAAA,MACtB,2CAA2C,CAAA,8CAAA,MAC3C,sCAAsC,CAAA,yCAAA,GAA6C;wBACzF,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;oBACtG,CAAqB;oBACD,CAAC,EAAE,GAAG,YAAY,CAAC,QAAQ,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,+BAA+B,CAAC,gDAAgD,CAAC,MAAM,EAAE,WAAW,EAAE,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC7N,CAAiB;YACjB,CAAa;QACb,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,gBAAgB,CAAC,WAAW,EAAE,YAAY,EAAE;QACxC,MAAM,EAAE,cAAc,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG,WAAW,CAAC,eAAe,CAAC;QAC7E,IAAI,CAAC,cAAc,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE;YACzC,OAAO,CAAC,CAAA,wCAAA,GAA4C;QAChE,CAAS;QACD,MAAM,EAAE,IAAI,EAAE,EAAE,MAAM,GAAG,EAAE,EAAE,OAAO,GAAG,CAAC,EAAE,EAAE,SAAS,GAAG,CAAC,EAAE,GAAG,cAAc,CAAC;QAC7E,IAAI,gBAAgB,CAAC;QACrB,IAAI;YACA,gBAAgB,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC,YAAY,EAAE,CAAC;QAC1E,CAAS,CACD,OAAO,GAAG,EAAE;YACR,IAAI,GAAG,YAAY,iBAAiB,EAAE;gBAClC,OAAO,CAAC,+DAA+D,GACnE,GAAG,CAAC,OAAO,GACX,iEAAiE,CAAC,CAAC;gBACvE,OAAO,CAAC,CAAA,wCAAA,GAA4C;YACpE,CAAa,MACI;gBACD,MAAM,GAAG,CAAC;YAC1B,CAAa;QACb,CAAS;QACD,IAAI,WAAW,CAAC;QAChB,IAAI;YACZ,sDAAA;YACY,WAAW,GAAG,IAAI,WAAW,CAAC,gBAAgB,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;QAChF,CAAS,CACD,OAAO,GAAG,EAAE;YACR,IAAI,GAAG,YAAY,gBAAgB,EAAE;gBACjC,OAAO,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;YACpD,CAAa,MACI;gBACD,OAAO,CAAC,gCAAgC,EAAE,GAAG,CAAC,CAAC;YAC/D,CAAa;YACD,OAAO,CAAC,CAAA,wCAAA,GAA4C;QAChE,CAAS;QACD,IAAI,WAAW,CAAC,QAAQ,KAAK,CAAC,EAAE;YAC5B,OAAO,CAAC,CAAA,wCAAA,GAA4C;QAChE,CAAS;QACD,MAAM,oBAAoB,GAAG,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC5F,IAAI,aAAa,KAAK,YAAY,GAAG,oBAAoB,EAAE;YACvD,OAAO,CAAC,CAAA,8CAAA,GAAkD;QACtE,CAAS;QACD,OAAO,CAAC,CAAA,wCAAA,GAA4C;IAC5D,CAAK;IACL;;;KAGA,GACI,sBAAsB,CAAC,QAAQ,EAAE,WAAW,EAAE;QAC1C,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAC5E,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,YAAY,CAAC,OAAO,CAAC,GAAG,IAAI;YACxB,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,CAAC;YACzD,MAAM,YAAY,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YACjI,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE;gBACzC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,GAAG,EAAA,kBAAA,GAAuB,IAAI,CAAC,CAAC;gBACxE,YAAY,EAAE,CAAC;YAC/B,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,YAAY,CAAC;IAC5B,CAAK;IACL;;;KAGA,GACI,iBAAiB,CAAC,eAAe,EAAE;QAC/B,MAAM,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,QAAQ,KAAK;YACjD,MAAM,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;YAC5D,IAAI,UAAU,EAAE;gBACZ,IAAI,WAAW,CAAC,OAAO,IAAI,sBAAsB,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;oBACtF,sEAAA;oBACA,kEAAA;oBACA,+DAAA;oBACA,6DAAA;oBACA,qBAAA;oBACA,EAAA;oBACA,gEAAA;oBACA,+DAAA;oBACA,6BAAA;oBACoB,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACpD,IAAI,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,IAC7C,CAAC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE;wBAC7C,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,GAAG,EAAE,eAAe,CAAC,aAAa,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC;oBAC1H,CAAqB;gBACrB,CAAiB;gBACD,IAAI,WAAW,CAAC,iBAAiB,EAAE;oBAC/B,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,cAAc,EAAE,CAAC,CAAC;oBAC1D,WAAW,CAAC,mBAAmB,EAAE,CAAC;gBACtD,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;QACH,IAAI,sBAAsB,GAAG,cAAc,EAAE,CAAC;QACtD,oEAAA;QACA,kEAAA;QACA,EAAA;QACA,uEAAA;QACA,UAAA;QACQ,IAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,OAAO,KAAK;YACxD,IAAI,iBAAiB,GAAG,IAAI,CAAC;YAC7B,OAAO,CAAC,YAAY,EAAC,QAAQ,IAAI;gBAC7B,MAAM,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;gBAC5D,IAAI,UAAU,IACV,UAAU,CAAC,OAAO,KAAK,8BAA8B,CAAA,iCAAA,KAAsC;oBAC3F,iBAAiB,GAAG,KAAK,CAAC;oBAC1B,OAAO,KAAK,CAAC;gBACjC,CAAiB;gBACD,OAAO,IAAI,CAAC;YAC5B,CAAa,CAAC,CAAC;YACH,IAAI,iBAAiB,EAAE;gBACnB,sBAAsB,GAAG,sBAAsB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACzE,CAAa;QACb,CAAS,CAAC,CAAC;QACH,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,GAAK,GAAG,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;QAClF,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,eAAe,EAAE,aAAa,EAAE,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,sBAAsB,EAAE,sBAAsB,CAAC,CAAC;QACnJ,IAAI,CAAC,sBAAsB,GAAG,kBAAkB,EAAE,CAAC;QACnD,IAAI,CAAC,4BAA4B,GAAG,iBAAiB,EAAE,CAAC;QACxD,IAAI,CAAC,mBAAmB,GAAG,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAC9D,OAAO,WAAW,CAAC;IAC3B,CAAK;IACL;;;KAGA,GACA,uBAAA;IACI,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,EAAE;QACpC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YAChC,OAAO;QACnB,CAAS;QACD,MAAM,UAAU,GAAG,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,GAChE,CAAC,CAAA,uBAAA,MACD,CAAC,CAAA,oBAAA,GAAwB;QAC/B,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACrD,WAAW,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QACxD,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACzF,IAAI,CAAC,4BAA4B,GAC7B,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjI,CAAK;IACL;;;;;;KAMA,GACA,uBAAA;IACI,wBAAwB,CAAC,QAAQ,EAAE,GAAG,EAAE,eAAe,EAAE;QACrD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YAChC,OAAO;QACnB,CAAS;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACrD,IAAI,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE;YAC5C,WAAW,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC,CAAA,sBAAA,GAA0B,CAAC;QAC3E,CAAS,MACI;YACb,uEAAA;YACA,8CAAA;YACY,WAAW,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAClD,CAAS;QACD,IAAI,CAAC,4BAA4B,GAC7B,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1G,IAAI,eAAe,EAAE;YACjB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;QACnG,CAAS;IACT,CAAK;IACD,YAAY,CAAC,QAAQ,EAAE;QACnB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAK;IACL;;;;KAIA,GACI,gCAAgC,CAAC,QAAQ,EAAE;QACvC,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACrD,MAAM,YAAY,GAAG,WAAW,CAAC,cAAc,EAAE,CAAC;QAClD,OAAQ,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,IAAI,GAC/D,YAAY,CAAC,cAAc,CAAC,IAAI,GAChC,YAAY,CAAC,gBAAgB,CAAC,IAAI,EAAE;IAChD,CAAK;IACL;;;KAGA,GACI,0BAA0B,CAAC,QAAQ,EAAE;QACzC,uEAAA;QACQ,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACrD,WAAW,CAAC,0BAA0B,EAAE,CAAC;IACjD,CAAK;IACD,iBAAiB,CAAC,QAAQ,EAAE;QACxB,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC7C,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;YAC3B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACpD,CAAS;QACD,OAAO,MAAM,CAAC;IACtB,CAAK;IACD,2BAA2B,CAAC,GAAG,EAAE;QAC7B,IAAI,aAAa,GAAG,IAAI,CAAC,4BAA4B,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC/D,IAAI,CAAC,aAAa,EAAE;YAChB,aAAa,GAAG,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;YACnD,IAAI,CAAC,4BAA4B,GAC7B,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QAC7E,CAAS;QACD,OAAO,aAAa,CAAC;IAC7B,CAAK;IACL;;;;KAIA,GACI,cAAc,CAAC,QAAQ,EAAE;QACrB,MAAM,YAAY,GAAG,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC;QACvE,IAAI,CAAC,YAAY,EAAE;YACf,QAAQ,CAAC,SAAS,EAAE,0BAA0B,EAAE,QAAQ,CAAC,CAAC;QACtE,CAAS;QACD,OAAO,YAAY,CAAC;IAC5B,CAAK;IACL;;;KAGA,GACI,yBAAyB,CAAC,QAAQ,EAAE;QAChC,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACpD,OAAO,WAAW,IAAI,WAAW,CAAC,SAAS,GACrC,IAAI,GACJ,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IACrE,CAAK;IACL;;;;KAIA,GACI,WAAW,CAAC,QAAQ,EAAE;QAClB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,WAAW,EAAE,CAAC,CAAC;QAC3D,qEAAA;QACA,wEAAA;QACA,0BAAA;QACQ,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAC5E,YAAY,CAAC,OAAO,EAAC,GAAG,IAAI;YACxB,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EAAE,GAAG,EAAA,kBAAA,GAAuB,IAAI,CAAC,CAAC;QACpF,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;KAGA,GACI,sBAAsB,CAAC,QAAQ,EAAE,GAAG,EAAE;QAClC,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;QAC5E,OAAO,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACrC,CAAK;AACL,CAAC;AACD,SAAS,iBAAiB,GAAG;IACzB,OAAO,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACjD,CAAC;AACD,SAAS,kBAAkB,GAAG;IAC1B,OAAO,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACjD,CAAC;AACD,SAAS,gDAAgD,CAAC,MAAM,EAAE,eAAe,EAAE,eAAe,EAAE;IAChG,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAC3B,MAAM,MAAM,GAAG;QACX,eAAe;QACf,oBAAoB,EAAE,eAAe,CAAC,KAAK;IACnD,CAAK,CAAC;IACF,MAAM,cAAc,GAAG,eAAe,CAAC,cAAc,CAAC;IACtD,IAAI,cAAc,EAAE;QAChB,MAAM,CAAC,WAAW,GAAG;YACjB,OAAO,EAAE,MAAM,KAAK,CAAC,CAAA,wCAAA;YACrB,SAAS,EAAE,CAAC,EAAE,GAAG,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,cAAc,CAAC,SAAS,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC;YAC7I,YAAY,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,cAAc,CAAC,IAAI,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,MAAM,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,MAAM,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC;YACvP,OAAO,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,cAAc,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,cAAc,CAAC,IAAI,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,OAAO,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC;QACzM,CAAS,CAAC;IACV,CAAK;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,UAAU,GAAG,CAAC,MAAM;IACtB,MAAM,IAAI,GAAG,CAAA,CAAE,CAAC;IAChB,IAAI,CAAC,KAAK,CAAA,uBAAA,IAA2B,GAAG,WAAW,CAAC;IACpD,IAAI,CAAC,MAAM,CAAA,wBAAA,IAA4B,GAAG,YAAY,CAAC;IACvD,OAAO,IAAI,CAAC;AAChB,CAAC,GAAG,CAAC;AACL,MAAM,SAAS,GAAG,CAAC,MAAM;IACrB,MAAM,GAAG,GAAG,CAAA,CAAE,CAAC;IACf,GAAG,CAAC,GAAG,CAAA,sBAAA,IAA0B,GAAG,WAAW,CAAC;IAChD,GAAG,CAAC,IAAI,CAAA,+BAAA,IAAmC,GAAG,oBAAoB,CAAC;IACnE,GAAG,CAAC,GAAG,CAAA,yBAAA,IAA6B,GAAG,cAAc,CAAC;IACtD,GAAG,CAAC,IAAI,CAAA,kCAAA,IAAsC,GAAG,uBAAuB,CAAC;IACzE,GAAG,CAAC,IAAI,CAAA,kBAAA,IAAsB,GAAG,OAAO,CAAC;IACzC,GAAG,CAAC,IAAI,CAAA,sBAAA,IAA0B,GAAG,WAAW,CAAC;IACjD,GAAG,CAAC,gBAAgB,CAAA,2BAAA,IAA+B,GAAG,gBAAgB,CAAC;IACvE,GAAG,CAAC,IAAI,CAAA,eAAA,IAAmB,GAAG,IAAI,CAAC;IACnC,GAAG,CAAC,QAAQ,CAAA,mBAAA,IAAuB,GAAG,QAAQ,CAAC;IAC/C,GAAG,CAAC,oBAAoB,CAAA,+BAAA,IAAmC,GAAG,oBAAoB,CAAC;IACnF,OAAO,GAAG,CAAC;AACf,CAAC,GAAG,CAAC;AACL,MAAM,mBAAmB,GAAG,CAAC,MAAM;IAC/B,MAAM,GAAG,GAAG,CAAA,CAAE,CAAC;IACf,GAAG,CAAC,KAAK,CAAA,yBAAA,IAA6B,GAAG,KAAK,CAAC;IAC/C,GAAG,CAAC,IAAI,CAAA,wBAAA,IAA4B,GAAG,IAAI,CAAC;IAC5C,OAAO,GAAG,CAAC;AACf,CAAC,GAAG,CAAC;AACL,SAAS,aAAa,CAAC,KAAK,EAAE,WAAW,EAAE,CAC3C,CAAC;AACD;;;;;;;;;;;;;CAaA,GACA,MAAM,mBAAmB,CAAC;IACtB,WAAW,CAAC,UAAU,EAAE,aAAa,CAAE;QACnC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IAC3C,CAAK;AACL,CAAC;AACD,SAAS,aAAa,CAAC,MAAM,EAAE;IAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,KAAK,SAAS,GAAG,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACxF,OAAO,IAAI,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;AAC1D,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,YAAY,CAAC,UAAU,EAAE,GAAG,EAAE;IACnC,IAAI,UAAU,CAAC,aAAa,IAAI,iBAAiB,CAAC,GAAG,CAAC,EAAE;QACpD,OAAO,GAAG,CAAC;IACnB,CAAK,MACI;QACD,OAAO;YAAE,KAAK,EAAE,GAAG;QAAA,CAAE,CAAC;IAC9B,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,cAAc,CAAC,GAAG,EAAE;IACzB,IAAI,MAAM,CAAC;IACX,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QACzB,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC;IAC3B,CAAK,MACI;QACD,MAAM,GAAG,GAAG,CAAC;IACrB,CAAK;IACD,OAAO,iBAAiB,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC;AACrD,CAAC;AACD;;CAEA,GACA,SAAS,WAAW,CAAC,UAAU,EAAE,SAAS,EAAE;IACxC,IAAI,UAAU,CAAC,aAAa,EAAE;QAClC,oEAAA;QACA,uEAAA;QACA,8CAAA;QACQ,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3E,0CAAA;QACQ,MAAM,eAAe,GAAG,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAChF,4CAAA;QACQ,MAAM,OAAO,GAAG,CAAC,WAAW,GAAG,SAAS,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,OAAO,CAAC,EAAE,eAAe,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;IAChD,CAAK,MACI;QACD,OAAO;YACH,OAAO,EAAE,EAAE,GAAG,SAAS,CAAC,OAAO;YAC/B,KAAK,EAAE,SAAS,CAAC,WAAW;QAExC,CAAS,CAAC;IACV,CAAK;AACL,CAAC;AACD,SAAS,aAAa,CAAC,IAAI,EAAE;IACzB,MAAM,SAAS,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC3C,OAAO,IAAI,SAAS,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;AAC7D,CAAC;AACD;;;;CAIA,GACA,SAAS,OAAO,CAAC,UAAU,EAAE,KAAK,EAAE;IAChC,IAAI,UAAU,CAAC,aAAa,EAAE;QAC1B,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;IAChC,CAAK,MACI;QACD,OAAO,KAAK,CAAC,YAAY,EAAE,CAAC;IACpC,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,SAAS,CAAC,UAAU,EAAE,KAAK,EAAE;IAClC,IAAI,UAAU,CAAC,aAAa,EAAE;QAC1B,UAAU,CAAC,KAAK,KAAK,SAAS,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC;QAC7D,OAAO,UAAU,CAAC,gBAAgB,CAAC,KAAK,GAAG,KAAK,GAAG,EAAE,CAAC,CAAC;IAC/D,CAAK,MACI;QACD,UAAU,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,YAAY,UAAU,CAAC,CAAC;QAC/D,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,GAAG,KAAK,GAAG,IAAI,UAAU,EAAE,CAAC,CAAC;IAC3E,CAAK;AACL,CAAC;AACD,SAAS,SAAS,CAAC,UAAU,EAAE,OAAO,EAAE;IACpC,OAAO,WAAW,CAAC,UAAU,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;AAC1D,CAAC;AACD,SAAS,WAAW,CAAC,OAAO,EAAE;IAC1B,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;IACtB,OAAO,eAAe,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;AACjE,CAAC;AACD,SAAS,cAAc,CAAC,UAAU,EAAE,IAAI,EAAE;IACtC,OAAO,wBAAwB,CAAC,UAAU,CAAC,CACtC,KAAK,CAAC,WAAW,CAAC,CAClB,KAAK,CAAC,IAAI,CAAC,CACX,eAAe,EAAE,CAAC;AAC3B,CAAC;AACD,SAAS,gBAAgB,CAAC,IAAI,EAAE;IAC5B,MAAM,QAAQ,GAAG,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC/C,UAAU,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1C,OAAO,QAAQ,CAAC;AACpB,CAAC;AACD,SAAS,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE;IAC7B,OAAO,cAAc,CAAC,UAAU,CAAC,UAAU,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;AAC3D,CAAC;AACD,SAAS,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE;IAChC,MAAM,QAAQ,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACxC,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,UAAU,CAAC,SAAS,EAAE;QACrD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,mDAAmD,GAC/F,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GACf,MAAM,GACN,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAC7C,CAAK;IACD,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE;QACpD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,oDAAoD,GAChG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,GACf,MAAM,GACN,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC5C,CAAK;IACD,OAAO,IAAI,WAAW,CAAC,gCAAgC,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvE,CAAC;AACD,SAAS,WAAW,CAAC,UAAU,EAAE,IAAI,EAAE;IACnC,OAAO,cAAc,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AACvD,CAAC;AACD,SAAS,aAAa,CAAC,IAAI,EAAE;IACzB,MAAM,YAAY,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAChD,yEAAA;IACA,4EAAA;IACA,4EAAA;IACA,6BAAA;IACI,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3B,OAAO,YAAY,CAAC,SAAS,EAAE,CAAC;IACxC,CAAK;IACD,OAAO,gCAAgC,CAAC,YAAY,CAAC,CAAC;AAC1D,CAAC;AACD,SAAS,oBAAoB,CAAC,UAAU,EAAE;IACtC,MAAM,IAAI,GAAG,IAAI,YAAY,CAAC;QAC1B,UAAU;QACV,UAAU,CAAC,UAAU,CAAC,SAAS;QAC/B,WAAW;QACX,UAAU,CAAC,UAAU,CAAC,QAAQ;KACjC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;AAClC,CAAC;AACD,SAAS,wBAAwB,CAAC,UAAU,EAAE;IAC1C,OAAO,IAAI,YAAY,CAAC;QACpB,UAAU;QACV,UAAU,CAAC,SAAS;QACpB,WAAW;QACX,UAAU,CAAC,QAAQ;KACtB,CAAC,CAAC;AACP,CAAC;AACD,SAAS,gCAAgC,CAAC,YAAY,EAAE;IACpD,UAAU,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC;IAC3E,OAAO,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC;AACD,6EAAA,GACA,SAAS,kBAAkB,CAAC,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE;IACjD,OAAO;QACH,IAAI,EAAE,MAAM,CAAC,UAAU,EAAE,GAAG,CAAC;QAC7B,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM;IAC5C,CAAK,CAAC;AACN,CAAC;AACD,SAAS,UAAU,CAAC,UAAU,EAAE,QAAQ,EAAE;IACtC,OAAO;QACH,IAAI,EAAE,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,CAAC;QACtC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM;QAC3C,UAAU,EAAE,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QACnE,UAAU,EAAE,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;IAC9E,CAAK,CAAC;AACN,CAAC;AACD,SAAS,YAAY,CAAC,UAAU,EAAE,QAAQ,EAAE,qBAAqB,EAAE;IAC/D,MAAM,GAAG,GAAG,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;IAChD,MAAM,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACrD,8EAAA;IACA,2EAAA;IACA,oEAAA;IACI,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,GAChC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,GAChC,eAAe,CAAC,GAAG,EAAE,CAAC;IAC5B,MAAM,IAAI,GAAG,IAAI,WAAW,CAAC;QAAE,QAAQ,EAAE;YAAE,MAAM,EAAE,QAAQ,CAAC,MAAM;QAAA,CAAE;IAAA,CAAE,CAAC,CAAC;IACxE,MAAM,MAAM,GAAG,eAAe,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;IAChF,IAAI,qBAAqB,EAAE;QACvB,MAAM,CAAC,wBAAwB,EAAE,CAAC;IAC1C,CAAK;IACD,OAAO,qBAAqB,GAAG,MAAM,CAAC,wBAAwB,EAAE,GAAG,MAAM,CAAC;AAC9E,CAAC;AACD,SAAS,SAAS,CAAC,UAAU,EAAE,GAAG,EAAE;IAChC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACxB,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9B,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACpC,MAAM,GAAG,GAAG,QAAQ,CAAC,UAAU,EAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACjD,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAClD,MAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,UAAU,GACjC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,GACjC,eAAe,CAAC,GAAG,EAAE,CAAC;IAC5B,MAAM,IAAI,GAAG,IAAI,WAAW,CAAC;QAAE,QAAQ,EAAE;YAAE,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,MAAM;QAAA,CAAE;IAAA,CAAE,CAAC,CAAC;IACzE,OAAO,eAAe,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;AAC5E,CAAC;AACD,SAAS,WAAW,CAAC,UAAU,EAAE,MAAM,EAAE;IACrC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC7B,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC9B,MAAM,GAAG,GAAG,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IACjD,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC7C,OAAO,eAAe,CAAC,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACvD,CAAC;AACD,SAAS,6BAA6B,CAAC,UAAU,EAAE,MAAM,EAAE;IACvD,IAAI,OAAO,IAAI,MAAM,EAAE;QACnB,OAAO,SAAS,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAK,MACI,IAAI,SAAS,IAAI,MAAM,EAAE;QAC1B,OAAO,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IAC/C,CAAK;IACD,OAAO,IAAI,EAAE,CAAC;AAClB,CAAC;AACD,SAAS,eAAe,CAAC,UAAU,EAAE,MAAM,EAAE;IACzC,IAAI,WAAW,CAAC;IAChB,IAAI,cAAc,IAAI,MAAM,EAAE;QAC1B,aAAa,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC3C,wEAAA;QACA,WAAA;QACQ,MAAM,KAAK,GAAG,0BAA0B,CAAC,MAAM,CAAC,YAAY,CAAC,gBAAgB,IAAI,WAAW,CAAC,CAAC;QAC9F,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,CAAC,SAAS,IAAI,EAAE,CAAC;QACtD,MAAM,WAAW,GAAG,SAAS,CAAC,UAAU,EAAE,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QAC3E,MAAM,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC;QAC7C,MAAM,KAAK,GAAG,UAAU,IAAI,aAAa,CAAC,UAAU,CAAC,CAAC;QACtD,WAAW,GAAG,IAAI,iBAAiB,CAAC,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,IAAI,IAAI,CAAC,CAAC;IAC1F,CAAK,MACI,IAAI,gBAAgB,IAAI,MAAM,EAAE;QACjC,aAAa,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACrC,MAAM,YAAY,GAAG,MAAM,CAAC,cAAc,CAAC;QAC3C,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACrC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC1C,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAChD,MAAM,GAAG,GAAG,QAAQ,CAAC,UAAU,EAAE,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC7D,MAAM,OAAO,GAAG,WAAW,CAAC,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC9D,MAAM,UAAU,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,GAC7C,WAAW,CAAC,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,GAC7C,eAAe,CAAC,GAAG,EAAE,CAAC;QAC5B,MAAM,IAAI,GAAG,IAAI,WAAW,CAAC;YACzB,QAAQ,EAAE;gBAAE,MAAM,EAAE,YAAY,CAAC,QAAQ,CAAC,MAAM;YAAA,CAAE;QAC9D,CAAS,CAAC,CAAC;QACH,MAAM,GAAG,GAAG,eAAe,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QAC7E,MAAM,gBAAgB,GAAG,YAAY,CAAC,SAAS,IAAI,EAAE,CAAC;QACtD,MAAM,gBAAgB,GAAG,YAAY,CAAC,gBAAgB,IAAI,EAAE,CAAC;QAC7D,WAAW,GAAG,IAAI,mBAAmB,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAChG,CAAK,MACI,IAAI,gBAAgB,IAAI,MAAM,EAAE;QACjC,aAAa,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACrC,MAAM,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC;QACxC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,QAAQ,CAAC,UAAU,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;QACrD,MAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,GAC5B,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,GAC/B,eAAe,CAAC,GAAG,EAAE,CAAC;QAC5B,MAAM,GAAG,GAAG,eAAe,CAAC,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QACxD,MAAM,gBAAgB,GAAG,SAAS,CAAC,gBAAgB,IAAI,EAAE,CAAC;QAC1D,WAAW,GAAG,IAAI,mBAAmB,CAAC,EAAE,EAAE,gBAAgB,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAClF,CAAK,MACI,IAAI,gBAAgB,IAAI,MAAM,EAAE;QACjC,aAAa,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACrC,MAAM,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC;QACxC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAClC,MAAM,GAAG,GAAG,QAAQ,CAAC,UAAU,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;QACrD,MAAM,gBAAgB,GAAG,SAAS,CAAC,gBAAgB,IAAI,EAAE,CAAC;QAC1D,WAAW,GAAG,IAAI,mBAAmB,CAAC,EAAE,EAAE,gBAAgB,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IAC/E,CAAK,MACI,IAAI,QAAQ,IAAI,MAAM,EAAE;QACjC,kEAAA;QACQ,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC7B,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7B,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC/B,MAAM,EAAE,KAAK,GAAG,CAAC,EAAE,cAAc,EAAE,GAAG,MAAM,CAAC;QAC7C,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;QACnE,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QACjC,WAAW,GAAG,IAAI,qBAAqB,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;IAC3E,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;IACD,OAAO,WAAW,CAAC;AACvB,CAAC;AACD,SAAS,0BAA0B,CAAC,KAAK,EAAE;IACvC,IAAI,KAAK,KAAK,WAAW,EAAE;QACvB,OAAO,CAAC,CAAA,mCAAA,GAAuC;IACvD,CAAK,MACI,IAAI,KAAK,KAAK,KAAK,EAAE;QACtB,OAAO,CAAC,CAAA,gCAAA,GAAoC;IACpD,CAAK,MACI,IAAI,KAAK,KAAK,QAAQ,EAAE;QACzB,OAAO,CAAC,CAAA,kCAAA,GAAsC;IACtD,CAAK,MACI,IAAI,KAAK,KAAK,SAAS,EAAE;QAC1B,OAAO,CAAC,CAAA,kCAAA,GAAsC;IACtD,CAAK,MACI,IAAI,KAAK,KAAK,OAAO,EAAE;QACxB,OAAO,CAAC,CAAA,gCAAA,GAAoC;IACpD,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AACD,SAAS,yBAAyB,CAAC,MAAM,EAAE;IAC3C,4EAAA;IACA,qEAAA;IACA,uEAAA;IACI,IAAI,CAAA,CAAE,cAAc,IAAI,MAAM,CAAC,EAAE;QAC7B,OAAO,eAAe,CAAC,GAAG,EAAE,CAAC;IACrC,CAAK;IACD,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;IACzC,IAAI,YAAY,CAAC,SAAS,IAAI,YAAY,CAAC,SAAS,CAAC,MAAM,EAAE;QACzD,OAAO,eAAe,CAAC,GAAG,EAAE,CAAC;IACrC,CAAK;IACD,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;QACxB,OAAO,eAAe,CAAC,GAAG,EAAE,CAAC;IACrC,CAAK;IACD,OAAO,WAAW,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AAC9C,CAAC;AACD,SAAS,UAAU,CAAC,UAAU,EAAE,QAAQ,EAAE;IACtC,IAAI,MAAM,CAAC;IACX,IAAI,QAAQ,YAAY,WAAW,EAAE;QACjC,MAAM,GAAG;YACL,MAAM,EAAE,kBAAkB,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,KAAK,CAAC;QAChF,CAAS,CAAC;IACV,CAAK,MACI,IAAI,QAAQ,YAAY,cAAc,EAAE;QACzC,MAAM,GAAG;YAAE,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,CAAC;QAAA,CAAE,CAAC;IAC9D,CAAK,MACI,IAAI,QAAQ,YAAY,aAAa,EAAE;QACxC,MAAM,GAAG;YACL,MAAM,EAAE,kBAAkB,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,CAAC;YACnE,UAAU,EAAE,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC;QAC1D,CAAS,CAAC;IACV,CAAK,MACI,IAAI,QAAQ,YAAY,cAAc,EAAE;QACzC,MAAM,GAAG;YACL,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,CAAC;QACpD,CAAS,CAAC;IACV,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;IACD,IAAI,QAAQ,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;QACrC,MAAM,CAAC,gBAAgB,GAAG,QAAQ,CAAC,eAAe,CAAC,GAAG,EAAC,SAAS,GAAI,gBAAgB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;IACrH,CAAK;IACD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,EAAE;QAC/B,MAAM,CAAC,eAAe,GAAG,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;IACnF,CAAK;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,SAAS,YAAY,CAAC,UAAU,EAAE,KAAK,EAAE;IACrC,MAAM,YAAY,GAAG,KAAK,CAAC,eAAe,GACpC,gBAAgB,CAAC,KAAK,CAAC,eAAe,CAAC,GACvC,YAAY,CAAC,IAAI,EAAE,CAAC;IAC1B,MAAM,eAAe,GAAG,KAAK,CAAC,gBAAgB,GACxC,KAAK,CAAC,gBAAgB,CAAC,GAAG,EAAC,SAAS,GAAI,kBAAkB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,GAClF,EAAE,CAAC;IACT,IAAI,KAAK,CAAC,MAAM,EAAE;QACd,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACjC,MAAM,GAAG,GAAG,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACpD,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC;YAC1B,QAAQ,EAAE;gBAAE,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM;YAAA,CAAE;QACrD,CAAS,CAAC,CAAC;QACH,IAAI,KAAK,CAAC,UAAU,EAAE;YAClB,MAAM,SAAS,GAAG,gBAAgB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACrD,OAAO,IAAI,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,YAAY,EAAE,eAAe,CAAC,CAAC;QAC3F,CAAS,MACI;YACD,OAAO,IAAI,WAAW,CAAC,GAAG,EAAE,KAAK,EAAE,YAAY,EAAE,eAAe,CAAC,CAAC;QAC9E,CAAS;IACT,CAAK,MACI,IAAI,KAAK,CAAC,MAAM,EAAE;QACnB,MAAM,GAAG,GAAG,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/C,OAAO,IAAI,cAAc,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IACrD,CAAK,MACI,IAAI,KAAK,CAAC,MAAM,EAAE;QACnB,MAAM,GAAG,GAAG,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/C,OAAO,IAAI,cAAc,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IACrD,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AACD,SAAS,cAAc,CAAC,UAAU,EAAE,YAAY,EAAE;IAC9C,IAAI,YAAY,CAAC,UAAU,KAAK,SAAS,EAAE;QACvC,OAAO;YACH,UAAU,EAAE,SAAS,CAAC,UAAU,EAAE,YAAY,CAAC,UAAU,CAAC;QACtE,CAAS,CAAC;IACV,CAAK,MACI,IAAI,YAAY,CAAC,MAAM,KAAK,SAAS,EAAE;QACxC,OAAO;YAAE,MAAM,EAAE,YAAY,CAAC,MAAM;QAAA,CAAE,CAAC;IAC/C,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AACD,SAAS,gBAAgB,CAAC,YAAY,EAAE;IACpC,IAAI,YAAY,CAAC,UAAU,KAAK,SAAS,EAAE;QACvC,OAAO,YAAY,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;IAC7E,CAAK,MACI,IAAI,YAAY,CAAC,MAAM,KAAK,SAAS,EAAE;QACxC,OAAO,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACxD,CAAK,MACI;QACD,OAAO,YAAY,CAAC,IAAI,EAAE,CAAC;IACnC,CAAK;AACL,CAAC;AACD,SAAS,eAAe,CAAC,KAAK,EAAE,UAAU,EAAE;IAC5C,0CAAA;IACI,IAAI,OAAO,GAAG,KAAK,CAAC,UAAU,GACxB,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,GAC7B,WAAW,CAAC,UAAU,CAAC,CAAC;IAC9B,IAAI,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE;QAChD,mEAAA;QACA,wEAAA;QACA,wEAAA;QACA,kEAAA;QACA,kDAAA;QACQ,OAAO,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAK;IACD,OAAO,IAAI,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,gBAAgB,IAAI,EAAE,CAAC,CAAC;AACrE,CAAC;AACD,SAAS,gBAAgB,CAAC,MAAM,EAAE,UAAU,EAAE;IAC1C,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QAC7B,UAAU,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC;QACrC,OAAO,MAAM,CAAC,GAAG,EAAC,KAAK,GAAI,eAAe,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;IACvE,CAAK,MACI;QACD,OAAO,EAAE,CAAC;IAClB,CAAK;AACL,CAAC;AACD,SAAS,gBAAgB,CAAC,UAAU,EAAE,cAAc,EAAE;IAClD,MAAM,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC;IAC3C,IAAI,SAAS,YAAY,wBAAwB,EAAE;QAC/C,OAAO;YACH,SAAS,EAAE,cAAc,CAAC,KAAK,CAAC,eAAe,EAAE;YACjD,gBAAgB,EAAE,cAAc;QAC5C,CAAS,CAAC;IACV,CAAK,MACI,IAAI,SAAS,YAAY,4BAA4B,EAAE;QACxD,OAAO;YACH,SAAS,EAAE,cAAc,CAAC,KAAK,CAAC,eAAe,EAAE;YACjD,qBAAqB,EAAE;gBACnB,MAAM,EAAE,SAAS,CAAC,QAAQ;YAC1C,CAAa;QACb,CAAS,CAAC;IACV,CAAK,MACI,IAAI,SAAS,YAAY,6BAA6B,EAAE;QACzD,OAAO;YACH,SAAS,EAAE,cAAc,CAAC,KAAK,CAAC,eAAe,EAAE;YACjD,kBAAkB,EAAE;gBAChB,MAAM,EAAE,SAAS,CAAC,QAAQ;YAC1C,CAAa;QACb,CAAS,CAAC;IACV,CAAK,MACI,IAAI,SAAS,YAAY,kCAAkC,EAAE;QAC9D,OAAO;YACH,SAAS,EAAE,cAAc,CAAC,KAAK,CAAC,eAAe,EAAE;YACjD,SAAS,EAAE,SAAS,CAAC,OAAO;QACxC,CAAS,CAAC;IACV,CAAK,MACI;QACD,MAAM,IAAI,EAAE,CAAC;IACrB,CAAK;AACL,CAAC;AACD,SAAS,kBAAkB,CAAC,UAAU,EAAE,KAAK,EAAE;IAC3C,IAAI,SAAS,GAAG,IAAI,CAAC;IACrB,IAAI,kBAAkB,IAAI,KAAK,EAAE;QAC7B,UAAU,CAAC,KAAK,CAAC,gBAAgB,KAAK,cAAc,CAAC,CAAC;QACtD,SAAS,GAAG,IAAI,wBAAwB,EAAE,CAAC;IACnD,CAAK,MACI,IAAI,uBAAuB,IAAI,KAAK,EAAE;QACvC,MAAM,MAAM,GAAG,KAAK,CAAC,qBAAqB,CAAC,MAAM,IAAI,EAAE,CAAC;QACxD,SAAS,GAAG,IAAI,4BAA4B,CAAC,MAAM,CAAC,CAAC;IAC7D,CAAK,MACI,IAAI,oBAAoB,IAAI,KAAK,EAAE;QACpC,MAAM,MAAM,GAAG,KAAK,CAAC,kBAAkB,CAAC,MAAM,IAAI,EAAE,CAAC;QACrD,SAAS,GAAG,IAAI,6BAA6B,CAAC,MAAM,CAAC,CAAC;IAC9D,CAAK,MACI,IAAI,WAAW,IAAI,KAAK,EAAE;QAC3B,SAAS,GAAG,IAAI,kCAAkC,CAAC,UAAU,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;IACxF,CAAK,MACI;QACD,IAAI,EAAE,CAAC;IACf,CAAK;IACD,MAAM,SAAS,GAAG,WAAW,CAAC,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAChE,OAAO,IAAI,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AACpD,CAAC;AACD,SAAS,iBAAiB,CAAC,UAAU,EAAE,MAAM,EAAE;IAC3C,OAAO;QAAE,SAAS,EAAE;YAAC,WAAW,CAAC,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC;SAAC;IAAA,CAAE,CAAC;AACjE,CAAC;AACD,SAAS,mBAAmB,CAAC,eAAe,EAAE;IAC1C,MAAM,KAAK,GAAG,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/C,UAAU,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;IACxB,MAAM,IAAI,GAAG,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC1C,OAAO,aAAa,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC;AACD,SAAS,aAAa,CAAC,UAAU,EAAE,MAAM,EAAE;IAC3C,uEAAA;IACI,MAAM,MAAM,GAAG;QAAE,eAAe,EAAE,CAAA,CAAE;IAAA,CAAE,CAAC;IACvC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IACzB,IAAI,MAAM,CAAC,eAAe,KAAK,IAAI,EAAE;QACjC,MAAM,CAAC,MAAM,GAAG,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAC9C,MAAM,CAAC,eAAe,CAAC,IAAI,GAAG;YAC1B;gBACI,YAAY,EAAE,MAAM,CAAC,eAAe;gBACpC,cAAc,EAAE,IAAI;YACpC,CAAa;SACJ,CAAC;IACV,CAAK,MACI;QACD,MAAM,CAAC,MAAM,GAAG,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACxD,MAAM,CAAC,eAAe,CAAC,IAAI,GAAG;YAAC;gBAAE,YAAY,EAAE,IAAI,CAAC,WAAW,EAAE;YAAA,CAAE;SAAC,CAAC;IAC7E,CAAK;IACD,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACxC,IAAI,KAAK,EAAE;QACP,MAAM,CAAC,eAAe,CAAC,KAAK,GAAG,KAAK,CAAC;IAC7C,CAAK;IACD,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACxC,IAAI,OAAO,EAAE;QACT,MAAM,CAAC,eAAe,CAAC,OAAO,GAAG,OAAO,CAAC;IACjD,CAAK;IACD,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;IACrD,IAAI,KAAK,KAAK,IAAI,EAAE;QAChB,MAAM,CAAC,eAAe,CAAC,KAAK,GAAG,KAAK,CAAC;IAC7C,CAAK;IACD,IAAI,MAAM,CAAC,OAAO,EAAE;QAChB,MAAM,CAAC,eAAe,CAAC,OAAO,GAAG,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACzE,CAAK;IACD,IAAI,MAAM,CAAC,KAAK,EAAE;QACd,MAAM,CAAC,eAAe,CAAC,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACnE,CAAK;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,SAAS,4BAA4B,CAAC,UAAU,EAAE,MAAM,EAAE,UAAU,EAAE;IAClE,MAAM,WAAW,GAAG,aAAa,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,CAAA,CAAE,CAAC;IACpB,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,IAAI,cAAc,GAAG,CAAC,CAAC;IACvB,UAAU,CAAC,OAAO,EAAC,SAAS,IAAI;QACpC,qDAAA;QACA,0DAAA;QACA,0CAAA;QACQ,MAAM,WAAW,GAAG,CAAC,UAAU,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;QACpD,QAAQ,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC;QACxC,IAAI,SAAS,CAAC,aAAa,KAAK,OAAO,EAAE;YACrC,YAAY,CAAC,IAAI,CAAC;gBACd,KAAK,EAAE,WAAW;gBAClB,KAAK,EAAE,CAAA,CAAE;YACzB,CAAa,CAAC,CAAC;QACf,CAAS,MACI,IAAI,SAAS,CAAC,aAAa,KAAK,KAAK,EAAE;YACxC,YAAY,CAAC,IAAI,CAAC;gBACd,KAAK,EAAE,WAAW;gBAClB,GAAG,EAAE;oBACD,KAAK,EAAE,oBAAoB,CAAC,SAAS,CAAC,SAAS,CAAC;gBACpE,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,MACI,IAAI,SAAS,CAAC,aAAa,KAAK,KAAK,EAAE;YACxC,YAAY,CAAC,IAAI,CAAC;gBACd,KAAK,EAAE,WAAW;gBAClB,GAAG,EAAE;oBACD,KAAK,EAAE,oBAAoB,CAAC,SAAS,CAAC,SAAS,CAAC;gBACpE,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS;IACT,CAAK,CAAC,CAAC;IACH,OAAO;QACH,OAAO,EAAE;YACL,0BAA0B,EAAE;gBACxB,YAAY;gBACZ,eAAe,EAAE,WAAW,CAAC,eAAe;YAC5D,CAAa;YACD,MAAM,EAAE,WAAW,CAAC,MAAM;QACtC,CAAS;QACD,QAAQ;IAChB,CAAK,CAAC;AACN,CAAC;AACD,SAAS,yBAAyB,CAAC,MAAM,EAAE;IACvC,IAAI,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACxC,MAAM,KAAK,GAAG,MAAM,CAAC,eAAe,CAAC;IACrC,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IACrD,IAAI,eAAe,GAAG,IAAI,CAAC;IAC3B,IAAI,SAAS,GAAG,CAAC,EAAE;QACf,UAAU,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC;QAC5B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3B,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC;QAChD,CAAS,MACI;YACD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACjD,CAAS;IACT,CAAK;IACD,IAAI,QAAQ,GAAG,EAAE,CAAC;IAClB,IAAI,KAAK,CAAC,KAAK,EAAE;QACb,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAK;IACD,IAAI,OAAO,GAAG,EAAE,CAAC;IACjB,IAAI,KAAK,CAAC,OAAO,EAAE;QACf,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAK;IACD,IAAI,KAAK,GAAG,IAAI,CAAC;IACjB,IAAI,KAAK,CAAC,KAAK,EAAE;QACb,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAK;IACD,IAAI,OAAO,GAAG,IAAI,CAAC;IACnB,IAAI,KAAK,CAAC,OAAO,EAAE;QACf,OAAO,GAAG,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACnD,CAAK;IACD,IAAI,KAAK,GAAG,IAAI,CAAC;IACjB,IAAI,KAAK,CAAC,KAAK,EAAE;QACb,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAK;IACD,OAAO,QAAQ,CAAC,IAAI,EAAE,eAAe,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,CAAA,mBAAA,KAAwB,OAAO,EAAE,KAAK,CAAC,CAAC;AAChH,CAAC;AACD,SAAS,eAAe,CAAC,MAAM,EAAE;IAC7B,OAAO,aAAa,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC,CAAC;AAC5D,CAAC;AACD,SAAS,qBAAqB,CAAC,UAAU,EAAE,UAAU,EAAE;IACnD,MAAM,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC1C,IAAI,KAAK,IAAI,IAAI,EAAE;QACf,OAAO,IAAI,CAAC;IACpB,CAAK,MACI;QACD,OAAO;YACH,kBAAkB,EAAE,KAAK;QACrC,CAAS,CAAC;IACV,CAAK;AACL,CAAC;AACD,SAAS,OAAO,CAAC,OAAO,EAAE;IACtB,OAAQ,OAAO;QACX,KAAK,qBAAqB,CAAA,wBAAA;YACtB,OAAO,IAAI,CAAC;QAChB,KAAK,sCAAsC,CAAA,yCAAA;YACvC,OAAO,2BAA2B,CAAC;QACvC,KAAK,2CAA2C,CAAA,8CAAA;YAC5C,OAAO,iCAAiC,CAAC;QAC7C,KAAK,8BAA8B,CAAA,iCAAA;YAC/B,OAAO,gBAAgB,CAAC;QAC5B;YACI,OAAO,IAAI,EAAE,CAAC;IAC1B,CAAK;AACL,CAAC;AACD,SAAS,QAAQ,CAAC,UAAU,EAAE,UAAU,EAAE;IACtC,IAAI,MAAM,CAAC;IACX,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IACjC,IAAI,sBAAsB,CAAC,MAAM,CAAC,EAAE;QAChC,MAAM,GAAG;YAAE,SAAS,EAAE,iBAAiB,CAAC,UAAU,EAAE,MAAM,CAAC;QAAA,CAAE,CAAC;IACtE,CAAK,MACI;QACD,MAAM,GAAG;YAAE,KAAK,EAAE,aAAa,CAAC,UAAU,EAAE,MAAM,CAAC;QAAA,CAAE,CAAC;IAC9D,CAAK;IACD,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;IACtC,IAAI,UAAU,CAAC,WAAW,CAAC,mBAAmB,EAAE,GAAG,CAAC,EAAE;QAClD,MAAM,CAAC,WAAW,GAAG,OAAO,CAAC,UAAU,EAAE,UAAU,CAAC,WAAW,CAAC,CAAC;QACjE,MAAM,aAAa,GAAG,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,aAAa,CAAC,CAAC;QACzE,IAAI,aAAa,KAAK,IAAI,EAAE;YACxB,MAAM,CAAC,aAAa,GAAG,aAAa,CAAC;QACjD,CAAS;IACT,CAAK,MACI,IAAI,UAAU,CAAC,eAAe,CAAC,SAAS,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE;QAC9E,8EAAA;QACA,2EAAA;QACA,qBAAA;QACQ,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC,UAAU,EAAE,UAAU,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC,CAAC;QACpF,MAAM,aAAa,GAAG,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,aAAa,CAAC,CAAC;QACzE,IAAI,aAAa,KAAK,IAAI,EAAE;YACxB,MAAM,CAAC,aAAa,GAAG,aAAa,CAAC;QACjD,CAAS;IACT,CAAK;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,SAAS,SAAS,CAAC,OAAO,EAAE;IACxB,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,OAAO;IACf,CAAK;IACD,OAAO,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAA,yBAAA,GAA6B,CAAC,CAAC;AACxF,CAAC;AACD,SAAS,WAAW,CAAC,MAAM,EAAE;IACzB,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;IAClC,IAAI,MAAM,YAAY,eAAe,IACjC,gCAAgC,CAAC,MAAM,CAAC,EAAE;QAC1C,OAAO,MAAM,CAAC,UAAU,EAAE,CAAC;IACnC,CAAK;IACD,OAAO;QAAC,MAAM;KAAC,CAAC;AACpB,CAAC;AACD,SAAS,UAAU,CAAC,MAAM,EAAE;IACxB,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE;QAClC,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC;IACvC,CAAK,MACI,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE;QACvC,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC;IACvC,CAAK,MACI,IAAI,MAAM,CAAC,eAAe,KAAK,SAAS,EAAE;QAC3C,OAAO,mBAAmB,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AACD,SAAS,OAAO,CAAC,QAAQ,EAAE;IACvB,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,OAAO;IACf,CAAK;IACD,OAAO,QAAQ,CAAC,GAAG,EAAC,KAAK,GAAI,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;AACzD,CAAC;AACD,SAAS,SAAS,CAAC,QAAQ,EAAE;IACzB,OAAO,QAAQ,CAAC,GAAG,EAAC,KAAK,GAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3D,CAAC;AACD,SAAS,eAAe,CAAC,MAAM,EAAE;IAC7B,OAAO;QACH,MAAM,EAAE,MAAM,CAAC,SAAS;QACxB,MAAM,EAAE,MAAM,CAAC,QAAQ;IAC/B,CAAK,CAAC;AACN,CAAC;AACD,SAAS,aAAa,CAAC,MAAM,EAAE;IAC3B,OAAO;QACH,MAAM,EAAE,CAAC,MAAM,CAAC,SAAS;QACzB,MAAM,EAAE,MAAM,CAAC,QAAQ;IAC/B,CAAK,CAAC;AACN,CAAC;AACD,SAAS,iBAAiB,CAAC,MAAM,EAAE;IAC/B,MAAM,SAAS,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;IAClC,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;IACrC,OAAO,IAAI,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AAC1C,CAAC;AACD,SAAS,eAAe,CAAC,MAAM,EAAE;IAC7B,MAAM,SAAS,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;IACjC,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;IACrC,OAAO,IAAI,KAAK,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AAC1C,CAAC;AACD,sBAAA;AACA,SAAS,WAAW,CAAC,GAAG,EAAE;IACtB,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;AAC3B,CAAC;AACD,sBAAA;AACA,SAAS,aAAa,CAAC,GAAG,EAAE;IACxB,OAAQ,GAAG;QACP,KAAK,WAAW;YACZ,OAAO,KAAK,CAAA,uBAAA,GAA2B;QAC3C,KAAK,YAAY;YACb,OAAO,MAAM,CAAA,wBAAA,GAA4B;QAC7C;YACI,OAAO,SAAS,CAAC;IAC7B,CAAK;AACL,CAAC;AACD,sBAAA;AACA,SAAS,cAAc,CAAC,EAAE,EAAE;IACxB,OAAO,SAAS,CAAC,EAAE,CAAC,CAAC;AACzB,CAAC;AACD,SAAS,uBAAuB,CAAC,EAAE,EAAE;IACjC,OAAO,mBAAmB,CAAC,EAAE,CAAC,CAAC;AACnC,CAAC;AACD,SAAS,gBAAgB,CAAC,EAAE,EAAE;IAC1B,OAAQ,EAAE;QACN,KAAK,OAAO;YACR,OAAO,IAAI,CAAA,kBAAA,GAAsB;QACrC,KAAK,WAAW;YACZ,OAAO,IAAI,CAAA,sBAAA,GAA0B;QACzC,KAAK,cAAc;YACf,OAAO,GAAG,CAAA,yBAAA,GAA6B;QAC3C,KAAK,uBAAuB;YACxB,OAAO,IAAI,CAAA,kCAAA,GAAsC;QACrD,KAAK,WAAW;YACZ,OAAO,GAAG,CAAA,sBAAA,GAA0B;QACxC,KAAK,oBAAoB;YACrB,OAAO,IAAI,CAAA,+BAAA,GAAmC;QAClD,KAAK,gBAAgB;YACjB,OAAO,gBAAgB,CAAA,2BAAA,GAA+B;QAC1D,KAAK,IAAI;YACL,OAAO,IAAI,CAAA,eAAA,GAAmB;QAClC,KAAK,QAAQ;YACT,OAAO,QAAQ,CAAA,mBAAA,GAAuB;QAC1C,KAAK,oBAAoB;YACrB,OAAO,oBAAoB,CAAA,+BAAA,GAAmC;QAClE,KAAK,sBAAsB;YACvB,OAAO,IAAI,EAAE,CAAC;QAClB;YACI,OAAO,IAAI,EAAE,CAAC;IAC1B,CAAK;AACL,CAAC;AACD,SAAS,yBAAyB,CAAC,EAAE,EAAE;IACnC,OAAQ,EAAE;QACN,KAAK,KAAK;YACN,OAAO,KAAK,CAAA,yBAAA,GAA6B;QAC7C,KAAK,IAAI;YACL,OAAO,IAAI,CAAA,wBAAA,GAA4B;QAC3C;YACI,OAAO,IAAI,EAAE,CAAC;IAC1B,CAAK;AACL,CAAC;AACD,SAAS,oBAAoB,CAAC,IAAI,EAAE;IAChC,OAAO;QAAE,SAAS,EAAE,IAAI,CAAC,eAAe,EAAE;IAAA,CAAE,CAAC;AACjD,CAAC;AACD,SAAS,sBAAsB,CAAC,cAAc,EAAE;IAC5C,OAAO,WAAW,CAAC,gBAAgB,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;AAClE,CAAC;AACD,sBAAA;AACA,SAAS,eAAe,CAAC,OAAO,EAAE;IAC9B,OAAO;QACH,KAAK,EAAE,oBAAoB,CAAC,OAAO,CAAC,KAAK,CAAC;QAC1C,SAAS,EAAE,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC;IAC3C,CAAK,CAAC;AACN,CAAC;AACD,SAAS,iBAAiB,CAAC,OAAO,EAAE;IAChC,OAAO,IAAI,OAAO,CAAC,sBAAsB,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;AAChG,CAAC;AACD,sBAAA;AACA,SAAS,QAAQ,CAAC,MAAM,EAAE;IACtB,IAAI,MAAM,YAAY,WAAW,EAAE;QAC/B,OAAO,oBAAoB,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAK,MACI,IAAI,MAAM,YAAY,eAAe,EAAE;QACxC,OAAO,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACzC,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AACD,SAAS,iBAAiB,CAAC,MAAM,EAAE;IAC/B,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,GAAG,EAAC,MAAM,GAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACnE,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;IACzB,CAAK;IACD,OAAO;QACH,eAAe,EAAE;YACb,EAAE,EAAE,uBAAuB,CAAC,MAAM,CAAC,EAAE,CAAC;YACtC,OAAO,EAAE,MAAM;QAC3B,CAAS;IACT,CAAK,CAAC;AACN,CAAC;AACD,SAAS,oBAAoB,CAAC,MAAM,EAAE;IAClC,IAAI,MAAM,CAAC,EAAE,KAAK,IAAI,CAAA,kBAAA,KAAuB;QACzC,IAAI,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC1B,OAAO;gBACH,WAAW,EAAE;oBACT,KAAK,EAAE,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC;oBACzC,EAAE,EAAE,QAAQ;gBAChC,CAAiB;YACjB,CAAa,CAAC;QACd,CAAS,MACI,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAChC,OAAO;gBACH,WAAW,EAAE;oBACT,KAAK,EAAE,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC;oBACzC,EAAE,EAAE,SAAS;gBACjC,CAAiB;YACjB,CAAa,CAAC;QACd,CAAS;IACT,CAAK,MACI,IAAI,MAAM,CAAC,EAAE,KAAK,IAAI,CAAA,sBAAA,KAA2B;QAClD,IAAI,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC1B,OAAO;gBACH,WAAW,EAAE;oBACT,KAAK,EAAE,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC;oBACzC,EAAE,EAAE,YAAY;gBACpC,CAAiB;YACjB,CAAa,CAAC;QACd,CAAS,MACI,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAChC,OAAO;gBACH,WAAW,EAAE;oBACT,KAAK,EAAE,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC;oBACzC,EAAE,EAAE,aAAa;gBACrC,CAAiB;YACjB,CAAa,CAAC;QACd,CAAS;IACT,CAAK;IACD,OAAO;QACH,WAAW,EAAE;YACT,KAAK,EAAE,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC;YACzC,EAAE,EAAE,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC;YAC7B,KAAK,EAAE,MAAM,CAAC,KAAK;QAC/B,CAAS;IACT,CAAK,CAAC;AACN,CAAC;AACD,SAAS,eAAe,CAAC,MAAM,EAAE;IAC7B,OAAQ,MAAM,CAAC,WAAW,CAAC,EAAE;QACzB,KAAK,QAAQ;YACT,MAAM,QAAQ,GAAG,sBAAsB,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAClE,OAAO,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAA,kBAAA,KAAuB;gBAC3D,WAAW,EAAE,GAAG;YAChC,CAAa,CAAC,CAAC;QACP,KAAK,SAAS;YACV,MAAM,SAAS,GAAG,sBAAsB,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACnE,OAAO,WAAW,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAA,kBAAA,KAAuB;gBAC5D,SAAS,EAAE,YAAY;YACvC,CAAa,CAAC,CAAC;QACP,KAAK,YAAY;YACb,MAAM,WAAW,GAAG,sBAAsB,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACrE,OAAO,WAAW,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAA,sBAAA,KAA2B;gBAClE,WAAW,EAAE,GAAG;YAChC,CAAa,CAAC,CAAC;QACP,KAAK,aAAa;YACd,MAAM,YAAY,GAAG,sBAAsB,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACtE,OAAO,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAA,sBAAA,KAA2B;gBACnE,SAAS,EAAE,YAAY;YACvC,CAAa,CAAC,CAAC;QACP,KAAK,sBAAsB;YACvB,OAAO,IAAI,EAAE,CAAC;QAClB;YACI,OAAO,IAAI,EAAE,CAAC;IAC1B,CAAK;AACL,CAAC;AACD,SAAS,eAAe,CAAC,MAAM,EAAE;IAC7B,OAAO,WAAW,CAAC,MAAM,CAAC,sBAAsB,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,gBAAgB,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACnJ,CAAC;AACD,SAAS,mBAAmB,CAAC,MAAM,EAAE;IACjC,OAAO,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,yBAAyB,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1J,CAAC;AACD,SAAS,cAAc,CAAC,SAAS,EAAE;IAC/B,MAAM,eAAe,GAAG,EAAE,CAAC;IAC3B,SAAS,CAAC,MAAM,CAAC,OAAO,EAAC,KAAK,GAAI,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;IACjF,OAAO;QACH,UAAU,EAAE,eAAe;IACnC,CAAK,CAAC;AACN,CAAC;AACD,SAAS,gBAAgB,CAAC,KAAK,EAAE;IAC7B,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,IAAI,EAAE,CAAC;IACrC,OAAO,IAAI,SAAS,CAAC,KAAK,CAAC,GAAG,EAAC,IAAI,GAAI,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAChF,CAAC;AACD,SAAS,mBAAmB,CAAC,IAAI,EAAE;IACnC,sEAAA;IACI,OAAQ,IAAI,CAAC,MAAM,IAAI,CAAC,IACpB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,UAAU,IAC1B,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,WAAW,EAAE;AACrC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,MAAM,UAAU,CAAC;IACb,WAAW,CACf,kCAAA,GACI,MAAM,EACV;;;KAGA,GACI,QAAQ,EACZ,+BAAA,GACI,OAAO,EACX;;;KAGA,GACI,cAAc,EAClB,sDAAA,GACI,eAAe,GAAG,eAAe,CAAC,GAAG,EAAE,EAC3C;;;KAGA,GACI,4BAA4B,GAAG,eAAe,CAAC,GAAG,EAAE,EACxD;;;;;KAKA,GACI,WAAW,GAAG,UAAU,CAAC,iBAAiB,EAC9C;;;;KAIA,GACI,aAAa,GAAG,IAAI,CAAE;QAClB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,4BAA4B,GAAG,4BAA4B,CAAC;QACjE,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IAC3C,CAAK;IACL,wEAAA,GACI,kBAAkB,CAAC,cAAc,EAAE;QAC/B,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,cAAc,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,4BAA4B,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACvL,CAAK;IACL;;;KAGA,GACI,eAAe,CAAC,WAAW,EAAE,eAAe,EAAE;QAC1C,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE,eAAe,EAAE,IAAI,CAAC,4BAA4B,EAAE,WAAW,EAC5J,kBAAA,GAA6B,IAAI,CAAC,CAAC;IACnC,CAAK;IACL;;KAEA,GACI,iBAAiB,CAAC,aAAa,EAAE;QAC7B,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,4BAA4B,EAAE,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IACvL,CAAK;IACL;;;KAGA,GACI,gCAAgC,CAAC,4BAA4B,EAAE;QAC3D,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,eAAe,EAAE,4BAA4B,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACvL,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,oDAAA,GACA,MAAM,eAAe,CAAC;IAClB,WAAW,CAAC,gBAAgB,CAAE;QAC1B,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IACjD,CAAK;AACL,CAAC;AACD,kEAAA,GACA,SAAS,oBAAoB,CAAC,eAAe,EAAE,SAAS,EAAE;IACtD,IAAI,GAAG,CAAC;IACR,IAAI,SAAS,CAAC,QAAQ,EAAE;QACpB,GAAG,GAAG,YAAY,CAAC,eAAe,CAAC,gBAAgB,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;IACpH,CAAK,MACI,IAAI,SAAS,CAAC,UAAU,EAAE;QAC3B,MAAM,GAAG,GAAG,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAChE,MAAM,OAAO,GAAG,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC/D,GAAG,GAAG,eAAe,CAAC,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAClD,IAAI,SAAS,CAAC,qBAAqB,EAAE;YACjC,GAAG,CAAC,wBAAwB,EAAE,CAAC;QAC3C,CAAS;IACT,CAAK,MACI,IAAI,SAAS,CAAC,eAAe,EAAE;QAChC,MAAM,GAAG,GAAG,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACrE,MAAM,OAAO,GAAG,eAAe,CAAC,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACnE,GAAG,GAAG,eAAe,CAAC,kBAAkB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC/D,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;IACD,IAAI,SAAS,CAAC,QAAQ,EAAE;QACpB,GAAG,CAAC,WAAW,CAAC,kBAAkB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;IAChE,CAAK;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AACD,4CAAA,GACA,SAAS,kBAAkB,CAAC,eAAe,EAAE,QAAQ,EAAE;IACnD,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;IACzB,MAAM,SAAS,GAAG;QACd,UAAU,EAAE,GAAG,CAAC,iBAAiB,EAAE,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE;QACvD,eAAe,EAAE,GAAG,CAAC,eAAe;QACpC,UAAU,EAAE,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE;QAClC,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC7C,qBAAqB,EAAE,QAAQ,CAAC,qBAAqB;IAC7D,CAAK,CAAC;IACF,IAAI,QAAQ,CAAC,eAAe,EAAE,EAAE;QAC5B,SAAS,CAAC,QAAQ,GAAG,UAAU,CAAC,eAAe,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IACpF,CAAK,MACI,IAAI,QAAQ,CAAC,YAAY,EAAE,EAAE;QAC9B,SAAS,CAAC,UAAU,GAAG;YACnB,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE;YACxB,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC;QACrD,CAAS,CAAC;IACV,CAAK,MACI,IAAI,QAAQ,CAAC,iBAAiB,EAAE,EAAE;QACnC,SAAS,CAAC,eAAe,GAAG;YACxB,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE;YACxB,OAAO,EAAE,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC;QACpD,CAAS,CAAC;IACV,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;IACD,OAAO,SAAS,CAAC;AACrB,CAAC;AACD,SAAS,gBAAgB,CAAC,eAAe,EAAE;IACvC,MAAM,SAAS,GAAG,eAAe,CAAC,WAAW,EAAE,CAAC;IAChD,OAAO;QAAC,SAAS,CAAC,OAAO;QAAE,SAAS,CAAC,WAAW;KAAC,CAAC;AACtD,CAAC;AACD,SAAS,kBAAkB,CAAC,cAAc,EAAE;IACxC,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IACtE,OAAO,eAAe,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AACpD,CAAC;AACD,SAAS,aAAa,CAAC,eAAe,EAAE;IACpC,MAAM,SAAS,GAAG,eAAe,CAAC,WAAW,EAAE,CAAC;IAChD,OAAO;QAAE,OAAO,EAAE,SAAS,CAAC,OAAO;QAAE,WAAW,EAAE,SAAS,CAAC,WAAW;IAAA,CAAE,CAAC;AAC9E,CAAC;AACD,SAAS,eAAe,CAAC,WAAW,EAAE;IAClC,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;IAC9E,OAAO,eAAe,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AACpD,CAAC;AACD,2EAAA,GACA,SAAS,iBAAiB,CAAC,eAAe,EAAE,MAAM,EAAE,KAAK,EAAE;IACvD,MAAM,uBAAuB,GAAG,KAAK,CAAC,aAAa,CAAC,GAAG,EAAC,CAAC,GAAI,UAAU,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9G,MAAM,mBAAmB,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,EAAC,CAAC,GAAI,UAAU,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC;IACtG,OAAO;QACH,MAAM;QACN,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,gBAAgB,EAAE,KAAK,CAAC,cAAc,CAAC,QAAQ,EAAE;QACjD,aAAa,EAAE,uBAAuB;QACtC,SAAS,EAAE,mBAAmB;IACtC,CAAK,CAAC;AACN,CAAC;AACD,mDAAA,GACA,SAAS,mBAAmB,CAAC,eAAe,EAAE,OAAO,EAAE;IACnD,MAAM,aAAa,GAAG,CAAC,OAAO,CAAC,aAAa,IAAI,EAAE,EAAE,GAAG,EAAC,CAAC,GAAI,YAAY,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC;IACpH,uEAAA;IACA,wEAAA;IACA,2EAAA;IACA,wCAAA;IACA,0EAAA;IACI,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC,CAAE;QACnD,MAAM,eAAe,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,YAAY,GAAG,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,IACjD,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC;QACrD,IAAI,YAAY,EAAE;YACd,MAAM,iBAAiB,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACnD,eAAe,CAAC,gBAAgB,GAC5B,iBAAiB,CAAC,SAAS,CAAC,eAAe,CAAC;YAChD,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YACnC,EAAE,CAAC,CAAC;QAChB,CAAS;IACT,CAAK;IACD,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,EAAC,CAAC,GAAI,YAAY,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC;IAChG,MAAM,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACjE,OAAO,IAAI,aAAa,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;AACnF,CAAC;AACD,uCAAA,GACA,SAAS,YAAY,CAAC,QAAQ,EAAE;IAC5B,MAAM,OAAO,GAAG,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACnD,MAAM,4BAA4B,GAAG,QAAQ,CAAC,4BAA4B,KAAK,SAAS,GAClF,eAAe,CAAC,QAAQ,CAAC,4BAA4B,CAAC,GACtD,eAAe,CAAC,GAAG,EAAE,CAAC;IAC5B,IAAI,MAAM,CAAC;IACX,IAAI,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QACjC,MAAM,GAAG,mBAAmB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACrD,CAAK,MACI;QACD,MAAM,GAAG,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACjD,CAAK;IACD,OAAO,IAAI,UAAU,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,EAAE,qBAAqB,CAAA,wBAAA,KAA6B,QAAQ,CAAC,wBAAwB,EAAE,OAAO,EAAE,4BAA4B,EAAE,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;AACpO,CAAC;AACD,4DAAA,GACA,SAAS,UAAU,CAAC,eAAe,EAAE,UAAU,EAAE;IAC7C,MAAM,WAAW,GAAG,aAAa,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;IAC9D,MAAM,wBAAwB,GAAG,aAAa,CAAC,UAAU,CAAC,4BAA4B,CAAC,CAAC;IACxF,IAAI,UAAU,CAAC;IACf,IAAI,sBAAsB,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;QAC3C,UAAU,GAAG,iBAAiB,CAAC,eAAe,CAAC,gBAAgB,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;IAC5F,CAAK,MACI;QACD,UAAU,GAAG,aAAa,CAAC,eAAe,CAAC,gBAAgB,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;IACxF,CAAK;IACL,qEAAA;IACA,6CAAA;IACI,MAAM,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;IAC1D,4DAAA;IACI,OAAO;QACH,QAAQ,EAAE,UAAU,CAAC,QAAQ;QAC7B,WAAW,EAAE,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC;QAC9C,QAAQ,EAAE,WAAW;QACrB,WAAW;QACX,wBAAwB,EAAE,UAAU,CAAC,cAAc;QACnD,4BAA4B,EAAE,wBAAwB;QACtD,KAAK,EAAE,UAAU;IACzB,CAAK,CAAC;AACN,CAAC;AACD;;CAEA,GACA,SAAS,eAAe,CAAC,OAAO,EAAE;IAC9B,OAAO,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC;AAC3C,CAAC;AACD,mDAAA,GACA,SAAS,YAAY,CAAC,QAAQ,EAAE;IAC5B,OAAO;QACH,EAAE,EAAE,QAAQ,CAAC,QAAQ;QACrB,UAAU,EAAE,eAAe,CAAC,QAAQ,CAAC,UAAU,CAAC;QAChD,OAAO,EAAE,QAAQ,CAAC,OAAO;IACjC,CAAK,CAAC;AACN,CAAC;AACD,4CAAA,GACA,SAAS,UAAU,CAAC,QAAQ,EAAE;IAC1B,OAAO;QACH,QAAQ,EAAE,QAAQ,CAAC,EAAE;QACrB,UAAU,EAAE,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC3D,OAAO,EAAE,QAAQ,CAAC,OAAO;IACjC,CAAK,CAAC;AACN,CAAC;AACD,4CAAA,GACA,SAAS,gBAAgB,CAAC,YAAY,EAAE;IACpC,OAAO;QACH,IAAI,EAAE,YAAY,CAAC,IAAI;QACvB,KAAK,EAAE,gBAAgB,CAAC,YAAY,CAAC,YAAY,CAAC;QAClD,QAAQ,EAAE,eAAe,CAAC,YAAY,CAAC,QAAQ,CAAC;IACxD,CAAK,CAAC;AACN,CAAC;AACD,gEAAA,GACA,SAAS,cAAc,CAAC,KAAK,EAAE;IAC3B,OAAO;QACH,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,QAAQ,EAAE,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACpD,YAAY,EAAE,KAAK,CAAC,YAAY;IACxC,CAAK,CAAC;AACN,CAAC;AACD;;;;;CAKA,GACA,SAAS,gBAAgB,CAAC,YAAY,EAAE;IACpC,MAAM,KAAK,GAAG,yBAAyB,CAAC;QACpC,MAAM,EAAE,YAAY,CAAC,MAAM;QAC3B,eAAe,EAAE,YAAY,CAAC,eAAe;IACrD,CAAK,CAAC,CAAC;IACH,IAAI,YAAY,CAAC,SAAS,KAAK,MAAM,EAAE;QACnC,OAAO,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,GAAG,CAAA,kBAAA,GAAsB,CAAC;IAC5E,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AACD,oEAAA,GACA,SAAS,mBAAmB,CAAC,UAAU,EAAE;IACrC,OAAO;QACH,IAAI,EAAE,UAAU,CAAC,IAAI;QACrB,KAAK,EAAE,gBAAgB,CAAC,UAAU,CAAC,YAAY,CAAC;QAChD,QAAQ,EAAE,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC;IAClD,CAAK,CAAC;AACN,CAAC;AACD,iEAAA,GACA,SAAS,kBAAkB,CAAC,QAAQ,EAAE;IAClC,OAAO;QACH,EAAE,EAAE,QAAQ,CAAC,EAAE;QACf,OAAO,EAAE,QAAQ,CAAC,OAAO;QACzB,UAAU,EAAE,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC;IACpD,CAAK,CAAC;AACN,CAAC;AACD,mEAAA,GACA,SAAS,qBAAqB,CAAC,eAAe,EAAE,iBAAiB,EAAE;IAC/D,OAAO,IAAI,OAAO,CAAC,iBAAiB,CAAC,cAAc,EAAE,YAAY,CAAC,eAAe,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,eAAe,CAAC,CAAC,CAAC;AAC5I,CAAC;AACD,qEAAA,GACA,SAAS,mBAAmB,CAAC,eAAe,EAAE,MAAM,EAAE,OAAO,EAAE;IAC3D,MAAM,CAAC,CAAC,EAAE,cAAc,EAAE,UAAU,CAAC,GAAG,sBAAsB,CAAC,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC7F,OAAO;QACH,MAAM;QACN,cAAc;QACd,UAAU;QACV,eAAe,EAAE,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,EAAE;QAC1D,cAAc,EAAE,OAAO,CAAC,cAAc;QACtC,eAAe,EAAE,UAAU,CAAC,eAAe,CAAC,gBAAgB,EAAE,OAAO,CAAC,QAAQ,CAAC;IACvF,CAAK,CAAC;AACN,CAAC;AACD;;;CAGA,GACA,SAAS,sBAAsB,CAAC,MAAM,EAAE,MAAM,EAAE;IAC5C,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;IACxC,MAAM,cAAc,GAAG,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACjE,OAAO;QAAC,MAAM;QAAE,cAAc;QAAE,KAAK;KAAC,CAAC;AAC3C,CAAC;AACD,SAAS,sBAAsB,CAAC,KAAK,EAAE;IACnC,OAAO;QACH,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,eAAe,EAAE,KAAK,CAAC,eAAe;QACtC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,EAAC,CAAC,GAAI;gBAAC,CAAC,CAAC,SAAS,CAAC,eAAe,EAAE;gBAAE,CAAC,CAAC,IAAI;aAAC,CAAC;IAC9E,CAAK,CAAC;AACN,CAAC;AACD,SAAS,wBAAwB,CAAC,KAAK,EAAE,KAAK,EAAE;IAC5C,MAAM,YAAY,GAAG,KAAK,GACpB,IAAI,UAAU,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAI,WAAW,CAAC,kBAAkB,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC,GACpK,UAAU,CAAC,KAAK,EAAE,CAAC;IACzB,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,GAAK,IAAI,YAAY,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACjI,OAAO,IAAI,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,eAAe,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC;AAC/F,CAAC;AACD,SAAS,cAAc,CAAC,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,MAAM,EAAE;IAC3D,OAAO;QACH,OAAO;QACP,GAAG,EAAE,IAAI,CAAC,GAAG,IAAI,EAAE;QACnB,cAAc;QACd,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC;QACxC,WAAW,EAAE,kBAAkB,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;QACxD,cAAc,EAAE,MAAM,CAAC,cAAc;IAC7C,CAAK,CAAC;AACN,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,oBAAoB,CAAC;IACvB,iBAAiB,CAAC,WAAW,EAAE,QAAQ,EAAE;QACrC,OAAO,YAAY,CAAC,WAAW,CAAC,CAC3B,GAAG,CAAC,QAAQ,CAAC,CACb,IAAI,EAAC,MAAM,IAAI;YAChB,IAAI,MAAM,EAAE;gBACR,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC;YAC5C,CAAa;YACD,OAAO,SAAS,CAAC;QAC7B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,kBAAkB,CAAC,WAAW,EAAE,cAAc,EAAE;QAC5C,OAAO,YAAY,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;IACzE,CAAK;IACD,aAAa,CAAC,WAAW,EAAE,SAAS,EAAE;QAClC,OAAO,iBAAiB,CAAC,WAAW,CAAC,CAChC,GAAG,CAAC,SAAS,CAAC,CACd,IAAI,EAAC,KAAK,IAAI;YACf,IAAI,KAAK,EAAE;gBACP,OAAO,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAC/C,CAAa;YACD,OAAO,SAAS,CAAC;QAC7B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,cAAc,CAAC,WAAW,EAAE,KAAK,EAAE;QAC/B,OAAO,iBAAiB,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;IACzE,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,YAAY,CAAC,GAAG,EAAE;IACvB,OAAO,QAAQ,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;AACxC,CAAC;AACD;;CAEA,GACA,SAAS,iBAAiB,CAAC,GAAG,EAAE;IAC5B,OAAO,QAAQ,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;AAC5C,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,MAAM,6BAA6B,CAAC;IACpC;;;KAGA,GACI,WAAW,CAAC,UAAU,EAAE,MAAM,CAAE;QAC5B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,CAAK;IACD,OAAO,OAAO,CAAC,UAAU,EAAE,IAAI,EAAE;QAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC;QAC9B,OAAO,IAAI,6BAA6B,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACrE,CAAK;IACD,UAAU,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,OAAO,oBAAoB,CAAC,WAAW,CAAC,CACnC,GAAG,CAAC,sBAAsB,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAC7C,IAAI,EAAC,SAAS,IAAI;YACnB,IAAI,SAAS,EAAE;gBACX,OAAO,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;YACzE,CAAa;YACD,OAAO,IAAI,CAAC;QACxB,CAAS,CAAC,CAAC;IACX,CAAK;IACD,WAAW,CAAC,WAAW,EAAE,IAAI,EAAE;QAC3B,MAAM,MAAM,GAAG,aAAa,EAAE,CAAC;QAC/B,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,GAAG,KAAK;YAC7C,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI;gBACrD,IAAI,OAAO,KAAK,IAAI,EAAE;oBAClB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;gBAC7C,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC,IAAI,CAAC,IAAM,MAAM,CAAC,CAAC;IAC9B,CAAK;IACD,YAAY,CAAC,WAAW,EAAE,cAAc,EAAE,QAAQ,EAAE;QAChD,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,KAAK;YAC9B,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;YACtD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC;QAClE,CAAS,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAK;IACD,wBAAwB,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,EAAE;QACzD,MAAM,eAAe,GAAG,IAAI,GAAG,EAAE,CAAC;QAC1C,0CAAA;QACQ,YAAY,CAAC,OAAO,EAAC,GAAG,GAAI,eAAe,CAAC,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9F,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,eAAe,CAAC,OAAO,EAAC,cAAc,IAAI;YACtC,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;gBAAC,IAAI,CAAC,MAAM;gBAAE,cAAc;gBAAE,OAAO;aAAC,EAAE;gBAAC,IAAI,CAAC,MAAM;gBAAE,cAAc;gBAAE,OAAO,GAAG,CAAC;aAAC,EAC9H,YAAA,GAA2B,KAAK,EAChC,YAAA,GAA2B,IAAI,CAAC,CAAC;YACrB,QAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC,CAAC;QAC3H,CAAS,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAK;IACD,wBAAwB,CAAC,WAAW,EAAE,UAAU,EAAE,YAAY,EAAE;QAC5D,MAAM,MAAM,GAAG,aAAa,EAAE,CAAC;QAC/B,MAAM,cAAc,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAC;QAC9D,uEAAA;QACA,oBAAA;QACQ,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;YAAC,IAAI,CAAC,MAAM;YAAE,cAAc;YAAE,YAAY;SAAC,EAAE;YAAC,IAAI,CAAC,MAAM;YAAE,cAAc;YAAE,MAAM,CAAC,iBAAiB;SAAC,EAC5I,YAAA,GAAuB,IAAI,CAAC,CAAC;QACrB,OAAO,oBAAoB,CAAC,WAAW,CAAC,CACnC,OAAO,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAC3D,IAAI,EAAC,UAAU,IAAI;YACpB,KAAK,MAAM,SAAS,IAAI,UAAU,CAAE;gBAChC,MAAM,OAAO,GAAG,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;gBAClE,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,CAAC;YACtD,CAAa;YACD,OAAO,MAAM,CAAC;QAC1B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,6BAA6B,CAAC,WAAW,EAAE,eAAe,EAAE,YAAY,EAAE,KAAK,EAAE;QAC7E,MAAM,MAAM,GAAG,aAAa,EAAE,CAAC;QAC/B,IAAI,cAAc,GAAG,SAAS,CAAC;QACvC,uEAAA;QACA,oBAAA;QACQ,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;YAAC,IAAI,CAAC,MAAM;YAAE,eAAe;YAAE,YAAY;SAAC,EAAE;YAAC,IAAI,CAAC,MAAM;YAAE,eAAe;YAAE,MAAM,CAAC,iBAAiB;SAAC,EAC9I,YAAA,GAAuB,IAAI,CAAC,CAAC;QACrB,OAAO,oBAAoB,CAAC,WAAW,CAAC,CACnC,OAAO,CAAC;YACT,KAAK,EAAE,4CAA4C;YACnD,KAAK;QACjB,CAAS,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,OAAO,KAAK;YACtC,oEAAA;YACA,sEAAA;YACA,mEAAA;YACA,gEAAA;YACY,MAAM,OAAO,GAAG,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;YAClE,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,KAAK,IACrB,OAAO,CAAC,cAAc,KAAK,cAAc,EAAE;gBAC3C,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,CAAC;gBACtC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;YACxD,CAAa,MACI;gBACD,OAAO,CAAC,IAAI,EAAE,CAAC;YAC/B,CAAa;QACb,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,MAAM,CAAC,CAAC;IAChC,CAAK;IACD,WAAW,CAAC,WAAW,EAAE,OAAO,EAAE;QAC9B,OAAO,oBAAoB,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;IACjH,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,oBAAoB,CAAC,GAAG,EAAE;IAC/B,OAAO,QAAQ,CAAC,GAAG,EAAE,sBAAsB,CAAC,CAAC;AACjD,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,uEAAA;AACA,yBAAA;AACA,MAAM,eAAe,GAAG,CAAC,CAAC;AAC1B,MAAM,kBAAkB,GAAG,EAAE,CAAC;AAC9B,MAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,MAAM,oBAAoB,GAAG,EAAE,CAAC;AAChC,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,MAAM,eAAe,GAAG,EAAE,CAAC;AAC3B,MAAM,oBAAoB,GAAG,EAAE,CAAC;AAChC,MAAM,mBAAmB,GAAG,EAAE,CAAC;AAC/B,MAAM,gBAAgB,GAAG,EAAE,CAAC;AAC5B,MAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,MAAM,4BAA4B,GAAG,EAAE,CAAC;AACxC,0EAAA;AACA,mDAAA;AACA,MAAM,aAAa,GAAG,CAAC,CAAC;AACxB,mCAAA,GACA,MAAM,yBAAyB,CAAC;IAC5B,WAAW,EAAG,CAAA,CAAG;IACrB,uEAAA;IACA,8CAAA;IACA,EAAA;IACA,sDAAA;IACA,EAAA;IACA,kGAAA;IACA,kGAAA;IACA,0FAAA;IACA,4BAAA,GACI,eAAe,CAAC,KAAK,EAAE,OAAO,EAAE;QAC5B,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAChD,wCAAA;QACA,+CAAA;QACQ,OAAO,CAAC,aAAa,EAAE,CAAC;IAChC,CAAK;IACD,kBAAkB,CAAC,UAAU,EAAE,OAAO,EAAE;QACpC,IAAI,WAAW,IAAI,UAAU,EAAE;YAC3B,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;QAC/D,CAAS,MACI,IAAI,cAAc,IAAI,UAAU,EAAE;YACnC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;YACtD,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACjE,CAAS,MACI,IAAI,cAAc,IAAI,UAAU,EAAE;YACnC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;YACrD,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;QAC1E,CAAS,MACI,IAAI,aAAa,IAAI,UAAU,EAAE;YAClC,MAAM,CAAC,GAAG,eAAe,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YAClD,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;gBACV,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;YAClE,CAAa,MACI;gBACD,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;gBACrD,IAAI,cAAc,CAAC,CAAC,CAAC,EAAE;oBACvC,8CAAA;oBACoB,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBAC7C,CAAiB,MACI;oBACD,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC3C,CAAiB;YACjB,CAAa;QACb,CAAS,MACI,IAAI,gBAAgB,IAAI,UAAU,EAAE;YACrC,MAAM,SAAS,GAAG,UAAU,CAAC,cAAc,CAAC;YAC5C,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;YACxD,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;gBAC/B,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAC/C,CAAa,MACI;gBACD,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,SAAS,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBAClD,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;YAC1D,CAAa;QACb,CAAS,MACI,IAAI,aAAa,IAAI,UAAU,EAAE;YAClC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YACvD,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QAChD,CAAS,MACI,IAAI,YAAY,IAAI,UAAU,EAAE;YACjC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;YACnD,OAAO,CAAC,UAAU,CAAC,mBAAmB,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;YAC/D,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QAChD,CAAS,MACI,IAAI,gBAAgB,IAAI,UAAU,EAAE;YACrC,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QACzE,CAAS,MACI,IAAI,eAAe,IAAI,UAAU,EAAE;YACpC,MAAM,QAAQ,GAAG,UAAU,CAAC,aAAa,CAAC;YAC1C,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;YACvD,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC;YAC5C,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC;QACzD,CAAS,MACI,IAAI,UAAU,IAAI,UAAU,EAAE;YAC/B,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;gBACxB,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,MAAM,CAAC,gBAAgB,CAAC,CAAC;YAC3E,CAAa,MACI;gBACD,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBACjD,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YACpD,CAAa;QACb,CAAS,MACI,IAAI,YAAY,IAAI,UAAU,EAAE;YACjC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YACrD,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QAChD,CAAS,MACI;YACD,IAAI,EAAE,CAAC;QACnB,CAAS;IACT,CAAK;IACD,gBAAgB,CAAC,gBAAgB,EAAE,OAAO,EAAE;QACxC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;QACrD,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;IAClE,CAAK;IACD,yBAAyB,CAAC,gBAAgB,EAAE,OAAO,EAAE;QACjD,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;IAC9C,CAAK;IACD,aAAa,CAAC,aAAa,EAAE,OAAO,EAAE;QAClC,MAAM,GAAG,GAAG,aAAa,CAAC,MAAM,IAAI,CAAA,CAAE,CAAC;QACvC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QAClD,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE;YAChC,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YACpC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;QACvD,CAAS;IACT,CAAK;IACD,eAAe,CAAC,eAAe,EAAE,OAAO,EAAE;QACtC,MAAM,MAAM,GAAG,eAAe,CAAC,MAAM,IAAI,EAAE,CAAC;QAC5C,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;QACpD,KAAK,MAAM,OAAO,IAAI,MAAM,CAAE;YAC1B,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACtD,CAAS;IACT,CAAK;IACD,mBAAmB,CAAC,cAAc,EAAE,OAAO,EAAE;QACzC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;QACxD,MAAM,IAAI,GAAG,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC;QACvD,IAAI,CAAC,OAAO,EAAC,OAAO,IAAI;YACpB,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,4BAA4B,CAAC,CAAC;YAChE,IAAI,CAAC,yBAAyB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7D,CAAS,CAAC,CAAC;IACX,CAAK;IACD,mBAAmB,CAAC,OAAO,EAAE,SAAS,EAAE;QACpC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACvC,CAAK;IACD,qBAAqB,CAAC,OAAO,EAAE;QACnC,wEAAA;QACA,0EAAA;QACA,gCAAA;QACQ,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;IAC3C,CAAK;AACL,CAAC;AACD,yBAAyB,CAAC,QAAQ,GAAG,IAAI,yBAAyB,EAAE,CAAC;AAErE;;;;;;;;;;;;;;;CAeA,GACA,gDAAA,GACA,MAAM,aAAa,GAAG,QAAQ,CAAC;AAC/B,MAAM,aAAa,GAAG,QAAQ,CAAC;AAC/B,MAAM,OAAO,GAAG,IAAI,CAAC;AACrB,MAAM,SAAS,GAAG,IAAI,CAAC,CAAA,wBAAA;AACvB,MAAM,SAAS,GAAG,IAAI,CAAC,CAAA,wBAAA;AACvB,MAAM,OAAO,GAAG,IAAI,CAAC;AACrB,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAA,wBAAA;AACtB,MAAM,OAAO,GAAG,IAAI,CAAC,CAAA,wBAAA;AACrB,MAAM,SAAS,GAAG,EAAE,CAAC;AACrB,MAAM,SAAS,GAAG,CAAC,CAAC;AACpB;;;;CAIA,GACA,MAAM,mBAAmB,GAAG,IAAI,CAAC;AACjC,8EAAA,GACA,SAAS,gBAAgB,CAAC,KAAK,EAAE;IAC7B,MAAM,EAAE,GAAG,IAAI,QAAQ,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,EAAA,iBAAA,GAAsB,KAAK,CAAC,CAAC;IACnD,OAAO,IAAI,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;AACrC,CAAC;AACD;;;;CAIA,GACA,SAAS,0BAA0B,CAAC,CAAC,EAAE;IACnC,IAAI,CAAC,KAAK,CAAC,EAAE;QACT,OAAO,CAAC,CAAC;IACjB,CAAK;IACD,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACtB,wCAAA;QACQ,KAAK,IAAI,CAAC,CAAC;QACX,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACnB,CAAK;IACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACtB,qDAAA;QACQ,KAAK,IAAI,CAAC,CAAC;QACX,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACnB,CAAK;IACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACtB,qCAAA;QACQ,KAAK,IAAI,CAAC,CAAC;IACnB,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AACD,gEAAA,GACA,SAAS,oBAAoB,CAAC,KAAK,EAAE;IACjC,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAE;QACxB,MAAM,KAAK,GAAG,0BAA0B,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QAC1D,YAAY,IAAI,KAAK,CAAC;QACtB,IAAI,KAAK,KAAK,CAAC,EAAE;YACb,MAAM;QAClB,CAAS;IACT,CAAK;IACD,OAAO,YAAY,CAAC;AACxB,CAAC;AACD;;;CAGA,GACA,SAAS,iBAAiB,CAAC,KAAK,EAAE;IAClC,kFAAA;IACI,MAAM,OAAO,GAAG,SAAS,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACxD,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,CAAC;AAC1C,CAAC;AACD;;;;;CAKA,GACA,MAAM,iBAAiB,CAAC;IACpB,WAAW,EAAG;QACV,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,CAAC,mBAAmB,CAAC,CAAC;QAClD,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC1B,CAAK;IACD,mBAAmB,CAAC,KAAK,EAAE;QACvB,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QACpC,IAAI,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;QACrB,MAAO,CAAC,IAAI,CAAC,IAAI,CAAE;YACf,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpC,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;QAC7B,CAAS;QACD,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACvC,CAAK;IACD,oBAAoB,CAAC,KAAK,EAAE;QACxB,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;QACpC,IAAI,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;QACrB,MAAO,CAAC,IAAI,CAAC,IAAI,CAAE;YACf,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrC,IAAI,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC;QAC7B,CAAS;QACD,IAAI,CAAC,wBAAwB,EAAE,CAAC;IACxC,CAAK;IACL,0DAAA,GACI,kBAAkB,CAAC,QAAQ,EAAE;QACzB,KAAK,MAAM,CAAC,IAAI,QAAQ,CAAE;YACtB,MAAM,QAAQ,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,QAAQ,GAAG,IAAI,EAAE;gBACjB,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAClD,CAAa,MACI,IAAI,QAAQ,GAAG,KAAK,EAAE;gBACvB,IAAI,CAAC,kBAAkB,CAAC,AAAC,IAAI,IAAI,CAAC,GAAK,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxD,IAAI,CAAC,kBAAkB,CAAC,IAAI,GAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC;YAClE,CAAa,MACI,IAAI,CAAC,GAAG,aAAa,IAAI,aAAa,GAAG,CAAC,EAAE;gBAC7C,IAAI,CAAC,kBAAkB,CAAC,AAAC,IAAI,IAAI,CAAC,GAAK,QAAQ,KAAK,EAAE,CAAC,CAAC,CAAC;gBACzD,IAAI,CAAC,kBAAkB,CAAC,IAAI,GAAI,IAAI,GAAI,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1D,IAAI,CAAC,kBAAkB,CAAC,IAAI,GAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC;YAClE,CAAa,MACI;gBACD,MAAM,SAAS,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,kBAAkB,CAAC,AAAC,IAAI,IAAI,CAAC,GAAK,SAAS,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC1D,IAAI,CAAC,kBAAkB,CAAC,IAAI,GAAI,IAAI,GAAI,SAAS,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC5D,IAAI,CAAC,kBAAkB,CAAC,IAAI,GAAI,IAAI,GAAI,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3D,IAAI,CAAC,kBAAkB,CAAC,IAAI,GAAI,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC;YACnE,CAAa;QACb,CAAS;QACD,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACvC,CAAK;IACL,0DAAA,GACI,mBAAmB,CAAC,QAAQ,EAAE;QAC1B,KAAK,MAAM,CAAC,IAAI,QAAQ,CAAE;YACtB,MAAM,QAAQ,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,QAAQ,GAAG,IAAI,EAAE;gBACjB,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;YACnD,CAAa,MACI,IAAI,QAAQ,GAAG,KAAK,EAAE;gBACvB,IAAI,CAAC,mBAAmB,CAAC,AAAC,IAAI,IAAI,CAAC,GAAK,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC;gBACzD,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC;YACnE,CAAa,MACI,IAAI,CAAC,GAAG,aAAa,IAAI,aAAa,GAAG,CAAC,EAAE;gBAC7C,IAAI,CAAC,mBAAmB,CAAC,AAAC,IAAI,IAAI,CAAC,GAAK,QAAQ,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC1D,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAI,IAAI,GAAI,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3D,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC;YACnE,CAAa,MACI;gBACD,MAAM,SAAS,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,mBAAmB,CAAC,AAAC,IAAI,IAAI,CAAC,GAAK,SAAS,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC3D,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAI,IAAI,GAAI,SAAS,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC7D,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAI,IAAI,GAAI,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5D,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAI,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC;YACpE,CAAa;QACb,CAAS;QACD,IAAI,CAAC,wBAAwB,EAAE,CAAC;IACxC,CAAK;IACD,oBAAoB,CAAC,GAAG,EAAE;QAC9B,uEAAA;QACA,kEAAA;QACQ,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,GAAG,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAA,mBAAA;QAC1C,IAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;YACpD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QAC3D,CAAS;IACT,CAAK;IACD,qBAAqB,CAAC,GAAG,EAAE;QAC/B,uEAAA;QACA,oEAAA;QACQ,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,GAAG,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAA,CAAE,GAAG,GAAG,IAAI,CAAC,CAAC,CAAA,mBAAA;QAC7C,IAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;YACpD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAA,CAAE,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QAC9D,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,sBAAsB,GAAG;QACrB,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAK;IACL;;;KAGA,GACI,uBAAuB,GAAG;QACtB,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAK;IACL;;;KAGA,GACI,KAAK,GAAG;QACJ,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC1B,CAAK;IACD,IAAI,CAAC,YAAY,EAAE;QACf,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7C,IAAI,CAAC,QAAQ,IAAI,YAAY,CAAC,MAAM,CAAC;IAC7C,CAAK;IACL,uDAAA,GACI,YAAY,GAAG;QACX,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAK;IACL;;;;;;KAMA,GACI,aAAa,CAAC,GAAG,EAAE;QACf,MAAM,KAAK,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC5C,qEAAA;QACA,qCAAA;QACQ,MAAM,UAAU,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC;QACnD,oDAAA;QACQ,KAAK,CAAC,CAAC,CAAC,IAAI,UAAU,GAAG,IAAI,GAAG,IAAI,CAAC;QACrC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;YACnC,KAAK,CAAC,CAAC,CAAC,IAAI,UAAU,GAAG,IAAI,GAAG,IAAI,CAAC;QACjD,CAAS;QACD,OAAO,KAAK,CAAC;IACrB,CAAK;IACL,kDAAA,GACI,kBAAkB,CAAC,CAAC,EAAE;QAClB,MAAM,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC;QACxB,IAAI,MAAM,KAAK,OAAO,EAAE;YACpB,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;YACxC,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC;QACtD,CAAS,MACI,IAAI,MAAM,KAAK,OAAO,EAAE;YACzB,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;YACxC,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;QACpD,CAAS,MACI;YACD,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;QACnD,CAAS;IACT,CAAK;IACL,oDAAA,GACI,mBAAmB,CAAC,CAAC,EAAE;QACnB,MAAM,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC;QACxB,IAAI,MAAM,KAAK,OAAO,EAAE;YACpB,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;YACzC,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC,CAAC;QACvD,CAAS,MACI,IAAI,MAAM,KAAK,OAAO,EAAE;YACzB,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;YACzC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QACrD,CAAS,MACI;YACD,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAS;IACT,CAAK;IACD,uBAAuB,GAAG;QACtB,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC;IAClD,CAAK;IACD,wBAAwB,GAAG;QACvB,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC,CAAC;IACnD,CAAK;IACD,yBAAyB,CAAC,CAAC,EAAE;QACzB,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC;IACzC,CAAK;IACD,0BAA0B,CAAC,CAAC,EAAE;QAC1B,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1C,CAAK;IACD,eAAe,CAAC,KAAK,EAAE;QACnB,MAAM,WAAW,GAAG,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC1C,IAAI,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YACnC,OAAO;QACnB,CAAS;QACT,gBAAA;QACQ,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAC/C,sDAAA;QACQ,IAAI,SAAS,GAAG,WAAW,EAAE;YACzB,SAAS,GAAG,WAAW,CAAC;QACpC,CAAS;QACT,yBAAA;QACQ,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC;QAC5C,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA,gBAAA;QAC3B,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;IAChC,CAAK;AACL,CAAC;AAED,MAAM,yBAAyB,CAAC;IAC5B,WAAW,CAAC,WAAW,CAAE;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACvC,CAAK;IACD,UAAU,CAAC,KAAK,EAAE;QACd,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IACpD,CAAK;IACD,WAAW,CAAC,KAAK,EAAE;QACf,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACnD,CAAK;IACD,WAAW,CAAC,KAAK,EAAE;QACf,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACrD,CAAK;IACD,aAAa,GAAG;QACZ,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;IAClD,CAAK;AACL,CAAC;AACD,MAAM,0BAA0B,CAAC;IAC7B,WAAW,CAAC,WAAW,CAAE;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACvC,CAAK;IACD,UAAU,CAAC,KAAK,EAAE;QACd,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACrD,CAAK;IACD,WAAW,CAAC,KAAK,EAAE;QACf,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IACpD,CAAK;IACD,WAAW,CAAC,KAAK,EAAE;QACf,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;IACtD,CAAK;IACD,aAAa,GAAG;QACZ,IAAI,CAAC,WAAW,CAAC,uBAAuB,EAAE,CAAC;IACnD,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,MAAM,gBAAgB,CAAC;IACnB,WAAW,EAAG;QACV,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,EAAE,CAAC;QAC3C,IAAI,CAAC,SAAS,GAAG,IAAI,yBAAyB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjE,IAAI,CAAC,UAAU,GAAG,IAAI,0BAA0B,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3E,CAAK;IACD,IAAI,CAAC,YAAY,EAAE;QACf,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAK;IACD,OAAO,CAAC,IAAI,EAAE;QACV,OAAO,IAAI,KAAK,CAAC,CAAA,uBAAA,MAA6B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;IACvF,CAAK;IACD,YAAY,GAAG;QACX,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;IAC/C,CAAK;IACD,KAAK,GAAG;QACJ,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;IACjC,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,qEAAA,GACA,MAAM,UAAU,CAAC;IACb,WAAW,CAAC,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,gBAAgB,CAAE;QAC5D,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IACjD,CAAK;IACL;;;KAGA,GACI,SAAS,GAAG;QACR,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;QACnD,MAAM,SAAS,GAAG,aAAa,KAAK,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,aAAa,GAAG,CAAC,CAAC,KAAK,GAAG,GACnF,aAAa,GAAG,CAAC,GACjB,aAAa,CAAC;QACpB,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC;QAC5C,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QACxC,IAAI,SAAS,KAAK,aAAa,EAAE;YAC7B,SAAS,CAAC,GAAG,CAAC;gBAAC,CAAC;aAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC7D,CAAS,MACI;YACD,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC9C,CAAS;QACD,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IAC1F,CAAK;AACL,CAAC;AACD,SAAS,oBAAoB,CAAC,IAAI,EAAE,KAAK,EAAE;IACvC,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;IACvC,IAAI,GAAG,KAAK,CAAC,EAAE;QACX,OAAO,GAAG,CAAC;IACnB,CAAK;IACD,GAAG,GAAG,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;IAC3D,IAAI,GAAG,KAAK,CAAC,EAAE;QACX,OAAO,GAAG,CAAC;IACnB,CAAK;IACD,GAAG,GAAG,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,EAAE,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACvE,IAAI,GAAG,KAAK,CAAC,EAAE;QACX,OAAO,GAAG,CAAC;IACnB,CAAK;IACD,OAAO,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;AACvE,CAAC;AACD,SAAS,iBAAiB,CAAC,IAAI,EAAE,KAAK,EAAE;IACpC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;QACtD,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACnC,IAAI,OAAO,KAAK,CAAC,EAAE;YACf,OAAO,OAAO,CAAC;QAC3B,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;AACtC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;;;;;;;;;;CAmBA,GACA,MAAM,kBAAkB,CAAC;IACrB,WAAW,CAAC,MAAM,CAAE;QAChB,IAAI,CAAC,YAAY,GACb,MAAM,CAAC,eAAe,IAAI,IAAI,GACxB,MAAM,CAAC,eAAe,GACtB,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,OAAO,CAAE;YACjC,MAAM,WAAW,GAAG,MAAM,CAAC;YAC3B,IAAI,WAAW,CAAC,YAAY,EAAE,EAAE;gBAC5B,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC;YACpD,CAAa,MACI;gBACD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACvD,CAAa;QACb,CAAS;IACT,CAAK;IACL;;;;;;;;;;;;;;;;;;;;KAoBA,GACI,aAAa,CAAC,KAAK,EAAE;QACjB,UAAU,CAAC,KAAK,CAAC,eAAe,KAAK,IAAI,CAAC,YAAY,CAAC,CAAC;QAChE,wDAAA;QACQ,MAAM,YAAY,GAAG,yBAAyB,CAAC,KAAK,CAAC,CAAC;QACtD,IAAI,YAAY,KAAK,SAAS,IAC1B,CAAC,IAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC,EAAE;YAC/C,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,MAAM,QAAQ,GAAG,gCAAgC,CAAC,KAAK,CAAC,CAAC;QACzD,IAAI,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,IAAI,aAAa,GAAG,CAAC,CAAC;QAC9B,oEAAA;QACQ,MAAO,YAAY,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,YAAY,CAAE;YAC/D,sEAAA;YACA,oEAAA;YACY,IAAI,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE;gBACxD,gBAAgB,GAAG,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC,CAAC;YAC5G,CAAa,MACI;gBAID,MAAM;YACtB,CAAa;QACb,CAAS;QACT,4EAAA;QACA,qEAAA;QACA,2CAAA;QACQ,IAAI,YAAY,KAAK,QAAQ,CAAC,MAAM,EAAE;YAClC,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,IAAI,IAAI,CAAC,gBAAgB,KAAK,SAAS,EAAE;YACjD,uEAAA;YACA,sEAAA;YACA,gCAAA;YACY,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,EAAE;gBACtE,MAAM,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC;gBACvC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,IACnD,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,EAAE,OAAO,CAAC,EAAE;oBAC/D,OAAO,KAAK,CAAC;gBACjC,CAAiB;YACjB,CAAa;YACD,EAAE,YAAY,CAAC;QAC3B,CAAS;QACT,sEAAA;QACA,WAAA;QACQ,MAAO,YAAY,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,YAAY,CAAE;YACnD,MAAM,OAAO,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC;YACvC,IAAI,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IACrC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,EAAE,OAAO,CAAC,EAAE;gBAC/D,OAAO,KAAK,CAAC;YAC7B,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,yBAAyB,CAAC,OAAO,EAAE;QAC/B,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,eAAe,CAAE;YACvC,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE;gBACrC,OAAO,IAAI,CAAC;YAC5B,CAAa;QACb,CAAS;QACD,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE;QAC3B,IAAI,MAAM,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAClE,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,MAAM,eAAe,GAAG,MAAM,CAAC,EAAE,KAAK,gBAAgB,CAAA,2BAAA,OAClD,MAAM,CAAC,EAAE,KAAK,oBAAoB,CAAA,+BAAA,GAAmC;QACzE,OAAO,AAAC,OAAO,CAAC,IAAI,KAAK,CAAC,CAAA,sBAAA,QAA+B,eAAe,CAAC;IACjF,CAAK;IACD,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE;QAC7B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC3C,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,OAAQ,AAAC,OAAO,CAAC,IAAI,KAAK,CAAC,CAAA,uBAAA,OACvB,OAAO,CAAC,GAAG,KAAK,KAAK,CAAA,uBAAA,OACpB,OAAO,CAAC,IAAI,KAAK,CAAC,CAAA,wBAAA,OACf,OAAO,CAAC,GAAG,KAAK,MAAM,CAAA,wBAAA,GAA4B,EAAE;IACpE,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA;;;;CAIA,GACA,SAAS,kBAAkB,CAAC,MAAM,EAAE;IAChC,IAAI,EAAE,EAAE,EAAE,CAAC;IACX,UAAU,CAAC,MAAM,YAAY,WAAW,IAAI,MAAM,YAAY,eAAe,CAAC,CAAC;IAC/E,IAAI,MAAM,YAAY,WAAW,EAAE;QAC/B,IAAI,MAAM,YAAY,QAAQ,EAAE;YAC5B,MAAM,eAAe,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,MAAM,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,EAAC,KAAK,GAAI,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAA,kBAAA,KAAuB,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;YAC9O,OAAO,eAAe,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAA,wBAAA,GAA4B,CAAC;QAC5F,CAAS,MACI;YACb,gDAAA;YACY,OAAO,MAAM,CAAC;QAC1B,CAAS;IACT,CAAK;IACL,8BAAA;IACI,MAAM,eAAe,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAC,SAAS,GAAI,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC;IACvF,OAAO,eAAe,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;AAC9D,CAAC;AACD;;;;;;;;;;CAUA,GACA,SAAS,WAAW,CAAC,MAAM,EAAE;IACzB,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;QAClC,OAAO,EAAE,CAAC;IAClB,CAAK;IACD,MAAM,MAAM,GAAG,4BAA4B,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;IACxE,UAAU,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC,CAAC;IAC5C,IAAI,mBAAmB,CAAC,MAAM,CAAC,IAAI,iBAAiB,CAAC,MAAM,CAAC,EAAE;QAC1D,OAAO;YAAC,MAAM;SAAC,CAAC;IACxB,CAAK;IACD,OAAO,MAAM,CAAC,UAAU,EAAE,CAAC;AAC/B,CAAC;AACD,+EAAA,GACA,SAAS,mBAAmB,CAAC,MAAM,EAAE;IACjC,OAAO,MAAM,YAAY,WAAW,CAAC;AACzC,CAAC;AACD;;;CAGA,GACA,SAAS,iBAAiB,CAAC,MAAM,EAAE;IAC/B,OAAQ,MAAM,YAAY,eAAe,IACrC,gCAAgC,CAAC,MAAM,CAAC,EAAE;AAClD,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,uBAAuB,CAAC,MAAM,EAAE;IACrC,OAAQ,mBAAmB,CAAC,MAAM,CAAC,IAC/B,iBAAiB,CAAC,MAAM,CAAC,IACzB,8CAA8C,CAAC,MAAM,CAAC,EAAE;AAChE,CAAC;AACD;;;CAGA,GACA,SAAS,8CAA8C,CAAC,MAAM,EAAE;IAC5D,IAAI,MAAM,YAAY,eAAe,EAAE;QACnC,IAAI,4BAA4B,CAAC,MAAM,CAAC,EAAE;YACtC,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,UAAU,EAAE,CAAE;gBACzC,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE;oBAClE,OAAO,KAAK,CAAC;gBACjC,CAAiB;YACjB,CAAa;YACD,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AACD,SAAS,4BAA4B,CAAC,MAAM,EAAE;IAC1C,UAAU,CAAC,MAAM,YAAY,WAAW,IAAI,MAAM,YAAY,eAAe,CAAC,CAAC;IAC/E,IAAI,MAAM,YAAY,WAAW,EAAE;QAC/B,OAAO,MAAM,CAAC;IACtB,CAAK;IACD,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;QAC7B,OAAO,4BAA4B,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAK;IACL,+CAAA;IACI,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAC,SAAS,GAAI,4BAA4B,CAAC,SAAS,CAAC,CAAC,CAAC;IACxF,IAAI,SAAS,GAAG,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;IAC1D,SAAS,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAC;IACxC,IAAI,uBAAuB,CAAC,SAAS,CAAC,EAAE;QACpC,OAAO,SAAS,CAAC;IACzB,CAAK;IACD,UAAU,CAAC,SAAS,YAAY,eAAe,CAAC,CAAC;IACjD,UAAU,CAAC,4BAA4B,CAAC,SAAS,CAAC,CAAC,CAAC;IACpD,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACzC,OAAO,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,MAAM,GAAK,iBAAiB,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,CAAC;AACzG,CAAC;AACD,SAAS,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE;IACjC,UAAU,CAAC,GAAG,YAAY,WAAW,IAAI,GAAG,YAAY,eAAe,CAAC,CAAC;IACzE,UAAU,CAAC,GAAG,YAAY,WAAW,IAAI,GAAG,YAAY,eAAe,CAAC,CAAC;IACzE,IAAI,MAAM,CAAC;IACX,IAAI,GAAG,YAAY,WAAW,EAAE;QAC5B,IAAI,GAAG,YAAY,WAAW,EAAE;YACxC,0BAAA;YACY,MAAM,GAAG,6BAA6B,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC7D,CAAS,MACI;YACb,8BAAA;YACY,MAAM,GAAG,yCAAyC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACzE,CAAS;IACT,CAAK,MACI;QACD,IAAI,GAAG,YAAY,WAAW,EAAE;YACxC,8BAAA;YACY,MAAM,GAAG,yCAAyC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACzE,CAAS,MACI;YACb,kCAAA;YACY,MAAM,GAAG,iCAAiC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACjE,CAAS;IACT,CAAK;IACD,OAAO,gBAAgB,CAAC,MAAM,CAAC,CAAC;AACpC,CAAC;AACD,SAAS,6BAA6B,CAAC,GAAG,EAAE,GAAG,EAAE;IACjD,6EAAA;IACI,OAAO,eAAe,CAAC,MAAM,CAAC;QAAC,GAAG;QAAE,GAAG;KAAC,EAAE,KAAK,CAAA,yBAAA,GAA6B,CAAC;AACjF,CAAC;AACD,SAAS,iCAAiC,CAAC,GAAG,EAAE,GAAG,EAAE;IACjD,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACjE,wBAAA;IACA,wCAAA;IACA,kDAAA;IACA,kDAAA;IACA,8DAAA;IACA,qBAAA;IACI,IAAI,4BAA4B,CAAC,GAAG,CAAC,IAAI,4BAA4B,CAAC,GAAG,CAAC,EAAE;QACxE,OAAO,+BAA+B,CAAC,GAAG,EAAE,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;IACtE,CAAK;IACL,+FAAA;IACA,4FAAA;IACA,sDAAA;IACI,MAAM,eAAe,GAAG,4BAA4B,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;IACtE,MAAM,SAAS,GAAG,4BAA4B,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;IAChE,MAAM,OAAO,GAAG,eAAe,CAAC,OAAO,CAAC,GAAG,EAAC,SAAS,GAAI,iBAAiB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;IAClG,OAAO,eAAe,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAA,wBAAA,GAA4B,CAAC;AAC5E,CAAC;AACD,SAAS,yCAAyC,CAAC,WAAW,EAAE,eAAe,EAAE;IACjF,uBAAA;IACA,8BAAA;IACA,oCAAA;IACI,IAAI,4BAA4B,CAAC,eAAe,CAAC,EAAE;QACvD,SAAA;QACQ,OAAO,+BAA+B,CAAC,eAAe,EAAE,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC;IAC1F,CAAK,MACI;QACT,SAAA;QACQ,MAAM,UAAU,GAAG,eAAe,CAAC,OAAO,CAAC,GAAG,EAAC,SAAS,GAAI,iBAAiB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;QACvG,OAAO,eAAe,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAA,wBAAA,GAA4B,CAAC;IACnF,CAAK;AACL,CAAC;AACD;;;;;;;;;CASA,GACA,SAAS,gBAAgB,CAAC,MAAM,EAAE;IAC9B,UAAU,CAAC,MAAM,YAAY,WAAW,IAAI,MAAM,YAAY,eAAe,CAAC,CAAC;IAC/E,IAAI,MAAM,YAAY,WAAW,EAAE;QAC/B,OAAO,MAAM,CAAC;IACtB,CAAK;IACD,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;IACxC,6EAAA;IACI,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,OAAO,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAK;IACL,sEAAA;IACI,IAAI,qBAAqB,CAAC,MAAM,CAAC,EAAE;QAC/B,OAAO,MAAM,CAAC;IACtB,CAAK;IACL,mFAAA;IACA,mEAAA;IACI,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,EAAC,SAAS,GAAI,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;IACjF,gGAAA;IACA,yEAAA;IACA,sCAAA;IACA,mCAAA;IACA,0BAAA;IACA,8FAAA;IACA,4CAAA;IACI,MAAM,aAAa,GAAG,EAAE,CAAC;IACzB,cAAc,CAAC,OAAO,EAAC,SAAS,IAAI;QAChC,IAAI,SAAS,YAAY,WAAW,EAAE;YAClC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC1C,CAAS,MACI,IAAI,SAAS,YAAY,eAAe,EAAE;YAC3C,IAAI,SAAS,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,EAAE;gBAC5C,iCAAA;gBACA,8BAAA;gBACA,sBAAA;gBACgB,aAAa,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;YACzD,CAAa,MACI;gBACjB,iCAAA;gBACA,8BAAA;gBACA,wBAAA;gBACgB,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9C,CAAa;QACb,CAAS;IACT,CAAK,CAAC,CAAC;IACH,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5B,OAAO,aAAa,CAAC,CAAC,CAAC,CAAC;IAChC,CAAK;IACD,OAAO,eAAe,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;AAC5D,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,MAAM,kBAAkB,CAAC;IACrB,WAAW,EAAG;QACV,IAAI,CAAC,qBAAqB,GAAG,IAAI,2BAA2B,EAAE,CAAC;IACvE,CAAK;IACD,0BAA0B,CAAC,WAAW,EAAE,cAAc,EAAE;QACpD,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC/C,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,oBAAoB,CAAC,WAAW,EAAE,YAAY,EAAE;QAC5C,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;IAC/F,CAAK;IACD,aAAa,CAAC,WAAW,EAAE,KAAK,EAAE;QACtC,2DAAA;QACQ,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,gBAAgB,CAAC,WAAW,EAAE,KAAK,EAAE;QACzC,2DAAA;QACQ,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,0BAA0B,CAAC,WAAW,EAAE,MAAM,EAAE;QACpD,2DAAA;QACQ,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAChD,CAAK;IACD,YAAY,CAAC,WAAW,EAAE,MAAM,EAAE;QACtC,2DAAA;QACQ,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAA,kBAAA,GAAsB,CAAC;IAClE,CAAK;IACD,eAAe,CAAC,WAAW,EAAE,eAAe,EAAE;QAClD,2DAAA;QACQ,OAAO,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC9C,CAAK;IACD,8BAA8B,CAAC,WAAW,EAAE;QAChD,2DAAA;QACQ,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAChD,CAAK;IACD,YAAY,CAAC,WAAW,EAAE,MAAM,EAAE;QAC9B,OAAO,kBAAkB,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;IAC7D,CAAK;IACD,+BAA+B,CAAC,WAAW,EAAE,eAAe,EAAE;QAC1D,OAAO,kBAAkB,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;IAC7D,CAAK;IACD,qBAAqB,CAAC,WAAW,EAAE,eAAe,EAAE,MAAM,EAAE;QAChE,2DAAA;QACQ,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,kBAAkB,CAAC,WAAW,EAAE,SAAS,EAAE;QAC/C,2DAAA;QACQ,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,MAAM,2BAA2B,CAAC;IAC9B,WAAW,EAAG;QACV,IAAI,CAAC,KAAK,GAAG,CAAA,CAAE,CAAC;IACxB,CAAK;IACL,8CAAA;IACI,GAAG,CAAC,cAAc,EAAE;QAChB,MAAM,YAAY,GAAG,cAAc,CAAC,WAAW,EAAE,CAAC;QAClD,MAAM,UAAU,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;QAC5C,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAC5C,IAAI,SAAS,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAC3C,MAAM,KAAK,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC3D,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,GAAG,CAAC,cAAc,EAAE;QAChB,MAAM,YAAY,GAAG,cAAc,CAAC,WAAW,EAAE,CAAC;QAClD,MAAM,UAAU,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;QAC5C,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QACjD,OAAO,eAAe,IAAI,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAClE,CAAK;IACD,UAAU,CAAC,YAAY,EAAE;QACrB,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IACxC,IAAI,SAAS,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAC3C,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC;IACrC,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,uBAAuB,CAAC;AAC1C,MAAM,WAAW,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;AACtC;;;;;CAKA,GACA,MAAM,qBAAqB,CAAC;IACxB,WAAW,CAAC,IAAI,EAAE,UAAU,CAAE;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QACrC;;;;;;SAMA,GACQ,IAAI,CAAC,sBAAsB,GAAG,IAAI,2BAA2B,EAAE,CAAC;QACxE;;;SAGA,GACQ,IAAI,CAAC,qBAAqB,GAAG,IAAI,SAAS,EAAC,CAAC,GAAI,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAK,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC;IAClC,CAAK;IACL;;;;;;KAMA,GACI,0BAA0B,CAAC,WAAW,EAAE,cAAc,EAAE;QACpD,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;YAClD,MAAM,YAAY,GAAG,cAAc,CAAC,WAAW,EAAE,CAAC;YAClD,MAAM,UAAU,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;YAC5C,WAAW,CAAC,sBAAsB,CAAC,MAAM;gBACrD,wEAAA;gBACA,0BAAA;gBACgB,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAChE,CAAa,CAAC,CAAC;YACH,MAAM,gBAAgB,GAAG;gBACrB,YAAY;gBACZ,MAAM,EAAE,kBAAkB,CAAC,UAAU,CAAC;YACtD,CAAa,CAAC;YACF,OAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC7E,CAAS;QACD,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,oBAAoB,CAAC,WAAW,EAAE,YAAY,EAAE;QAC5C,MAAM,WAAW,GAAG,EAAE,CAAC;QACvB,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;YAAC,YAAY;YAAE,EAAE;SAAC,EAAE;YAAC,kBAAkB,CAAC,YAAY,CAAC;YAAE,EAAE;SAAC,EAClG,YAAA,GAAuB,KAAK,EAC5B,YAAA,GAAuB,IAAI,CAAC,CAAC;QACrB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CACrC,OAAO,CAAC,KAAK,CAAC,CACd,IAAI,EAAC,OAAO,IAAI;YACjB,KAAK,MAAM,KAAK,IAAI,OAAO,CAAE;gBACzC,oEAAA;gBACA,4DAAA;gBACA,oEAAA;gBACA,wDAAA;gBACgB,IAAI,KAAK,CAAC,YAAY,KAAK,YAAY,EAAE;oBACrC,MAAM;gBAC1B,CAAiB;gBACD,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACnE,CAAa;YACD,OAAO,WAAW,CAAC;QAC/B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,aAAa,CAAC,WAAW,EAAE,KAAK,EAAE;QACtC,sEAAA;QACA,oBAAA;QACQ,MAAM,OAAO,GAAG,uBAAuB,CAAC,WAAW,CAAC,CAAC;QACrD,MAAM,OAAO,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;QAC9C,OAAO,OAAO,CAAC,OAAO,CAAC,CAAA,2CAAA;QACvB,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,KAAK,CAAC,UAAU,EAAE;YAClB,MAAM,MAAM,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;YAC5C,OAAO,MAAM,CAAC,IAAI,EAAC,OAAO,IAAI;gBAC1B,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,UAAU,CAAC,cAAc,EAAE,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;YACzH,CAAa,CAAC,CAAC;QACf,CAAS,MACI;YACD,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;QACjC,CAAS;IACT,CAAK;IACD,gBAAgB,CAAC,WAAW,EAAE,KAAK,EAAE;QACjC,MAAM,OAAO,GAAG,uBAAuB,CAAC,WAAW,CAAC,CAAC;QACrD,MAAM,MAAM,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAG,iBAAiB,CAAC,WAAW,CAAC,CAAC;QAC/C,OAAO,OAAO,CACT,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CACrB,IAAI,CAAC,IAAM,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC;gBAAC,KAAK,CAAC,OAAO;aAAC,EAAE;gBAAC,KAAK,CAAC,OAAO,GAAG,CAAC;aAAC,EAC5F,YAAA,GAAuB,KAAK,EAC5B,YAAA,GAAuB,IAAI,CAAC,CAAC,CAAC,CACjB,IAAI,CAAC,IAAM,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC;gBAAC,KAAK,CAAC,OAAO;aAAC,EAAE;gBAAC,KAAK,CAAC,OAAO,GAAG,CAAC;aAAC,EAC7F,YAAA,GAAuB,KAAK,EAC5B,YAAA,GAAuB,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAK;IACD,0BAA0B,CAAC,WAAW,EAAE,MAAM,EAAE;QAC5C,MAAM,YAAY,GAAG,iBAAiB,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,cAAc,GAAG,IAAI,CAAC;QAC1B,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;QAC1B,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,KAAK;YACzE,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,IAAI,EAAC,KAAK,IAAI;gBAC5D,cAAc,IAAA,CAAK,cAAc,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;gBAC7C,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAC9C,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC,IAAI,CAAC,MAAM;YACV,IAAI,CAAC,cAAc,EAAE;gBACjB,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACxD,CAAa,MACI;gBACD,IAAI,YAAY,GAAG,cAAc,EAAE,CAAC;gBACpC,MAAM,MAAM,GAAG,EAAE,CAAC;gBAClB,OAAO,kBAAkB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,SAAS,KAAK;oBAC7D,QAAQ,CAAC,SAAS,EAAE,CAAC,YAAY,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAC,YAAY,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrG,MAAM,WAAW,GAAG,oBAAoB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;oBAC3D,MAAM,WAAW,GAAG,oBAAoB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;oBAC3D,MAAM,UAAU,GAAG,mBAAmB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;oBACzD,MAAM,UAAU,GAAG,mBAAmB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;oBACzD,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;oBACzE,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;oBACzE,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;oBACtE,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,UAAU,CAAC,SAAS,EAAE,iBAAiB,EAAE,UAAU,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;oBACzK,OAAO,kBAAkB,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,UAAU,KAAK;wBAC3D,OAAO,YAAY,CACd,SAAS,CAAC,UAAU,EAAE,MAAM,CAAC,KAAK,CAAC,CACnC,IAAI,EAAC,OAAO,IAAI;4BACjB,OAAO,CAAC,OAAO,EAAC,KAAK,IAAI;gCACrB,MAAM,WAAW,GAAG,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;gCAChE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;oCAChC,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;oCAC7C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gCAC7D,CAAiC;4BACjC,CAA6B,CAAC,CAAC;wBAC/B,CAAyB,CAAC,CAAC;oBAC3B,CAAqB,CAAC,CAAC;gBACvB,CAAiB,CAAC,CAAC,IAAI,CAAC,IAAM,MAAM,CAAC,CAAC;YACtC,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,aAAa,CAAC,MAAM,EAAE;QAClB,IAAI,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxD,IAAI,UAAU,EAAE;YACZ,OAAO,UAAU,CAAC;QAC9B,CAAS;QACD,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7B,UAAU,GAAG;gBAAC,MAAM;aAAC,CAAC;QAClC,CAAS,MACI;YACb,kFAAA;YACY,MAAM,GAAG,GAAG,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAA,yBAAA,GAA6B,CAAC,CAAC;YACnG,UAAU,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QACxK,CAAS;QACD,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QACnD,OAAO,UAAU,CAAC;IAC1B,CAAK;IACL;;;KAGA,GACI,mBAAmB,CAAC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,mBAAmB,EAAE,WAAW,EAAE,mBAAmB,EAAE,WAAW,EAAE;QAC/H,0EAAA;QACA,4EAAA;QACA,0EAAA;QACA,kDAAA;QACQ,MAAM,UAAU,GAAG,CAAC,WAAW,IAAI,IAAI,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,IAC5D,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;QACrD,MAAM,oBAAoB,GAAG,UAAU,GAAA,CAAI,WAAW,IAAI,IAAI,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACzF,MAAM,WAAW,GAAG,EAAE,CAAC;QACvB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,EAAE,CAAC,CAAE;YACjC,MAAM,UAAU,GAAG,WAAW,GACxB,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,GAAG,oBAAoB,CAAC,CAAC,GAC/D,WAAW,CAAC;YAClB,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC,GAAG,oBAAoB,CAAC,EAAE,mBAAmB,CAAC,CAAC;YAC5H,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC,GAAG,oBAAoB,CAAC,EAAE,mBAAmB,CAAC,CAAC;YAC5H,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAC,KAAK,GAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,UAAU,EAAE,KAAK,EAC1G,cAAA,GAA6B,IAAI,CAAC,CAAC,CAAC;YACxB,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;QACtF,CAAS;QACD,OAAO,WAAW,CAAC;IAC3B,CAAK;IACL,uEAAA,GACI,kBAAkB,CAAC,OAAO,EAAE,UAAU,EAAE,gBAAgB,EAAE,SAAS,EAAE;QACjE,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,EAAE,EAAE,UAAU,EAAE,gBAAgB,CAAC,CAAC;QACzF,OAAO,SAAS,GAAG,KAAK,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;IACrD,CAAK;IACL,uEAAA,GACI,kBAAkB,CAAC,OAAO,EAAE,UAAU,EAAE,gBAAgB,EAAE,SAAS,EAAE;QACjE,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,EAAE,EAAE,UAAU,EAAE,gBAAgB,CAAC,CAAC;QACzF,OAAO,SAAS,GAAG,KAAK,CAAC,SAAS,EAAE,GAAG,KAAK,CAAC;IACrD,CAAK;IACD,aAAa,CAAC,WAAW,EAAE,MAAM,EAAE;QAC/B,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC1D,MAAM,eAAe,GAAG,MAAM,CAAC,eAAe,IAAI,IAAI,GAChD,MAAM,CAAC,eAAe,GACtB,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC,IAAI,EAAC,OAAO,IAAI;YAClF,qDAAA;YACY,IAAI,KAAK,GAAG,IAAI,CAAC;YACjB,KAAK,MAAM,SAAS,IAAI,OAAO,CAAE;gBAC7B,MAAM,OAAO,GAAG,kBAAkB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;gBAC5D,IAAI,OAAO,IAC3B,CAAqB,CAAC,KAAK,IAAI,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;oBAC3D,KAAK,GAAG,SAAS,CAAC;gBACtC,CAAiB;YACjB,CAAa;YACD,OAAO,KAAK,CAAC;QACzB,CAAS,CAAC,CAAC;IACX,CAAK;IACD,YAAY,CAAC,WAAW,EAAE,MAAM,EAAE;QAC9B,IAAI,SAAS,GAAG,CAAC,CAAA,kBAAA,GAAsB;QACvC,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC9C,OAAO,kBAAkB,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,MAAM,KAAK;YACtD,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,IAAI,EAAC,KAAK,IAAI;gBACzD,IAAI,CAAC,KAAK,EAAE;oBACR,SAAS,GAAG,CAAC,CAAA,kBAAA,GAAsB;gBACvD,CAAiB,MACI,IAAI,SAAS,KAAK,CAAC,CAAA,kBAAA,OACpB,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,qBAAqB,CAAC,MAAM,CAAC,EAAE;oBACrD,SAAS,GAAG,CAAC,CAAA,qBAAA,GAAyB;gBAC1D,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC,IAAI,CAAC,MAAM;YACtB,gGAAA;YACA,8FAAA;YACA,2DAAA;YACY,IAAI,cAAc,CAAC,MAAM,CAAC,IACtB,UAAU,CAAC,MAAM,GAAG,CAAC,IACrB,SAAS,KAAK,CAAC,CAAA,kBAAA,KAAuB;gBACtC,OAAO,CAAC,CAAA,qBAAA,GAAyB;YACjD,CAAa;YACD,OAAO,SAAS,CAAC;QAC7B,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;KAIA,GACI,yBAAyB,CAAC,UAAU,EAAE,QAAQ,EAAE;QAC5C,MAAM,OAAO,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACvC,KAAK,MAAM,OAAO,IAAI,gCAAgC,CAAC,UAAU,CAAC,CAAE;YAChE,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACrD,IAAI,KAAK,IAAI,IAAI,EAAE;gBACf,OAAO,IAAI,CAAC;YAC5B,CAAa;YACD,MAAM,kBAAkB,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACzD,yBAAyB,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;QAC1F,CAAS;QACD,OAAO,OAAO,CAAC,YAAY,EAAE,CAAC;IACtC,CAAK;IACL,0DAAA,GACI,mBAAmB,CAAC,KAAK,EAAE;QACvB,MAAM,OAAO,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACvC,yBAAyB,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA,uBAAA,GAA2B,CAAC,CAAC;QACxG,OAAO,OAAO,CAAC,YAAY,EAAE,CAAC;IACtC,CAAK;IACL;;;KAGA,GACI,oBAAoB,CAAC,UAAU,EAAE,WAAW,EAAE;QAC1C,MAAM,OAAO,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACvC,yBAAyB,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC/I,OAAO,OAAO,CAAC,YAAY,EAAE,CAAC;IACtC,CAAK;IACL;;;KAGA,GACI,YAAY,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE;QACrC,IAAI,MAAM,KAAK,IAAI,EAAE;YACjB,OAAO,EAAE,CAAC;QACtB,CAAS;QACD,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,QAAQ,CAAC,IAAI,CAAC,IAAI,gBAAgB,EAAE,CAAC,CAAC;QACtC,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,KAAK,MAAM,OAAO,IAAI,gCAAgC,CAAC,UAAU,CAAC,CAAE;YAChE,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YACjC,KAAK,MAAM,OAAO,IAAI,QAAQ,CAAE;gBAC5B,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;oBAC9D,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;gBAChF,CAAiB,MACI;oBACD,MAAM,kBAAkB,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACzD,yBAAyB,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;gBAClG,CAAiB;YACjB,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAK;IACL;;;KAGA,GACI,WAAW,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE;QACnC,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;IACrE,CAAK;IACL,+DAAA,GACI,eAAe,CAAC,QAAQ,EAAE;QACtB,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;YACtC,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;QACnD,CAAS;QACD,OAAO,MAAM,CAAC;IACtB,CAAK;IACL;;;;;;KAMA,GACI,iBAAiB,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;QACxC,MAAM,QAAQ,GAAG,CAAC;eAAG,QAAQ;SAAC,CAAC;QAC/B,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,KAAK,MAAM,YAAY,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,IAAI,EAAE,CAAE;YACtD,KAAK,MAAM,MAAM,IAAI,QAAQ,CAAE;gBAC3B,MAAM,aAAa,GAAG,IAAI,gBAAgB,EAAE,CAAC;gBAC7C,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;gBAC1C,yBAAyB,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,EAAE,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBACtG,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC5C,CAAa;QACb,CAAS;QACD,OAAO,OAAO,CAAC;IACvB,CAAK;IACD,UAAU,CAAC,MAAM,EAAE,SAAS,EAAE;QAC1B,OAAO,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAC,CAAC,GAAI,CAAC,YAAY,WAAW,IACtD,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,IACtC,CAAa,CAAC,CAAC,EAAE,KAAK,IAAI,CAAA,eAAA,OAAsB,CAAC,CAAC,EAAE,KAAK,QAAQ,CAAA,mBAAA,GAAA,CAAuB,CAAC,CAAC;IAC1F,CAAK;IACD,eAAe,CAAC,WAAW,EAAE,eAAe,EAAE;QAC1C,MAAM,OAAO,GAAG,uBAAuB,CAAC,WAAW,CAAC,CAAC;QACrD,MAAM,MAAM,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;QAC5C,OAAO,CAAC,eAAe,GACjB,OAAO,CAAC,OAAO,CAAC,wCAAwC,EAAE,WAAW,CAAC,KAAK,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC,GAC9G,OAAO,CAAC,OAAO,EAAE,EAAE,IAAI,EAAC,YAAY,IAAI;YAC1C,MAAM,MAAM,GAAG,EAAE,CAAC;YAClB,OAAO,kBAAkB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,WAAW,KAAK;gBAC7D,OAAO,MAAM,CACR,GAAG,CAAC;oBAAC,WAAW,CAAC,OAAO;oBAAE,IAAI,CAAC,GAAG;iBAAC,CAAC,CACpC,IAAI,EAAC,UAAU,IAAI;oBACpB,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;gBACnF,CAAiB,CAAC,CAAC;YACnB,CAAa,CAAC,CAAC,IAAI,CAAC,IAAM,MAAM,CAAC,CAAC;QAClC,CAAS,CAAC,CAAC;IACX,CAAK;IACD,8BAA8B,CAAC,WAAW,EAAE;QACxC,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,IAAI,EAAC,OAAO,IAAI;YACrD,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,OAAO,IAAI,CAAC;YAC5B,CAAa;YACD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;gBACnB,MAAM,GAAG,GAAG,CAAC,CAAC,UAAU,CAAC,cAAc,GAAG,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC;gBACtE,OAAO,GAAG,KAAK,CAAC,GACV,GAAG,GACH,mBAAmB,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC;YAChF,CAAa,CAAC,CAAC;YACH,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC;QAC9C,CAAS,CAAC,CAAC;IACX,CAAK;IACD,qBAAqB,CAAC,WAAW,EAAE,eAAe,EAAE,MAAM,EAAE;QACxD,MAAM,OAAO,GAAG,uBAAuB,CAAC,WAAW,CAAC,CAAC;QACrD,MAAM,MAAM,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;QAC5C,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC,IAAI,EAAC,kBAAkB,GAAI,OAAO,CAC5E,OAAO,CAAC,wCAAwC,EAAE,WAAW,CAAC,KAAK,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC,CACtG,IAAI,EAAC,OAAO,GAAI,kBAAkB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,MAAM,GAAK,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,kBAAkB,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClK,CAAK;IACD,kBAAkB,CAAC,WAAW,EAAE,SAAS,EAAE;QAC/C,2EAAA;QACA,0EAAA;QACA,0EAAA;QACA,uEAAA;QACA,QAAA;QACQ,MAAM,eAAe,GAAG,IAAI,GAAG,EAAE,CAAC;QAClC,OAAO,kBAAkB,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK;YACvD,MAAM,yBAAyB,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAC3E,MAAM,YAAY,GAAG,yBAAyB,GACxC,kBAAkB,CAAC,OAAO,CAAC,yBAAyB,CAAC,GACrD,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,GAAG,CAAC,eAAe,CAAC,CAAC;YAC7D,OAAO,YAAY,CAAC,IAAI,EAAC,YAAY,IAAI;gBACrC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;gBACvD,OAAO,kBAAkB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,KAAK;oBAC5D,OAAO,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC,IAAI,EAAC,eAAe,IAAI;wBACtF,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;wBAC7D,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;4BACtC,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,eAAe,EAAE,UAAU,CAAC,CAAC;wBACjH,CAAyB;wBACD,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;oBAC5D,CAAqB,CAAC,CAAC;gBACvB,CAAiB,CAAC,CAAC;YACnB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACD,aAAa,CAAC,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE;QACzD,MAAM,YAAY,GAAG,iBAAiB,CAAC,WAAW,CAAC,CAAC;QACpD,OAAO,YAAY,CAAC,GAAG,CAAC;YACpB,OAAO,EAAE,UAAU,CAAC,OAAO;YAC3B,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,UAAU,EAAE,UAAU,CAAC,UAAU;YACjC,gBAAgB,EAAE,UAAU,CAAC,gBAAgB;YAC7C,kBAAkB,EAAE,IAAI,CAAC,oBAAoB,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,CAAC;YACvE,WAAW,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE;QACpD,CAAS,CAAC,CAAC;IACX,CAAK;IACD,gBAAgB,CAAC,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE;QAC5D,MAAM,YAAY,GAAG,iBAAiB,CAAC,WAAW,CAAC,CAAC;QACpD,OAAO,YAAY,CAAC,MAAM,CAAC;YACvB,UAAU,CAAC,OAAO;YAClB,IAAI,CAAC,GAAG;YACR,UAAU,CAAC,UAAU;YACrB,UAAU,CAAC,gBAAgB;YAC3B,IAAI,CAAC,oBAAoB,CAAC,UAAU,EAAE,QAAQ,CAAC,GAAG,CAAC;YACnD,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE;SAC9B,CAAC,CAAC;IACX,CAAK;IACD,uBAAuB,CAAC,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE;QAC1D,MAAM,YAAY,GAAG,iBAAiB,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,OAAO,GAAG,IAAI,SAAS,CAAC,oBAAoB,CAAC,CAAC;QAClD,OAAO,YAAY,CACd,OAAO,CAAC;YACT,KAAK,EAAE,4BAA4B;YACnC,KAAK,EAAE,WAAW,CAAC,IAAI,CAAC;gBACpB,UAAU,CAAC,OAAO;gBAClB,IAAI,CAAC,GAAG;gBACR,IAAI,CAAC,oBAAoB,CAAC,UAAU,EAAE,WAAW,CAAC;aACrD,CAAC;QACd,CAAS,EAAE,CAAC,CAAC,EAAE,KAAK,KAAK;YACb,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,OAAO,EAAE,WAAW,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAC7H,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,OAAO,CAAC,CAAC;IACjC,CAAK;IACL,sDAAA,GACI,mBAAmB,CAAC,QAAQ,EAAE,UAAU,EAAE;QACtC,IAAI,OAAO,GAAG,IAAI,SAAS,CAAC,oBAAoB,CAAC,CAAC;QAClD,MAAM,gBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC9E,IAAI,gBAAgB,IAAI,IAAI,EAAE;YAC1B,OAAO,OAAO,CAAC;QAC3B,CAAS;QACD,MAAM,YAAY,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAC;QAC3D,IAAI,YAAY,IAAI,IAAI,EAAE;YACtB,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAC1D,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;gBAChB,KAAK,MAAM,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,IAAI,EAAE,CAAE;oBACpD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAC;gBACpJ,CAAiB;YACjB,CAAa;QACb,CAAS,MACI;YACD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,EAAE,WAAW,EAAE,gBAAgB,CAAC,CAAC,CAAC;QACnH,CAAS;QACD,OAAO,OAAO,CAAC;IACvB,CAAK;IACL;;;;KAIA,GACI,aAAa,CAAC,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,eAAe,EAAE,UAAU,EAAE;QAC1E,QAAQ,CAAC,SAAS,EAAE,0CAA0C,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC9E,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,cAAc,CAAC,eAAe,EAAE,UAAU,EAAE,oBAAoB,EACxE,UAAA,IAAqB,KAAK,IAAI;YAClB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;QACxF,CAAS,EACT,aAAA,IAAwB,KAAK,IAAI;YACrB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;QAC3F,CAAS,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAK;IACD,qBAAqB,CAAC,WAAW,EAAE;QAC/B,IAAI,kBAAkB,GAAG,CAAC,CAAC;QAC3B,MAAM,MAAM,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;QAC5C,OAAO,MAAM,CACR,OAAO,CAAC;YACT,KAAK,EAAE,+BAA+B;YACtC,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,WAAW,CAAC,UAAU,CAAC;gBAAC,IAAI,CAAC,GAAG;gBAAE,MAAM,CAAC,gBAAgB;aAAC,CAAC;QAC9E,CAAS,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,KAAK;YACzB,UAAU,CAAC,IAAI,EAAE,CAAC;YAClB,kBAAkB,GAAG,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC;QAC1D,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,kBAAkB,CAAC,CAAC;IAC5C,CAAK;IACL;;;;KAIA,GACI,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE;QAC3C,wEAAA;QACA,wCAAA;QACQ,WAAW,GAAG,WAAW,CACpB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAK,oBAAoB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAC1C,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,MAAM,GAAK,CAAC,CAAC,IAAI,oBAAoB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACpF,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnB,KAAK,MAAM,UAAU,IAAI,WAAW,CAAE;YAClC,MAAM,UAAU,GAAG,oBAAoB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;YAC3D,MAAM,UAAU,GAAG,oBAAoB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;YAC3D,IAAI,UAAU,KAAK,CAAC,EAAE;gBAClC,wEAAA;gBACA,qBAAA;gBACgB,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;YAC9C,CAAa,MACI,IAAI,UAAU,GAAG,CAAC,IAAI,UAAU,GAAG,CAAC,EAAE;gBACvD,6CAAA;gBACgB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBACxB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC;YACpD,CAAa,MACI,IAAI,UAAU,GAAG,CAAC,EAAE;gBAErB,MAAM;YACtB,CAAa;QACb,CAAS;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnB,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAE;YACnD,wEAAA;YACA,6CAAA;YACY,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBACjD,OAAO,EAAE,CAAC;YAC1B,CAAa;YACD,MAAM,UAAU,GAAG;gBACf,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO;gBACjB,IAAI,CAAC,GAAG;gBACR,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU;gBACpB,MAAM,CAAC,CAAC,CAAC,CAAC,gBAAgB;gBAC1B,WAAW;gBACX,EAAE;aACL,CAAC;YACF,MAAM,UAAU,GAAG;gBACf,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO;gBACrB,IAAI,CAAC,GAAG;gBACR,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU;gBACxB,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,gBAAgB;gBAC9B,WAAW;gBACX,EAAE;aACL,CAAC;YACF,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;QACnE,CAAS;QACD,OAAO,MAAM,CAAC;IACtB,CAAK;IACD,gBAAgB,CAAC,UAAU,EAAE,UAAU,EAAE;QAC7C,+DAAA;QACA,8BAAA;QACQ,OAAO,oBAAoB,CAAC,UAAU,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;IAChE,CAAK;IACD,+BAA+B,CAAC,WAAW,EAAE,eAAe,EAAE;QAC1D,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;IACrG,CAAK;IACD,YAAY,CAAC,WAAW,EAAE,MAAM,EAAE;QAC9B,OAAO,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,GAAK,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,IAAI,EAAC,KAAK,GAAI,KAAK,GAAG,KAAK,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;IAC3M,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,sBAAsB,CAAC,GAAG,EAAE;IACjC,OAAO,QAAQ,CAAC,GAAG,EAAE,uBAAuB,CAAC,CAAC;AAClD,CAAC;AACD;;CAEA,GACA,SAAS,iBAAiB,CAAC,GAAG,EAAE;IAC5B,OAAO,QAAQ,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;AAC5C,CAAC;AACD;;CAEA,GACA,SAAS,uBAAuB,CAAC,GAAG,EAAE;IAClC,OAAO,QAAQ,CAAC,GAAG,EAAE,yBAAyB,CAAC,CAAC;AACpD,CAAC;AACD;;CAEA,GACA,SAAS,eAAe,CAAC,GAAG,EAAE;IAC1B,OAAO,QAAQ,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;AAC5C,CAAC;AACD,SAAS,4BAA4B,CAAC,YAAY,EAAE;IAChD,UAAU,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;IACtC,IAAI,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;IAClD,IAAI,UAAU,GAAG,SAAS,CAAC,cAAc,CAAC;IAC1C,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QAC1C,MAAM,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;QACpD,IAAI,qBAAqB,CAAC,SAAS,EAAE,SAAS,CAAC,GAAG,CAAC,EAAE;YACjD,SAAS,GAAG,SAAS,CAAC;QAClC,CAAS;QACD,IAAI,UAAU,GAAG,SAAS,CAAC,cAAc,EAAE;YACvC,UAAU,GAAG,SAAS,CAAC,cAAc,CAAC;QAClD,CAAS;IACT,CAAK;IACD,OAAO,IAAI,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;AAClF,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,SAAS,mBAAmB,CAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE;IAC7C,MAAM,aAAa,GAAG,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;IACpD,MAAM,QAAQ,GAAG,EAAE,CAAC;IACpB,MAAM,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC9C,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,MAAM,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC;QAAE,KAAK;IAAA,CAAE,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,KAAK;QAC5E,UAAU,EAAE,CAAC;QACb,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;IAChC,CAAK,CAAC,CAAC;IACH,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM;QACnC,UAAU,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC;IACrC,CAAK,CAAC,CAAC,CAAC;IACJ,MAAM,gBAAgB,GAAG,EAAE,CAAC;IAC5B,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,SAAS,CAAE;QACpC,MAAM,QAAQ,GAAG,wBAAwB,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QACpF,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;QACzC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC5C,CAAK;IACD,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAM,gBAAgB,CAAC,CAAC;AAC7E,CAAC;AACD;;CAEA,GACA,SAAS,cAAc,CAAC,GAAG,EAAE;IACzB,IAAI,CAAC,GAAG,EAAE;QACN,OAAO,CAAC,CAAC;IACjB,CAAK;IACD,IAAI,KAAK,CAAC;IACV,IAAI,GAAG,CAAC,QAAQ,EAAE;QACd,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC;IAC7B,CAAK,MACI,IAAI,GAAG,CAAC,eAAe,EAAE;QAC1B,KAAK,GAAG,GAAG,CAAC,eAAe,CAAC;IACpC,CAAK,MACI,IAAI,GAAG,CAAC,UAAU,EAAE;QACrB,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC;IAC/B,CAAK,MACI;QACD,MAAM,IAAI,EAAE,CAAC;IACrB,CAAK;IACD,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;AACxC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,+DAAA,GACA,MAAM,sBAAsB,CAAC;IACzB,WAAW,CACf;;;KAGA,GACI,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,iBAAiB,CAAE;QACjD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QACnD;;;;;;;;;;SAUA,GACA,gCAAA;QACQ,IAAI,CAAC,qBAAqB,GAAG,CAAA,CAAE,CAAC;IACxC,CAAK;IACL;;;;KAIA,GACI,OAAO,OAAO,CAAC,IAAI,EAAE,UAAU,EAAE,YAAY,EAAE,iBAAiB,EAAE;QACtE,8DAAA;QACA,2EAAA;QACA,2EAAA;QACA,qCAAA;QACQ,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;QAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACtD,OAAO,IAAI,sBAAsB,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,iBAAiB,CAAC,CAAC;IAC/F,CAAK;IACD,UAAU,CAAC,WAAW,EAAE;QACpB,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;YAAC,IAAI,CAAC,MAAM;YAAE,MAAM,CAAC,iBAAiB;SAAC,EAAE;YAAC,IAAI,CAAC,MAAM;YAAE,MAAM,CAAC,iBAAiB;SAAC,CAAC,CAAC;QAClH,OAAO,cAAc,CAAC,WAAW,CAAC,CAC7B,OAAO,CAAC;YAAE,KAAK,EAAE,iCAAiC;YAAE,KAAK;QAAA,CAAE,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,KAAK;YACvF,KAAK,GAAG,KAAK,CAAC;YACd,OAAO,CAAC,IAAI,EAAE,CAAC;QAC3B,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,KAAK,CAAC,CAAC;IAC/B,CAAK;IACD,gBAAgB,CAAC,WAAW,EAAE,cAAc,EAAE,aAAa,EAAE,SAAS,EAAE;QACpE,MAAM,aAAa,GAAG,sBAAsB,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,aAAa,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC;QAC1D,uEAAA;QACA,yEAAA;QACA,0EAAA;QACA,4EAAA;QACA,qEAAA;QACA,kBAAA;QACA,oEAAA;QACA,yCAAA;QACA,8DAAA;QACQ,OAAO,aAAa,CAAC,GAAG,CAAC,CAAA,CAAE,CAAC,CAAC,IAAI,EAAC,OAAO,IAAI;YACzC,UAAU,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC;YACxC,MAAM,KAAK,GAAG,IAAI,aAAa,CAAC,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;YACnF,MAAM,OAAO,GAAG,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACvE,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,IAAI,iBAAiB,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAK,mBAAmB,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YAC/G,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAE;gBAC9B,MAAM,QAAQ,GAAG,wBAAwB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACnF,iBAAiB,GAAG,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;gBACvE,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC1C,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,6BAA6B,CAAC,CAAC,CAAC;YAC1F,CAAa;YACD,iBAAiB,CAAC,OAAO,EAAC,MAAM,IAAI;gBAChC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC;YACjG,CAAa,CAAC,CAAC;YACH,WAAW,CAAC,sBAAsB,CAAC,MAAM;gBACrC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YACnE,CAAa,CAAC,CAAC;YACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAM,KAAK,CAAC,CAAC;QAC1E,CAAS,CAAC,CAAC;IACX,CAAK;IACD,mBAAmB,CAAC,WAAW,EAAE,OAAO,EAAE;QACtC,OAAO,cAAc,CAAC,WAAW,CAAC,CAC7B,GAAG,CAAC,OAAO,CAAC,CACZ,IAAI,EAAC,OAAO,IAAI;YACjB,IAAI,OAAO,EAAE;gBACT,UAAU,CAAC,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC3C,OAAO,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YACrE,CAAa;YACD,OAAO,IAAI,CAAC;QACxB,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;;KAKA,GACA,gCAAA;IACI,kBAAkB,CAAC,WAAW,EAAE,OAAO,EAAE;QACrC,IAAI,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,EAAE;YACrC,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC;QACnF,CAAS,MACI;YACD,OAAO,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,IAAI,EAAC,KAAK,IAAI;gBAChE,IAAI,KAAK,EAAE;oBACP,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;oBAC1B,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;oBAC3C,OAAO,IAAI,CAAC;gBAChC,CAAiB,MACI;oBACD,OAAO,IAAI,CAAC;gBAChC,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS;IACT,CAAK;IACD,gCAAgC,CAAC,WAAW,EAAE,OAAO,EAAE;QACnD,MAAM,WAAW,GAAG,OAAO,GAAG,CAAC,CAAC;QAChC,MAAM,KAAK,GAAG,WAAW,CAAC,UAAU,CAAC;YAAC,IAAI,CAAC,MAAM;YAAE,WAAW;SAAC,CAAC,CAAC;QACjE,IAAI,UAAU,GAAG,IAAI,CAAC;QACtB,OAAO,cAAc,CAAC,WAAW,CAAC,CAC7B,OAAO,CAAC;YAAE,KAAK,EAAE,iCAAiC;YAAE,KAAK;QAAA,CAAE,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,KAAK;YACzF,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;gBAChC,UAAU,CAAC,OAAO,CAAC,OAAO,IAAI,WAAW,CAAC,CAAC;gBAC3C,UAAU,GAAG,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YAC3E,CAAa;YACD,OAAO,CAAC,IAAI,EAAE,CAAC;QAC3B,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,UAAU,CAAC,CAAC;IACpC,CAAK;IACD,+BAA+B,CAAC,WAAW,EAAE;QACzC,MAAM,KAAK,GAAG,WAAW,CAAC,UAAU,CAAC;YACjC,IAAI,CAAC,MAAM;YACX,MAAM,CAAC,iBAAiB;SAC3B,CAAC,CAAC;QACH,IAAI,OAAO,GAAG,eAAe,CAAC;QAC9B,OAAO,cAAc,CAAC,WAAW,CAAC,CAC7B,OAAO,CAAC;YAAE,KAAK,EAAE,iCAAiC;YAAE,KAAK;YAAE,OAAO,EAAE,IAAI;QAAA,CAAE,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,KAAK;YACxG,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAC1B,OAAO,CAAC,IAAI,EAAE,CAAC;QAC3B,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,OAAO,CAAC,CAAC;IACjC,CAAK;IACD,qBAAqB,CAAC,WAAW,EAAE;QAC/B,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;YAAC,IAAI,CAAC,MAAM;YAAE,eAAe;SAAC,EAAE;YAAC,IAAI,CAAC,MAAM;YAAE,MAAM,CAAC,iBAAiB;SAAC,CAAC,CAAC;QACzG,OAAO,cAAc,CAAC,WAAW,CAAC,CAC7B,OAAO,CAAC,iCAAiC,EAAE,KAAK,CAAC,CACjD,IAAI,EAAC,SAAS,GAAI,SAAS,CAAC,GAAG,CAAC,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;IACxG,CAAK;IACD,yCAAyC,CAAC,WAAW,EAAE,WAAW,EAAE;QACxE,wEAAA;QACA,yBAAA;QACQ,MAAM,WAAW,GAAG,kCAAkC,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;QACtF,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,OAAO,sBAAsB,CAAC,WAAW,CAAC,CACrC,OAAO,CAAC;YAAE,KAAK,EAAE,UAAU;QAAA,CAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,KAAK;YAC1D,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC;YAC5D,0DAAA;YACA,6DAAA;YACA,gEAAA;YACA,kEAAA;YACA,0DAAA;YACA,gEAAA;YACA,2CAAA;YACY,MAAM,IAAI,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAC7C,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC3D,OAAO,CAAC,IAAI,EAAE,CAAC;gBACf,OAAO;YACvB,CAAa;YACb,2CAAA;YACY,OAAO,cAAc,CAAC,WAAW,CAAC,CAC7B,GAAG,CAAC,OAAO,CAAC,CACZ,IAAI,EAAC,QAAQ,IAAI;gBAClB,IAAI,CAAC,QAAQ,EAAE;oBACX,MAAM,IAAI,EAAE,CAAC;gBACjC,CAAiB;gBACD,UAAU,CAAC,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC5C,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC7E,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,OAAO,CAAC,CAAC;IACjC,CAAK;IACD,0CAA0C,CAAC,WAAW,EAAE,YAAY,EAAE;QAClE,IAAI,cAAc,GAAG,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,YAAY,CAAC,OAAO,EAAC,WAAW,IAAI;YAChC,MAAM,UAAU,GAAG,kCAAkC,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;YACrF,MAAM,KAAK,GAAG,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YACjD,MAAM,OAAO,GAAG,sBAAsB,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC;gBAAE,KAAK;YAAA,CAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,KAAK;gBAC7F,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC;gBAChE,0DAAA;gBACA,6DAAA;gBACA,gEAAA;gBACA,kEAAA;gBACA,0DAAA;gBACA,gEAAA;gBACA,2CAAA;gBACgB,MAAM,IAAI,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;gBAC7C,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBAC3D,OAAO,CAAC,IAAI,EAAE,CAAC;oBACf,OAAO;gBAC3B,CAAiB;gBACD,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC7D,CAAa,CAAC,CAAC;YACH,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,CAAS,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC,CAAC;IACxH,CAAK;IACD,mCAAmC,CAAC,WAAW,EAAE,KAAK,EAAE;QACpD,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC;QAC7B,MAAM,uBAAuB,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAC7D,0DAAA;QACA,EAAA;QACA,qEAAA;QACA,yEAAA;QACA,wEAAA;QACA,yEAAA;QACA,qCAAA;QACA,EAAA;QACA,uEAAA;QACA,sEAAA;QACA,6CAAA;QACQ,MAAM,WAAW,GAAG,kCAAkC,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAC/E,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAC/D,2EAAA;QACA,2EAAA;QACA,0BAAA;QACQ,IAAI,cAAc,GAAG,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACxD,OAAO,sBAAsB,CAAC,WAAW,CAAC,CACrC,OAAO,CAAC;YAAE,KAAK,EAAE,UAAU;QAAA,CAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO,KAAK;YAC1D,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC;YAChD,MAAM,IAAI,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAC7C,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACvD,OAAO,CAAC,IAAI,EAAE,CAAC;gBACf,OAAO;YACvB,CAAa;YACb,gEAAA;YACA,+DAAA;YACA,oDAAA;YACA,8DAAA;YACA,oBAAA;YACY,IAAI,IAAI,CAAC,MAAM,KAAK,uBAAuB,EAAE;gBACzC,OAAO;YACvB,CAAa;YACD,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACzD,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC,CAAC;IACjF,CAAK;IACD,qBAAqB,CAAC,WAAW,EAAE,QAAQ,EAAE;QACzC,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,MAAM,QAAQ,GAAG,EAAE,CAAC;QAC5B,gDAAA;QACQ,QAAQ,CAAC,OAAO,EAAC,OAAO,IAAI;YACxB,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CACpC,GAAG,CAAC,OAAO,CAAC,CACZ,IAAI,EAAC,QAAQ,IAAI;gBAClB,IAAI,QAAQ,KAAK,IAAI,EAAE;oBACnB,MAAM,IAAI,EAAE,CAAC;gBACjC,CAAiB;gBACD,UAAU,CAAC,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC5C,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;YAC7E,CAAa,CAAC,CAAC,CAAC;QAChB,CAAS,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAM,OAAO,CAAC,CAAC;IACxE,CAAK;IACD,mBAAmB,CAAC,WAAW,EAAE,KAAK,EAAE;QACpC,OAAO,mBAAmB,CAAC,WAAW,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,EAAC,gBAAgB,IAAI;YACrG,WAAW,CAAC,sBAAsB,CAAC,MAAM;gBACrC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7D,CAAa,CAAC,CAAC;YACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,GAAG,KAAK;gBACzD,OAAO,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;YACxF,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;;;;KAOA,GACA,+BAAA;IACI,wBAAwB,CAAC,OAAO,EAAE;QAC9B,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;IACnD,CAAK;IACD,uBAAuB,CAAC,GAAG,EAAE;QACzB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,EAAC,KAAK,IAAI;YACtC,IAAI,CAAC,KAAK,EAAE;gBACR,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;YACpD,CAAa;YACb,qEAAA;YACA,sBAAA;YACY,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,kCAAkC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3F,MAAM,0BAA0B,GAAG,EAAE,CAAC;YACtC,OAAO,sBAAsB,CAAC,GAAG,CAAC,CAC7B,OAAO,CAAC;gBAAE,KAAK,EAAE,UAAU;YAAA,CAAE,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,OAAO,KAAK;gBACrD,MAAM,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtB,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;oBACxB,OAAO,CAAC,IAAI,EAAE,CAAC;oBACf,OAAO;gBAC3B,CAAiB,MACI;oBACD,MAAM,IAAI,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1D,CAAiB;YACjB,CAAa,CAAC,CACG,IAAI,CAAC,MAAM;gBACZ,UAAU,CAAC,0BAA0B,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;YACpE,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACD,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE;QAClB,OAAO,wBAAwB,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAC/D,CAAK;IACL,2EAAA;IACA,0DAAA,GACI,wBAAwB,CAAC,WAAW,EAAE;QAClC,OAAO,mBAAmB,CAAC,WAAW,CAAC,CAClC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAChB,IAAI,CAAC,CAAC,QAAQ,KAAK;YACpB,OAAQ,QAAQ,IAAI;gBAChB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,uBAAuB,EAAE,eAAe;gBACxC,eAAe,EAAE,EAAE;YACnC,CAAa,EAAE;QACf,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,wBAAwB,CAAC,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE;IAChD,MAAM,QAAQ,GAAG,kCAAkC,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;IACtE,MAAM,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACpD,IAAI,WAAW,GAAG,KAAK,CAAC;IACxB,OAAO,sBAAsB,CAAC,GAAG,CAAC,CAC7B,OAAO,CAAC;QAAE,KAAK,EAAE,UAAU;QAAE,QAAQ,EAAE,IAAI;IAAA,CAAE,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,KAAK;QACzE,MAAM,CAAC,MAAM,EAAE,OAAO,EAAA,SAAA,GAAc,CAAC,CAAC,GAAG,GAAG,CAAC;QAC7C,IAAI,MAAM,KAAK,MAAM,IAAI,OAAO,KAAK,WAAW,EAAE;YAC9C,WAAW,GAAG,IAAI,CAAC;QAC/B,CAAS;QACD,OAAO,CAAC,IAAI,EAAE,CAAC;IACvB,CAAK,CAAC,CACG,IAAI,CAAC,IAAM,WAAW,CAAC,CAAC;AACjC,CAAC;AACD,oEAAA,GACA,SAAS,wBAAwB,CAAC,GAAG,EAAE,MAAM,EAAE;IAC3C,IAAI,KAAK,GAAG,KAAK,CAAC;IAClB,OAAO,mBAAmB,CAAC,GAAG,CAAC,CAC1B,aAAa,CAAC,MAAM,IAAI;QACzB,OAAO,wBAAwB,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI;YACrE,IAAI,WAAW,EAAE;gBACb,KAAK,GAAG,IAAI,CAAC;YAC7B,CAAa;YACD,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC;QAC5D,CAAS,CAAC,CAAC;IACX,CAAK,CAAC,CACG,IAAI,CAAC,IAAM,KAAK,CAAC,CAAC;AAC3B,CAAC;AACD;;CAEA,GACA,SAAS,cAAc,CAAC,GAAG,EAAE;IACzB,OAAO,QAAQ,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;AAC/C,CAAC;AACD;;CAEA,GACA,SAAS,sBAAsB,CAAC,GAAG,EAAE;IACjC,OAAO,QAAQ,CAAC,GAAG,EAAE,uBAAuB,CAAC,CAAC;AAClD,CAAC;AACD;;CAEA,GACA,SAAS,mBAAmB,CAAC,GAAG,EAAE;IAC9B,OAAO,QAAQ,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;AAC/C,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,iDAAA,GACA,MAAM,MAAM,GAAG,CAAC,CAAC;AACjB;;;;;;;;;;;;;CAaA,GACA,MAAM,iBAAiB,CAAC;IACpB,WAAW,CAAC,MAAM,CAAE;QAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,CAAK;IACD,IAAI,GAAG;QACH,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC;QACtB,OAAO,IAAI,CAAC,MAAM,CAAC;IAC3B,CAAK;IACD,OAAO,cAAc,GAAG;QAC5B,2EAAA;QACA,wEAAA;QACA,wEAAA;QACA,2EAAA;QACQ,OAAO,IAAI,iBAAiB,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;IACjD,CAAK;IACD,OAAO,aAAa,GAAG;QAC3B,+DAAA;QACQ,OAAO,IAAI,iBAAiB,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;IACjD,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,oBAAoB,CAAC;IACvB,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAE;QACvC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;IACL,2EAAA;IACA,4EAAA;IACA,gEAAA;IACA,4EAAA;IACA,6EAAA;IACA,+CAAA;IACI,gBAAgB,CAAC,WAAW,EAAE;QAC1B,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,IAAI,EAAC,QAAQ,IAAI;YACvD,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;YAC1E,QAAQ,CAAC,eAAe,GAAG,iBAAiB,CAAC,IAAI,EAAE,CAAC;YACpD,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAM,QAAQ,CAAC,eAAe,CAAC,CAAC;QACjG,CAAS,CAAC,CAAC;IACX,CAAK;IACD,4BAA4B,CAAC,WAAW,EAAE;QACtC,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,IAAI,EAAC,QAAQ,IAAI;YACvD,OAAO,eAAe,CAAC,aAAa,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,yBAAyB,CAAC,OAAO,EAAE,QAAQ,CAAC,yBAAyB,CAAC,WAAW,CAAC,CAAC,CAAC;QAC5J,CAAS,CAAC,CAAC;IACX,CAAK;IACD,wBAAwB,CAAC,WAAW,EAAE;QAClC,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,IAAI,EAAC,YAAY,GAAI,YAAY,CAAC,2BAA2B,CAAC,CAAC;IACjH,CAAK;IACD,kBAAkB,CAAC,WAAW,EAAE,2BAA2B,EAAE,yBAAyB,EAAE;QACpF,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,IAAI,EAAC,QAAQ,IAAI;YACvD,QAAQ,CAAC,2BAA2B,GAAG,2BAA2B,CAAC;YACnE,IAAI,yBAAyB,EAAE;gBAC3B,QAAQ,CAAC,yBAAyB,GAC9B,yBAAyB,CAAC,WAAW,EAAE,CAAC;YAC5D,CAAa;YACD,IAAI,2BAA2B,GAAG,QAAQ,CAAC,2BAA2B,EAAE;gBACpE,QAAQ,CAAC,2BAA2B,GAAG,2BAA2B,CAAC;YACnF,CAAa;YACD,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC5D,CAAS,CAAC,CAAC;IACX,CAAK;IACD,aAAa,CAAC,WAAW,EAAE,UAAU,EAAE;QACnC,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,MAAM;YAC3D,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,IAAI,EAAC,QAAQ,IAAI;gBACvD,QAAQ,CAAC,WAAW,IAAI,CAAC,CAAC;gBAC1B,IAAI,CAAC,4BAA4B,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBACxD,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YAChE,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACD,gBAAgB,CAAC,WAAW,EAAE,UAAU,EAAE;QACtC,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAC5D,CAAK;IACD,gBAAgB,CAAC,WAAW,EAAE,UAAU,EAAE;QACtC,OAAO,IAAI,CAAC,6BAA6B,CAAC,WAAW,EAAE,UAAU,CAAC,QAAQ,CAAC,CACtE,IAAI,CAAC,IAAM,YAAY,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CACjE,IAAI,CAAC,IAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAC9C,IAAI,EAAC,QAAQ,IAAI;YAClB,UAAU,CAAC,QAAQ,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;YACrC,QAAQ,CAAC,WAAW,IAAI,CAAC,CAAC;YAC1B,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC5D,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;KAIA,GACI,aAAa,CAAC,GAAG,EAAE,UAAU,EAAE,eAAe,EAAE;QAC5C,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,OAAO,YAAY,CAAC,GAAG,CAAC,CACnB,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,KAAK;YACzB,MAAM,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;YACvC,IAAI,UAAU,CAAC,cAAc,IAAI,UAAU,IACvC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;gBACnD,KAAK,EAAE,CAAC;gBACR,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;YACtE,CAAa;QACb,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAChD,IAAI,CAAC,IAAM,KAAK,CAAC,CAAC;IAC/B,CAAK;IACL;;KAEA,GACI,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE;QAClB,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,KAAK;YAC7C,MAAM,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC,UAAU,CAAC,CAAC;QAC1B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,gBAAgB,CAAC,WAAW,EAAE;QAC1B,OAAO,iBAAiB,CAAC,WAAW,CAAC,CAChC,GAAG,CAAC,iBAAiB,CAAC,CACtB,IAAI,EAAC,QAAQ,IAAI;YAClB,UAAU,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC;YAC9B,OAAO,QAAQ,CAAC;QAC5B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,YAAY,CAAC,WAAW,EAAE,QAAQ,EAAE;QAChC,OAAO,iBAAiB,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;IAC/E,CAAK;IACD,cAAc,CAAC,WAAW,EAAE,UAAU,EAAE;QACpC,OAAO,YAAY,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;IACtF,CAAK;IACL;;;;KAIA,GACI,4BAA4B,CAAC,UAAU,EAAE,QAAQ,EAAE;QAC/C,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,IAAI,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC,eAAe,EAAE;YAChD,QAAQ,CAAC,eAAe,GAAG,UAAU,CAAC,QAAQ,CAAC;YAC/C,OAAO,GAAG,IAAI,CAAC;QAC3B,CAAS;QACD,IAAI,UAAU,CAAC,cAAc,GAAG,QAAQ,CAAC,2BAA2B,EAAE;YAClE,QAAQ,CAAC,2BAA2B,GAAG,UAAU,CAAC,cAAc,CAAC;YACjE,OAAO,GAAG,IAAI,CAAC;QAC3B,CAAS;QACD,OAAO,OAAO,CAAC;IACvB,CAAK;IACD,cAAc,CAAC,WAAW,EAAE;QACxB,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,IAAI,EAAC,QAAQ,GAAI,QAAQ,CAAC,WAAW,CAAC,CAAC;IACzF,CAAK;IACD,aAAa,CAAC,WAAW,EAAE,MAAM,EAAE;QACvC,sEAAA;QACA,0EAAA;QACA,qDAAA;QACQ,MAAM,WAAW,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;YAAC,WAAW;YAAE,MAAM,CAAC,iBAAiB;SAAC,EAAE;YAAC,WAAW;YAAE,MAAM,CAAC,iBAAiB;SAAC,CAAC,CAAC;QAClH,IAAI,MAAM,GAAG,IAAI,CAAC;QAClB,OAAO,YAAY,CAAC,WAAW,CAAC,CAC3B,OAAO,CAAC;YAAE,KAAK;YAAE,KAAK,EAAE,6BAA6B;QAAA,CAAE,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,KAAK;YACnF,MAAM,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;YAC9C,4DAAA;YACA,0CAAA;YACY,IAAI,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE;gBACpC,MAAM,GAAG,KAAK,CAAC;gBACf,OAAO,CAAC,IAAI,EAAE,CAAC;YAC/B,CAAa;QACb,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,MAAM,CAAC,CAAC;IAChC,CAAK;IACD,eAAe,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE;QACzC,sEAAA;QACA,aAAA;QACQ,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,MAAM,KAAK,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,EAAC,GAAG,IAAI;YAChB,MAAM,IAAI,GAAG,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC1C,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;gBAAE,QAAQ;gBAAE,IAAI;YAAA,CAAE,CAAC,CAAC,CAAC;YAC7C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;QACnF,CAAS,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAK;IACD,kBAAkB,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE;QAC5C,sEAAA;QACA,aAAA;QACQ,MAAM,KAAK,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;QACvC,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,GAAG,KAAK;YAC7C,MAAM,IAAI,GAAG,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC1C,OAAO,kBAAkB,CAAC,OAAO,CAAC;gBAC9B,KAAK,CAAC,MAAM,CAAC;oBAAC,QAAQ;oBAAE,IAAI;iBAAC,CAAC;gBAC9B,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,CAAC;aAC7D,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACD,6BAA6B,CAAC,GAAG,EAAE,QAAQ,EAAE;QACzC,MAAM,KAAK,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;YAAC,QAAQ;SAAC,EAAE;YAAC,QAAQ,GAAG,CAAC;SAAC,EAClE,YAAA,GAAuB,KAAK,EAC5B,YAAA,GAAuB,IAAI,CAAC,CAAC;QACrB,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACnC,CAAK;IACD,0BAA0B,CAAC,GAAG,EAAE,QAAQ,EAAE;QACtC,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;YAAC,QAAQ;SAAC,EAAE;YAAC,QAAQ,GAAG,CAAC;SAAC,EAClE,YAAA,GAAuB,KAAK,EAC5B,YAAA,GAAuB,IAAI,CAAC,CAAC;QACrB,MAAM,KAAK,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,MAAM,GAAG,cAAc,EAAE,CAAC;QAC9B,OAAO,KAAK,CACP,OAAO,CAAC;YAAE,KAAK;YAAE,QAAQ,EAAE,IAAI;QAAA,CAAE,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,OAAO,KAAK;YACzD,MAAM,IAAI,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;YACrC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxC,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,MAAM,CAAC,CAAC;IAChC,CAAK;IACD,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE;QAClB,MAAM,IAAI,GAAG,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;YAAC,IAAI;SAAC,EAAE;YAAC,kBAAkB,CAAC,IAAI,CAAC;SAAC,EAC1E,YAAA,GAAuB,KAAK,EAC5B,YAAA,GAAuB,IAAI,CAAC,CAAC;QACrB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,OAAO,mBAAmB,CAAC,GAAG,CAAC,CAC1B,OAAO,CAAC;YACT,KAAK,EAAE,oCAAoC;YAC3C,QAAQ,EAAE,IAAI;YACd,KAAK;QACjB,CAAS,EAAE,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,OAAO,KAAK;YAC7C,mFAAA;YACA,mFAAA;YACA,UAAA;YACY,IAAI,QAAQ,KAAK,CAAC,EAAE;gBAChB,KAAK,EAAE,CAAC;gBACR,OAAO,CAAC,IAAI,EAAE,CAAC;YAC/B,CAAa;QACb,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,KAAK,GAAG,CAAC,CAAC,CAAC;IACnC,CAAK;IACL;;;;;;KAMA,GACA,gCAAA;IACI,sBAAsB,CAAC,WAAW,EAAE,QAAQ,EAAE;QAC1C,OAAO,YAAY,CAAC,WAAW,CAAC,CAC3B,GAAG,CAAC,QAAQ,CAAC,CACb,IAAI,EAAC,KAAK,IAAI;YACf,IAAI,KAAK,EAAE;gBACP,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC;YAC3C,CAAa,MACI;gBACD,OAAO,IAAI,CAAC;YAC5B,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,YAAY,CAAC,GAAG,EAAE;IACvB,OAAO,QAAQ,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;AACxC,CAAC;AACD;;CAEA,GACA,SAAS,iBAAiB,CAAC,GAAG,EAAE;IAC5B,OAAO,QAAQ,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;AAC9C,CAAC;AACD;;CAEA,GACA,SAAS,mBAAmB,CAAC,GAAG,EAAE;IAC9B,OAAO,QAAQ,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;AAChD,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,cAAc,GAAG;IACnB,MAAM,EAAE,KAAK;IACb,wBAAwB,EAAE,CAAC;IAC3B,cAAc,EAAE,CAAC;IACjB,gBAAgB,EAAE,CAAC;AACvB,CAAC,CAAC;AACF,MAAM,uBAAuB,GAAG,CAAC,CAAC,CAAC;AACnC,MAAM,4BAA4B,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;AACtD,MAAM,SAAS,CAAC;IACZ,WAAW,CACf,wFAAA;IACA,4FAAA;IACI,4BAA4B,EAChC,qEAAA;IACI,mBAAmB,EACvB,sFAAA;IACA,0FAAA;IACI,+BAA+B,CAAE;QAC7B,IAAI,CAAC,4BAA4B,GAAG,4BAA4B,CAAC;QACjE,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,+BAA+B,GAAG,+BAA+B,CAAC;IAC/E,CAAK;IACD,OAAO,aAAa,CAAC,SAAS,EAAE;QAC5B,OAAO,IAAI,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,6BAA6B,EAAE,SAAS,CAAC,uCAAuC,CAAC,CAAC;IACpI,CAAK;AACL,CAAC;AACD,SAAS,CAAC,6BAA6B,GAAG,EAAE,CAAC;AAC7C,SAAS,CAAC,uCAAuC,GAAG,IAAI,CAAC;AACzD,SAAS,CAAC,OAAO,GAAG,IAAI,SAAS,CAAC,4BAA4B,EAAE,SAAS,CAAC,6BAA6B,EAAE,SAAS,CAAC,uCAAuC,CAAC,CAAC;AAC5J,SAAS,CAAC,QAAQ,GAAG,IAAI,SAAS,CAAC,uBAAuB,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAElE;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,qBAAqB,CAAC;AACxC,MAAM,4BAA4B,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;AACrD,qEAAA,GACA,MAAM,mBAAmB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;AAC1C,mEAAA,GACA,MAAM,mBAAmB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;AAC1C,SAAS,qBAAqB,CAAC,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE;IACrE,MAAM,MAAM,GAAG,mBAAmB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACzD,IAAI,MAAM,KAAK,CAAC,EAAE;QACtB,sEAAA;QACA,sDAAA;QACQ,OAAO,mBAAmB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnD,CAAK,MACI;QACD,OAAO,MAAM,CAAC;IACtB,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,MAAM,2BAA2B,CAAC;IAC9B,WAAW,CAAC,WAAW,CAAE;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,IAAI,SAAS,CAAC,qBAAqB,CAAC,CAAC;QACnD,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;IAC/B,CAAK;IACD,SAAS,GAAG;QACR,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC;IACpC,CAAK;IACD,UAAU,CAAC,cAAc,EAAE;QACvB,MAAM,KAAK,GAAG;YAAC,cAAc;YAAE,IAAI,CAAC,SAAS,EAAE;SAAC,CAAC;QACjD,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE;YACrC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACjD,CAAS,MACI;YACD,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACxC,IAAI,qBAAqB,CAAC,KAAK,EAAE,YAAY,CAAC,GAAG,CAAC,EAAE;gBAChD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC1E,CAAa;QACb,CAAS;IACT,CAAK;IACD,IAAI,QAAQ,GAAG;QACnB,qEAAA;QACA,uEAAA;QACA,4EAAA;QACA,0EAAA;QACA,uEAAA;QACA,qBAAA;QACQ,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACrC,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,MAAM,YAAY,CAAC;IACf,WAAW,CAAC,gBAAgB,EAAE,UAAU,EAAE,UAAU,CAAE;QAClD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IAC3B,CAAK;IACD,KAAK,GAAG;QACJ,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,4BAA4B,KACzD,uBAAuB,EAAE;YACzB,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;QACjD,CAAS;IACT,CAAK;IACD,IAAI,GAAG;QACH,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QAC/B,CAAS;IACT,CAAK;IACD,IAAI,OAAO,GAAG;QACV,OAAO,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC;IACpC,CAAK;IACD,UAAU,CAAC,KAAK,EAAE;QACd,QAAQ,CAAC,SAAS,EAAE,CAAC,gCAAgC,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAClE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,wBAAwB,CAAA,gCAAA,KAAqC,KAAK,EAAE,YAAY;YAC5H,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACnB,IAAI;gBACA,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAC5E,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,IAAI,2BAA2B,CAAC,CAAC,CAAC,EAAE;oBAChC,QAAQ,CAAC,SAAS,EAAE,sDAAsD,EAAE,CAAC,CAAC,CAAC;gBACnG,CAAiB,MACI;oBACD,MAAM,wBAAwB,CAAC,CAAC,CAAC,CAAC;gBACtD,CAAiB;YACjB,CAAa;YACD,MAAM,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;QACvD,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AACD;;CAEA,GACA,MAAM,uBAAuB,CAAC;IAC1B,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAE;QAC1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,CAAK;IACD,oBAAoB,CAAC,GAAG,EAAE,UAAU,EAAE;QAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI;YACjE,OAAO,IAAI,CAAC,KAAK,CAAC,AAAC,UAAU,GAAG,KAAK,GAAI,WAAW,CAAC,CAAC;QAClE,CAAS,CAAC,CAAC;IACX,CAAK;IACD,iBAAiB,CAAC,GAAG,EAAE,CAAC,EAAE;QACtB,IAAI,CAAC,KAAK,CAAC,EAAE;YACT,OAAO,kBAAkB,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACtE,CAAS;QACD,MAAM,MAAM,GAAG,IAAI,2BAA2B,CAAC,CAAC,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC,QAAQ,CACf,aAAa,CAAC,GAAG,GAAE,MAAM,GAAI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CACtE,IAAI,CAAC,MAAM;YACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,qCAAqC,CAAC,GAAG,GAAE,cAAc,GAAI,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;QACjI,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,MAAM,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAK;IACD,aAAa,CAAC,GAAG,EAAE,UAAU,EAAE,eAAe,EAAE;QAC5C,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;IAC7E,CAAK;IACD,uBAAuB,CAAC,GAAG,EAAE,UAAU,EAAE;QACrC,OAAO,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;IACtE,CAAK;IACD,OAAO,CAAC,GAAG,EAAE,eAAe,EAAE;QAC1B,IAAI,IAAI,CAAC,MAAM,CAAC,4BAA4B,KAAK,uBAAuB,EAAE;YACtE,QAAQ,CAAC,qBAAqB,EAAE,sCAAsC,CAAC,CAAC;YACxE,OAAO,kBAAkB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC9D,CAAS;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,IAAI,EAAC,SAAS,IAAI;YAC5C,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,4BAA4B,EAAE;gBACtD,QAAQ,CAAC,qBAAqB,EAAE,CAAC,uCAAuC,EAAE,SAAS,CAAC,CAAC,CAAC,GAClF,CAAC,wBAAwB,EAAE,IAAI,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC,CAAC,CAAC;gBAC3E,OAAO,cAAc,CAAC;YACtC,CAAa,MACI;gBACD,OAAO,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;YACvE,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,YAAY,CAAC,GAAG,EAAE;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IAC/C,CAAK;IACD,oBAAoB,CAAC,GAAG,EAAE,eAAe,EAAE;QACvC,IAAI,wBAAwB,CAAC;QAC7B,IAAI,wBAAwB,EAAE,cAAc,CAAC;QACrD,+CAAA;QACQ,IAAI,gBAAgB,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,kBAAkB,CAAC;QAC9E,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CACjE,IAAI,EAAC,eAAe,IAAI;YACrC,4BAAA;YACY,IAAI,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,+BAA+B,EAAE;gBAC/D,QAAQ,CAAC,qBAAqB,EAAE,2CAA2C,GACvE,CAAC,kBAAkB,EAAE,IAAI,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC,CAAC,GACnE,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC;gBAC/B,wBAAwB,GACpB,IAAI,CAAC,MAAM,CAAC,+BAA+B,CAAC;YAChE,CAAa,MACI;gBACD,wBAAwB,GAAG,eAAe,CAAC;YAC3D,CAAa;YACD,gBAAgB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC9B,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;QACzE,CAAS,CAAC,CACG,IAAI,EAAC,UAAU,IAAI;YACpB,wBAAwB,GAAG,UAAU,CAAC;YACtC,iBAAiB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC/B,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,wBAAwB,EAAE,eAAe,CAAC,CAAC;QACtF,CAAS,CAAC,CACG,IAAI,EAAC,iBAAiB,IAAI;YAC3B,cAAc,GAAG,iBAAiB,CAAC;YACnC,gBAAgB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC9B,OAAO,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;QAC/E,CAAS,CAAC,CACG,IAAI,EAAC,gBAAgB,IAAI;YAC1B,kBAAkB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAChC,IAAI,WAAW,EAAE,IAAI,mLAAQ,CAAC,KAAK,EAAE;gBACjC,MAAM,IAAI,GAAG,0BAA0B,GACnC,CAAC,qBAAqB,EAAE,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC,GACxD,CAAC,iCAAiC,EAAE,wBAAwB,CAAC,IAAI,CAAC,GAClE,CAAC,EAAE,iBAAiB,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAC7C,CAAC,UAAU,EAAE,cAAc,CAAC,YAAY,CAAC,GACzC,CAAC,EAAE,gBAAgB,GAAG,iBAAiB,CAAC,IAAI,CAAC,GAC7C,CAAC,UAAU,EAAE,gBAAgB,CAAC,cAAc,CAAC,GAC7C,CAAC,EAAE,kBAAkB,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAC9C,CAAC,gBAAgB,EAAE,kBAAkB,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;gBACxD,QAAQ,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;YACtD,CAAa;YACD,OAAO,kBAAkB,CAAC,OAAO,CAAC;gBAC9B,MAAM,EAAE,IAAI;gBACZ,wBAAwB,EAAE,wBAAwB;gBAClD,cAAc;gBACd,gBAAgB;YAChC,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AACD,SAAS,sBAAsB,CAAC,QAAQ,EAAE,MAAM,EAAE;IAC9C,OAAO,IAAI,uBAAuB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AACzD,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,0DAAA,GACA,MAAM,wBAAwB,CAAC;IAC3B,WAAW,CAAC,EAAE,EAAE,MAAM,CAAE;QACpB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,gBAAgB,GAAG,sBAAsB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACrE,CAAK;IACD,sBAAsB,CAAC,GAAG,EAAE;QACxB,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;QACxD,MAAM,kBAAkB,GAAG,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACxE,OAAO,kBAAkB,CAAC,IAAI,EAAC,WAAW,GAAI,eAAe,CAAC,IAAI,EAAC,QAAQ,GAAI,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC;IAChH,CAAK;IACD,qBAAqB,CAAC,GAAG,EAAE;QACvB,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC,qCAAqC,CAAC,GAAG,GAAE,CAAC,IAAI;YACxD,aAAa,EAAE,CAAC;QAC5B,CAAS,CAAC,CAAC,IAAI,CAAC,IAAM,aAAa,CAAC,CAAC;IACrC,CAAK;IACD,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE;QAClB,OAAO,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAC9D,CAAK;IACD,qCAAqC,CAAC,GAAG,EAAE,CAAC,EAAE;QAC1C,OAAO,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,cAAc,GAAK,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;IAChG,CAAK;IACD,YAAY,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE;QAC7B,OAAO,gBAAgB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC1C,CAAK;IACD,eAAe,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE;QAChC,OAAO,gBAAgB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC1C,CAAK;IACD,aAAa,CAAC,GAAG,EAAE,UAAU,EAAE,eAAe,EAAE;QAC5C,OAAO,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,aAAa,CAAC,GAAG,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;IACxF,CAAK;IACD,uBAAuB,CAAC,GAAG,EAAE,GAAG,EAAE;QAC9B,OAAO,gBAAgB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC1C,CAAK;IACL;;;;;KAKA,GACI,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE;QAClB,OAAO,wBAAwB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACrD,CAAK;IACD,uBAAuB,CAAC,GAAG,EAAE,UAAU,EAAE;QACrC,MAAM,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,sBAAsB,EAAE,CAAC;QACvD,MAAM,YAAY,GAAG,aAAa,CAAC,eAAe,EAAE,CAAC;QACrD,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,MAAM,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,cAAc,KAAK;YAC5E,IAAI,cAAc,IAAI,UAAU,EAAE;gBAC9B,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,IAAI,EAAC,QAAQ,IAAI;oBAClD,IAAI,CAAC,QAAQ,EAAE;wBACX,aAAa,EAAE,CAAC;wBACxC,+DAAA;wBACA,iBAAA;wBACwB,OAAO,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM;4BACjD,YAAY,CAAC,WAAW,CAAC,MAAM,EAAE,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC;4BACxD,OAAO,mBAAmB,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC1F,CAAyB,CAAC,CAAC;oBAC3B,CAAqB;gBACrB,CAAiB,CAAC,CAAC;gBACH,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,SAAS,CACX,IAAI,CAAC,IAAM,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAChD,IAAI,CAAC,IAAM,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CACnC,IAAI,CAAC,IAAM,aAAa,CAAC,CAAC;IACvC,CAAK;IACD,YAAY,CAAC,GAAG,EAAE,UAAU,EAAE;QAC1B,MAAM,OAAO,GAAG,UAAU,CAAC,kBAAkB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC,EAAE,CAAC,cAAc,EAAE,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACvE,CAAK;IACD,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE;QAC1B,OAAO,gBAAgB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC1C,CAAK;IACL;;;;;KAKA,GACI,uBAAuB,CAAC,GAAG,EAAE,CAAC,EAAE;QAC5B,MAAM,KAAK,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,YAAY,GAAG,cAAc,CAAC,OAAO,CAAC;QAC1C,IAAI,QAAQ,CAAC;QACb,OAAO,KAAK,CACP,OAAO,CAAC;YACT,KAAK,EAAE,oCAAoC;QACvD,CAAS,EAAE,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK;YACjD,IAAI,QAAQ,KAAK,CAAC,EAAE;gBAChC,gEAAA;gBACA,gDAAA;gBACgB,IAAI,YAAY,KAAK,cAAc,CAAC,OAAO,EAAE;oBACzC,CAAC,CAAC,IAAI,WAAW,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;gBACnF,CAAiB;gBACjB,oEAAA;gBACA,gEAAA;gBACA,kEAAA;gBACA,QAAA;gBACgB,YAAY,GAAG,cAAc,CAAC;gBAC9B,QAAQ,GAAG,IAAI,CAAC;YAChC,CAAa,MACI;gBACjB,kEAAA;gBACA,2CAAA;gBACgB,YAAY,GAAG,cAAc,CAAC,OAAO,CAAC;YACtD,CAAa;QACb,CAAS,CAAC,CACG,IAAI,CAAC,MAAM;YACxB,qEAAA;YACA,iEAAA;YACA,0BAAA;YACY,IAAI,YAAY,KAAK,cAAc,CAAC,OAAO,EAAE;gBACzC,CAAC,CAAC,IAAI,WAAW,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;YAC/E,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,YAAY,CAAC,GAAG,EAAE;QACd,OAAO,IAAI,CAAC,EAAE,CAAC,sBAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC7D,CAAK;AACL,CAAC;AACD,SAAS,aAAa,CAAC,GAAG,EAAE;IACxB,OAAO;QAAC,CAAC;QAAE,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC;KAAC,CAAC;AAC7C,CAAC;AACD;;;CAGA,GACA,SAAS,WAAW,CAAC,GAAG,EAAE,cAAc,EAAE;IACtC,OAAO;QAAE,QAAQ,EAAE,CAAC;QAAE,IAAI,EAAE,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC;QAAE,cAAc;IAAA,CAAE,CAAC;AAC/E,CAAC;AACD,SAAS,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE;IAChC,OAAO,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC;AACrF,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;;;;CAaA,GACA,MAAM,0BAA0B,CAAC;IAC7B,WAAW,EAAG;QAClB,2EAAA;QACQ,IAAI,CAAC,OAAO,GAAG,IAAI,SAAS,EAAC,GAAG,GAAI,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,GAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IACpC,CAAK;IACL;;;;;KAKA,GACI,QAAQ,CAAC,QAAQ,EAAE;QACf,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACjD,CAAK;IACL;;;;;KAKA,GACI,WAAW,CAAC,GAAG,EAAE,QAAQ,EAAE;QACvB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC7F,CAAK;IACL;;;;;;;;;;KAUA,GACI,QAAQ,CAAC,WAAW,EAAE,WAAW,EAAE;QAC/B,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACpD,IAAI,aAAa,KAAK,SAAS,EAAE;YAC7B,OAAO,kBAAkB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC7D,CAAS,MACI;YACD,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QAC/D,CAAS;IACT,CAAK;IACL;;;;;;;;;KASA,GACI,UAAU,CAAC,WAAW,EAAE,YAAY,EAAE;QAClC,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IAC/D,CAAK;IACL;;;KAGA,GACI,KAAK,CAAC,WAAW,EAAE;QACf,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAK;IACL,+CAAA,GACI,gBAAgB,GAAG,CACvB,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,gCAAgC,CAAC;IACnC,WAAW,CAAC,UAAU,CAAE;QACpB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;IACD,eAAe,CAAC,YAAY,EAAE;QAC1B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACzC,CAAK;IACL;;;;;KAKA,GACI,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE,GAAG,EAAE;QAC5B,MAAM,aAAa,GAAG,oBAAoB,CAAC,WAAW,CAAC,CAAC;QACxD,OAAO,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACtC,CAAK;IACL;;;;;KAKA,GACI,WAAW,CAAC,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE;QAC5C,MAAM,KAAK,GAAG,oBAAoB,CAAC,WAAW,CAAC,CAAC;QAChD,OAAO,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;IAClE,CAAK;IACL;;;;;KAKA,GACI,cAAc,CAAC,WAAW,EAAE,SAAS,EAAE;QACnC,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,IAAI,EAAC,QAAQ,IAAI;YAClD,QAAQ,CAAC,QAAQ,IAAI,SAAS,CAAC;YAC/B,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAC3D,CAAS,CAAC,CAAC;IACX,CAAK;IACD,QAAQ,CAAC,WAAW,EAAE,WAAW,EAAE;QAC/B,IAAI,GAAG,GAAG,eAAe,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QAC1D,OAAO,oBAAoB,CAAC,WAAW,CAAC,CACnC,OAAO,CAAC;YACT,KAAK,EAAE,gCAAgC;YACvC,KAAK,EAAE,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACvD,CAAS,EAAE,CAAC,CAAC,EAAE,WAAW,KAAK;YACnB,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACrE,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,GAAG,CAAC,CAAC;IAC7B,CAAK;IACL;;;;;KAKA,GACI,aAAa,CAAC,WAAW,EAAE,WAAW,EAAE;QACpC,IAAI,MAAM,GAAG;YACT,IAAI,EAAE,CAAC;YACP,QAAQ,EAAE,eAAe,CAAC,kBAAkB,CAAC,WAAW,CAAC;QACrE,CAAS,CAAC;QACF,OAAO,oBAAoB,CAAC,WAAW,CAAC,CACnC,OAAO,CAAC;YACT,KAAK,EAAE,gCAAgC;YACvC,KAAK,EAAE,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACvD,CAAS,EAAE,CAAC,CAAC,EAAE,WAAW,KAAK;YACnB,MAAM,GAAG;gBACL,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,WAAW,CAAC;gBAC5D,IAAI,EAAE,cAAc,CAAC,WAAW,CAAC;YACjD,CAAa,CAAC;QACd,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,MAAM,CAAC,CAAC;IAChC,CAAK;IACD,UAAU,CAAC,WAAW,EAAE,YAAY,EAAE;QAClC,IAAI,OAAO,GAAG,kBAAkB,EAAE,CAAC;QACnC,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,YAAY,EAAE,CAAC,GAAG,EAAE,WAAW,KAAK;YACxE,MAAM,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;YACvD,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC/C,CAAS,CAAC,CAAC,IAAI,CAAC,IAAM,OAAO,CAAC,CAAC;IAC/B,CAAK;IACL;;;;;;KAMA,GACI,eAAe,CAAC,WAAW,EAAE,YAAY,EAAE;QACvC,IAAI,OAAO,GAAG,kBAAkB,EAAE,CAAC;QACnC,IAAI,OAAO,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,YAAY,EAAE,CAAC,GAAG,EAAE,WAAW,KAAK;YACxE,MAAM,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;YACvD,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACnC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC;QACvE,CAAS,CAAC,CAAC,IAAI,CAAC,MAAM;YACV,OAAO;gBAAE,SAAS,EAAE,OAAO;gBAAE,OAAO;YAAA,CAAE,CAAC;QACnD,CAAS,CAAC,CAAC;IACX,CAAK;IACD,cAAc,CAAC,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE;QAChD,IAAI,YAAY,CAAC,OAAO,EAAE,EAAE;YACxB,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;QAChD,CAAS;QACD,IAAI,UAAU,GAAG,IAAI,SAAS,CAAC,eAAe,CAAC,CAAC;QAChD,YAAY,CAAC,OAAO,EAAC,CAAC,GAAK,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACrF,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;QACzC,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;QAChC,OAAO,oBAAoB,CAAC,WAAW,CAAC,CACnC,OAAO,CAAC;YAAE,KAAK,EAAE,gCAAgC;YAAE,KAAK;QAAA,CAAE,EAAE,CAAC,CAAC,EAAE,WAAW,EAAE,OAAO,KAAK;YAC1F,MAAM,YAAY,GAAG,WAAW,CAAC,YAAY,CAAC;mBACvC,WAAW,CAAC,UAAU;gBACzB,WAAW,CAAC,eAAe;gBAC3B,WAAW,CAAC,UAAU;aACzB,CAAC,CAAC;YACf,sCAAA;YACY,MAAO,OAAO,IAAI,eAAe,CAAC,OAAO,EAAE,YAAY,CAAC,GAAG,CAAC,CAAE;gBAC1D,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBACxB,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;YAC5C,CAAa;YACD,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;gBAC1D,sBAAA;gBACgB,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;gBAC/B,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,GAAG,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;YACvE,CAAa;YACb,0CAAA;YACY,IAAI,OAAO,EAAE;gBACT,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAC7C,CAAa,MACI;gBACD,OAAO,CAAC,IAAI,EAAE,CAAC;YAC/B,CAAa;QACb,CAAS,CAAC,CACG,IAAI,CAAC,MAAM;YACxB,sEAAA;YACA,0DAAA;YACY,MAAO,OAAO,CAAE;gBACZ,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBACxB,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,GAAG,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;YACvE,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,yBAAyB,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE;QAC/D,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;QAC9B,MAAM,QAAQ,GAAG;YACb,UAAU,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE;YAC9B,UAAU,CAAC,WAAW,EAAE;YACxB,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC;YACjC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,GAC3B,EAAE,GACF,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE;SAC9C,CAAC;QACF,MAAM,MAAM,GAAG;YACX,UAAU,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE;YAC9B,UAAU,CAAC,WAAW,EAAE;YACxB;gBAAC,MAAM,CAAC,gBAAgB;gBAAE,MAAM,CAAC,gBAAgB;aAAC;YAClD,EAAE;SACL,CAAC;QACF,OAAO,oBAAoB,CAAC,WAAW,CAAC,CACnC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAClD,IAAI,EAAC,YAAY,IAAI;YACtB,IAAI,OAAO,GAAG,kBAAkB,EAAE,CAAC;YACnC,KAAK,MAAM,WAAW,IAAI,YAAY,CAAE;gBACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,eAAe,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;gBACrK,IAAI,QAAQ,CAAC,eAAe,EAAE,IAC9C,CAAqB,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;oBACtF,iEAAA;oBACoB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;gBACrE,CAAiB;YACjB,CAAa;YACD,OAAO,OAAO,CAAC;QAC3B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,yBAAyB,CAAC,WAAW,EAAE,eAAe,EAAE,MAAM,EAAE,KAAK,EAAE;QACnE,IAAI,OAAO,GAAG,kBAAkB,EAAE,CAAC;QACnC,MAAM,QAAQ,GAAG,oBAAoB,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QAC/D,MAAM,MAAM,GAAG,oBAAoB,CAAC,eAAe,EAAE,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;QACxE,OAAO,oBAAoB,CAAC,WAAW,CAAC,CACnC,OAAO,CAAC;YACT,KAAK,EAAE,oCAAoC;YAC3C,KAAK,EAAE,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC;QAC5D,CAAS,EAAE,CAAC,CAAC,EAAE,WAAW,EAAE,OAAO,KAAK;YAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,eAAe,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;YACrK,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YACjD,IAAI,OAAO,CAAC,IAAI,KAAK,KAAK,EAAE;gBACxB,OAAO,CAAC,IAAI,EAAE,CAAC;YAC/B,CAAa;QACb,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,OAAO,CAAC,CAAC;IACjC,CAAK;IACD,eAAe,CAAC,OAAO,EAAE;QACrB,OAAO,IAAI,mCAAmC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC;IACjG,CAAK;IACD,OAAO,CAAC,GAAG,EAAE;QACT,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,EAAC,QAAQ,GAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACzE,CAAK;IACD,WAAW,CAAC,GAAG,EAAE;QACb,OAAO,mBAAmB,CAAC,GAAG,CAAC,CAC1B,GAAG,CAAC,yBAAyB,CAAC,CAC9B,IAAI,EAAC,QAAQ,IAAI;YAClB,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;YACvB,OAAO,QAAQ,CAAC;QAC5B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,WAAW,CAAC,GAAG,EAAE,QAAQ,EAAE;QACvB,OAAO,mBAAmB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,yBAAyB,EAAE,QAAQ,CAAC,CAAC;IACjF,CAAK;IACL;;;KAGA,GACI,mBAAmB,CAAC,WAAW,EAAE,WAAW,EAAE;QAC1C,IAAI,WAAW,EAAE;YACb,MAAM,GAAG,GAAG,oBAAoB,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;YAC3E,4EAAA;YACA,4BAAA;YACY,MAAM,iBAAiB,GAAG,GAAG,CAAC,YAAY,EAAE,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC;YAC3F,IAAI,CAAC,iBAAiB,EAAE;gBACpB,OAAO,GAAG,CAAC;YAC3B,CAAa;QACb,CAAS;QACD,OAAO,eAAe,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;IAC/D,CAAK;AACL,CAAC;AACD,gDAAA,GACA,SAAS,+BAA+B,CAAC,UAAU,EAAE;IACjD,OAAO,IAAI,gCAAgC,CAAC,UAAU,CAAC,CAAC;AAC5D,CAAC;AACD;;;;;;CAMA,GACA,MAAM,mCAAmC,SAAS,0BAA0B,CAAC;IAC7E;;;;KAIA,GACI,WAAW,CAAC,aAAa,EAAE,aAAa,CAAE;QACtC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAC3C,0EAAA;QACA,eAAA;QACQ,IAAI,CAAC,cAAc,GAAG,IAAI,SAAS,CAAC,GAAG,IAAI,GAAG,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,GAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3F,CAAK;IACD,YAAY,CAAC,WAAW,EAAE;QACtB,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,iBAAiB,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAK,mBAAmB,CAAC,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAC/G,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,cAAc,KAAK;YAC1C,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,WAAW,EAAE,GAAG,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;YACtF,IAAI,cAAc,CAAC,eAAe,EAAE,EAAE;gBAClC,MAAM,GAAG,GAAG,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;gBAC9E,iBAAiB,GAAG,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC9D,MAAM,IAAI,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;gBACjC,SAAS,IAAI,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;gBACrC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YAClF,CAAa,MACI;gBACD,SAAS,IAAI,WAAW,CAAC,IAAI,CAAC;gBAC9B,IAAI,IAAI,CAAC,aAAa,EAAE;oBACxC,kEAAA;oBACA,iEAAA;oBACA,iEAAA;oBACA,0CAAA;oBACoB,MAAM,UAAU,GAAG,kBAAkB,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,cAAc,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;oBAChI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;gBAC7F,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;QACH,iBAAiB,CAAC,OAAO,EAAC,MAAM,IAAI;YAChC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,0BAA0B,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC;QAC3G,CAAS,CAAC,CAAC;QACH,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;QACzE,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAK;IACD,YAAY,CAAC,WAAW,EAAE,WAAW,EAAE;QAC3C,wFAAA;QACQ,OAAO,IAAI,CAAC,aAAa,CACpB,aAAa,CAAC,WAAW,EAAE,WAAW,CAAC,CACvC,IAAI,EAAC,SAAS,IAAI;YACnB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,EAAE;gBACjC,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC,QAAQ;YACrD,CAAa,CAAC,CAAC;YACH,OAAO,SAAS,CAAC,QAAQ,CAAC;QACtC,CAAS,CAAC,CAAC;IACX,CAAK;IACD,eAAe,CAAC,WAAW,EAAE,YAAY,EAAE;QAC/C,yEAAA;QACA,iBAAA;QACQ,OAAO,IAAI,CAAC,aAAa,CACpB,eAAe,CAAC,WAAW,EAAE,YAAY,CAAC,CAC1C,IAAI,CAAC,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK;YAC9C,wEAAA;YACA,+DAAA;YACA,uDAAA;YACY,OAAO,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,IAAI,KAAK;gBACnC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,EAAE;oBACjC,IAAI;oBACJ,QAAQ,EAAE,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,QAAQ;gBACjE,CAAiB,CAAC,CAAC;YACnB,CAAa,CAAC,CAAC;YACH,OAAO,SAAS,CAAC;QAC7B,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AACD,SAAS,mBAAmB,CAAC,GAAG,EAAE;IAC9B,OAAO,QAAQ,CAAC,GAAG,EAAE,2BAA2B,CAAC,CAAC;AACtD,CAAC;AACD;;CAEA,GACA,SAAS,oBAAoB,CAAC,GAAG,EAAE;IAC/B,OAAO,QAAQ,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;AAChD,CAAC;AACD;;;CAGA,GACA,SAAS,KAAK,CAAC,WAAW,EAAE;IACxB,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACxC,OAAO;QACX,eAAA,GAA0B,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QACxD,iBAAA,GAA4B,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QACjD,eAAA,GAA0B,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;KAC1C,CAAC;AACN,CAAC;AACD;;;CAGA,GACA,SAAS,aAAa,CAAC,WAAW,EAAE,QAAQ,EAAE;IAC1C,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACxC,OAAO;QACX,eAAA,GAA0B,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QACxD,iBAAA,GAA4B,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QACzC,gBAAgB,CAAC,QAAQ,CAAC;QAClC,eAAA,GAA0B,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;KAC1C,CAAC;AACN,CAAC;AACD;;;CAGA,GACA,SAAS,oBAAoB,CAAC,eAAe,EAAE,MAAM,EAAE;IACnD,MAAM,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IAC/C,OAAO;QACX,iBAAA,GAA4B,eAAe;QACnC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC;QACzC,eAAA,GAA0B,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QACxD,eAAA,GAA0B,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE;KACjE,CAAC;AACN,CAAC;AACD;;;;;;CAMA,GACA,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;IAC3B,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IAC9B,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACnC,8JAAA;IACI,IAAI,GAAG,GAAG,CAAC,CAAC;IACZ,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC,CAAE;QAC9D,GAAG,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,IAAI,GAAG,EAAE;YACL,OAAO,GAAG,CAAC;QACvB,CAAS;IACT,CAAK;IACD,GAAG,GAAG,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;IACrD,IAAI,GAAG,EAAE;QACL,OAAO,GAAG,CAAC;IACnB,CAAK;IACD,GAAG,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1E,IAAI,GAAG,EAAE;QACL,OAAO,GAAG,CAAC;IACnB,CAAK;IACD,OAAO,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/E,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;;;;;;;;;;;;;;CAuBA,GACA,MAAM,cAAc,GAAG,EAAE,CAAC;AAE1B;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,iBAAiB,CAAC;IACpB,WAAW,CAAC,iBAAiB,EACjC;;;;;KAKA,GACI,aAAa,CAAE;QACX,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IAC3C,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;CAKA,GACA,MAAM,kBAAkB,CAAC;IACrB,WAAW,CAAC,mBAAmB,EAAE,aAAa,EAAE,oBAAoB,EAAE,YAAY,CAAE;QAChF,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACzC,CAAK;IACL;;;;;KAKA,GACI,WAAW,CAAC,WAAW,EAAE,GAAG,EAAE;QAC1B,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,OAAO,IAAI,CAAC,oBAAoB,CAC3B,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAC5B,IAAI,EAAC,KAAK,IAAI;YACf,OAAO,GAAG,KAAK,CAAC;YAChB,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QACvE,CAAS,CAAC,CACG,IAAI,EAAC,QAAQ,IAAI;YAClB,IAAI,OAAO,KAAK,IAAI,EAAE;gBAClB,wBAAwB,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,KAAK,EAAE,EAAE,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC;YACzG,CAAa;YACD,OAAO,QAAQ,CAAC;QAC5B,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;;KAKA,GACI,YAAY,CAAC,WAAW,EAAE,IAAI,EAAE;QAC5B,OAAO,IAAI,CAAC,mBAAmB,CAC1B,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,CAC7B,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,CAAC,CAAC;IAC9G,CAAK;IACL;;;;;;;;;KASA,GACI,uBAAuB,CAAC,WAAW,EAAE,IAAI,EAAE,qBAAqB,GAAG,cAAc,EAAE,EAAE;QACjF,MAAM,QAAQ,GAAG,aAAa,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM;YACjE,OAAO,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,qBAAqB,CAAC,CAAC,IAAI,EAAC,kBAAkB,IAAI;gBACpG,IAAI,MAAM,GAAG,WAAW,EAAE,CAAC;gBAC3B,kBAAkB,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,iBAAiB,KAAK;oBAC3D,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;gBAC7F,CAAiB,CAAC,CAAC;gBACH,OAAO,MAAM,CAAC;YAC9B,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;KAIA,GACI,qBAAqB,CAAC,WAAW,EAAE,IAAI,EAAE;QACrC,MAAM,QAAQ,GAAG,aAAa,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;IAC/I,CAAK;IACL;;;KAGA,GACI,gBAAgB,CAAC,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAE;QAC1C,MAAM,eAAe,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,OAAO,EAAC,GAAG,IAAI;YAChB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBACpB,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1C,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,oBAAoB,CAC3B,WAAW,CAAC,WAAW,EAAE,eAAe,CAAC,CACzC,IAAI,EAAC,MAAM,IAAI;YAChB,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK;gBACzB,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACvC,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;;;;;;;;KAWA,GACI,YAAY,CAAC,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,qBAAqB,EAAE;QAC7D,IAAI,oBAAoB,GAAG,kBAAkB,EAAE,CAAC;QAChD,MAAM,aAAa,GAAG,iBAAiB,EAAE,CAAC;QAC1C,MAAM,OAAO,GAAG,uBAAuB,EAAE,CAAC;QAC1C,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK;YACrB,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAClD,0EAAA;YACA,uEAAA;YACA,+DAAA;YACA,yBAAA;YACA,0EAAA;YACA,yEAAA;YACA,4DAAA;YACY,IAAI,qBAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAClD,CAAiB,OAAO,KAAK,SAAS,IAAI,OAAO,CAAC,QAAQ,YAAY,aAAa,CAAC,EAAE;gBACtE,oBAAoB,GAAG,oBAAoB,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACjF,CAAa,MACI,IAAI,OAAO,KAAK,SAAS,EAAE;gBAC5B,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC;gBAC5D,wBAAwB,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC;YAClH,CAAa,MACI;gBACjB,oBAAA;gBACA,gEAAA;gBACgB,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC;YAC9D,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE,oBAAoB,CAAC,CAAC,IAAI,EAAC,kBAAkB,IAAI;YACjG,kBAAkB,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,IAAI,GAAK,aAAa,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;YACxF,IAAI,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,QAAQ,KAAK;gBACpC,IAAI,EAAE,CAAC;gBACP,OAAO,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,iBAAiB,CAAC,QAAQ,EAAE,CAAC,EAAE,GAAG,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;YAC9J,CAAa,CAAC,CAAC;YACH,OAAO,OAAO,CAAC;QAC3B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,0BAA0B,CAAC,WAAW,EAAE,IAAI,EAAE;QAC1C,MAAM,KAAK,GAAG,iBAAiB,EAAE,CAAC;QAC1C,yEAAA;QACQ,IAAI,kBAAkB,GAAG,IAAI,SAAS,CAAC,CAAC,IAAI,EAAE,IAAI,GAAK,IAAI,GAAG,IAAI,CAAC,CAAC;QACpE,IAAI,SAAS,GAAG,cAAc,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC,aAAa,CACpB,0CAA0C,CAAC,WAAW,EAAE,IAAI,CAAC,CAC7D,IAAI,EAAC,OAAO,IAAI;YACjB,KAAK,MAAM,KAAK,IAAI,OAAO,CAAE;gBACzB,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,EAAC,GAAG,IAAI;oBACxB,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBAC9B,IAAI,OAAO,KAAK,IAAI,EAAE;wBAClB,OAAO;oBAC/B,CAAqB;oBACD,IAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC,KAAK,EAAE,CAAC;oBAC/C,IAAI,GAAG,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;oBAC7C,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;oBACrB,MAAM,MAAM,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,cAAc,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;oBACpF,kBAAkB,GAAG,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC1F,CAAiB,CAAC,CAAC;YACnB,CAAa;QACb,CAAS,CAAC,CACG,IAAI,CAAC,MAAM;YACZ,MAAM,QAAQ,GAAG,EAAE,CAAC;YAChC,wEAAA;YACA,iBAAA;YACY,MAAM,IAAI,GAAG,kBAAkB,CAAC,kBAAkB,EAAE,CAAC;YACrD,MAAO,IAAI,CAAC,OAAO,EAAE,CAAE;gBACnB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;gBAC7B,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC;gBAC1B,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC;gBACzB,MAAM,QAAQ,GAAG,cAAc,EAAE,CAAC;gBAClC,IAAI,CAAC,OAAO,EAAC,GAAG,IAAI;oBAChB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;wBACrB,MAAM,eAAe,GAAG,wBAAwB,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;wBAChF,IAAI,eAAe,KAAK,IAAI,EAAE;4BAC1B,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;wBAC/D,CAAyB;wBACD,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACvD,CAAqB;gBACrB,CAAiB,CAAC,CAAC;gBACH,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;YACtG,CAAa;YACD,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACxD,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,KAAK,CAAC,CAAC;IAC/B,CAAK;IACL;;;KAGA,GACI,yCAAyC,CAAC,WAAW,EAAE,YAAY,EAAE;QACjE,OAAO,IAAI,CAAC,mBAAmB,CAC1B,UAAU,CAAC,WAAW,EAAE,YAAY,CAAC,CACrC,IAAI,EAAC,IAAI,GAAI,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9E,CAAK;IACL;;;;;;KAMA,GACI,yBAAyB,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE;QAClD,IAAI,iBAAiB,CAAC,KAAK,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC,iCAAiC,CAAC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;QACnF,CAAS,MACI,IAAI,sBAAsB,CAAC,KAAK,CAAC,EAAE;YACpC,OAAO,IAAI,CAAC,wCAAwC,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAC7F,CAAS,MACI;YACD,OAAO,IAAI,CAAC,mCAAmC,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACxF,CAAS;IACT,CAAK;IACL;;;;;;;;;;;;;;KAcA,GACI,gBAAgB,CAAC,WAAW,EAAE,eAAe,EAAE,MAAM,EAAE,KAAK,EAAE;QAC1D,OAAO,IAAI,CAAC,mBAAmB,CAC1B,yBAAyB,CAAC,WAAW,EAAE,eAAe,EAAE,MAAM,EAAE,KAAK,CAAC,CACtE,IAAI,CAAC,CAAC,YAAY,KAAK;YACxB,MAAM,eAAe,GAAG,KAAK,GAAG,YAAY,CAAC,IAAI,GAAG,CAAC,GAC/C,IAAI,CAAC,oBAAoB,CAAC,6BAA6B,CAAC,WAAW,EAAE,eAAe,EAAE,MAAM,CAAC,cAAc,EAAE,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC,GACvI,kBAAkB,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC;YAC9D,0FAAA;YACA,8FAAA;YACA,2FAAA;YACA,gBAAA;YACY,IAAI,cAAc,GAAG,wBAAwB,CAAC;YAC9C,IAAI,YAAY,GAAG,YAAY,CAAC;YAChC,OAAO,eAAe,CAAC,IAAI,EAAC,QAAQ,IAAI;gBACpC,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,OAAO,KAAK;oBAC1D,IAAI,cAAc,GAAG,OAAO,CAAC,cAAc,EAAE;wBACzC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;oBAChE,CAAqB;oBACD,IAAI,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;wBACvB,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;oBAC5D,CAAqB;oBACD,OAAO,IAAI,CAAC,mBAAmB,CAC1B,QAAQ,CAAC,WAAW,EAAE,GAAG,CAAC,CAC1B,IAAI,EAAC,GAAG,IAAI;wBACb,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;oBACrE,CAAqB,CAAC,CAAC;gBACvB,CAAiB,CAAC,CACG,IAAI,CAAC,IAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC,CACtE,IAAI,CAAC,IAAM,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,cAAc,EAAE,CAAC,CAAC,CACpF,IAAI,EAAC,SAAS,GAAA,CAAK;wBACpB,OAAO,EAAE,cAAc;wBACvB,OAAO,EAAE,wCAAwC,CAAC,SAAS,CAAC;oBAChF,CAAiB,CAAC,CAAC,CAAC;YACpB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACD,iCAAiC,CAAC,WAAW,EAAE,OAAO,EAAE;QAC5D,oCAAA;QACQ,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAC,QAAQ,IAAI;YAC5E,IAAI,MAAM,GAAG,WAAW,EAAE,CAAC;YAC3B,IAAI,QAAQ,CAAC,eAAe,EAAE,EAAE;gBAC5B,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YAC/D,CAAa;YACD,OAAO,MAAM,CAAC;QAC1B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,wCAAwC,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE;QACjE,MAAM,YAAY,GAAG,KAAK,CAAC,eAAe,CAAC;QAC3C,IAAI,OAAO,GAAG,WAAW,EAAE,CAAC;QAC5B,OAAO,IAAI,CAAC,YAAY,CACnB,oBAAoB,CAAC,WAAW,EAAE,YAAY,CAAC,CAC/C,IAAI,EAAC,OAAO,IAAI;YAC7B,mEAAA;YACA,0CAAA;YACY,OAAO,kBAAkB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,MAAM,KAAK;gBACnD,MAAM,eAAe,GAAG,uBAAuB,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;gBACnF,OAAO,IAAI,CAAC,mCAAmC,CAAC,WAAW,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC,IAAI,EAAC,CAAC,IAAI;oBAC5F,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK;wBACpB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;oBAC3D,CAAqB,CAAC,CAAC;gBACvB,CAAiB,CAAC,CAAC;YACnB,CAAa,CAAC,CAAC,IAAI,CAAC,IAAM,OAAO,CAAC,CAAC;QACnC,CAAS,CAAC,CAAC;IACX,CAAK;IACD,mCAAmC,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE;QACpE,oDAAA;QACQ,IAAI,QAAQ,CAAC;QACb,OAAO,IAAI,CAAC,oBAAoB,CAC3B,wBAAwB,CAAC,WAAW,EAAE,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,cAAc,CAAC,CACxE,IAAI,EAAC,MAAM,IAAI;YAChB,QAAQ,GAAG,MAAM,CAAC;YAClB,OAAO,IAAI,CAAC,mBAAmB,CAAC,yBAAyB,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QAC5G,CAAS,CAAC,CACG,IAAI,EAAC,eAAe,IAAI;YACrC,yEAAA;YACA,kEAAA;YACY,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK;gBAC7B,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;gBAC7B,IAAI,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;oBACnC,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,GAAG,EAAE,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3G,CAAiB;YACjB,CAAa,CAAC,CAAC;YACf,kDAAA;YACY,IAAI,OAAO,GAAG,WAAW,EAAE,CAAC;YAC5B,eAAe,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,QAAQ,KAAK;gBACvC,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAClC,IAAI,OAAO,KAAK,SAAS,EAAE;oBACvB,wBAAwB,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,KAAK,EAAE,EAAE,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC;gBAC7G,CAAiB;gBACjB,2DAAA;gBACgB,IAAI,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;oBAC/B,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;gBAC5D,CAAiB;YACjB,CAAa,CAAC,CAAC;YACH,OAAO,OAAO,CAAC;QAC3B,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,iBAAiB,CAAC;IACpB,WAAW,CAAC,UAAU,CAAE;QACpB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;IACtC,CAAK;IACD,iBAAiB,CAAC,WAAW,EAAE,QAAQ,EAAE;QACrC,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtE,CAAK;IACD,kBAAkB,CAAC,WAAW,EAAE,cAAc,EAAE;QAC5C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC,CAAC;QACxE,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,aAAa,CAAC,WAAW,EAAE,SAAS,EAAE;QAClC,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IAC5E,CAAK;IACD,cAAc,CAAC,WAAW,EAAE,KAAK,EAAE;QAC/B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9D,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,MAAM,0BAA0B,CAAC;IAC7B,WAAW,EAAG;QAClB,6EAAA;QACA,0CAAA;QACQ,IAAI,CAAC,QAAQ,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QACtD,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;IAC1C,CAAK;IACD,UAAU,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAClE,CAAK;IACD,WAAW,CAAC,WAAW,EAAE,IAAI,EAAE;QAC3B,MAAM,MAAM,GAAG,aAAa,EAAE,CAAC;QAC/B,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,GAAG,KAAK;YAC7C,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI;gBACrD,IAAI,OAAO,KAAK,IAAI,EAAE;oBAClB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;gBAC7C,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC,IAAI,CAAC,IAAM,MAAM,CAAC,CAAC;IAC9B,CAAK;IACD,YAAY,CAAC,WAAW,EAAE,cAAc,EAAE,QAAQ,EAAE;QAChD,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,KAAK;YAC9B,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;QACpE,CAAS,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,wBAAwB,CAAC,WAAW,EAAE,YAAY,EAAE,OAAO,EAAE;QACzD,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAChD,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,IAAI,CAAC,OAAO,EAAC,GAAG,GAAK,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAClD,CAAS;QACD,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,wBAAwB,CAAC,WAAW,EAAE,UAAU,EAAE,YAAY,EAAE;QAC5D,MAAM,MAAM,GAAG,aAAa,EAAE,CAAC;QAC/B,MAAM,2BAA2B,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1D,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QACrD,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACnD,MAAO,IAAI,CAAC,OAAO,EAAE,CAAE;YACnB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAC7B,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC;YAC5B,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;YAC7B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAClC,MAAM;YACtB,CAAa;YACb,iCAAA;YACY,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,KAAK,2BAA2B,EAAE;gBACjD,SAAS;YACzB,CAAa;YACD,IAAI,OAAO,CAAC,cAAc,GAAG,YAAY,EAAE;gBACvC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,CAAC;YACtD,CAAa;QACb,CAAS;QACD,OAAO,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAClD,CAAK;IACD,6BAA6B,CAAC,WAAW,EAAE,eAAe,EAAE,YAAY,EAAE,KAAK,EAAE;QAC7E,IAAI,iBAAiB,GAAG,IAAI,SAAS,CAAC,CAAC,IAAI,EAAE,IAAI,GAAK,IAAI,GAAG,IAAI,CAAC,CAAC;QACnE,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QACzC,MAAO,IAAI,CAAC,OAAO,EAAE,CAAE;YACnB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAC7B,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC;YAC5B,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;YAC7B,IAAI,GAAG,CAAC,kBAAkB,EAAE,KAAK,eAAe,EAAE;gBAC9C,SAAS;YACzB,CAAa;YACD,IAAI,OAAO,CAAC,cAAc,GAAG,YAAY,EAAE;gBACvC,IAAI,kBAAkB,GAAG,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;gBACvE,IAAI,kBAAkB,KAAK,IAAI,EAAE;oBAC7B,kBAAkB,GAAG,aAAa,EAAE,CAAC;oBACrC,iBAAiB,GAAG,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;gBAC7G,CAAiB;gBACD,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,CAAC;YAClE,CAAa;QACb,CAAS;QACD,MAAM,MAAM,GAAG,aAAa,EAAE,CAAC;QAC/B,MAAM,SAAS,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAC;QAClD,MAAO,SAAS,CAAC,OAAO,EAAE,CAAE;YACxB,MAAM,KAAK,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;YAClC,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC;YAC7B,QAAQ,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,OAAO,GAAK,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;YAC7D,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,KAAK,EAAE;gBACxB,MAAM;YACtB,CAAa;QACb,CAAS;QACD,OAAO,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAClD,CAAK;IACD,WAAW,CAAC,WAAW,EAAE,cAAc,EAAE,QAAQ,EAAE;QACvD,yDAAA;QACQ,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACjD,IAAI,QAAQ,KAAK,IAAI,EAAE;YACnB,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAC/B,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC,CAC5B,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QACvE,CAAS;QACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,OAAO,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC;QAClG,sEAAA;QACQ,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACtD,IAAI,KAAK,KAAK,SAAS,EAAE;YACrB,KAAK,GAAG,cAAc,EAAE,CAAC;YACzB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QAC7D,CAAS;QACD,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3E,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;;;;;CAcA,GACA,MAAM,YAAY,CAAC;IACf,WAAW,EAAG;QAClB,+DAAA;QACQ,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAClE,qEAAA;QACQ,IAAI,CAAC,YAAY,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;IAC1E,CAAK;IACL,8DAAA,GACI,OAAO,GAAG;QACN,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IACxC,CAAK;IACL,iEAAA,GACI,YAAY,CAAC,GAAG,EAAE,EAAE,EAAE;QAClB,MAAM,GAAG,GAAG,IAAI,YAAY,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvD,CAAK;IACL,gEAAA,GACI,aAAa,CAAC,IAAI,EAAE,EAAE,EAAE;QACpB,IAAI,CAAC,OAAO,EAAC,GAAG,GAAI,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IACxD,CAAK;IACL;;;KAGA,GACI,eAAe,CAAC,GAAG,EAAE,EAAE,EAAE;QACrB,IAAI,CAAC,SAAS,CAAC,IAAI,YAAY,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IAClD,CAAK;IACD,gBAAgB,CAAC,IAAI,EAAE,EAAE,EAAE;QACvB,IAAI,CAAC,OAAO,EAAC,GAAG,GAAI,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3D,CAAK;IACL;;;KAGA,GACI,qBAAqB,CAAC,EAAE,EAAE;QACtB,MAAM,QAAQ,GAAG,IAAI,WAAW,CAAC,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;QACvD,MAAM,QAAQ,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAChD,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QAClD,MAAM,IAAI,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;YAAC,QAAQ;YAAE,MAAM;SAAC,GAAE,GAAG,IAAI;YACxD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAS,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,mBAAmB,GAAG;QAClB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3D,CAAK;IACD,SAAS,CAAC,GAAG,EAAE;QACX,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC1D,CAAK;IACD,eAAe,CAAC,EAAE,EAAE;QAChB,MAAM,QAAQ,GAAG,IAAI,WAAW,CAAC,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;QACvD,MAAM,QAAQ,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAChD,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;QAClD,IAAI,IAAI,GAAG,cAAc,EAAE,CAAC;QAC5B,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;YAAC,QAAQ;YAAE,MAAM;SAAC,GAAE,GAAG,IAAI;YACxD,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACrC,CAAS,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,WAAW,CAAC,GAAG,EAAE;QACb,MAAM,GAAG,GAAG,IAAI,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACrC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;QACvD,OAAO,QAAQ,KAAK,IAAI,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC9D,CAAK;AACL,CAAC;AACD,MAAM,YAAY,CAAC;IACf,WAAW,CAAC,GAAG,EAAE,eAAe,CAAE;QAC9B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC/C,CAAK;IACL,8BAAA,GACI,OAAO,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE;QAC7B,OAAQ,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,IAC/C,mBAAmB,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,eAAe,CAAC,EAAE;IAC9E,CAAK;IACL,8BAAA,GACI,OAAO,iBAAiB,CAAC,IAAI,EAAE,KAAK,EAAE;QAClC,OAAQ,mBAAmB,CAAC,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,eAAe,CAAC,IACpE,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE;IACzD,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,mBAAmB,CAAC;IACtB,WAAW,CAAC,YAAY,EAAE,iBAAiB,CAAE;QACzC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QACnD;;;SAGA,GACQ,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QAChC,4EAAA,GACQ,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QAC7B,sEAAA,GACQ,IAAI,CAAC,oBAAoB,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IAC7E,CAAK;IACD,UAAU,CAAC,WAAW,EAAE;QACpB,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;IAC3E,CAAK;IACD,gBAAgB,CAAC,WAAW,EAAE,cAAc,EAAE,aAAa,EAAE,SAAS,EAAE;QACpE,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC9D,CAAS;QACD,MAAM,KAAK,GAAG,IAAI,aAAa,CAAC,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;QACnF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,iEAAA;QACQ,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAE;YAC9B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;YACnG,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC,WAAW,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACnG,CAAS;QACD,OAAO,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACjD,CAAK;IACD,mBAAmB,CAAC,WAAW,EAAE,OAAO,EAAE;QACtC,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3E,CAAK;IACD,gCAAgC,CAAC,WAAW,EAAE,OAAO,EAAE;QACnD,MAAM,WAAW,GAAG,OAAO,GAAG,CAAC,CAAC;QACxC,yEAAA;QACA,sBAAA;QACQ,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAClD,MAAM,KAAK,GAAG,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;QAC1C,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;IAChH,CAAK;IACD,+BAA+B,GAAG;QAC9B,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,GAAG,eAAe,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;IACpH,CAAK;IACD,qBAAqB,CAAC,WAAW,EAAE;QAC/B,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;IACtE,CAAK;IACD,yCAAyC,CAAC,WAAW,EAAE,WAAW,EAAE;QAChE,MAAM,KAAK,GAAG,IAAI,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC/C,MAAM,GAAG,GAAG,IAAI,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACpE,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC;YAAC,KAAK;YAAE,GAAG;SAAC,EAAE,GAAG,IAAI;YAC1D,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAC1D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAS,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAClD,CAAK;IACD,0CAA0C,CAAC,WAAW,EAAE,YAAY,EAAE;QAClE,IAAI,cAAc,GAAG,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACxD,YAAY,CAAC,OAAO,EAAC,WAAW,IAAI;YAChC,MAAM,KAAK,GAAG,IAAI,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAC/C,MAAM,GAAG,GAAG,IAAI,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,iBAAiB,CAAC,CAAC;YACpE,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC;gBAAC,KAAK;gBAAE,GAAG;aAAC,GAAE,GAAG,IAAI;gBAC1D,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YACzE,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC,CAAC;IACpF,CAAK;IACD,mCAAmC,CAAC,WAAW,EAAE,KAAK,EAAE;QAC5D,uEAAA;QACA,SAAA;QACQ,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC;QAC1B,MAAM,2BAA2B,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAC9D,yEAAA;QACA,4EAAA;QACA,qEAAA;QACA,kEAAA;QACQ,IAAI,SAAS,GAAG,MAAM,CAAC;QACvB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE;YACvC,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC5C,CAAS;QACD,MAAM,KAAK,GAAG,IAAI,YAAY,CAAC,IAAI,WAAW,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QACtE,4EAAA;QACA,SAAA;QACQ,IAAI,cAAc,GAAG,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACxD,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAC,GAAG,IAAI;YAC1C,MAAM,UAAU,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;YAChC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;gBAChC,OAAO,KAAK,CAAC;YAC7B,CAAa,MACI;gBACjB,sEAAA;gBACA,qEAAA;gBACA,wCAAA;gBACA,8DAAA;gBACA,oBAAA;gBACgB,IAAI,UAAU,CAAC,MAAM,KAAK,2BAA2B,EAAE;oBACnD,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;gBAC7E,CAAiB;gBACD,OAAO,IAAI,CAAC;YAC5B,CAAa;QACb,CAAS,EAAE,KAAK,CAAC,CAAC;QACV,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC,CAAC;IACpF,CAAK;IACD,mBAAmB,CAAC,QAAQ,EAAE;QAClC,2EAAA;QACA,2EAAA;QACQ,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,QAAQ,CAAC,OAAO,EAAC,OAAO,IAAI;YACxB,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAC9C,IAAI,KAAK,KAAK,IAAI,EAAE;gBAChB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IACtB,CAAK;IACD,mBAAmB,CAAC,WAAW,EAAE,KAAK,EAAE;QAC5C,oDAAA;QACQ,MAAM,UAAU,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACzE,UAAU,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC3B,IAAI,UAAU,GAAG,IAAI,CAAC,oBAAoB,CAAC;QAC3C,OAAO,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,QAAQ,KAAK;YAC7D,MAAM,GAAG,GAAG,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YAC1D,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACpC,OAAO,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,WAAW,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC7F,CAAS,CAAC,CAAC,IAAI,CAAC,MAAM;YACV,IAAI,CAAC,oBAAoB,GAAG,UAAU,CAAC;QACnD,CAAS,CAAC,CAAC;IACX,CAAK;IACD,wBAAwB,CAAC,OAAO,EAAE;IACtC,4EAAA;IACA,CAAK;IACD,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE;QAClB,MAAM,GAAG,GAAG,IAAI,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACrC,MAAM,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;QAClE,OAAO,kBAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IACjF,CAAK;IACD,uBAAuB,CAAC,GAAG,EAAE;QACzB,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACtC,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACL;;;;;;;KAOA,GACI,sBAAsB,CAAC,OAAO,EAAE,MAAM,EAAE;QACpC,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC3C,OAAO,KAAK,CAAC;IACrB,CAAK;IACL;;;;;;;;KAQA,GACI,cAAc,CAAC,OAAO,EAAE;QACpB,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7C,gDAAA;YACY,OAAO,CAAC,CAAC;QACrB,CAAS;QACT,0EAAA;QACA,yEAAA;QACA,yEAAA;QACA,sCAAA;QACQ,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QACnD,OAAO,OAAO,GAAG,YAAY,CAAC;IACtC,CAAK;IACL;;;KAGA,GACI,iBAAiB,CAAC,OAAO,EAAE;QACvB,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC3C,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YACjD,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACxC,OAAO,KAAK,CAAC;IACrB,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,SAAS,gBAAgB,GAAG;IACxB,OAAO,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACjD,CAAC;AACD;;;CAGA,GACA,MAAM,6BAA6B,CAAC;IACpC;;;;KAIA,GACI,WAAW,CAAC,KAAK,CAAE;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC3B,wDAAA,GACQ,IAAI,CAAC,IAAI,GAAG,gBAAgB,EAAE,CAAC;QACvC,kCAAA,GACQ,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IACtB,CAAK;IACD,eAAe,CAAC,YAAY,EAAE;QAC1B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACzC,CAAK;IACL;;;;;KAKA,GACI,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACvB,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACpB,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjC,MAAM,YAAY,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;QAC5C,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YAC9B,QAAQ,EAAE,GAAG,CAAC,WAAW,EAAE;YAC3B,IAAI,EAAE,WAAW;QAC7B,CAAS,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,IAAI,WAAW,GAAG,YAAY,CAAC;QACxC,OAAO,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC,WAAW,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAC7F,CAAK;IACL;;;;;KAKA,GACI,WAAW,CAAC,WAAW,EAAE;QACrB,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzC,IAAI,KAAK,EAAE;YACP,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAC1C,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC;QACpC,CAAS;IACT,CAAK;IACD,QAAQ,CAAC,WAAW,EAAE,WAAW,EAAE;QAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzC,OAAO,kBAAkB,CAAC,OAAO,CAAC,KAAK,GACjC,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,GAC5B,eAAe,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;IAC/D,CAAK;IACD,UAAU,CAAC,WAAW,EAAE,YAAY,EAAE;QAClC,IAAI,OAAO,GAAG,kBAAkB,EAAE,CAAC;QACnC,YAAY,CAAC,OAAO,EAAC,WAAW,IAAI;YAChC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACzC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,GACrC,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,GAC5B,eAAe,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;QACnE,CAAS,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACnD,CAAK;IACD,yBAAyB,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE;QAC/D,IAAI,OAAO,GAAG,kBAAkB,EAAE,CAAC;QAC3C,2EAAA;QACA,oDAAA;QACQ,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC;QAClC,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QACzD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACnD,MAAO,QAAQ,CAAC,OAAO,EAAE,CAAE;YACvB,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,EAAE,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;YACxD,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACtC,MAAM;YACtB,CAAa;YACD,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;gBAE7C,SAAS;YACzB,CAAa;YACD,IAAI,qBAAqB,CAAC,0BAA0B,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE;gBAE1E,SAAS;YACzB,CAAa;YACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;gBAElE,SAAS;YACzB,CAAa;YACD,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;QAC3E,CAAS;QACD,OAAO,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACnD,CAAK;IACD,yBAAyB,CAAC,WAAW,EAAE,eAAe,EAAE,MAAM,EAAE,KAAK,EAAE;QAC3E,4EAAA;QACA,cAAA;QACQ,IAAI,EAAE,CAAC;IACf,CAAK;IACD,kBAAkB,CAAC,WAAW,EAAE,CAAC,EAAE;QAC/B,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,GAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACtE,CAAK;IACD,eAAe,CAAC,OAAO,EAAE;QAC7B,uEAAA;QACA,wEAAA;QACQ,OAAO,IAAI,gCAAgC,CAAC,IAAI,CAAC,CAAC;IAC1D,CAAK;IACD,OAAO,CAAC,GAAG,EAAE;QACT,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,CAAK;AACL,CAAC;AACD;;;;;;CAMA,GACA,SAAS,4BAA4B,CAAC,KAAK,EAAE;IACzC,OAAO,IAAI,6BAA6B,CAAC,KAAK,CAAC,CAAC;AACpD,CAAC;AACD;;CAEA,GACA,MAAM,gCAAgC,SAAS,0BAA0B,CAAC;IACtE,WAAW,CAAC,aAAa,CAAE;QACvB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IAC3C,CAAK;IACD,YAAY,CAAC,WAAW,EAAE;QACtB,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK;YAC/B,IAAI,GAAG,CAAC,eAAe,EAAE,EAAE;gBACvB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;YAC7E,CAAa,MACI;gBACD,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACpD,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAK;IACD,YAAY,CAAC,WAAW,EAAE,WAAW,EAAE;QACnC,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IACrE,CAAK;IACD,eAAe,CAAC,WAAW,EAAE,YAAY,EAAE;QACvC,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IACxE,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,iBAAiB,CAAC;IACpB,WAAW,CAAC,WAAW,CAAE;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QACvC;;SAEA,GACQ,IAAI,CAAC,OAAO,GAAG,IAAI,SAAS,EAAC,CAAC,GAAI,cAAc,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QAC3E,wCAAA,GACQ,IAAI,CAAC,yBAAyB,GAAG,eAAe,CAAC,GAAG,EAAE,CAAC;QAC/D,gDAAA,GACQ,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACjC,6CAAA,GACQ,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC;QACvC;;;SAGA,GACQ,IAAI,CAAC,UAAU,GAAG,IAAI,YAAY,EAAE,CAAC;QACrC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC,cAAc,EAAE,CAAC;IACpE,CAAK;IACD,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE;QAClB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,UAAU,GAAK,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACvD,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,4BAA4B,CAAC,WAAW,EAAE;QACtC,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IAC1E,CAAK;IACD,wBAAwB,CAAC,WAAW,EAAE;QAClC,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACtE,CAAK;IACD,gBAAgB,CAAC,WAAW,EAAE;QAC1B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;QACrD,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAChE,CAAK;IACD,kBAAkB,CAAC,WAAW,EAAE,2BAA2B,EAAE,yBAAyB,EAAE;QACpF,IAAI,yBAAyB,EAAE;YAC3B,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QACvE,CAAS;QACD,IAAI,2BAA2B,GAAG,IAAI,CAAC,qBAAqB,EAAE;YAC1D,IAAI,CAAC,qBAAqB,GAAG,2BAA2B,CAAC;QACrE,CAAS;QACD,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,cAAc,CAAC,UAAU,EAAE;QACvB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAChD,MAAM,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;QACrC,IAAI,QAAQ,GAAG,IAAI,CAAC,eAAe,EAAE;YACjC,IAAI,CAAC,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACzD,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;QAC5C,CAAS;QACD,IAAI,UAAU,CAAC,cAAc,GAAG,IAAI,CAAC,qBAAqB,EAAE;YACxD,IAAI,CAAC,qBAAqB,GAAG,UAAU,CAAC,cAAc,CAAC;QACnE,CAAS;IACT,CAAK;IACD,aAAa,CAAC,WAAW,EAAE,UAAU,EAAE;QACnC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC;QACtB,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,gBAAgB,CAAC,WAAW,EAAE,UAAU,EAAE;QACtC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAChC,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,gBAAgB,CAAC,WAAW,EAAE,UAAU,EAAE;QACtC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC3D,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC;QACtB,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,aAAa,CAAC,WAAW,EAAE,UAAU,EAAE,eAAe,EAAE;QACpD,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,UAAU,KAAK;YACtC,IAAI,UAAU,CAAC,cAAc,IAAI,UAAU,IACvC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;gBACnD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACzB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,6BAA6B,CAAC,WAAW,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpF,KAAK,EAAE,CAAC;YACxB,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAM,KAAK,CAAC,CAAC;IACtE,CAAK;IACD,cAAc,CAAC,WAAW,EAAE;QACxB,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC5D,CAAK;IACD,aAAa,CAAC,WAAW,EAAE,MAAM,EAAE;QAC/B,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;QACpD,OAAO,kBAAkB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IACtD,CAAK;IACD,eAAe,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE;QACjC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC9C,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,kBAAkB,CAAC,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE;QACpC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACjD,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC;QAC7D,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,IAAI,iBAAiB,EAAE;YACnB,IAAI,CAAC,OAAO,EAAC,GAAG,IAAI;gBAChB,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YACnF,CAAa,CAAC,CAAC;QACf,CAAS;QACD,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAK;IACD,6BAA6B,CAAC,GAAG,EAAE,QAAQ,EAAE;QACzC,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAChD,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,0BAA0B,CAAC,GAAG,EAAE,QAAQ,EAAE;QACtC,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC/D,OAAO,kBAAkB,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IACxD,CAAK;IACD,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE;QAClB,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5E,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,mBAAmB,CAAC;AACtC;;;CAGA,GACA,MAAM,iBAAiB,CAAC;IACxB;;;;;KAKA,GACI,WAAW,CAAC,wBAAwB,EAAE,UAAU,CAAE;QAC9C,IAAI,CAAC,cAAc,GAAG,CAAA,CAAE,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,CAAA,CAAE,CAAC;QACnB,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,iBAAiB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAC;QACxD,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC/C,MAAM,KAAK,GAAG,CAAC,GAAG,GAAK,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAChE,IAAI,CAAC,YAAY,GAAG,IAAI,kBAAkB,EAAE,CAAC;QAC7C,IAAI,CAAC,mBAAmB,GAAG,4BAA4B,CAAC,KAAK,CAAC,CAAC;QAC/D,IAAI,CAAC,UAAU,GAAG,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC;QAClD,IAAI,CAAC,WAAW,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAClE,CAAK;IACD,KAAK,GAAG;QACJ,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IACjC,CAAK;IACD,QAAQ,GAAG;QACf,oDAAA;QACQ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IACjC,CAAK;IACD,IAAI,OAAO,GAAG;QACV,OAAO,IAAI,CAAC,QAAQ,CAAC;IAC7B,CAAK;IACD,0BAA0B,GAAG;IACjC,SAAA;IACA,CAAK;IACD,iBAAiB,GAAG;IACxB,SAAA;IACA,CAAK;IACD,eAAe,CAAC,IAAI,EAAE;QAC1B,wEAAA;QACA,+DAAA;QACQ,OAAO,IAAI,CAAC,YAAY,CAAC;IACjC,CAAK;IACD,uBAAuB,CAAC,IAAI,EAAE;QAC1B,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAC1C,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,GAAG,IAAI,0BAA0B,EAAE,CAAC;YAC3C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,OAAO,CAAC;QAClD,CAAS;QACD,OAAO,OAAO,CAAC;IACvB,CAAK;IACD,gBAAgB,CAAC,IAAI,EAAE,YAAY,EAAE;QACjC,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAC9C,IAAI,CAAC,KAAK,EAAE;YACR,KAAK,GAAG,IAAI,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACtE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC;QACtD,CAAS;QACD,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,cAAc,GAAG;QACb,OAAO,IAAI,CAAC,WAAW,CAAC;IAChC,CAAK;IACD,sBAAsB,GAAG;QACrB,OAAO,IAAI,CAAC,mBAAmB,CAAC;IACxC,CAAK;IACD,cAAc,GAAG;QACb,OAAO,IAAI,CAAC,WAAW,CAAC;IAChC,CAAK;IACD,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,oBAAoB,EAAE;QAC/C,QAAQ,CAAC,SAAS,EAAE,uBAAuB,EAAE,MAAM,CAAC,CAAC;QACrD,MAAM,GAAG,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,EAAE,CAAC;QAC9C,OAAO,oBAAoB,CAAC,GAAG,CAAC,CAC3B,IAAI,EAAC,MAAM,IAAI;YAChB,OAAO,IAAI,CAAC,iBAAiB,CACxB,sBAAsB,CAAC,GAAG,CAAC,CAC3B,IAAI,CAAC,IAAM,MAAM,CAAC,CAAC;QACpC,CAAS,CAAC,CACG,SAAS,EAAE,CACX,IAAI,CAAC,MAAM,IAAI;YAChB,GAAG,CAAC,qBAAqB,EAAE,CAAC;YAC5B,OAAO,MAAM,CAAC;QAC1B,CAAS,CAAC,CAAC;IACX,CAAK;IACD,wBAAwB,CAAC,WAAW,EAAE,GAAG,EAAE;QACvC,OAAO,kBAAkB,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,EAAC,KAAK,GAAI,IAAM,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IACjI,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,MAAM,iBAAiB,SAAS,sBAAsB,CAAC;IACnD,WAAW,CAAC,qBAAqB,CAAE;QAC/B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;IAC3D,CAAK;AACL,CAAC;AACD,MAAM,mBAAmB,CAAC;IACtB,WAAW,CAAC,WAAW,CAAE;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QACvC,yDAAA,GACQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,YAAY,EAAE,CAAC;QACtD,4EAAA,GACQ,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACvC,CAAK;IACD,OAAO,OAAO,CAAC,WAAW,EAAE;QACxB,OAAO,IAAI,mBAAmB,CAAC,WAAW,CAAC,CAAC;IACpD,CAAK;IACD,IAAI,iBAAiB,GAAG;QACpB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC1B,MAAM,IAAI,EAAE,CAAC;QACzB,CAAS,MACI;YACD,OAAO,IAAI,CAAC,kBAAkB,CAAC;QAC3C,CAAS;IACT,CAAK;IACD,YAAY,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE;QAC7B,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACrD,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9C,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,eAAe,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE;QAChC,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACxD,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3C,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,uBAAuB,CAAC,GAAG,EAAE,GAAG,EAAE;QAC9B,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC3C,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,YAAY,CAAC,GAAG,EAAE,UAAU,EAAE;QAC1B,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACrF,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACpE,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;QAChD,OAAO,KAAK,CACP,0BAA0B,CAAC,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC,CACpD,IAAI,EAAC,IAAI,IAAI;YACd,IAAI,CAAC,OAAO,EAAC,GAAG,GAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAC5E,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,KAAK,CAAC,gBAAgB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;IACjE,CAAK;IACD,oBAAoB,GAAG;QACnB,IAAI,CAAC,kBAAkB,GAAG,IAAI,GAAG,EAAE,CAAC;IAC5C,CAAK;IACD,sBAAsB,CAAC,GAAG,EAAE;QAChC,mCAAA;QACQ,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;QACxD,MAAM,YAAY,GAAG,KAAK,CAAC,eAAe,EAAE,CAAC;QAC7C,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,KAAK;YAChE,MAAM,GAAG,GAAG,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACvC,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,EAAC,YAAY,IAAI;gBACpD,IAAI,CAAC,YAAY,EAAE;oBACf,YAAY,CAAC,WAAW,CAAC,GAAG,EAAE,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC;gBACzE,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC,IAAI,CAAC,MAAM;YACV,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,OAAO,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3C,CAAS,CAAC,CAAC;IACX,CAAK;IACD,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE;QAC1B,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,EAAC,YAAY,IAAI;YACpD,IAAI,YAAY,EAAE;gBACd,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC9D,CAAa,MACI;gBACD,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC3D,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,YAAY,CAAC,GAAG,EAAE;QACtB,qFAAA;QACQ,OAAO,CAAC,CAAC;IACjB,CAAK;IACD,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE;QACnB,OAAO,kBAAkB,CAAC,EAAE,CAAC;YACzB,IAAM,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC3E,IAAM,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC;YAC7D,IAAM,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,GAAG,EAAE,GAAG,CAAC;SAC5D,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AACD,MAAM,iBAAiB,CAAC;IACpB,WAAW,CAAC,WAAW,EAAE,SAAS,CAAE;QAChC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,uBAAuB,GAAG,IAAI,SAAS,EAAC,CAAC,GAAI,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACtG,IAAI,CAAC,gBAAgB,GAAG,sBAAsB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACxE,CAAK;IACD,OAAO,OAAO,CAAC,WAAW,EAAE,SAAS,EAAE;QACnC,OAAO,IAAI,iBAAiB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IAC7D,CAAK;IACL,4EAAA;IACA,UAAA;IACI,oBAAoB,GAAG,CAAA,CAAG;IAC1B,sBAAsB,CAAC,GAAG,EAAE;QACxB,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,aAAa,CAAC,GAAG,EAAE,CAAC,EAAE;QAClB,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACvE,CAAK;IACD,sBAAsB,CAAC,GAAG,EAAE;QACxB,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;QACxD,MAAM,kBAAkB,GAAG,IAAI,CAAC,WAAW,CACtC,cAAc,EAAE,CAChB,cAAc,CAAC,GAAG,CAAC,CAAC;QACzB,OAAO,kBAAkB,CAAC,IAAI,EAAC,WAAW,GAAI,eAAe,CAAC,IAAI,EAAC,QAAQ,GAAI,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC;IAChH,CAAK;IACD,qBAAqB,CAAC,GAAG,EAAE;QACvB,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC,qCAAqC,CAAC,GAAG,GAAE,CAAC,IAAI;YACxD,aAAa,EAAE,CAAC;QAC5B,CAAS,CAAC,CAAC,IAAI,CAAC,IAAM,aAAa,CAAC,CAAC;IACrC,CAAK;IACD,qCAAqC,CAAC,GAAG,EAAE,CAAC,EAAE;QAC1C,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,GAAG,EAAE,cAAc,KAAK;YACjG,wFAAA;YACA,oBAAA;YACY,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,cAAc,CAAC,CAAC,IAAI,EAAC,QAAQ,IAAI;gBAC5D,IAAI,CAAC,QAAQ,EAAE;oBACX,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC;gBAC7C,CAAiB,MACI;oBACD,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;gBACxD,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACD,aAAa,CAAC,GAAG,EAAE,UAAU,EAAE,eAAe,EAAE;QAC5C,OAAO,IAAI,CAAC,WAAW,CAClB,cAAc,EAAE,CAChB,aAAa,CAAC,GAAG,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;IAC7D,CAAK;IACD,uBAAuB,CAAC,GAAG,EAAE,UAAU,EAAE;QACrC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;QACxD,MAAM,YAAY,GAAG,KAAK,CAAC,eAAe,EAAE,CAAC;QAC7C,MAAM,CAAC,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,GAAE,GAAG,IAAI;YAC3C,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC,IAAI,EAAC,QAAQ,IAAI;gBACxD,IAAI,CAAC,QAAQ,EAAE;oBACX,KAAK,EAAE,CAAC;oBACR,YAAY,CAAC,WAAW,CAAC,GAAG,EAAE,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC;gBACzE,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;QACH,OAAO,CAAC,CAAC,IAAI,CAAC,IAAM,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAM,KAAK,CAAC,CAAC;IACvE,CAAK;IACD,uBAAuB,CAAC,GAAG,EAAE,GAAG,EAAE;QAC9B,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACjE,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,YAAY,CAAC,GAAG,EAAE,UAAU,EAAE;QAC1B,MAAM,OAAO,GAAG,UAAU,CAAC,kBAAkB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACzE,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAChF,CAAK;IACD,YAAY,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE;QAC7B,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACjE,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,eAAe,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE;QAChC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACjE,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE;QAC1B,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACjE,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAC5C,CAAK;IACD,YAAY,CAAC,QAAQ,EAAE;QACnB,IAAI,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC;QAClD,IAAI,QAAQ,CAAC,eAAe,EAAE,EAAE;YAC5B,YAAY,IAAI,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClE,CAAS;QACD,OAAO,YAAY,CAAC;IAC5B,CAAK;IACD,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE;QAC3B,OAAO,kBAAkB,CAAC,EAAE,CAAC;YACzB,IAAM,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,GAAG,EAAE,GAAG,CAAC;YACzD,IAAM,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC;YAC7D,MAAM;gBACF,MAAM,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACzD,OAAO,kBAAkB,CAAC,OAAO,CAAC,UAAU,KAAK,SAAS,IAAI,UAAU,GAAG,UAAU,CAAC,CAAC;YACvG,CAAa;SACJ,CAAC,CAAC;IACX,CAAK;IACD,YAAY,CAAC,GAAG,EAAE;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACtE,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,oDAAA,GACA,MAAM,eAAe,CAAC;IAClB,WAAW,CAAC,UAAU,CAAE;QACpB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;IACL;;;;;;KAMA,GACI,eAAe,CAAC,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,SAAS,EAAE;QAC7C,MAAM,mBAAmB,GAAG,IAAI,mBAAmB,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;QAC5E,IAAI,WAAW,GAAG,CAAC,IAAI,SAAS,IAAI,CAAC,EAAE;YACnC,wBAAwB,CAAC,EAAE,CAAC,CAAC;YAC7B,mBAAmB,CAAC,EAAE,CAAC,CAAC;YACxB,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACrB,+BAA+B,CAAC,EAAE,CAAC,CAAC;QAChD,CAAS;QACT,yEAAA;QACA,yCAAA;QACQ,IAAI,CAAC,GAAG,kBAAkB,CAAC,OAAO,EAAE,CAAC;QACrC,IAAI,WAAW,GAAG,CAAC,IAAI,SAAS,IAAI,CAAC,EAAE;YAC/C,uEAAA;YACA,iCAAA;YACY,IAAI,WAAW,KAAK,CAAC,EAAE;gBACnB,cAAc,CAAC,EAAE,CAAC,CAAC;gBACnB,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACrC,CAAa;YACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAM,2BAA2B,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAC/E,CAAS;QACD,IAAI,WAAW,GAAG,CAAC,IAAI,SAAS,IAAI,CAAC,EAAE;YACnC,IAAI,WAAW,KAAK,CAAC,EAAE;gBACnC,wEAAA;gBACA,oEAAA;gBACA,uEAAA;gBACA,2EAAA;gBACA,4EAAA;gBACA,qBAAA;gBACgB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAM,wCAAwC,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,CAAC;YACpG,CAAa;YACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM;gBACb,yBAAyB,CAAC,EAAE,CAAC,CAAC;YAC9C,CAAa,CAAC,CAAC;QACf,CAAS;QACD,IAAI,WAAW,GAAG,CAAC,IAAI,SAAS,IAAI,CAAC,EAAE;YACnC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACpF,CAAS;QACD,IAAI,WAAW,GAAG,CAAC,IAAI,SAAS,IAAI,CAAC,EAAE;YACnC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM;gBACb,yBAAyB,CAAC,EAAE,CAAC,CAAC;gBAC9B,OAAO,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;YACnE,CAAa,CAAC,CAAC;QACf,CAAS;QACD,IAAI,WAAW,GAAG,CAAC,IAAI,SAAS,IAAI,CAAC,EAAE;YACnC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAC9E,CAAS;QACD,IAAI,WAAW,GAAG,CAAC,IAAI,SAAS,IAAI,CAAC,EAAE;YACnC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,2BAA2B,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,CAAC;QACxF,CAAS;QACD,IAAI,WAAW,GAAG,CAAC,IAAI,SAAS,IAAI,CAAC,EAAE;YACnC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM;gBAC7B,sEAAA;gBACA,yEAAA;gBACA,mEAAA;gBACgB,8BAA8B,CAAC,EAAE,CAAC,CAAC;YACnD,kEAAA;YACA,gEAAA;YACA,CAAa,CAAC,CAAC;QACf,CAAS;QACD,IAAI,WAAW,GAAG,EAAE,IAAI,SAAS,IAAI,EAAE,EAAE;YACrC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAC5E,CAAS;QACD,IAAI,WAAW,GAAG,EAAE,IAAI,SAAS,IAAI,EAAE,EAAE;YACrC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM;gBACb,kBAAkB,CAAC,EAAE,CAAC,CAAC;gBACvB,uBAAuB,CAAC,EAAE,CAAC,CAAC;YAC5C,CAAa,CAAC,CAAC;QACf,CAAS;QACD,IAAI,WAAW,GAAG,EAAE,IAAI,SAAS,IAAI,EAAE,EAAE;YACrC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM;gBACb,0BAA0B,CAAC,EAAE,CAAC,CAAC;YAC/C,CAAa,CAAC,CAAC;QACf,CAAS;QACD,IAAI,WAAW,GAAG,EAAE,IAAI,SAAS,IAAI,EAAE,EAAE;YACrC,CAAC,GAAG,CAAC,CACA,IAAI,CAAC,IAAM,yBAAyB,CAAC,EAAE,CAAC,CAAC,CACzC,IAAI,CAAC,IAAM,IAAI,CAAC,0BAA0B,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,CACpE,IAAI,CAAC,IAAM,EAAE,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,CAAC,CAAC;QAC3E,CAAS;QACD,IAAI,WAAW,GAAG,EAAE,IAAI,SAAS,IAAI,EAAE,EAAE;YACrC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,mBAAmB,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC,CAAC;QAChF,CAAS;QACD,IAAI,WAAW,GAAG,EAAE,IAAI,SAAS,IAAI,EAAE,EAAE;YACrC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAM,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;QACnD,CAAS;QACD,OAAO,CAAC,CAAC;IACjB,CAAK;IACD,iBAAiB,CAAC,GAAG,EAAE;QACnB,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,OAAO,GAAG,CACL,KAAK,CAAC,uBAAuB,CAAC,CAC9B,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK;YACrB,QAAQ,IAAI,cAAc,CAAC,GAAG,CAAC,CAAC;QAC5C,CAAS,CAAC,CACG,IAAI,CAAC,MAAM;YACZ,MAAM,QAAQ,GAAG;gBAAE,QAAQ;YAAA,CAAE,CAAC;YAC9B,OAAO,GAAG,CACL,KAAK,CAAC,2BAA2B,CAAC,CAClC,GAAG,CAAC,yBAAyB,EAAE,QAAQ,CAAC,CAAC;QAC1D,CAAS,CAAC,CAAC;IACX,CAAK;IACD,2BAA2B,CAAC,GAAG,EAAE;QAC7B,MAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACpD,MAAM,cAAc,GAAG,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACvD,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC,IAAI,EAAC,MAAM,IAAI;YACxC,OAAO,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,KAAK,KAAK;gBACjD,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;oBAAC,KAAK,CAAC,MAAM;oBAAE,eAAe;iBAAC,EAAE;oBAAC,KAAK,CAAC,MAAM;oBAAE,KAAK,CAAC,uBAAuB;iBAAC,CAAC,CAAC;gBAChH,OAAO,cAAc,CAChB,OAAO,CAAC,iCAAiC,EAAE,KAAK,CAAC,CACjD,IAAI,EAAC,SAAS,IAAI;oBACnB,OAAO,kBAAkB,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,OAAO,KAAK;wBACtD,UAAU,CAAC,OAAO,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC;wBAC5C,MAAM,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;wBAC5D,OAAO,mBAAmB,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,KAAM,CAAG,AAAH,CAAI,CAAC;oBAC7F,CAAqB,CAAC,CAAC;gBACvB,CAAiB,CAAC,CAAC;YACnB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;KAGA,GACI,qBAAqB,CAAC,GAAG,EAAE;QACvB,MAAM,mBAAmB,GAAG,GAAG,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;QAC7D,MAAM,cAAc,GAAG,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC1D,MAAM,iBAAiB,GAAG,GAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACzD,OAAO,iBAAiB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,IAAI,EAAC,QAAQ,IAAI;YAC7D,MAAM,gBAAgB,GAAG,CAAC,IAAI,KAAK;gBAC/B,OAAO,mBAAmB,CAAC,GAAG,CAAC;oBAC3B,QAAQ,EAAE,CAAC;oBACX,IAAI,EAAE,kBAAkB,CAAC,IAAI,CAAC;oBAC9B,cAAc,EAAE,QAAQ,CAAC,2BAA2B;gBACxE,CAAiB,CAAC,CAAC;YACnB,CAAa,CAAC;YACF,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,OAAO,cAAc,CAChB,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK;gBACvB,MAAM,IAAI,GAAG,IAAI,YAAY,CAAC,GAAG,CAAC,CAAC;gBACnC,MAAM,cAAc,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;gBACzC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,IAAI,EAAC,aAAa,IAAI;oBACxE,IAAI,CAAC,aAAa,EAAE;wBAChB,OAAO,gBAAgB,CAAC,IAAI,CAAC,CAAC;oBACtD,CAAqB,MACI;wBACD,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;oBAC5D,CAAqB;gBACrB,CAAiB,CAAC,CAAC,CAAC;YACpB,CAAa,CAAC,CACG,IAAI,CAAC,IAAM,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAClE,CAAS,CAAC,CAAC;IACX,CAAK;IACD,2BAA2B,CAAC,EAAE,EAAE,GAAG,EAAE;QACzC,oBAAA;QACQ,EAAE,CAAC,iBAAiB,CAAC,uBAAuB,EAAE;YAC1C,OAAO,EAAE,yBAAyB;QAC9C,CAAS,CAAC,CAAC;QACH,MAAM,sBAAsB,GAAG,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC1E,kEAAA;QACQ,MAAM,KAAK,GAAG,IAAI,2BAA2B,EAAE,CAAC;QAChD,MAAM,QAAQ,GAAG,CAAC,cAAc,KAAK;YACjC,IAAI,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;gBAC3B,MAAM,YAAY,GAAG,cAAc,CAAC,WAAW,EAAE,CAAC;gBAClD,MAAM,UAAU,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;gBAC5C,OAAO,sBAAsB,CAAC,GAAG,CAAC;oBAC9B,YAAY;oBACZ,MAAM,EAAE,kBAAkB,CAAC,UAAU,CAAC;gBAC1D,CAAiB,CAAC,CAAC;YACnB,CAAa;QACb,CAAS,CAAC;QACV,mCAAA;QACQ,OAAO,GAAG,CACL,KAAK,CAAC,uBAAuB,CAAC,CAC9B,OAAO,CAAC;YAAE,QAAQ,EAAE,IAAI;QAAA,CAAE,EAAE,CAAC,YAAY,EAAE,CAAC,KAAK;YAClD,MAAM,IAAI,GAAG,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC;YAC5C,OAAO,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAC5C,CAAS,CAAC,CACG,IAAI,CAAC,MAAM;YACxB,4BAAA;YACY,OAAO,GAAG,CACL,KAAK,CAAC,uBAAuB,CAAC,CAC9B,OAAO,CAAC;gBAAE,QAAQ,EAAE,IAAI;YAAA,CAAE,EAAE,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,EAAE,CAAC,KAAK;gBACpE,MAAM,IAAI,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;gBAC7C,OAAO,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YAChD,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACD,mBAAmB,CAAC,GAAG,EAAE;QACrB,MAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC7C,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,gBAAgB,KAAK;YAClD,MAAM,kBAAkB,GAAG,YAAY,CAAC,gBAAgB,CAAC,CAAC;YAC1D,MAAM,eAAe,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;YACxE,OAAO,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QACpD,CAAS,CAAC,CAAC;IACX,CAAK;IACD,0BAA0B,CAAC,EAAE,EAAE,WAAW,EAAE;QACxC,MAAM,yBAAyB,GAAG,WAAW,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC7E,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,OAAO,yBAAyB,CAC3B,OAAO,CAAC,CAAC,CAAC,EAAE,cAAc,KAAK;YAChC,MAAM,mBAAmB,GAAG,WAAW,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACrE,MAAM,IAAI,GAAG,UAAU,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YACvD,MAAM,gBAAgB,GAAG;gBACrB,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;gBAC1C,eAAe,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;gBACtC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;gBACjC,QAAQ,EAAE,cAAc,CAAC,QAAQ,IAAI;oBAAC,CAAC;oBAAE,CAAC;iBAAC;gBAC3C,eAAe,EAAE,cAAc,CAAC,eAAe;gBAC/C,UAAU,EAAE,cAAc,CAAC,UAAU;gBACrC,QAAQ,EAAE,cAAc,CAAC,QAAQ;gBACjC,qBAAqB,EAAE,CAAC,CAAC,cAAc,CAAC,qBAAqB;YAC7E,CAAa,CAAC;YACF,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACnE,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IAC5D,CAAK;IACD,mBAAmB,CAAC,EAAE,EAAE,WAAW,EAAE;QACjC,MAAM,cAAc,GAAG,WAAW,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QAC/D,MAAM,mBAAmB,GAAG,+BAA+B,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7E,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;QAC/G,OAAO,cAAc,CAAC,OAAO,EAAE,CAAC,IAAI,EAAC,SAAS,IAAI;YAC9C,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;YACpC,SAAS,CAAC,OAAO,EAAC,OAAO,IAAI;gBACzB,IAAI,EAAE,CAAC;gBACP,IAAI,WAAW,GAAG,CAAC,EAAE,GAAG,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,cAAc,EAAE,CAAC;gBACjH,MAAM,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;gBAC5D,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,EAAC,GAAG,GAAK,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAClE,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;YACnE,CAAa,CAAC,CAAC;YACH,OAAO,kBAAkB,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,sBAAsB,EAAE,MAAM,KAAK;gBACrF,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC9B,MAAM,oBAAoB,GAAG,6BAA6B,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBAC1G,yDAAA;gBACA,yDAAA;gBACA,mDAAA;gBACA,kBAAA;gBACgB,MAAM,YAAY,GAAG,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBAC7D,MAAM,aAAa,GAAG,sBAAsB,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,YAAY,EAAE,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;gBAC/H,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,CAAC,mBAAmB,EAAE,aAAa,EAAE,oBAAoB,EAAE,YAAY,CAAC,CAAC;gBAC1H,OAAO,kBAAkB,CACpB,yCAAyC,CAAC,IAAI,oBAAoB,CAAC,WAAW,EAAE,cAAc,CAAC,OAAO,CAAC,EAAE,sBAAsB,CAAC,CAChI,IAAI,EAAE,CAAC;YAC5B,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AACD,SAAS,WAAW,CAAC,IAAI,EAAE;IACvB,OAAO;QAAC,CAAC;QAAE,kBAAkB,CAAC,IAAI,CAAC;KAAC,CAAC;AACzC,CAAC;AACD,SAAS,wBAAwB,CAAC,EAAE,EAAE;IAClC,EAAE,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;AAC/C,CAAC;AACD,SAAS,mBAAmB,CAAC,EAAE,EAAE;IAC7B,EAAE,CAAC,iBAAiB,CAAC,oBAAoB,EAAE;QACvC,OAAO,EAAE,sBAAsB;IACvC,CAAK,CAAC,CAAC;IACH,MAAM,oBAAoB,GAAG,EAAE,CAAC,iBAAiB,CAAC,oBAAoB,EAAE;QACpE,OAAO,EAAE,sBAAsB;QAC/B,aAAa,EAAE,IAAI;IAC3B,CAAK,CAAC,CAAC;IACH,oBAAoB,CAAC,WAAW,CAAC,iCAAiC,EAAE,mCAAmC,EAAE;QAAE,MAAM,EAAE,IAAI;IAAA,CAAE,CAAC,CAAC;IAC3H,EAAE,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,CAAC;AAClD,CAAC;AACD;;;CAGA,GACA,SAAS,wCAAwC,CAAC,EAAE,EAAE,GAAG,EAAE;IACvD,MAAM,gBAAgB,GAAG,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACzD,OAAO,gBAAgB,CAAC,OAAO,EAAE,CAAC,IAAI,EAAC,iBAAiB,IAAI;QACxD,EAAE,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;QAC3C,MAAM,cAAc,GAAG,EAAE,CAAC,iBAAiB,CAAC,oBAAoB,EAAE;YAC9D,OAAO,EAAE,sBAAsB;YAC/B,aAAa,EAAE,IAAI;QAC/B,CAAS,CAAC,CAAC;QACH,cAAc,CAAC,WAAW,CAAC,iCAAiC,EAAE,mCAAmC,EAAE;YAAE,MAAM,EAAE,IAAI;QAAA,CAAE,CAAC,CAAC;QACrH,MAAM,gBAAgB,GAAG,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACzD,MAAM,QAAQ,GAAG,iBAAiB,CAAC,GAAG,EAAC,QAAQ,GAAI,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnF,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAK,CAAC,CAAC;AACP,CAAC;AACD,SAAS,+BAA+B,CAAC,EAAE,EAAE;IACzC,EAAE,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,CAAC;AAClD,CAAC;AACD,SAAS,yBAAyB,CAAC,EAAE,EAAE;IACnC,MAAM,mBAAmB,GAAG,EAAE,CAAC,iBAAiB,CAAC,qBAAqB,EAAE;QACpE,OAAO,EAAE,uBAAuB;IACxC,CAAK,CAAC,CAAC;IACH,mBAAmB,CAAC,WAAW,CAAC,gCAAgC,EAAE,oCAAoC,CAAC,CAAC;IACxG,mBAAmB,CAAC,WAAW,CAAC,oCAAoC,EAAE,wCAAwC,CAAC,CAAC;AACpH,CAAC;AACD,SAAS,yBAAyB,CAAC,EAAE,EAAE;IACnC,EAAE,CAAC,iBAAiB,CAAC,2BAA2B,CAAC,CAAC;AACtD,CAAC;AACD,SAAS,gBAAgB,CAAC,EAAE,EAAE;IAC1B,MAAM,oBAAoB,GAAG,EAAE,CAAC,iBAAiB,CAAC,qBAAqB,EAAE;QACrE,OAAO,EAAE,uBAAuB;IACxC,CAAK,CAAC,CAAC;IACH,oBAAoB,CAAC,WAAW,CAAC,oCAAoC,EAAE,sCAAsC,EAAE;QAAE,MAAM,EAAE,IAAI;IAAA,CAAE,CAAC,CAAC;IACjI,MAAM,WAAW,GAAG,EAAE,CAAC,iBAAiB,CAAC,aAAa,EAAE;QACpD,OAAO,EAAE,eAAe;IAChC,CAAK,CAAC,CAAC;IACP,gEAAA;IACI,WAAW,CAAC,WAAW,CAAC,6BAA6B,EAAE,2BAA2B,EAAE;QAAE,MAAM,EAAE,IAAI;IAAA,CAAE,CAAC,CAAC;IACtG,EAAE,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;AAC9C,CAAC;AACD,SAAS,cAAc,CAAC,EAAE,EAAE;IACxB,EAAE,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,CAAC;IAC5C,EAAE,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;IACpC,EAAE,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,CAAC;AAC9C,CAAC;AACD,SAAS,8BAA8B,CAAC,EAAE,EAAE;IACxC,IAAI,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,uBAAuB,CAAC,EAAE;QACvD,EAAE,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,CAAC;IACtD,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,SAAS,2BAA2B,CAAC,GAAG,EAAE;IACtC,MAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACnD,MAAM,QAAQ,GAAG;QACb,eAAe,EAAE,CAAC;QAClB,2BAA2B,EAAE,CAAC;QAC9B,yBAAyB,EAAE,eAAe,CAAC,GAAG,EAAE,CAAC,WAAW,EAAE;QAC9D,WAAW,EAAE,CAAC;IACtB,CAAK,CAAC;IACF,OAAO,WAAW,CAAC,GAAG,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;AACxD,CAAC;AACD,SAAS,yBAAyB,CAAC,EAAE,EAAE;IACnC,EAAE,CAAC,iBAAiB,CAAC,qBAAqB,EAAE;QACxC,OAAO,EAAE,uBAAuB;IACxC,CAAK,CAAC,CAAC;AACP,CAAC;AACD,SAAS,kBAAkB,CAAC,EAAE,EAAE;IAC5B,EAAE,CAAC,iBAAiB,CAAC,aAAa,EAAE;QAChC,OAAO,EAAE,eAAe;IAChC,CAAK,CAAC,CAAC;AACP,CAAC;AACD,SAAS,uBAAuB,CAAC,EAAE,EAAE;IACjC,EAAE,CAAC,iBAAiB,CAAC,iBAAiB,EAAE;QACpC,OAAO,EAAE,mBAAmB;IACpC,CAAK,CAAC,CAAC;AACP,CAAC;AACD,SAAS,gBAAgB,CAAC,EAAE,EAAE;IAC1B,MAAM,uBAAuB,GAAG,EAAE,CAAC,iBAAiB,CAAC,yBAAyB,EAAE;QAC5E,OAAO,EAAE,2BAA2B;QACpC,aAAa,EAAE,IAAI;IAC3B,CAAK,CAAC,CAAC;IACH,uBAAuB,CAAC,WAAW,CAAC,wCAAwC,EAAE,4CAA4C,EAAE;QAAE,MAAM,EAAE,KAAK;IAAA,CAAE,CAAC,CAAC;IAC/I,MAAM,eAAe,GAAG,EAAE,CAAC,iBAAiB,CAAC,iBAAiB,EAAE;QAC5D,OAAO,EAAE,mBAAmB;IACpC,CAAK,CAAC,CAAC;IACH,eAAe,CAAC,WAAW,CAAC,+BAA+B,EAAE,mCAAmC,EAAE;QAAE,MAAM,EAAE,KAAK;IAAA,CAAE,CAAC,CAAC;IACrH,MAAM,eAAe,GAAG,EAAE,CAAC,iBAAiB,CAAC,iBAAiB,EAAE;QAC5D,OAAO,EAAE,mBAAmB;IACpC,CAAK,CAAC,CAAC;IACH,eAAe,CAAC,WAAW,CAAC,4BAA4B,EAAE,gCAAgC,EAAE;QAAE,MAAM,EAAE,KAAK;IAAA,CAAE,CAAC,CAAC;AACnH,CAAC;AACD,SAAS,0BAA0B,CAAC,EAAE,EAAE;IACpC,MAAM,oBAAoB,GAAG,EAAE,CAAC,iBAAiB,CAAC,sBAAsB,EAAE;QACtE,OAAO,EAAE,wBAAwB;IACzC,CAAK,CAAC,CAAC;IACH,oBAAoB,CAAC,WAAW,CAAC,2CAA2C,EAAE,+CAA+C,EAAE;QAAE,MAAM,EAAE,KAAK;IAAA,CAAE,CAAC,CAAC;IAClJ,oBAAoB,CAAC,WAAW,CAAC,4CAA4C,EAAE,gDAAgD,EAAE;QAAE,MAAM,EAAE,KAAK;IAAA,CAAE,CAAC,CAAC;AACxJ,CAAC;AACD,SAAS,UAAU,CAAC,SAAS,EAAE;IAC3B,IAAI,SAAS,CAAC,QAAQ,EAAE;QACpB,OAAO,IAAI,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7F,CAAK,MACI,IAAI,SAAS,CAAC,UAAU,EAAE;QAC3B,OAAO,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACnE,CAAK,MACI,IAAI,SAAS,CAAC,eAAe,EAAE;QAChC,OAAO,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACxE,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,sBAAsB,CAAC;AACzC;;;CAGA,GACA,MAAM,iBAAiB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA,aAAA;AACzC;;;;CAIA,GACA,MAAM,2BAA2B,GAAG,IAAI,CAAC;AACzC;;;;;;;CAOA,GACA,MAAM,mCAAmC,GAAG,IAAI,CAAC;AACjD,4EAAA,GACA,MAAM,iCAAiC,GAAG,uEAAuE,GAC7G,0EAA0E,GAC1E,0EAA0E,GAC1E,oDAAoD,CAAC;AACzD,MAAM,8BAA8B,GAAG,gEAAgE,GACnG,sEAAsE,CAAC;AAC3E,oEAAA;AACA,2DAAA;AACA,MAAM,0BAA0B,GAAG,kBAAkB,CAAC;AACtD;;;CAGA,GACA,MAAM,aAAa,GAAG,MAAM,CAAC;AAC7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6CA,GACA,MAAM,oBAAoB,CAAC;IACvB,WAAW,CACf;;;KAGA,GACI,uBAAuB,EAAE,cAAc,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,OAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,oBAAoB,EAC3H;;;KAGA,GACI,cAAc,EAAE,aAAa,GAAG,cAAc,CAAE;QAC5C,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACvD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QACnC,8CAAA,GACQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAClC,mDAAA,GACQ,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QAC9C,sCAAA,GACQ,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;QAC5C,yEAAA,GACQ,IAAI,CAAC,yBAAyB,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAClE,mDAAA,GACQ,IAAI,CAAC,oBAAoB,IAAG,CAAC,GAAI,OAAO,CAAC,OAAO,EAAE,CAAC;QACnD,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,EAAE;YACrC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,aAAa,EAAE,8BAA8B,CAAC,CAAC;QACzF,CAAS;QACD,IAAI,CAAC,iBAAiB,GAAG,IAAI,wBAAwB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACvE,IAAI,CAAC,MAAM,GAAG,cAAc,GAAG,aAAa,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC;QAClD,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QACpG,IAAI,CAAC,WAAW,GAAG,IAAI,oBAAoB,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACrF,IAAI,CAAC,mBAAmB,GAAG,+BAA+B,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5E,IAAI,CAAC,WAAW,GAAG,IAAI,oBAAoB,EAAE,CAAC;QAC9C,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;YACzC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;QACvD,CAAS,MACI;YACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,cAAc,KAAK,KAAK,EAAE;gBAC1B,QAAQ,CAAC,SAAS,EAAE,qEAAqE,GACrF,qEAAqE,GACrE,4BAA4B,CAAC,CAAC;YAClD,CAAa;QACb,CAAS;IACT,CAAK;IACL;;;;KAIA,GACI,KAAK,GAAG;QACZ,uEAAA;QACA,0EAAA;QACA,MAAA;QACQ,OAAO,IAAI,CAAC,uCAAuC,EAAE,CAChD,IAAI,CAAC,MAAM;YACZ,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE;gBAClE,gEAAA;gBACA,4BAAA;gBACgB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,iCAAiC,CAAC,CAAC;YACtG,CAAa;YACD,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC/B,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC9B,IAAI,CAAC,8CAA8C,EAAE,CAAC;YACtD,OAAO,IAAI,CAAC,cAAc,CAAC,gCAAgC,EAAE,UAAU,GAAE,GAAG,GAAI,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5I,CAAS,CAAC,CACG,IAAI,EAAC,2BAA2B,IAAI;YACrC,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC,2BAA2B,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAC7G,CAAS,CAAC,CACG,IAAI,CAAC,MAAM;YACZ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACjC,CAAS,CAAC,CACG,KAAK,CAAC,MAAM,IAAI;YACjB,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;YACvC,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;;;KAMA,GACI,uBAAuB,CAAC,oBAAoB,EAAE;QAC1C,IAAI,CAAC,oBAAoB,GAAG,OAAO,YAAY,KAAK;YAChD,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,OAAO,oBAAoB,CAAC,YAAY,CAAC,CAAC;YAC1D,CAAa;QACb,CAAS,CAAC;QACF,OAAO,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACpD,CAAK;IACL;;;;;KAKA,GACI,0BAA0B,CAAC,uBAAuB,EAAE;QAChD,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC,OAAO,KAAK,KAAK;YAChE,mDAAA;YACY,IAAI,KAAK,CAAC,UAAU,KAAK,IAAI,EAAE;gBAC3B,MAAM,uBAAuB,EAAE,CAAC;YAChD,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;;KAKA,GACI,iBAAiB,CAAC,cAAc,EAAE;QAC9B,IAAI,IAAI,CAAC,cAAc,KAAK,cAAc,EAAE;YACxC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;YACjD,yEAAA;YACA,8DAAA;YACY,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,YAAY;gBACpC,IAAI,IAAI,CAAC,OAAO,EAAE;oBACd,MAAM,IAAI,CAAC,uCAAuC,EAAE,CAAC;gBACzE,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS;IACT,CAAK;IACL;;;;;KAKA,GACI,uCAAuC,GAAG;QACtC,OAAO,IAAI,CAAC,cAAc,CAAC,yCAAyC,EAAE,WAAW,EAAE,GAAG,IAAI;YACtF,MAAM,aAAa,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;YAC/C,OAAO,aAAa,CACf,GAAG,CAAC;gBACL,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE;gBACxB,cAAc,EAAE,IAAI,CAAC,cAAc;gBACnC,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/C,CAAa,CAAC,CACG,IAAI,CAAC,MAAM;gBACZ,IAAI,IAAI,CAAC,SAAS,EAAE;oBAChB,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAC,OAAO,IAAI;wBAChD,IAAI,CAAC,OAAO,EAAE;4BACV,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;4BACvB,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAM,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;wBAChG,CAAyB;oBACzB,CAAqB,CAAC,CAAC;gBACvB,CAAiB;YACjB,CAAa,CAAC,CACG,IAAI,CAAC,IAAM,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CACrC,IAAI,CAAC,eAAe,IAAI;gBACzB,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,eAAe,EAAE;oBACpC,OAAO,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAM,KAAK,CAAC,CAAC;gBACjF,CAAiB,MACI,IAAI,eAAe,EAAE;oBACtB,OAAO,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,CAAC;gBAClF,CAAiB,MACI;oBACD,OAAA,oBAAA,GAA8B,KAAK,CAAC;gBACxD,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CACG,KAAK,EAAC,CAAC,IAAI;YACZ,IAAI,2BAA2B,CAAC,CAAC,CAAC,EAAE;gBAChC,QAAQ,CAAC,SAAS,EAAE,gCAAgC,EAAE,CAAC,CAAC,CAAC;gBACzE,4DAAA;gBACA,mCAAA;gBACgB,OAAO,IAAI,CAAC,SAAS,CAAC;YACtC,CAAa;YACD,IAAI,CAAC,IAAI,CAAC,uBAAuB,EAAE;gBAC/B,MAAM,CAAC,CAAC;YACxB,CAAa;YACD,QAAQ,CAAC,SAAS,EAAE,wDAAwD,EAAE,CAAC,CAAC,CAAC;YACjF,OAAA,cAAA,GAAwB,KAAK,CAAC;QAC1C,CAAS,CAAC,CACG,IAAI,EAAC,SAAS,IAAI;YACnB,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE;gBAC9B,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAM,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAC;YACxF,CAAa;YACD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QACvC,CAAS,CAAC,CAAC;IACX,CAAK;IACD,kBAAkB,CAAC,GAAG,EAAE;QACpB,MAAM,KAAK,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAC,aAAa,IAAI;YACvD,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC,CAAC;QACjF,CAAS,CAAC,CAAC;IACX,CAAK;IACD,oBAAoB,CAAC,GAAG,EAAE;QACtB,MAAM,aAAa,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAC/C,OAAO,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAK;IACL;;;;KAIA,GACI,MAAM,mCAAmC,GAAG;QACxC,IAAI,IAAI,CAAC,SAAS,IACd,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,yBAAyB,EAAE,iBAAiB,CAAC,EAAE;YACtE,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC5C,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,qCAAqC,EAAE,mBAAmB,GAAE,GAAG,IAAI;gBACjH,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;gBAC3D,OAAO,aAAa,CAAC,OAAO,EAAE,CAAC,IAAI,EAAC,eAAe,IAAI;oBACnD,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC;oBAC5E,MAAM,QAAQ,GAAG,eAAe,CAAC,MAAM,EAAC,MAAM,GAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACrG,oEAAA;oBACoB,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,cAAc,GAAK,aAAa,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAM,QAAQ,CAAC,CAAC;gBACxJ,CAAiB,CAAC,CAAC;YACnB,CAAa,CAAC,CAAC,KAAK,CAAC,MAAM;gBAC3B,uEAAA;gBACA,kEAAA;gBACA,0EAAA;gBACA,iBAAA;gBACgB,OAAO,EAAE,CAAC;YAC1B,CAAa,CAAC,CAAC;YACf,kEAAA;YACA,+CAAA;YACA,wEAAA;YACA,yEAAA;YACA,gEAAA;YACY,IAAI,IAAI,CAAC,UAAU,EAAE;gBACjB,KAAK,MAAM,cAAc,IAAI,eAAe,CAAE;oBAC1C,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,4BAA4B,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC3G,CAAiB;YACjB,CAAa;QACb,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,8CAA8C,GAAG;QAC7C,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,yBAAyB,CAAA,iCAAA,KAAsC,mCAAmC,EAAE,MAAM;YAClK,OAAO,IAAI,CAAC,uCAAuC,EAAE,CAChD,IAAI,CAAC,IAAM,IAAI,CAAC,mCAAmC,EAAE,CAAC,CACtD,IAAI,CAAC,IAAM,IAAI,CAAC,8CAA8C,EAAE,CAAC,CAAC;QACnF,CAAS,CAAC,CAAC;IACX,CAAK;IACL,iDAAA,GACI,aAAa,CAAC,MAAM,EAAE;QAClB,OAAO,MAAM,GAAG,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACjE,CAAK;IACL;;;;;;KAMA,GACI,eAAe,CAAC,GAAG,EAAE;QACjB,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpD,CAAS;QACD,MAAM,KAAK,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,KAAK,CACP,GAAG,CAAC,kBAAkB,CAAC,CACvB,IAAI,EAAC,cAAc,IAAI;YACxB,MAAM,mBAAmB,GAAG,cAAc,KAAK,IAAI,IAC/C,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,gBAAgB,EAAE,2BAA2B,CAAC,IAC9E,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAC9D,iDAAA;YACA,sEAAA;YACA,+DAAA;YACA,gBAAA;YACA,qEAAA;YACA,gBAAA;YACA,sEAAA;YACA,oBAAA;YACA,gDAAA;YACY,IAAI,mBAAmB,EAAE;gBACrB,IAAI,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,cAAc,EAAE;oBAC3D,OAAO,IAAI,CAAC;gBAChC,CAAiB;gBACD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE;oBACrC,IAAI,CAAC,cAAc,CAAC,uBAAuB,EAAE;wBACjE,kEAAA;wBACA,+DAAA;wBACA,oDAAA;wBACA,mEAAA;wBACA,8BAAA;wBACA,kEAAA;wBACA,kEAAA;wBACA,iEAAA;wBACA,6BAAA;wBACA,EAAA;wBACA,kEAAA;wBACA,2BAAA;wBACwB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,iCAAiC,CAAC,CAAC;oBAC9G,CAAqB;oBACD,OAAO,KAAK,CAAC;gBACjC,CAAiB;YACjB,CAAa;YACD,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,YAAY,EAAE;gBAC1C,OAAO,IAAI,CAAC;YAC5B,CAAa;YACD,OAAO,mBAAmB,CAAC,GAAG,CAAC,CAC1B,OAAO,EAAE,CACT,IAAI,EAAC,eAAe,IAAI;gBACzC,qEAAA;gBACA,qDAAA;gBACgB,MAAM,kBAAkB,GAAG,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE,2BAA2B,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI;oBAClH,IAAI,IAAI,CAAC,QAAQ,KAAK,WAAW,CAAC,QAAQ,EAAE;wBACxC,MAAM,gCAAgC,GAAG,CAAC,IAAI,CAAC,cAAc,IAAI,WAAW,CAAC,cAAc,CAAC;wBAC5F,MAAM,8BAA8B,GAAG,CAAC,IAAI,CAAC,YAAY,IAAI,WAAW,CAAC,YAAY,CAAC;wBACtF,MAAM,8BAA8B,GAAG,IAAI,CAAC,cAAc,KAAK,WAAW,CAAC,cAAc,CAAC;wBAC1F,IAAI,gCAAgC,IAC/B,8BAA8B,IAC3B,8BAA8B,CAAC,CAAE;4BACrC,OAAO,IAAI,CAAC;wBACxC,CAAyB;oBACzB,CAAqB;oBACD,OAAO,KAAK,CAAC;gBACjC,CAAiB,CAAC,CAAC;gBACH,OAAO,kBAAkB,KAAK,SAAS,CAAC;YACxD,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CACG,IAAI,EAAC,eAAe,IAAI;YACzB,IAAI,IAAI,CAAC,SAAS,KAAK,eAAe,EAAE;gBACpC,QAAQ,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,eAAe,GAAG,IAAI,GAAG,QAAQ,CAAC,8BAA8B,CAAC,CAAC,CAAC;YACjH,CAAa;YACD,OAAO,eAAe,CAAC;QACnC,CAAS,CAAC,CAAC;IACX,CAAK;IACD,MAAM,QAAQ,GAAG;QACrB,uEAAA;QACA,4EAAA;QACQ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,IAAI,CAAC,uBAAuB,EAAE;YAC9B,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,CAAC;YACtC,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;QAChD,CAAS;QACD,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAC/B,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACtC,yEAAA;QACA,kCAAA;QACQ,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,EAAE,WAAW,EAAE;YAAC,oBAAoB;YAAE,qBAAqB;SAAC,GAAE,WAAW,IAAI;YACtH,MAAM,sBAAsB,GAAG,IAAI,oBAAoB,CAAC,WAAW,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;YAC7F,OAAO,IAAI,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,CAAC,CAAC;QACxI,CAAS,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QAC9B,yEAAA;QACA,uDAAA;QACQ,IAAI,CAAC,wBAAwB,EAAE,CAAC;IACxC,CAAK;IACL;;;KAGA,GACI,mBAAmB,CAAC,OAAO,EAAE,mBAAmB,EAAE;QAC9C,OAAO,OAAO,CAAC,MAAM,EAAC,MAAM,GAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,mBAAmB,CAAC,IACtF,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IACpD,CAAK;IACL;;;;;;KAMA,GACI,gBAAgB,GAAG;QACf,OAAO,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE,UAAU,EAAE,GAAG,IAAI;YAC9D,OAAO,mBAAmB,CAAC,GAAG,CAAC,CAC1B,OAAO,EAAE,CACT,IAAI,EAAC,OAAO,GAAI,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC,GAAG,EAAC,cAAc,GAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtI,CAAS,CAAC,CAAC;IACX,CAAK;IACD,IAAI,OAAO,GAAG;QACV,OAAO,IAAI,CAAC,QAAQ,CAAC;IAC7B,CAAK;IACD,gBAAgB,CAAC,IAAI,EAAE,YAAY,EAAE;QACjC,OAAO,sBAAsB,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,YAAY,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC3G,CAAK;IACD,cAAc,GAAG;QACb,OAAO,IAAI,CAAC,WAAW,CAAC;IAChC,CAAK;IACD,sBAAsB,GAAG;QACrB,OAAO,IAAI,CAAC,mBAAmB,CAAC;IACxC,CAAK;IACD,eAAe,CAAC,IAAI,EAAE;QAClB,OAAO,IAAI,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;IAC5F,CAAK;IACD,uBAAuB,CAAC,IAAI,EAAE;QAC1B,OAAO,6BAA6B,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAC5E,CAAK;IACD,cAAc,GAAG;QACb,OAAO,IAAI,CAAC,WAAW,CAAC;IAChC,CAAK;IACD,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,oBAAoB,EAAE;QAC/C,QAAQ,CAAC,SAAS,EAAE,uBAAuB,EAAE,MAAM,CAAC,CAAC;QACrD,MAAM,YAAY,GAAG,IAAI,KAAK,UAAU,GAAG,UAAU,GAAG,WAAW,CAAC;QACpE,MAAM,YAAY,GAAG,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACzD,IAAI,sBAAsB,CAAC;QACnC,uEAAA;QACA,8BAAA;QACQ,OAAO,IAAI,CAAC,QAAQ,CACf,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE,YAAY,GAAE,WAAW,IAAI;YACnE,sBAAsB,GAAG,IAAI,oBAAoB,CAAC,WAAW,EAAE,IAAI,CAAC,cAAc,GAC5E,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,GAC1B,cAAc,CAAC,OAAO,CAAC,CAAC;YAC9B,IAAI,IAAI,KAAK,mBAAmB,EAAE;gBAC9C,iEAAA;gBACA,+DAAA;gBACA,kEAAA;gBACA,6DAAA;gBACA,8DAAA;gBACgB,OAAO,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,CACjD,IAAI,CAAC,iBAAiB,IAAI;oBAC3B,IAAI,iBAAiB,EAAE;wBACnB,OAAA,sBAAA,GAAgC,IAAI,CAAC;oBAC7D,CAAqB;oBACD,OAAO,IAAI,CAAC,eAAe,CAAC,sBAAsB,CAAC,CAAC;gBACxE,CAAiB,CAAC,CACG,IAAI,EAAC,iBAAiB,IAAI;oBAC3B,IAAI,CAAC,iBAAiB,EAAE;wBACpB,QAAQ,CAAC,CAAC,2CAA2C,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;wBACnE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;wBACvB,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAM,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;wBACpE,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,4BAA4B,CAAC,CAAC;oBACzG,CAAqB;oBACD,OAAO,oBAAoB,CAAC,sBAAsB,CAAC,CAAC;gBACxE,CAAiB,CAAC,CACG,IAAI,EAAC,MAAM,IAAI;oBAChB,OAAO,IAAI,CAAC,2BAA2B,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,IAAM,MAAM,CAAC,CAAC;gBACvG,CAAiB,CAAC,CAAC;YACnB,CAAa,MACI;gBACD,OAAO,IAAI,CAAC,6BAA6B,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,IAAM,oBAAoB,CAAC,sBAAsB,CAAC,CAAC,CAAC;YAC3I,CAAa;QACb,CAAS,CAAC,CACG,IAAI,EAAC,MAAM,IAAI;YAChB,sBAAsB,CAAC,qBAAqB,EAAE,CAAC;YAC/C,OAAO,MAAM,CAAC;QAC1B,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;KAGA,GACA,4EAAA;IACA,iBAAA;IACI,6BAA6B,CAAC,GAAG,EAAE;QAC/B,MAAM,KAAK,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAC,cAAc,IAAI;YACxD,MAAM,mBAAmB,GAAG,cAAc,KAAK,IAAI,IAC/C,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,gBAAgB,EAAE,2BAA2B,CAAC,IAC9E,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAClD,IAAI,mBAAmB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE;gBAC5D,IAAI,CAAC,IAAI,CAAC,cAAc,IACxC,CAAqB,CAAC,IAAI,CAAC,uBAAuB,IAC1B,CAAC,cAAc,CAAC,uBAAuB,CAAC,EAAE;oBAC9C,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,iCAAiC,CAAC,CAAC;gBAC1G,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;KAGA,GACI,2BAA2B,CAAC,GAAG,EAAE;QAC7B,MAAM,UAAU,GAAG;YACf,OAAO,EAAE,IAAI,CAAC,QAAQ;YACtB,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;YACrD,gBAAgB,EAAE,IAAI,CAAC,GAAG,EAAE;QACxC,CAAS,CAAC;QACF,OAAO,kBAAkB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;IAC3E,CAAK;IACD,OAAO,WAAW,GAAG;QACjB,OAAO,QAAQ,CAAC,WAAW,EAAE,CAAC;IACtC,CAAK;IACL,2EAAA,GACI,yBAAyB,CAAC,GAAG,EAAE;QAC3B,MAAM,KAAK,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAC,aAAa,IAAI;YACvD,IAAI,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,EAAE;gBACnC,QAAQ,CAAC,SAAS,EAAE,0BAA0B,CAAC,CAAC;gBAChD,OAAO,KAAK,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;YACxD,CAAa,MACI;gBACD,OAAO,kBAAkB,CAAC,OAAO,EAAE,CAAC;YACpD,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACL,uDAAA,GACI,WAAW,CAAC,YAAY,EAAE,QAAQ,EAAE;QAChC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,aAAa,GAAG,GAAG,GAAG,QAAQ,CAAC;QACrC,MAAM,aAAa,GAAG,GAAG,CAAC;QAC1B,IAAI,YAAY,GAAG,aAAa,EAAE;YAC9B,OAAO,KAAK,CAAC;QACzB,CAAS,MACI,IAAI,YAAY,GAAG,aAAa,EAAE;YACnC,QAAQ,CAAC,CAAC,+CAA+C,EAAE,YAAY,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;YAC9F,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,uBAAuB,GAAG;QACtB,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,IACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,KAAK,UAAU,EAAE;YACtD,IAAI,CAAC,yBAAyB,GAAG,MAAM;gBACnC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAM;oBAC9B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,KAAK,SAAS,CAAC;oBAChE,OAAO,IAAI,CAAC,uCAAuC,EAAE,CAAC;gBAC1E,CAAiB,CAAC,CAAC;YACnB,CAAa,CAAC;YACF,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;YACnF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,KAAK,SAAS,CAAC;QAC5E,CAAS;IACT,CAAK;IACD,uBAAuB,GAAG;QACtB,IAAI,IAAI,CAAC,yBAAyB,EAAE;YAChC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;YACtF,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;QAClD,CAAS;IACT,CAAK;IACL;;;;;;;;;KASA,GACI,sBAAsB,GAAG;QACrB,IAAI,EAAE,CAAC;QACP,IAAI,OAAA,CAAQ,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,gBAAgB,CAAC,KAAK,UAAU,EAAE;YACrG,IAAI,CAAC,mBAAmB,GAAG,MAAM;gBAC7C,uEAAA;gBACA,yEAAA;gBACA,wCAAA;gBACgB,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACzB,MAAM,4BAA4B,GAAG,4BAA4B,CAAC;gBAClE,0LAAI,WAAA,AAAQ,EAAE,KAC9B,CAAqB,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,4BAA4B,CAAC,IACrD,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC,EAAE;oBAClF,0EAAA;oBACA,sEAAA;oBACA,sBAAA;oBACA,qDAAA;oBACoB,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAA,uBAAA,GAA2B,IAAI,CAAC,CAAC;gBACnF,CAAiB;gBACD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAM;oBAClD,qEAAA;oBACA,6CAAA;oBACoB,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC3C,CAAiB,CAAC,CAAC;YACnB,CAAa,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC/E,CAAS;IACT,CAAK;IACD,sBAAsB,GAAG;QACrB,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC1B,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACtE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAC5C,CAAS;IACT,CAAK;IACL;;;;KAIA,GACI,eAAe,CAAC,QAAQ,EAAE;QACtB,IAAI,EAAE,CAAC;QACP,IAAI;YACA,MAAM,SAAS,GAAG,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC,MAAM,IAAI,CAAC;YACjJ,QAAQ,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,EAAE,SAAS,GAAG,IAAI,GAAG,QAAQ,CAAC,wBAAwB,CAAC,CAAC,CAAC;YACnG,OAAO,SAAS,CAAC;QAC7B,CAAS,CACD,OAAO,CAAC,EAAE;YAClB,mDAAA;YACY,QAAQ,CAAC,SAAS,EAAE,kCAAkC,EAAE,CAAC,CAAC,CAAC;YAC3D,OAAO,KAAK,CAAC;QACzB,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,iBAAiB,GAAG;QAChB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,OAAO;QACnB,CAAS;QACD,IAAI;YACA,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAC1G,CAAS,CACD,OAAO,CAAC,EAAE;YAClB,+DAAA;YACY,QAAQ,CAAC,iCAAiC,EAAE,CAAC,CAAC,CAAC;QAC3D,CAAS;IACT,CAAK;IACL,mDAAA,GACI,wBAAwB,GAAG;QACvB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,OAAO;QACnB,CAAS;QACD,IAAI;YACA,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACzF,CAAS,CACD,OAAO,CAAC,EAAE;QAClB,SAAA;QACA,CAAS;IACT,CAAK;IACD,4BAA4B,CAAC,QAAQ,EAAE;QACnC,OAAO,CAAC,EAAE,0BAA0B,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;IAClF,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,kBAAkB,CAAC,GAAG,EAAE;IAC7B,OAAO,QAAQ,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;AAC/C,CAAC;AACD;;CAEA,GACA,SAAS,mBAAmB,CAAC,GAAG,EAAE;IAC9B,OAAO,QAAQ,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;AAChD,CAAC;AACD;;;CAGA,GACA,SAAS,sBAAsB,CAAC,UAAU,EAAE,cAAc,EAAE;IAC5D,oCAAA;IACA,EAAA;IACA,gEAAA;IACA,mDAAA;IACA,EAAA;IACA,8DAAA;IACA,sCAAA;IACI,IAAI,QAAQ,GAAG,UAAU,CAAC,SAAS,CAAC;IACpC,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE;QAC/B,QAAQ,IAAI,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC;IAC9C,CAAK;IACD,OAAO,YAAY,GAAG,cAAc,GAAG,GAAG,GAAG,QAAQ,GAAG,GAAG,CAAC;AAChE,CAAC;AACD,eAAe,yBAAyB,CAAC,cAAc,EAAE;IACrD,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE;QACzB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IACjC,CAAK;IACD,MAAM,MAAM,GAAG,cAAc,GAAG,aAAa,CAAC;IAC9C,MAAM,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;;;;;;;CAgBA,GACA,SAAS,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE;IAC5D,MAAM,GAAG,CAAC;WAAG,MAAM;KAAC,CAAC;IACrB,KAAK,GAAG,CAAC;WAAG,KAAK;KAAC,CAAC;IACnB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACxB,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACvB,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC;IAC3B,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC;IAC1B,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,MAAO,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI,CAAE;QACzB,MAAM,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,GAAG,GAAG,CAAC,EAAE;YACrB,6DAAA;YACA,mCAAA;YACY,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClC,CAAS,MACI,IAAI,GAAG,GAAG,CAAC,EAAE;YAC1B,uEAAA;YACA,sBAAA;YACY,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,CAAS,MACI;YACD,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;QAChB,CAAS;IACT,CAAK;IACD,MAAO,CAAC,GAAG,IAAI,CAAE;QACb,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1B,CAAK;IACD,MAAO,CAAC,GAAG,IAAI,CAAE;QACb,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,YAAY,CAAC;AAC/B;;;;;;CAMA,GACA,MAAM,2BAA2B,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC;AACjD;;;;;;;CAOA,GACA,MAAM,cAAc,CAAC;IACjB,WAAW,CACf,kDAAA,GACI,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,CAAE;QAC/C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QACrC;;;;;SAKA,GACQ,IAAI,CAAC,kBAAkB,GAAG,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACrE,mCAAA,GACA,4DAAA;QACQ,IAAI,CAAC,gBAAgB,GAAG,IAAI,SAAS,EAAC,CAAC,GAAI,cAAc,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;QACpF;;;;;SAKA,GACQ,IAAI,CAAC,uBAAuB,GAAG,IAAI,GAAG,EAAE,CAAC;QACzC,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,sBAAsB,EAAE,CAAC;QAC5D,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,cAAc,EAAE,CAAC;QAChD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,cAAc,EAAE,CAAC;QAChD,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC;IACnD,CAAK;IACD,wBAAwB,CAAC,IAAI,EAAE;QACnC,2EAAA;QACA,cAAA;QACQ,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;QAC3E,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAChF,IAAI,CAAC,cAAc,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACrI,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACxD,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAC5E,CAAK;IACD,cAAc,CAAC,gBAAgB,EAAE;QAC7B,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,iBAAiB,EAAE,mBAAmB,GAAE,GAAG,GAAI,gBAAgB,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACtJ,CAAK;AACL,CAAC;AACD,SAAS,aAAa,CACtB,kDAAA,GACA,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE;IAC/C,OAAO,IAAI,cAAc,CAAC,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;AACjF,CAAC;AACD;;;;;CAKA,GACA,0EAAA;AACA,UAAA;AACA,eAAe,0BAA0B,CAAC,UAAU,EAAE,IAAI,EAAE;IACxD,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,oBAAoB,EAAE,UAAU,GAAE,GAAG,IAAI;QAC5G,qEAAA;QACA,oBAAA;QACQ,IAAI,UAAU,CAAC;QACf,OAAO,cAAc,CAAC,aAAa,CAC9B,qBAAqB,CAAC,GAAG,CAAC,CAC1B,IAAI,EAAC,kBAAkB,IAAI;YAC5B,UAAU,GAAG,kBAAkB,CAAC;YAChC,cAAc,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;YAC9C,OAAO,cAAc,CAAC,aAAa,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;QAC3E,CAAS,CAAC,CACG,IAAI,EAAC,UAAU,IAAI;YACpB,MAAM,eAAe,GAAG,EAAE,CAAC;YAC3B,MAAM,aAAa,GAAG,EAAE,CAAC;YACrC,kCAAA;YACY,IAAI,WAAW,GAAG,cAAc,EAAE,CAAC;YACnC,KAAK,MAAM,KAAK,IAAI,UAAU,CAAE;gBAC5B,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACpC,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,SAAS,CAAE;oBACpC,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAChE,CAAiB;YACjB,CAAa;YACD,KAAK,MAAM,KAAK,IAAI,UAAU,CAAE;gBAC5B,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAClC,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,SAAS,CAAE;oBACpC,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAChE,CAAiB;YACjB,CAAa;YACb,qEAAA;YACA,sDAAA;YACY,OAAO,cAAc,CAAC,cAAc,CAC/B,YAAY,CAAC,GAAG,EAAE,WAAW,CAAC,CAC9B,IAAI,EAAC,iBAAiB,IAAI;gBAC3B,OAAO;oBACH,iBAAiB;oBACjB,eAAe;oBACf,aAAa;gBACjC,CAAiB,CAAC;YAClB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,mEAAA,GACA,SAAS,sBAAsB,CAAC,UAAU,EAAE,SAAS,EAAE;IACnD,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,cAAc,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;IACvC,MAAM,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,GAAK,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;IAC9E,IAAI,kBAAkB,CAAC;IACvB,IAAI,aAAa,CAAC;IAClB,OAAO,cAAc,CAAC,WAAW,CAC5B,cAAc,CAAC,yBAAyB,EAAE,WAAW,GAAE,GAAG,IAAI;QACvE,wEAAA;QACA,uEAAA;QACA,kEAAA;QACA,oEAAA;QACA,wEAAA;QACA,SAAA;QACQ,IAAI,UAAU,GAAG,kBAAkB,EAAE,CAAC;QACtC,IAAI,wBAAwB,GAAG,cAAc,EAAE,CAAC;QAChD,OAAO,cAAc,CAAC,eAAe,CAChC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CACrB,IAAI,EAAC,IAAI,IAAI;YACd,UAAU,GAAG,IAAI,CAAC;YAClB,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK;gBAC7B,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,EAAE;oBACxB,wBAAwB,GAAG,wBAAwB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACjF,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CACG,IAAI,CAAC,MAAM;YACxB,kEAAA;YACA,uEAAA;YACA,uCAAA;YACY,OAAO,cAAc,CAAC,cAAc,CAAC,qBAAqB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QACxF,CAAS,CAAC,CACG,IAAI,CAAC,CAAC,IAAI,KAAK;YAChB,kBAAkB,GAAG,IAAI,CAAC;YACtC,mEAAA;YACA,iEAAA;YACA,iEAAA;YACA,mEAAA;YACA,aAAA;YACY,MAAM,aAAa,GAAG,EAAE,CAAC;YACzB,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAE;gBAC9B,MAAM,SAAS,GAAG,wBAAwB,CAAC,QAAQ,EAAE,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAC;gBAC7G,IAAI,SAAS,IAAI,IAAI,EAAE;oBACvC,8DAAA;oBACA,0DAAA;oBACA,cAAA;oBACoB,aAAa,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,QAAQ,CAAC,GAAG,EAAE,SAAS,EAAE,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC1J,CAAiB;YACjB,CAAa;YACD,OAAO,cAAc,CAAC,aAAa,CAAC,gBAAgB,CAAC,GAAG,EAAE,cAAc,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;QAChH,CAAS,CAAC,CACG,IAAI,EAAC,KAAK,IAAI;YACf,aAAa,GAAG,KAAK,CAAC;YACtB,MAAM,QAAQ,GAAG,KAAK,CAAC,uBAAuB,CAAC,kBAAkB,EAAE,wBAAwB,CAAC,CAAC;YAC7F,OAAO,cAAc,CAAC,oBAAoB,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAClG,CAAS,CAAC,CAAC;IACX,CAAK,CAAC,CACG,IAAI,CAAC,IAAA,CAAO;YACb,OAAO,EAAE,aAAa,CAAC,OAAO;YAC9B,OAAO,EAAE,wCAAwC,CAAC,kBAAkB,CAAC;QAC7E,CAAK,CAAC,CAAC,CAAC;AACR,CAAC;AACD;;;;;;;;;;;;;CAaA,GACA,SAAS,0BAA0B,CAAC,UAAU,EAAE,WAAW,EAAE;IACzD,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,mBAAmB,EAAE,mBAAmB,GAAE,GAAG,IAAI;QAC9F,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAC1C,MAAM,cAAc,GAAG,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC;YAClE,aAAa,EAAE,IAAI,CAAA,mEAAA;QAC/B,CAAS,CAAC,CAAC;QACH,OAAO,2BAA2B,CAAC,cAAc,EAAE,GAAG,EAAE,WAAW,EAAE,cAAc,CAAC,CAC/E,IAAI,CAAC,IAAM,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CACrC,IAAI,CAAC,IAAM,cAAc,CAAC,aAAa,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CACrE,IAAI,CAAC,IAAM,cAAc,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,GAAG,EAAE,QAAQ,EAAE,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAClH,IAAI,CAAC,IAAM,cAAc,CAAC,cAAc,CAAC,yCAAyC,CAAC,GAAG,EAAE,2BAA2B,CAAC,WAAW,CAAC,CAAC,CAAC,CAClI,IAAI,CAAC,IAAM,cAAc,CAAC,cAAc,CAAC,YAAY,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACnF,CAAK,CAAC,CAAC;AACP,CAAC;AACD,SAAS,2BAA2B,CAAC,WAAW,EAAE;IAC9C,IAAI,MAAM,GAAG,cAAc,EAAE,CAAC;IAC9B,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;QACzD,MAAM,cAAc,GAAG,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACtD,IAAI,cAAc,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5C,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACpE,CAAS;IACT,CAAK;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AACD;;;;;CAKA,GACA,SAAS,qBAAqB,CAAC,UAAU,EAAE,OAAO,EAAE;IAChD,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,cAAc,EAAE,mBAAmB,GAAE,GAAG,IAAI;QACzF,IAAI,YAAY,CAAC;QACjB,OAAO,cAAc,CAAC,aAAa,CAC9B,mBAAmB,CAAC,GAAG,EAAE,OAAO,CAAC,CACjC,IAAI,CAAC,CAAC,KAAK,KAAK;YACjB,UAAU,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC;YAC3B,YAAY,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YAC5B,OAAO,cAAc,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAChF,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,cAAc,CAAC,aAAa,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CACrE,IAAI,CAAC,IAAM,cAAc,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,GAAG,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC,CACpG,IAAI,CAAC,IAAM,cAAc,CAAC,cAAc,CAAC,yCAAyC,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC,CACtG,IAAI,CAAC,IAAM,cAAc,CAAC,cAAc,CAAC,YAAY,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC,CAAC;IACvF,CAAK,CAAC,CAAC;AACP,CAAC;AACD;;;;;CAKA,GACA,SAAS,yCAAyC,CAAC,UAAU,EAAE;IAC3D,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,qCAAqC,EAAE,UAAU,GAAE,GAAG,GAAI,cAAc,CAAC,aAAa,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC,CAAC;AAClL,CAAC;AACD;;;CAGA,GACA,SAAS,sCAAsC,CAAC,UAAU,EAAE;IACxD,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,kCAAkC,EAAE,UAAU,GAAE,GAAG,GAAI,cAAc,CAAC,WAAW,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1K,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,sCAAsC,CAAC,UAAU,EAAE,WAAW,EAAE;IACrE,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,aAAa,GAAG,WAAW,CAAC,eAAe,CAAC;IAClD,IAAI,wBAAwB,GAAG,cAAc,CAAC,kBAAkB,CAAC;IACjE,OAAO,cAAc,CAAC,WAAW,CAC5B,cAAc,CAAC,oBAAoB,EAAE,mBAAmB,GAAE,GAAG,IAAI;QAClE,MAAM,cAAc,GAAG,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC;YAClE,aAAa,EAAE,IAAI,CAAA,mEAAA;QAC/B,CAAS,CAAC,CAAC;QACX,uEAAA;QACQ,wBAAwB,GAAG,cAAc,CAAC,kBAAkB,CAAC;QAC7D,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,QAAQ,KAAK;YACpD,MAAM,aAAa,GAAG,wBAAwB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC7D,IAAI,CAAC,aAAa,EAAE;gBAChB,OAAO;YACvB,CAAa;YACb,kEAAA;YACA,iEAAA;YACA,0BAAA;YACY,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CACnC,kBAAkB,CAAC,GAAG,EAAE,MAAM,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAC1D,IAAI,CAAC,MAAM;gBACZ,OAAO,cAAc,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,EAAE,MAAM,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;YACxG,CAAa,CAAC,CAAC,CAAC;YACJ,IAAI,aAAa,GAAG,aAAa,CAAC,kBAAkB,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YAChF,IAAI,WAAW,CAAC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;gBACrD,aAAa,GAAG,aAAa,CACxB,eAAe,CAAC,UAAU,CAAC,iBAAiB,EAAE,eAAe,CAAC,GAAG,EAAE,CAAC,CACpE,gCAAgC,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC;YAC7E,CAAa,MACI,IAAI,MAAM,CAAC,WAAW,CAAC,mBAAmB,EAAE,GAAG,CAAC,EAAE;gBACnD,aAAa,GAAG,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;YACjG,CAAa;YACD,wBAAwB,GAAG,wBAAwB,CAAC,MAAM,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;YAChG,4DAAA;YACA,qDAAA;YACY,IAAI,uBAAuB,CAAC,aAAa,EAAE,aAAa,EAAE,MAAM,CAAC,EAAE;gBAC/D,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,gBAAgB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC,CAAC;YAC/F,CAAa;QACb,CAAS,CAAC,CAAC;QACH,IAAI,WAAW,GAAG,kBAAkB,EAAE,CAAC;QACvC,IAAI,oBAAoB,GAAG,cAAc,EAAE,CAAC;QAC5C,WAAW,CAAC,eAAe,CAAC,OAAO,EAAC,GAAG,IAAI;YACvC,IAAI,WAAW,CAAC,sBAAsB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC7C,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YAC1G,CAAa;QACb,CAAS,CAAC,CAAC;QACX,0EAAA;QACA,oDAAA;QACQ,QAAQ,CAAC,IAAI,CAAC,4BAA4B,CAAC,GAAG,EAAE,cAAc,EAAE,WAAW,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI;YACxG,WAAW,GAAG,MAAM,CAAC,gBAAgB,CAAC;YACtC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;QAC/D,CAAS,CAAC,CAAC,CAAC;QACZ,uEAAA;QACA,0EAAA;QACA,sEAAA;QACA,SAAA;QACQ,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE;YAC/C,MAAM,mBAAmB,GAAG,cAAc,CAAC,WAAW,CACjD,4BAA4B,CAAC,GAAG,CAAC,CACjC,IAAI,EAAC,yBAAyB,IAAI;gBACnC,OAAO,cAAc,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,qBAAqB,EAAE,aAAa,CAAC,CAAC;YACpH,CAAa,CAAC,CAAC;YACH,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC/C,CAAS;QACD,OAAO,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CACtC,IAAI,CAAC,IAAM,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CACrC,IAAI,CAAC,IAAM,cAAc,CAAC,cAAc,CAAC,uBAAuB,CAAC,GAAG,EAAE,WAAW,EAAE,oBAAoB,CAAC,CAAC,CACzG,IAAI,CAAC,IAAM,WAAW,CAAC,CAAC;IACrC,CAAK,CAAC,CACG,IAAI,EAAC,WAAW,IAAI;QACrB,cAAc,CAAC,kBAAkB,GAAG,wBAAwB,CAAC;QAC7D,OAAO,WAAW,CAAC;IAC3B,CAAK,CAAC,CAAC;AACP,CAAC;AACD;;;;;;;;;CASA,GACA,SAAS,4BAA4B,CAAC,GAAG,EAAE,cAAc,EAAE,SAAS,EAAE;IAClE,IAAI,WAAW,GAAG,cAAc,EAAE,CAAC;IACnC,IAAI,oBAAoB,GAAG,cAAc,EAAE,CAAC;IAC5C,SAAS,CAAC,OAAO,EAAC,CAAC,GAAK,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3D,OAAO,cAAc,CAAC,UAAU,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,IAAI,EAAC,YAAY,IAAI;QACpE,IAAI,gBAAgB,GAAG,kBAAkB,EAAE,CAAC;QAC5C,SAAS,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK;YAC5B,MAAM,WAAW,GAAG,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACtD,uEAAA;YACY,IAAI,GAAG,CAAC,eAAe,EAAE,KAAK,WAAW,CAAC,eAAe,EAAE,EAAE;gBACzD,oBAAoB,GAAG,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACrE,CAAa;YACb,iEAAA;YACA,6DAAA;YACA,iEAAA;YACA,SAAA;YACY,IAAI,GAAG,CAAC,YAAY,EAAE,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE;gBAClF,kEAAA;gBACA,6DAAA;gBACA,UAAA;gBACgB,cAAc,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC9C,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACrE,CAAa,MACI,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,IACnC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,IAC7C,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,IAC7C,WAAW,CAAC,gBAAgB,CAAC,CAAE;gBACnC,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAC7B,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACrE,CAAa,MACI;gBACD,QAAQ,CAAC,SAAS,EAAE,qCAAqC,EAAE,GAAG,EAAE,oBAAoB,EAAE,WAAW,CAAC,OAAO,EAAE,iBAAiB,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;YAC3J,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO;YAAE,gBAAgB;YAAE,oBAAoB;QAAA,CAAE,CAAC;IAC1D,CAAK,CAAC,CAAC;AACP,CAAC;AACD;;;;;;;;;;CAUA,GACA,SAAS,uBAAuB,CAAC,aAAa,EAAE,aAAa,EAAE,MAAM,EAAE;IACvE,sEAAA;IACI,IAAI,aAAa,CAAC,WAAW,CAAC,mBAAmB,EAAE,KAAK,CAAC,EAAE;QACvD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL,qEAAA;IACA,yEAAA;IACA,yEAAA;IACA,0EAAA;IACA,WAAA;IACI,MAAM,SAAS,GAAG,aAAa,CAAC,eAAe,CAAC,cAAc,EAAE,GAC5D,aAAa,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC;IACnD,IAAI,SAAS,IAAI,2BAA2B,EAAE;QAC1C,OAAO,IAAI,CAAC;IACpB,CAAK;IACL,4EAAA;IACA,sEAAA;IACA,4EAAA;IACA,oEAAA;IACA,yDAAA;IACI,MAAM,OAAO,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,GACtC,MAAM,CAAC,iBAAiB,CAAC,IAAI,GAC7B,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC;IACjC,OAAO,OAAO,GAAG,CAAC,CAAC;AACvB,CAAC;AACD;;CAEA,GACA,eAAe,gCAAgC,CAAC,UAAU,EAAE,WAAW,EAAE;IACrE,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,IAAI;QACA,MAAM,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,wBAAwB,EAAE,WAAW,GAAE,GAAG,IAAI;YAC1F,OAAO,kBAAkB,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,UAAU,KAAK;gBAC3D,OAAO,kBAAkB,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,GAAG,GAAK,cAAc,CAAC,WAAW,CAAC,iBAAiB,CAAC,YAAY,CAAC,GAAG,EAAE,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAM,kBAAkB,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,GAAG,GAAK,cAAc,CAAC,WAAW,CAAC,iBAAiB,CAAC,eAAe,CAAC,GAAG,EAAE,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YAChV,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK,CACD,OAAO,CAAC,EAAE;QACN,IAAI,2BAA2B,CAAC,CAAC,CAAC,EAAE;YAC5C,qEAAA;YACA,mEAAA;YACA,oEAAA;YACA,sEAAA;YACY,QAAQ,CAAC,SAAS,EAAE,qCAAqC,GAAG,CAAC,CAAC,CAAC;QAC3E,CAAS,MACI;YACD,MAAM,CAAC,CAAC;QACpB,CAAS;IACT,CAAK;IACD,KAAK,MAAM,UAAU,IAAI,WAAW,CAAE;QAClC,MAAM,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YACvB,MAAM,UAAU,GAAG,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC/E,+CAAA;YACY,MAAM,4BAA4B,GAAG,UAAU,CAAC,eAAe,CAAC;YAChE,MAAM,iBAAiB,GAAG,UAAU,CAAC,gCAAgC,CAAC,4BAA4B,CAAC,CAAC;YACpG,cAAc,CAAC,kBAAkB,GAC7B,cAAc,CAAC,kBAAkB,CAAC,MAAM,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;QACtF,qEAAA;QACA,uEAAA;QACA,+DAAA;QACA,CAAS;IACT,CAAK;AACL,CAAC;AACD;;;;;CAKA,GACA,SAAS,8BAA8B,CAAC,UAAU,EAAE,YAAY,EAAE;IAC9D,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,yBAAyB,EAAE,UAAU,GAAE,GAAG,IAAI;QAC3F,IAAI,YAAY,KAAK,SAAS,EAAE;YAC5B,YAAY,GAAG,eAAe,CAAC;QAC3C,CAAS;QACD,OAAO,cAAc,CAAC,aAAa,CAAC,gCAAgC,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAChG,CAAK,CAAC,CAAC;AACP,CAAC;AACD;;;CAGA,GACA,SAAS,sBAAsB,CAAC,UAAU,EAAE,GAAG,EAAE;IAC7C,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,eAAe,EAAE,UAAU,GAAE,GAAG,GAAI,cAAc,CAAC,cAAc,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAC9I,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,wBAAwB,CAAC,UAAU,EAAE,MAAM,EAAE;IAClD,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,OAAO,cAAc,CAAC,WAAW,CAC5B,cAAc,CAAC,iBAAiB,EAAE,WAAW,GAAE,GAAG,IAAI;QACvD,IAAI,UAAU,CAAC;QACf,OAAO,cAAc,CAAC,WAAW,CAC5B,aAAa,CAAC,GAAG,EAAE,MAAM,CAAC,CAC1B,IAAI,CAAC,CAAC,MAAM,KAAK;YAClB,IAAI,MAAM,EAAE;gBACxB,4DAAA;gBACA,qBAAA;gBACA,yCAAA;gBACgB,UAAU,GAAG,MAAM,CAAC;gBACpB,OAAO,kBAAkB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC9D,CAAa,MACI;gBACD,OAAO,cAAc,CAAC,WAAW,CAC5B,gBAAgB,CAAC,GAAG,CAAC,CACrB,IAAI,EAAC,QAAQ,IAAI;oBAClB,UAAU,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,QAAQ,EAAE,qBAAqB,CAAA,wBAAA,KAA6B,GAAG,CAAC,qBAAqB,CAAC,CAAC;oBAC3H,OAAO,cAAc,CAAC,WAAW,CAC5B,aAAa,CAAC,GAAG,EAAE,UAAU,CAAC,CAC9B,IAAI,CAAC,IAAM,UAAU,CAAC,CAAC;gBAChD,CAAiB,CAAC,CAAC;YACnB,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK,CAAC,CACG,IAAI,EAAC,UAAU,IAAI;QAC5B,sEAAA;QACA,qBAAA;QACQ,MAAM,gBAAgB,GAAG,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACpF,IAAI,gBAAgB,KAAK,IAAI,IACzB,UAAU,CAAC,eAAe,CAAC,SAAS,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAClE,CAAC,EAAE;YACP,cAAc,CAAC,kBAAkB,GAC7B,cAAc,CAAC,kBAAkB,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YAC9E,cAAc,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC7E,CAAS;QACD,OAAO,UAAU,CAAC;IAC1B,CAAK,CAAC,CAAC;AACP,CAAC;AACD;;;CAGA,GACA,uBAAA;AACA,SAAS,uBAAuB,CAAC,UAAU,EAAE,WAAW,EAAE,MAAM,EAAE;IAC9D,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,QAAQ,GAAG,cAAc,CAAC,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC7D,IAAI,QAAQ,KAAK,SAAS,EAAE;QACxB,OAAO,kBAAkB,CAAC,OAAO,CAAC,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3F,CAAK,MACI;QACD,OAAO,cAAc,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAC7E,CAAK;AACL,CAAC;AACD;;;;;;CAMA,GACA,6DAAA;AACA,eAAe,uBAAuB,CAAC,UAAU,EAAE,QAAQ,EAAE,uBAAuB,EAAE;IAClF,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,UAAU,GAAG,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACnE,MAAM,IAAI,GAAG,uBAAuB,GAAG,WAAW,GAAG,mBAAmB,CAAC;IACzE,IAAI;QACA,IAAI,CAAC,uBAAuB,EAAE;YAC1B,MAAM,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,gBAAgB,EAAE,IAAI,GAAE,GAAG,IAAI;gBAC3E,OAAO,cAAc,CAAC,WAAW,CAAC,iBAAiB,CAAC,YAAY,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;YAClG,CAAa,CAAC,CAAC;QACf,CAAS;IACT,CAAK,CACD,OAAO,CAAC,EAAE;QACN,IAAI,2BAA2B,CAAC,CAAC,CAAC,EAAE;YAC5C,sEAAA;YACA,mEAAA;YACA,iEAAA;YACA,+DAAA;YACA,0DAAA;YACY,QAAQ,CAAC,SAAS,EAAE,CAAC,6CAA6C,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAClG,CAAS,MACI;YACD,MAAM,CAAC,CAAC;QACpB,CAAS;IACT,CAAK;IACD,cAAc,CAAC,kBAAkB,GAC7B,cAAc,CAAC,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACvD,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAC9D,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,sBAAsB,CAAC,UAAU,EAAE,KAAK,EAAE,kBAAkB,EAAE;IACnE,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,IAAI,4BAA4B,GAAG,eAAe,CAAC,GAAG,EAAE,CAAC;IACzD,IAAI,UAAU,GAAG,cAAc,EAAE,CAAC;IAClC,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,eAAe,EAAE,UAAU,GAAE,GAAG,IAAI;QACjF,OAAO,uBAAuB,CAAC,cAAc,EAAE,GAAG,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CACpE,IAAI,EAAC,UAAU,IAAI;YACpB,IAAI,UAAU,EAAE;gBACZ,4BAA4B,GACxB,UAAU,CAAC,4BAA4B,CAAC;gBAC5C,OAAO,cAAc,CAAC,WAAW,CAC5B,0BAA0B,CAAC,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC,CACpD,IAAI,EAAC,MAAM,IAAI;oBAChB,UAAU,GAAG,MAAM,CAAC;gBACxC,CAAiB,CAAC,CAAC;YACnB,CAAa;QACb,CAAS,CAAC,CACG,IAAI,CAAC,IAAM,cAAc,CAAC,WAAW,CAAC,yBAAyB,CAAC,GAAG,EAAE,KAAK,EAAE,kBAAkB,GAC7F,4BAA4B,GAC5B,eAAe,CAAC,GAAG,EAAE,EAAE,kBAAkB,GAAG,UAAU,GAAG,cAAc,EAAE,CAAC,CAAC,CAC5E,IAAI,EAAC,SAAS,IAAI;YACnB,cAAc,CAAC,cAAc,EAAE,oBAAoB,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;YACvE,OAAO;gBAAE,SAAS;gBAAE,UAAU;YAAA,CAAE,CAAC;QAC7C,CAAS,CAAC,CAAC;IACX,CAAK,CAAC,CAAC;AACP,CAAC;AACD,SAAS,2BAA2B,CAAC,cAAc,EAAE,GAAG,EAAE,WAAW,EAAE,cAAc,EAAE;IACnF,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;IAChC,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;IAC7B,IAAI,YAAY,GAAG,kBAAkB,CAAC,OAAO,EAAE,CAAC;IAChD,OAAO,CAAC,OAAO,EAAC,MAAM,IAAI;QACtB,YAAY,GAAG,YAAY,CACtB,IAAI,CAAC,IAAM,cAAc,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAChD,IAAI,EAAC,GAAG,IAAI;YACb,MAAM,UAAU,GAAG,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACvD,UAAU,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC;YAChC,IAAI,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBACvC,KAAK,CAAC,qBAAqB,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;gBAC9C,IAAI,GAAG,CAAC,eAAe,EAAE,EAAE;oBAC3C,2DAAA;oBACA,6DAAA;oBACA,0DAAA;oBACoB,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;oBAC3C,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACjD,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK,CAAC,CAAC;IACH,OAAO,YAAY,CAAC,IAAI,CAAC,IAAM,cAAc,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;AACjG,CAAC;AACD,0EAAA,GACA,gCAAA;AACA,SAAS,iCAAiC,CAAC,UAAU,EAAE,OAAO,EAAE;IAC5D,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,iBAAiB,GAAG,SAAS,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IAClE,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,2BAA2B,EAAE,UAAU,GAAE,GAAG,IAAI;QAC7F,OAAO,iBAAiB,CAAC,kBAAkB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,IAAI,EAAC,IAAI,IAAI;YACnE,IAAI,IAAI,EAAE;gBACN,OAAO,cAAc,CAAC,cAAc,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAC7E,CAAa,MACI;gBACD,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACxD,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK,CAAC,CAAC;AACP,CAAC;AACD,gCAAA;AACA,SAAS,2CAA2C,CAAC,UAAU,EAAE,OAAO,EAAE;IACtE,MAAM,iBAAiB,GAAG,SAAS,CAAC,SAAS,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,aAAa,CAAC,CAAC;IACzF,iBAAiB,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;AACxD,CAAC;AACD,gCAAA;AACA,SAAS,0BAA0B,CAAC,UAAU,EAAE;IAC5C,MAAM,eAAe,GAAG,SAAS,CAAC,SAAS,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,WAAW,CAAC,CAAC;IACrF,OAAO,eAAe,CAAC,gBAAgB,EAAE,CAAC;AAC9C,CAAC;AACD,gCAAA;AACA,SAAS,yBAAyB,CAAC,UAAU,EAAE,QAAQ,EAAE;IACrD,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,eAAe,GAAG,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IAC9D,MAAM,gBAAgB,GAAG,cAAc,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACzE,IAAI,gBAAgB,EAAE;QAClB,OAAO,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACxD,CAAK,MACI;QACD,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,iBAAiB,EAAE,UAAU,EAAE,GAAG,IAAI;YACnF,OAAO,eAAe,CACjB,sBAAsB,CAAC,GAAG,EAAE,QAAQ,CAAC,CACrC,IAAI,EAAC,UAAU,GAAK,UAAU,GAAG,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;QAC7E,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AACD;;;;;CAKA,GACA,gCAAA;AACA,SAAS,+BAA+B,CAAC,UAAU,EAAE,eAAe,EAAE;IAClE,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IACjD,2EAAA;IACA,gEAAA;IACA,wBAAA;IACA,uDAAA;IACI,MAAM,QAAQ,GAAG,cAAc,CAAC,uBAAuB,CAAC,GAAG,CAAC,eAAe,CAAC,IACxE,eAAe,CAAC,GAAG,EAAE,CAAC;IAC1B,OAAO,cAAc,CAAC,WAAW,CAC5B,cAAc,CAAC,0BAA0B,EAAE,UAAU,GAAE,GAAG,GAAI,cAAc,CAAC,eAAe,CAAC,yBAAyB,CAAC,GAAG,EAAE,eAAe,EAAE,mCAAmC,CAAC,QAAQ,EAAE,wBAAwB,CAAC,EAC7N,UAAA,GAAiB,MAAM,CAAC,gBAAgB,CAAC,CAAC,CACjC,IAAI,EAAC,WAAW,IAAI;QACrB,cAAc,CAAC,cAAc,EAAE,eAAe,EAAE,WAAW,CAAC,CAAC;QAC7D,OAAO,WAAW,CAAC;IAC3B,CAAK,CAAC,CAAC;AACP,CAAC;AACD,4EAAA,GACA,gCAAA;AACA,SAAS,cAAc,CAAC,cAAc,EAAE,eAAe,EAAE,WAAW,EAAE;IAClE,IAAI,QAAQ,GAAG,cAAc,CAAC,uBAAuB,CAAC,GAAG,CAAC,eAAe,CAAC,IACtE,eAAe,CAAC,GAAG,EAAE,CAAC;IAC1B,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK;QAC5B,IAAI,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACtC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;QACpC,CAAS;IACT,CAAK,CAAC,CAAC;IACH,cAAc,CAAC,uBAAuB,CAAC,GAAG,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;AAC1E,CAAC;AACD;;;;;CAKA,GACA,SAAS,cAAc,CAAC,UAAU,EAAE;IACpC,4EAAA;IACA,2BAAA;IACI,OAAO,aAAa,CAAC,eAAe,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpG,CAAC;AACD;;;;;;CAMA,GACA,eAAe,+BAA+B,CAAC,UAAU,EAAE,eAAe,EAAE,SAAS,EAAE,UAAU,EAAE;IAC/F,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,IAAI,YAAY,GAAG,cAAc,EAAE,CAAC;IACpC,IAAI,WAAW,GAAG,kBAAkB,EAAE,CAAC;IACvC,KAAK,MAAM,SAAS,IAAI,SAAS,CAAE;QAC/B,MAAM,WAAW,GAAG,eAAe,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3E,IAAI,SAAS,CAAC,QAAQ,EAAE;YACpB,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzD,CAAS;QACD,MAAM,GAAG,GAAG,eAAe,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACzD,GAAG,CAAC,WAAW,CAAC,eAAe,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChF,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;IAC3D,CAAK;IACD,MAAM,cAAc,GAAG,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC;QAClE,aAAa,EAAE,IAAI,CAAA,mEAAA;IAC3B,CAAK,CAAC,CAAC;IACP,0EAAA;IACA,kDAAA;IACI,MAAM,kBAAkB,GAAG,MAAM,wBAAwB,CAAC,cAAc,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;IACtG,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,wBAAwB,EAAE,WAAW,GAAE,GAAG,IAAI;QAC3F,OAAO,4BAA4B,CAAC,GAAG,EAAE,cAAc,EAAE,WAAW,CAAC,CAChE,IAAI,CAAC,oBAAoB,IAAI;YAC9B,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC1B,OAAO,oBAAoB,CAAC;QACxC,CAAS,CAAC,CACG,IAAI,EAAC,oBAAoB,IAAI;YAC9B,OAAO,cAAc,CAAC,WAAW,CAC5B,6BAA6B,CAAC,GAAG,EAAE,kBAAkB,CAAC,QAAQ,CAAC,CAC/D,IAAI,CAAC,IAAM,cAAc,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,EAAE,YAAY,EAAE,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CACtG,IAAI,CAAC,IAAM,cAAc,CAAC,cAAc,CAAC,uBAAuB,CAAC,GAAG,EAAE,oBAAoB,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,oBAAoB,CAAC,CAAC,CACxJ,IAAI,CAAC,IAAM,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;QACnE,CAAS,CAAC,CAAC;IACX,CAAK,CAAC,CAAC;AACP,CAAC;AACD;;;CAGA,GACA,SAAS,wBAAwB,CAAC,UAAU,EAAE,cAAc,EAAE;IAC1D,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,eAAe,GAAG,WAAW,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IAC/D,OAAO,cAAc,CAAC,WAAW,CAC5B,cAAc,CAAC,gBAAgB,EAAE,UAAU,GAAE,WAAW,IAAI;QAC7D,OAAO,cAAc,CAAC,WAAW,CAAC,iBAAiB,CAAC,WAAW,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC;IAC5F,CAAK,CAAC,CACG,IAAI,EAAC,MAAM,IAAI;QAChB,OAAO,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IAC7E,CAAK,CAAC,CAAC;AACP,CAAC;AACD;;CAEA,GACA,SAAS,oBAAoB,CAAC,UAAU,EAAE,cAAc,EAAE;IACtD,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,aAAa,EAAE,WAAW,GAAE,WAAW,IAAI;QACxF,OAAO,cAAc,CAAC,WAAW,CAAC,kBAAkB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IAC1F,CAAK,CAAC,CAAC;AACP,CAAC;AACD;;;CAGA,GACA,SAAS,uBAAuB,CAAC,UAAU,EAAE,SAAS,EAAE;IACpD,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,iBAAiB,EAAE,UAAU,GAAE,WAAW,GAAI,cAAc,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;AACrK,CAAC;AACD;;CAEA,GACA,eAAe,wBAAwB,CAAC,UAAU,EAAE,KAAK,EAAE,SAAS,GAAG,cAAc,EAAE,EAAE;IACzF,oEAAA;IACA,uDAAA;IACA,0EAAA;IACA,wEAAA;IACA,8BAAA;IACI,MAAM,SAAS,GAAG,MAAM,wBAAwB,CAAC,UAAU,EAAE,aAAa,CAAC,gBAAgB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAClH,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,kBAAkB,EAAE,WAAW,GAAE,WAAW,IAAI;QAC7F,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACrD,wEAAA;QACA,OAAA;QACQ,IAAI,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACpD,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACjF,CAAS;QACT,0EAAA;QACQ,MAAM,aAAa,GAAG,SAAS,CAAC,eAAe,CAAC,UAAU,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;QACxF,cAAc,CAAC,kBAAkB,GAC7B,cAAc,CAAC,kBAAkB,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QACpF,OAAO,cAAc,CAAC,WAAW,CAC5B,gBAAgB,CAAC,WAAW,EAAE,aAAa,CAAC,CAC5C,IAAI,CAAC,IAAM,cAAc,CAAC,WAAW,CAAC,6BAA6B,CAAC,WAAW,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CACrG,IAAI,CAAC,IAAM,cAAc,CAAC,WAAW,CAAC,eAAe,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAClG,IAAI,CAAC,IAAM,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC;IACvF,CAAK,CAAC,CAAC;AACP,CAAC;AACD,eAAe,+BAA+B,CAAC,UAAU,EAAE,eAAe,EAAE;IACxE,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,YAAY,GAAG,cAAc,CAAC,YAAY,CAAC;IACjD,MAAM,QAAQ,GAAG,EAAE,CAAC;IACpB,OAAO,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,mBAAmB,EAAE,WAAW,GAAE,WAAW,GAAI,YAAY,CACzG,eAAe,CAAC,WAAW,CAAC,CAC5B,IAAI,EAAC,eAAe,GAAI,UAAU,CAAC,eAAe,EAAE,eAAe,EAAE,4BAA4B,GAAE,UAAU,IAAI;gBAClH,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;YAC3E,CAAK,GAAE,UAAU,IAAI;gBACb,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;YAC9E,CAAK,CAAC,CAAC,CACE,IAAI,CAAC,IAAM,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqCA,GACA,MAAM,WAAW,CAAC;IACd,WAAW,EAAG;QACV,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IACjC,CAAK;IACL,6CAAA,GACI,UAAU,CAAC,cAAc,EAAE,YAAY,EAAE;QACrC,IAAI,CAAC,kBAAkB,GAAG,cAAc,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAChC,CAAK;IACL,8DAAA,GACI,yBAAyB,CAAC,WAAW,EAAE,KAAK,EAAE,4BAA4B,EAAE,UAAU,EAAE;QACpF,OAAO,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,KAAK,CAAC,CACjD,IAAI,EAAC,MAAM,GAAI,MAAM,GACpB,MAAM,GACN,IAAI,CAAC,2BAA2B,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,4BAA4B,CAAC,CAAC,CAChG,IAAI,EAAC,MAAM,GAAI,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC;IAClG,CAAK;IACL;;;KAGA,GACI,sBAAsB,CAAC,WAAW,EAAE,KAAK,EAAE;QACvC,IAAI,wBAAwB,CAAC,KAAK,CAAC,EAAE;YAC7C,4DAAA;YACA,qEAAA;YACA,yDAAA;YACY,OAAO,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpD,CAAS;QACD,IAAI,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC,YAAY,CACnB,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,CACjC,IAAI,EAAC,SAAS,IAAI;YACnB,IAAI,SAAS,KAAK,CAAC,CAAA,kBAAA,KAAuB;gBACtD,8CAAA;gBACgB,OAAO,IAAI,CAAC;YAC5B,CAAa;YACD,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,IAAI,SAAS,KAAK,CAAC,CAAA,qBAAA,KAA0B;gBACjF,sEAAA;gBACA,kEAAA;gBACA,iEAAA;gBACA,mEAAA;gBACA,sEAAA;gBACA,gEAAA;gBACA,0DAAA;gBACgB,KAAK,GAAG,cAAc,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,CAAA,mBAAA,GAAuB,CAAC;gBAC/D,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;YAC9C,CAAa;YACD,OAAO,IAAI,CAAC,YAAY,CACnB,0BAA0B,CAAC,WAAW,EAAE,MAAM,CAAC,CAC/C,IAAI,CAAC,IAAI,IAAI;gBACd,MAAM,UAAU,GAAG,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;gBAC3C,OAAO,IAAI,CAAC,kBAAkB,CACzB,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC,CACrC,IAAI,EAAC,gBAAgB,IAAI;oBAC1B,OAAO,IAAI,CAAC,YAAY,CACnB,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,CACjC,IAAI,EAAC,MAAM,IAAI;wBAChB,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;wBACjE,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE;4BACnG,qDAAA;4BACA,yDAAA;4BACA,wDAAA;4BACA,0DAAA;4BACA,oDAAA;4BACA,gBAAA;4BAC4B,OAAO,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,cAAc,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,CAAA,mBAAA,GAAuB,CAAC,CAAC;wBACpI,CAAyB;wBACD,OAAO,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;oBACxG,CAAqB,CAAC,CAAC;gBACvB,CAAiB,CAAC,CAAC;YACnB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;KAGA,GACI,2BAA2B,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,4BAA4B,EAAE;QACtF,IAAI,wBAAwB,CAAC,KAAK,CAAC,EAAE;YAC7C,4DAAA;YACA,qEAAA;YACA,yDAAA;YACY,OAAO,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACtE,CAAS;QACT,uEAAA;QACA,gDAAA;QACQ,IAAI,4BAA4B,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE;YAC7D,OAAO,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACtE,CAAS;QACD,OAAO,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,IAAI,EAAC,SAAS,IAAI;YACnF,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;YAC1D,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,eAAe,EAAE,UAAU,EAAE,4BAA4B,CAAC,EAAE;gBACpF,OAAO,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YAC1E,CAAa;YACD,IAAI,WAAW,EAAE,4KAAI,WAAQ,CAAC,KAAK,EAAE;gBACjC,QAAQ,CAAC,aAAa,EAAE,uDAAuD,EAAE,4BAA4B,CAAC,QAAQ,EAAE,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;YACjK,CAAa;YACb,sEAAA;YACA,uCAAA;YACY,OAAO,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,eAAe,EAAE,KAAK,EAAE,mCAAmC,CAAC,4BAA4B,EAAE,wBAAwB,CAAC,CAAC,CAAC;QACjL,CAAS,CAAC,CAAC;IACX,CAAK;IACL,qEAAA,GACI,UAAU,CAAC,KAAK,EAAE,SAAS,EAAE;QACjC,oEAAA;QACA,+DAAA;QACQ,IAAI,YAAY,GAAG,IAAI,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5D,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,KAAK;YAC/B,IAAI,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;gBAC/B,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,YAAY,CAAC;IAC5B,CAAK;IACL;;;;;;;;;;;KAWA,GACI,WAAW,CAAC,KAAK,EAAE,qBAAqB,EAAE,UAAU,EAAE,wBAAwB,EAAE;QAC5E,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,EAAE;YAClC,qDAAA;YACY,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,UAAU,CAAC,IAAI,KAAK,qBAAqB,CAAC,IAAI,EAAE;YAC5D,sEAAA;YACA,kBAAA;YACY,OAAO,IAAI,CAAC;QACxB,CAAS;QACT,4EAAA;QACA,4EAAA;QACA,2EAAA;QACA,2DAAA;QACA,kEAAA;QACA,2EAAA;QACA,4EAAA;QACA,yDAAA;QACQ,MAAM,cAAc,GAAG,KAAK,CAAC,SAAS,KAAK,GAAG,CAAA,mBAAA,MACxC,qBAAqB,CAAC,IAAI,EAAE,GAC5B,qBAAqB,CAAC,KAAK,EAAE,CAAC;QACpC,IAAI,CAAC,cAAc,EAAE;YAC7B,wEAAA;YACY,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,OAAQ,cAAc,CAAC,gBAAgB,IACnC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,wBAAwB,CAAC,GAAG,CAAC,EAAE;IAC5E,CAAK;IACD,yBAAyB,CAAC,WAAW,EAAE,KAAK,EAAE;QAC1C,IAAI,WAAW,EAAE,IAAI,mLAAQ,CAAC,KAAK,EAAE;YACjC,QAAQ,CAAC,aAAa,EAAE,8CAA8C,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3G,CAAS;QACD,OAAO,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,WAAW,EAAE,KAAK,EAAE,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC;IACxG,CAAK;IACL;;;KAGA,GACI,sBAAsB,CAAC,WAAW,EAAE,cAAc,EAAE,KAAK,EAAE,MAAM,EAAE;QACvE,yEAAA;QACQ,OAAO,IAAI,CAAC,kBAAkB,CACzB,yBAAyB,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,CAAC,CACrD,IAAI,CAAC,gBAAgB,IAAI;YACtC,8BAAA;YACY,cAAc,CAAC,OAAO,EAAC,CAAC,IAAI;gBACxB,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YACrE,CAAa,CAAC,CAAC;YACH,OAAO,gBAAgB,CAAC;QACpC,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,sEAAA;AACA,4DAAA;AACA,MAAM,uBAAuB,GAAG,mBAAmB,CAAC;AACpD,uDAAA,GACA,SAAS,8BAA8B,CAAC,cAAc,EAAE,QAAQ,EAAE;IAC9D,OAAO,CAAC,EAAE,uBAAuB,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;AACtE,CAAC;AACD,sEAAA;AACA,0DAAA;AACA,kCAAA;AACA,qEAAA;AACA,EAAA;AACA,6EAAA;AACA,WAAA;AACA,MAAM,yBAAyB,GAAG,qBAAqB,CAAC;AACxD,yDAAA,GACA,SAAS,gCAAgC,CAAC,cAAc,EAAE,IAAI,EAAE,OAAO,EAAE;IACrE,IAAI,WAAW,GAAG,CAAC,EAAE,yBAAyB,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IAC9E,IAAI,IAAI,CAAC,eAAe,EAAE,EAAE;QACxB,WAAW,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,CAAK;IACD,OAAO,WAAW,CAAC;AACvB,CAAC;AACD,6EAAA;AACA,yDAAA;AACA,MAAM,uBAAuB,GAAG,mBAAmB,CAAC;AACpD,sDAAA,GACA,SAAS,sCAAsC,CAAC,cAAc,EAAE,QAAQ,EAAE;IACtE,OAAO,CAAC,EAAE,uBAAuB,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;AACtE,CAAC;AACD,wEAAA;AACA,wBAAA;AACA,kDAAA;AACA,MAAM,uBAAuB,GAAG,wBAAwB,CAAC;AACzD,+DAAA,GACA,SAAS,8BAA8B,CAAC,cAAc,EAAE;IACpD,OAAO,CAAC,EAAE,uBAAuB,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;AAC1D,CAAC;AACD,+EAAA;AACA,kEAAA;AACA,wBAAA;AACA,kDAAA;AACA,8EAAA;AACA,MAAM,wBAAwB,GAAG,4BAA4B,CAAC;AAC9D,SAAS,qBAAqB,CAAC,cAAc,EAAE;IAC3C,OAAO,CAAC,EAAE,wBAAwB,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;AAC3D,CAAC;AACD,gGAAA;AACA,+DAAA;AACA,MAAM,0BAA0B,GAAG,2BAA2B,CAAC;AAC/D,uDAAA,GACA,SAAS,iCAAiC,CAAC,cAAc,EAAE;IACvD,OAAO,CAAC,EAAE,0BAA0B,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;AAC7D,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,mBAAmB,CAAC;AACtC;;;CAGA,GACA,sBAAA;AACA,MAAM,gBAAgB,CAAC;IACnB,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAE;QACrC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,CAAK;IACL;;;KAGA,GACI,OAAO,mBAAmB,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE;QAC7C,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACxC,IAAI,SAAS,GAAG,OAAO,aAAa,KAAK,QAAQ,IAC7C;YAAC,SAAS;YAAE,cAAc;YAAE,UAAU;SAAC,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,KAChE,CAAC,CAAC,IAClB,CAAa,aAAa,CAAC,KAAK,KAAK,SAAS,IAC9B,OAAO,aAAa,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC;QACjD,IAAI,cAAc,GAAG,SAAS,CAAC;QAC/B,IAAI,SAAS,IAAI,aAAa,CAAC,KAAK,EAAE;YAClC,SAAS,GACL,OAAO,aAAa,CAAC,KAAK,CAAC,OAAO,KAAK,QAAQ,IAC3C,OAAO,aAAa,CAAC,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC;YACrD,IAAI,SAAS,EAAE;gBACX,cAAc,GAAG,IAAI,cAAc,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC3G,CAAa;QACb,CAAS;QACD,IAAI,SAAS,EAAE;YACX,OAAO,IAAI,gBAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,aAAa,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;QAC5F,CAAS,MACI;YACD,QAAQ,CAAC,SAAS,EAAE,CAAC,uCAAuC,EAAE,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YACpF,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;IACD,gBAAgB,GAAG;QACf,MAAM,aAAa,GAAG;YAClB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,CAAA,+CAAA;QACpC,CAAS,CAAC;QACF,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,aAAa,CAAC,KAAK,GAAG;gBAClB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;gBACrB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;YAC3C,CAAa,CAAC;QACd,CAAS;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAC7C,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,sBAAA;AACA,MAAM,mBAAmB,CAAC;IACtB,WAAW,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAE;QAChC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,CAAK;IACL;;;KAGA,GACI,OAAO,mBAAmB,CAAC,QAAQ,EAAE,KAAK,EAAE;QACxC,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,SAAS,GAAG,OAAO,WAAW,KAAK,QAAQ,IAC3C;YAAC,aAAa;YAAE,SAAS;YAAE,UAAU;SAAC,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,KAC7D,CAAC,CAAC,IAClB,CAAa,WAAW,CAAC,KAAK,KAAK,SAAS,IAC5B,OAAO,WAAW,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC;QAC/C,IAAI,cAAc,GAAG,SAAS,CAAC;QAC/B,IAAI,SAAS,IAAI,WAAW,CAAC,KAAK,EAAE;YAChC,SAAS,GACL,OAAO,WAAW,CAAC,KAAK,CAAC,OAAO,KAAK,QAAQ,IACzC,OAAO,WAAW,CAAC,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC;YACnD,IAAI,SAAS,EAAE;gBACX,cAAc,GAAG,IAAI,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACvG,CAAa;QACb,CAAS;QACD,IAAI,SAAS,EAAE;YACX,OAAO,IAAI,mBAAmB,CAAC,QAAQ,EAAE,WAAW,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;QACxF,CAAS,MACI;YACD,QAAQ,CAAC,SAAS,EAAE,CAAC,qCAAqC,EAAE,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YACnF,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;IACD,gBAAgB,GAAG;QACf,MAAM,WAAW,GAAG;YAChB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,CAAA,+CAAA;QACpC,CAAS,CAAC;QACF,IAAI,IAAI,CAAC,KAAK,EAAE;YACZ,WAAW,CAAC,KAAK,GAAG;gBAChB,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;gBACrB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;YAC3C,CAAa,CAAC;QACd,CAAS;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,MAAM,iBAAiB,CAAC;IACpB,WAAW,CAAC,QAAQ,EAAE,eAAe,CAAE;QACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC/C,CAAK;IACL;;;KAGA,GACI,OAAO,mBAAmB,CAAC,QAAQ,EAAE,KAAK,EAAE;QACxC,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,SAAS,GAAG,OAAO,WAAW,KAAK,QAAQ,IAC3C,WAAW,CAAC,eAAe,YAAY,KAAK,CAAC;QACjD,IAAI,kBAAkB,GAAG,WAAW,EAAE,CAAC;QACvC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,SAAS,IAAI,CAAC,GAAG,WAAW,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;YACtE,SAAS,GAAG,aAAa,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,kBAAkB,GAAG,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;QACxF,CAAS;QACD,IAAI,SAAS,EAAE;YACX,OAAO,IAAI,iBAAiB,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QACvE,CAAS,MACI;YACD,QAAQ,CAAC,SAAS,EAAE,CAAC,0CAA0C,EAAE,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YACxF,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,MAAM,iBAAiB,CAAC;IACpB,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAE;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACvC,CAAK;IACL;;;KAGA,GACI,OAAO,mBAAmB,CAAC,KAAK,EAAE;QAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACtC,MAAM,SAAS,GAAG,OAAO,WAAW,KAAK,QAAQ,IAC7C;YAAC,SAAS;YAAE,QAAQ;YAAE,SAAS;SAAC,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,KAC7D,CAAC,CAAC,IACN,OAAO,WAAW,CAAC,QAAQ,KAAK,QAAQ,CAAC;QAC7C,IAAI,SAAS,EAAE;YACX,OAAO,IAAI,iBAAiB,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;QACxF,CAAS,MACI;YACD,QAAQ,CAAC,SAAS,EAAE,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;AACL,CAAC;AACD;;;;;;;;;CASA,GACA,uBAAA;AACA,MAAM,gBAAgB,CAAC;IACnB,WAAW,EAAG;QACV,IAAI,CAAC,eAAe,GAAG,WAAW,EAAE,CAAC;IAC7C,CAAK;IACD,cAAc,CAAC,QAAQ,EAAE;QACrB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAClE,CAAK;IACD,iBAAiB,CAAC,QAAQ,EAAE;QACxB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACrE,CAAK;IACL;;;KAGA,GACI,gBAAgB,GAAG;QACf,MAAM,IAAI,GAAG;YACT,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;YAC/C,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,CAAA,+CAAA;QACpC,CAAS,CAAC;QACF,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACpC,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,MAAM,2BAA2B,CAAC;IAC9B,WAAW,CAAC,OAAM,EAAE,KAAK,EAAE,cAAc,EAAE,aAAa,EAAE,WAAW,CAAE;QACnE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,aAAa,GAAG,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QAC7B;;;SAGA,GACQ,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QAC9B,gDAAA;QACA,oFAAA;QACQ,MAAM,qBAAqB,GAAG,cAAc,CAAC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;QACpF,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,qBAAqB,GAAG,8BAA8B,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACrG,IAAI,CAAC,iBAAiB,GAAG,iCAAiC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAChF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,gBAAgB,EAAE,CAAC,CAAC;QAC3F,IAAI,CAAC,gBAAgB,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,uBAAuB,CAAC,CAAC,EAAE,qBAAqB,CAAC,SAAS,CAAC,CAAC,CAAC;QACpG,IAAI,CAAC,kBAAkB,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,yBAAyB,CAAC,CAAC,EAAE,qBAAqB,CAAC,kBAAkB,CAAC,CAAC,CAAC;QACjH,IAAI,CAAC,gBAAgB,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,uBAAuB,CAAC,CAAC,EAAE,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnG,IAAI,CAAC,cAAc,GAAG,8BAA8B,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC1E,IAAI,CAAC,eAAe,GAAG,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC1E,qEAAA;QACA,uEAAA;QACA,4EAAA;QACA,oEAAA;QACA,2EAAA;QACA,qDAAA;QACQ,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACtE,CAAK;IACL,0EAAA,GACI,OAAO,WAAW,CAAC,OAAM,EAAE;QACvB,OAAO,CAAC,CAAA,CAAE,MAAM,KAAI,MAAM,EAAC,YAAY,CAAC,CAAC;IACjD,CAAK;IACD,MAAM,KAAK,GAAG;QAClB,gEAAA;QACA,qBAAA;QACQ,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;QACjE,KAAK,MAAM,QAAQ,IAAI,eAAe,CAAE;YACpC,IAAI,QAAQ,KAAK,IAAI,CAAC,aAAa,EAAE;gBACjC,SAAS;YACzB,CAAa;YACD,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,8BAA8B,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC;YAChG,IAAI,WAAW,EAAE;gBACb,MAAM,WAAW,GAAG,iBAAiB,CAAC,mBAAmB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;gBACjF,IAAI,WAAW,EAAE;oBACb,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;gBACtG,CAAiB;YACjB,CAAa;QACb,CAAS;QACD,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAClC,2EAAA;QACA,iBAAA;QACQ,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAClE,IAAI,eAAe,EAAE;YACjB,MAAM,WAAW,GAAG,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,CAAC;YACpE,IAAI,WAAW,EAAE;gBACb,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;YACzD,CAAa;QACb,CAAS;QACD,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,WAAW,CAAE;YAClC,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAC9C,CAAS;QACD,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QAC9B,yEAAA;QACA,kDAAA;QACQ,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAM,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAChE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IAC5B,CAAK;IACD,mBAAmB,CAAC,cAAc,EAAE;QAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;IAC7E,CAAK;IACD,wBAAwB,GAAG;QACvB,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAClE,CAAK;IACD,mBAAmB,CAAC,QAAQ,EAAE;QAC1B,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,KAAK;YACvC,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBACrC,KAAK,GAAG,IAAI,CAAC;YAC7B,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,kBAAkB,CAAC,OAAO,EAAE;QACxB,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IACtD,CAAK;IACD,mBAAmB,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE;QACvC,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACzD,4EAAA;QACA,wEAAA;QACA,oEAAA;QACQ,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAK;IACD,mBAAmB,CAAC,QAAQ,EAAE;QAC1B,IAAI,UAAU,GAAG,aAAa,CAAC;QACvC,yEAAA;QACA,iBAAA;QACQ,IAAI,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE;YACpC,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,sCAAsC,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC;YAChH,IAAI,WAAW,EAAE;gBACb,MAAM,QAAQ,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;gBAChF,IAAI,QAAQ,EAAE;oBACV,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC;gBAChD,CAAiB;YACjB,CAAa;QACb,CAAS;QACD,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,OAAO,UAAU,CAAC;IAC1B,CAAK;IACD,sBAAsB,CAAC,QAAQ,EAAE;QAC7B,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAClC,CAAK;IACD,kBAAkB,CAAC,QAAQ,EAAE;QACzB,OAAO,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACnE,CAAK;IACD,eAAe,CAAC,QAAQ,EAAE;QACtB,IAAI,CAAC,UAAU,CAAC,sCAAsC,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC/F,CAAK;IACD,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE;QACrC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;IAC7D,CAAK;IACD,gBAAgB,CAAC,IAAI,EAAE,eAAe,EAAE,aAAa,EAAE;QACnD,eAAe,CAAC,OAAO,EAAC,OAAO,IAAI;YAC/B,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAC9C,CAAS,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,aAAa,CAAC,OAAO,EAAC,OAAO,IAAI;YAC7B,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAC7C,CAAS,CAAC,CAAC;IACX,CAAK;IACD,cAAc,CAAC,WAAW,EAAE;QACxB,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;IAC7C,CAAK;IACD,kBAAkB,CAAC,gBAAgB,EAAE;QACjC,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;IACxD,CAAK;IACD,QAAQ,GAAG;QACP,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YACjE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAC5C,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACjC,CAAS;IACT,CAAK;IACD,OAAO,CAAC,GAAG,EAAE;QACT,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACxC,QAAQ,CAAC,SAAS,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QACxC,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE;QAChB,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QACvC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACzC,CAAK;IACD,UAAU,CAAC,GAAG,EAAE;QACZ,QAAQ,CAAC,SAAS,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;QACnC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IACrC,CAAK;IACD,qBAAqB,CAAC,KAAK,EAAE;QACjC,4EAAA;QACA,6BAAA;QACQ,MAAM,YAAY,GAAG,KAAK,CAAC;QAC3B,IAAI,YAAY,CAAC,WAAW,KAAK,IAAI,CAAC,OAAO,EAAE;YAC3C,QAAQ,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,CAAC,GAAG,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;YACtE,IAAI,YAAY,CAAC,GAAG,KAAK,IAAI,CAAC,qBAAqB,EAAE;gBACjD,QAAQ,CAAC,+EAA+E,GACpF,6BAA6B,CAAC,CAAC;gBACnC,OAAO;YACvB,CAAa;YACD,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,YAAY;gBACpC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACf,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACpC,OAAO;gBAC3B,CAAiB;gBACD,IAAI,YAAY,CAAC,GAAG,KAAK,IAAI,EAAE;oBAC3B,OAAO;gBAC3B,CAAiB;gBACD,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE;oBAC9C,IAAI,YAAY,CAAC,QAAQ,IAAI,IAAI,EAAE;wBAC/B,MAAM,WAAW,GAAG,IAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC,GAAG,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;wBAC5F,IAAI,WAAW,EAAE;4BACb,OAAO,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;wBAClG,CAAyB;oBACzB,CAAqB,MACI;wBACD,MAAM,QAAQ,GAAG,IAAI,CAAC,4BAA4B,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;wBACrE,OAAO,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;oBAC3E,CAAqB;gBACrB,CAAiB,MACI,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE;oBACrD,IAAI,YAAY,CAAC,QAAQ,KAAK,IAAI,EAAE;wBAChC,MAAM,gBAAgB,GAAG,IAAI,CAAC,8BAA8B,CAAC,YAAY,CAAC,GAAG,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;wBACtG,IAAI,gBAAgB,EAAE;4BAClB,OAAO,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;wBACnF,CAAyB;oBACzB,CAAqB;gBACrB,CAAiB,MACI,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE;oBACnD,IAAI,YAAY,CAAC,QAAQ,KAAK,IAAI,EAAE;wBAChC,MAAM,mBAAmB,GAAG,IAAI,CAAC,iCAAiC,CAAC,YAAY,CAAC,GAAG,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;wBAC5G,IAAI,mBAAmB,EAAE;4BACrB,OAAO,IAAI,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,CAAC;wBACpF,CAAyB;oBACzB,CAAqB;gBACrB,CAAiB,MACI,IAAI,YAAY,CAAC,GAAG,KAAK,IAAI,CAAC,cAAc,EAAE;oBAC/C,IAAI,YAAY,CAAC,QAAQ,KAAK,IAAI,EAAE;wBAChC,MAAM,WAAW,GAAG,IAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;wBAC1E,IAAI,WAAW,EAAE;4BACb,OAAO,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;wBAC5E,CAAyB;oBACzB,CAAqB;gBACrB,CAAiB,MACI,IAAI,YAAY,CAAC,GAAG,KAAK,IAAI,CAAC,iBAAiB,EAAE;oBAClD,MAAM,cAAc,GAAG,4BAA4B,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;oBAC3E,IAAI,cAAc,KAAK,cAAc,CAAC,OAAO,EAAE;wBAC3C,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;oBACnE,CAAqB;gBACrB,CAAiB,MACI,IAAI,YAAY,CAAC,GAAG,KAAK,IAAI,CAAC,eAAe,EAAE;oBAChD,MAAM,gBAAgB,GAAG,IAAI,CAAC,6BAA6B,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;oBACnF,MAAM,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,+BAA+B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACvH,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS;IACT,CAAK;IACD,IAAI,gBAAgB,GAAG;QACnB,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC1D,CAAK;IACD,kBAAkB,GAAG;QACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,CAAC;IAC3F,CAAK;IACD,oBAAoB,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE;QACxC,MAAM,aAAa,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACpF,MAAM,WAAW,GAAG,gCAAgC,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QACrG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,aAAa,CAAC,gBAAgB,EAAE,CAAC,CAAC;IACpE,CAAK;IACD,mBAAmB,CAAC,OAAO,EAAE;QACzB,MAAM,WAAW,GAAG,gCAAgC,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QACrG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IACrC,CAAK;IACD,kBAAkB,CAAC,WAAW,EAAE;QAC5B,MAAM,KAAK,GAAG;YACV,QAAQ,EAAE,IAAI,CAAC,aAAa;YAC5B,WAAW;QACvB,CAAS,CAAC;QACF,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACzE,CAAK;IACD,uBAAuB,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE;QAC5C,MAAM,SAAS,GAAG,sCAAsC,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QACxF,MAAM,cAAc,GAAG,IAAI,mBAAmB,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACvE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,cAAc,CAAC,gBAAgB,EAAE,CAAC,CAAC;IACnE,CAAK;IACD,wBAAwB,CAAC,gBAAgB,EAAE;QACvC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;IACjD,CAAK;IACL;;;KAGA,GACI,4BAA4B,CAAC,GAAG,EAAE;QAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9C,OAAO,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IACvC,CAAK;IACL;;;KAGA,GACI,yBAAyB,CAAC,GAAG,EAAE,KAAK,EAAE;QAClC,MAAM,QAAQ,GAAG,IAAI,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC;QACxD,OAAO,iBAAiB,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACtE,CAAK;IACL;;;KAGA,GACI,8BAA8B,CAAC,GAAG,EAAE,KAAK,EAAE;QACvC,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChD,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QACxD,OAAO,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACtF,CAAK;IACL;;;KAGA,GACI,iCAAiC,CAAC,GAAG,EAAE,KAAK,EAAE;QAC1C,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,OAAO,mBAAmB,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACxE,CAAK;IACL;;;KAGA,GACI,yBAAyB,CAAC,KAAK,EAAE;QAC7B,OAAO,iBAAiB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAK;IACD,6BAA6B,CAAC,KAAK,EAAE;QACjC,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACjC,CAAK;IACD,MAAM,wBAAwB,CAAC,aAAa,EAAE;QAC1C,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;YACjD,QAAQ,CAAC,SAAS,EAAE,CAAC,sCAAsC,EAAE,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACvF,OAAO;QACnB,CAAS;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,aAAa,CAAC,OAAO,EAAE,aAAa,CAAC,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;IAChH,CAAK;IACD,sBAAsB,CAAC,cAAc,EAAE;QACnC,OAAO,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,cAAc,CAAC,QAAQ,EAAE,cAAc,CAAC,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC;IACrH,CAAK;IACD,sBAAsB,CAAC,QAAQ,EAAE,WAAW,EAAE;QAC1C,MAAM,cAAc,GAAG,WAAW,GAC5B,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAChD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC1C,MAAM,eAAe,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3E,MAAM,UAAU,GAAG,IAAI,CAAC,yBAAyB,CAAC,cAAc,CAAC,CAAC;QAClE,MAAM,YAAY,GAAG,EAAE,CAAC;QACxB,MAAM,cAAc,GAAG,EAAE,CAAC;QAC1B,UAAU,CAAC,OAAO,EAAC,QAAQ,IAAI;YAC3B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAChC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5C,CAAa;QACb,CAAS,CAAC,CAAC;QACH,eAAe,CAAC,OAAO,CAAC,QAAQ,IAAI;YAChC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAC3B,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9C,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC,IAAI,CAAC,MAAM;YACrF,IAAI,CAAC,aAAa,GAAG,cAAc,CAAC;QAChD,CAAS,CAAC,CAAC;IACX,CAAK;IACD,sBAAsB,CAAC,WAAW,EAAE;QACxC,2EAAA;QACA,mEAAA;QACA,sEAAA;QACA,0EAAA;QACA,eAAA;QACQ,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE;YAC9C,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QAC7D,CAAS;IACT,CAAK;IACD,yBAAyB,CAAC,OAAO,EAAE;QAC/B,IAAI,aAAa,GAAG,WAAW,EAAE,CAAC;QAClC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,KAAK;YAC5B,aAAa,GAAG,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAC3E,CAAS,CAAC,CAAC;QACH,OAAO,aAAa,CAAC;IAC7B,CAAK;AACL,CAAC;AACD,SAAS,4BAA4B,CAAC,SAAS,EAAE;IAC7C,IAAI,cAAc,GAAG,cAAc,CAAC,OAAO,CAAC;IAC5C,IAAI,SAAS,IAAI,IAAI,EAAE;QACnB,IAAI;YACA,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACrC,UAAU,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC;YACvC,cAAc,GAAG,MAAM,CAAC;QACpC,CAAS,CACD,OAAO,CAAC,EAAE;YACN,QAAQ,CAAC,SAAS,EAAE,gDAAgD,EAAE,CAAC,CAAC,CAAC;QACrF,CAAS;IACT,CAAK;IACD,OAAO,cAAc,CAAC;AAC1B,CAAC;AACD;;;;CAIA,GACA,MAAM,uBAAuB,CAAC;IAC1B,WAAW,EAAG;QACV,IAAI,CAAC,UAAU,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACzC,IAAI,CAAC,UAAU,GAAG,CAAA,CAAE,CAAC;QACrB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;IAC1C,CAAK;IACD,kBAAkB,CAAC,OAAO,EAAE;IAChC,SAAA;IACA,CAAK;IACD,mBAAmB,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE;IAC/C,SAAA;IACA,CAAK;IACD,mBAAmB,CAAC,QAAQ,EAAE;QAC1B,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,aAAa,CAAC;IAC1D,CAAK;IACD,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE;QACrC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;IAC1C,CAAK;IACD,sBAAsB,CAAC,QAAQ,EAAE;QAC7B,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAK;IACD,kBAAkB,CAAC,QAAQ,EAAE;QACzB,OAAO,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC7D,CAAK;IACD,eAAe,CAAC,QAAQ,EAAE;QACtB,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAK;IACD,wBAAwB,GAAG;QACvB,OAAO,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC;IAC/C,CAAK;IACD,mBAAmB,CAAC,QAAQ,EAAE;QAC1B,OAAO,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC7D,CAAK;IACD,KAAK,GAAG;QACJ,IAAI,CAAC,UAAU,GAAG,IAAI,gBAAgB,EAAE,CAAC;QACzC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IACjC,CAAK;IACD,gBAAgB,CAAC,IAAI,EAAE,eAAe,EAAE,aAAa,EAAE;IAC3D,SAAA;IACA,CAAK;IACD,cAAc,CAAC,WAAW,EAAE;IAChC,SAAA;IACA,CAAK;IACD,QAAQ,GAAG,CAAA,CAAG;IACd,mBAAmB,CAAC,cAAc,EAAE,CAAA,CAAG;IACvC,kBAAkB,CAAC,gBAAgB,EAAE;IACzC,SAAA;IACA,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,uBAAuB,CAAC;IAC1B,WAAW,CAAC,QAAQ,EAAE;IAC1B,SAAA;IACA,CAAK;IACD,QAAQ,GAAG;IACf,SAAA;IACA,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;CAIA,GACA,MAAM,YAAY,CAAC;IACf,WAAW,CAAC,IAAI,CAAE;QACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;IACpC,CAAK;IACD,MAAM,CAAC,QAAQ,EAAE;QACb,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;IACtC,CAAK;IACD,OAAO,CAAC,QAAQ,EAAE;QACd,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;IACvC,CAAK;IACD,SAAS,CAAC,QAAQ,EAAE;QAChB,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;IACzC,CAAK;IACD,KAAK,GAAG;QACJ,IAAI,CAAC,OAAO,EAAE,CAAC;IACvB,CAAK;IACD,IAAI,CAAC,GAAG,EAAE;QACN,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACzB,CAAK;IACD,UAAU,GAAG;QACT,IAAI,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAK;IACD,WAAW,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IACjC,CAAK;IACD,aAAa,CAAC,GAAG,EAAE;QACf,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACnC,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,IAAI,iBAAiB,GAAG,IAAI,CAAC;AAC7B;;;;;;;;;;CAUA,GACA,SAAS,4BAA4B,GAAG;IACpC,MAAM,SAAS,GAAG,UAAU,CAAC;IAC7B,MAAM,SAAS,GAAG,UAAU,CAAC;IAC7B,MAAM,WAAW,GAAG,SAAS,GAAG,SAAS,CAAC;IAC1C,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IAC7D,OAAO,SAAS,GAAG,YAAY,CAAC;AACpC,CAAC;AACD;;;;;;;;;;CAUA,GACA,SAAS,qBAAqB,GAAG;IAC7B,IAAI,iBAAiB,KAAK,IAAI,EAAE;QAC5B,iBAAiB,GAAG,4BAA4B,EAAE,CAAC;IAC3D,CAAK,MACI;QACD,iBAAiB,EAAE,CAAC;IAC5B,CAAK;IACD,OAAO,IAAI,GAAG,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACjD,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiCA,GACA,SAAS,WAAW,CAAC,MAAM,EAAE;IACzB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;QACpC,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,KAAK;YACrB,IAAI,KAAK,EAAE;gBACP,MAAM,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAa,MACI;gBACD,OAAO,CAAC,KAAK,CAAC,CAAC;YAC/B,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK,CAAC,CAAC;AACP,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,gEAAA;AACA,8EAAA;AACA,MAAM,WAAW,GAAG,OAAO,CAAC;AAC5B,MAAM,SAAS,GAAG,gBAAgB,CAAC;AACnC,MAAM,uBAAuB,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;AAC3G,SAAS,cAAc,CAAC,YAAY,EAAE,SAAS,EAAE,aAAa,EAAE,KAAK,EAAE;IACnE,UAAU,CAAC,SAAS,KAAK,IAAI,IAAI,SAAS,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;IAC7D,MAAM,QAAQ,GAAG,6MAAI,IAAI,CAAC,MAAQ,EAAE,CAAC;IACrC,IAAI,SAAS,EAAE;QACX,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,GAAK,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;IAC5E,CAAK;IACD,IAAI,aAAa,EAAE;QACf,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,GAAK,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;IAChF,CAAK;IACD,IAAI,KAAK,EAAE;QACP,QAAQ,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;IAChD,CAAK;IACD,QAAQ,CAAC,GAAG,CAAC,mBAAmB,EAAE,uBAAuB,CAAC,CAAC;IAC/D,yEAAA;IACA,WAAA;IACA,0FAAA;IACA,0FAAA;IACA,mBAAA;IACI,QAAQ,CAAC,GAAG,CAAC,8BAA8B,EAAE,YAAY,CAAC,CAAC;IAC3D,QAAQ,CAAC,GAAG,CAAC,uBAAuB,EAAE,YAAY,CAAC,CAAC;IACpD,OAAO,QAAQ,CAAC;AACpB,CAAC;AACD;;CAEA,GACA,MAAM,cAAc,CAAC;IACjB,WAAW,CAAC,MAAM,EAAE,YAAY,CAAE;QAC9B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACzC,mDAAA;QACQ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAC/B,8DAAA;QACQ,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,YAAY,GAAG,CAAC,SAAS,EAAE,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,WAAW,EAAE,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1H,CAAK;IACD,IAAI,qCAAqC,GAAG;QAChD,0FAAA;QACA,gDAAA;QACQ,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,gBAAgB,GAAG;QACf,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,QAAQ,CAAC,SAAS,EAAE,0BAA0B,CAAC,CAAC;YAChD,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,4MACnC,IAAI,CAAC,SAAW,CAAC,SAAS,EAAE,4MAC5B,IAAI,CAAC,SAAW,CAAC,cAAc,EAAE,CAAC;YACxC,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAChG,CAAS;QACD,OAAO,IAAI,CAAC,UAAU,CAAC;IAC/B,CAAK;IACD,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE;QACxD,MAAM,QAAQ,GAAG,qBAAqB,EAAE,CAAC;QACzC,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACrC,MAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,EAAE,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACtG,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC;YAAE,QAAQ,EAAE,IAAI,CAAC,YAAY;QAAA,CAAE,EAAE,OAAO,CAAC,CAAC;QAC5E,OAAO,WAAW,CAAC,CAAC,QAAQ,KAAK;YAC7B,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,sBAAsB,CAAC,EAAE,OAAO,CAAC,CAAC;YACnF,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,QAAQ,EAAE,CAAC,SAAS,EAAE,KAAK,KAAK;gBAC9D,IAAI,SAAS,EAAE;oBACX,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,mBAAmB,CAAC,EAAE,SAAS,CAAC,CAAC;oBAClF,QAAQ,CAAC,IAAI,cAAc,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;gBACxG,CAAiB,MACI;oBACD,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,yBAAyB,CAAC,EAAE,KAAK,CAAC,CAAC;oBACpF,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;gBAC/C,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACD,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,qBAAqB,EAAE;QACxF,MAAM,QAAQ,GAAG,qBAAqB,EAAE,CAAC;QACzC,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,MAAM,gBAAgB,GAAG,IAAI,QAAQ,EAAE,CAAC;QACxC,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,kCAAkC,CAAC,EAAE,OAAO,CAAC,CAAC;QAC/F,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACrC,MAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,EAAE,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACtG,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,OAAO,CAAC,EAAE;YAAE,QAAQ,EAAE,IAAI,CAAC,YAAY;QAAA,CAAE,CAAC,CAAC;QAC/F,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QACpD,IAAI,aAAa,GAAG,KAAK,CAAC;QAC1B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,QAAQ,KAAK;YAC5B,QAAQ,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,iBAAiB,CAAC,EAAE,QAAQ,CAAC,CAAC;YAC7E,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACvB,IAAI,qBAAqB,KAAK,SAAS,IACnC,OAAO,CAAC,MAAM,KAAK,qBAAqB,EAAE;gBAC1C,aAAa,GAAG,IAAI,CAAC;gBACrB,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAClD,CAAa;QACb,CAAS,CAAC,CAAC;QACH,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM;YACnB,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;YAC/D,IAAI,CAAC,aAAa,EAAE;gBAChB,aAAa,GAAG,IAAI,CAAC;gBACrB,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAClD,CAAa;QACb,CAAS,CAAC,CAAC;QACH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,SAAS,KAAK;YAC9B,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,mBAAmB,CAAC,EAAE,SAAS,CAAC,CAAC;YAClF,MAAM,IAAI,GAAG,kBAAkB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAChD,gBAAgB,CAAC,MAAM,CAAC,IAAI,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QACjF,CAAS,CAAC,CAAC;QACH,OAAO,gBAAgB,CAAC,OAAO,CAAC;IACxC,CAAK;IACL,qEAAA;IACI,UAAU,CAAC,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE;QAC1C,MAAM,QAAQ,GAAG,qBAAqB,EAAE,CAAC;QACzC,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACrC,MAAM,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,EAAE,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACtG,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,MAAM,KAAK,GAAG,CAAC,GAAG,KAAK;YACnB,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM,GAAG,IAAI,CAAC;gBACd,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBACxB,UAAU,CAAC,GAAG,EAAE,CAAC;YACjC,CAAa;QACb,CAAS,CAAC;QACF,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC;YAC5B,MAAM,EAAE,CAAC,GAAG,KAAK;gBACb,IAAI,CAAC,MAAM,EAAE;oBACT,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;oBACzE,IAAI;wBACA,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC9C,CAAqB,CACD,OAAO,CAAC,EAAE;wBAC9B,oEAAA;wBACA,2BAAA;wBACwB,QAAQ,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;wBAClC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;wBACtB,MAAM,CAAC,CAAC;oBAChC,CAAqB;gBACrB,CAAiB,MACI;oBACD,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,GACtD,4CAA4C,EAAE,GAAG,CAAC,CAAC;gBAC3E,CAAiB;YACjB,CAAa;YACD,OAAO,EAAE,MAAM;gBACX,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,4BAA4B,CAAC,CAAC,CAAC;gBACvF,KAAK,EAAE,CAAC;YACxB,CAAa;QACb,CAAS,CAAC,CAAC;QACH,UAAU,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK;YAC3B,IAAI,CAAC,MAAM,EAAE;gBACT,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,CAAC;gBAC1E,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAC1C,CAAa;QACb,CAAS,CAAC,CAAC;QACH,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM;YACvB,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;YAClE,KAAK,EAAE,CAAC;QACpB,CAAS,CAAC,CAAC;QACH,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,SAAS,KAAK;YAClC,IAAI,CAAC,MAAM,EAAE;gBACT,OAAO,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,aAAa,CAAC,EAAE,SAAS,CAAC,IAAI,EAAE,UAAU,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;gBACtH,MAAM,IAAI,GAAG,kBAAkB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBAChD,KAAK,CAAC,IAAI,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;YACnE,CAAa;QACb,CAAS,CAAC,CAAC;QACH,QAAQ,CAAC,SAAS,EAAE,CAAC,aAAa,EAAE,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,GAC9D,CAAC,GAAG,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5C,wEAAA;QACA,0EAAA;QACA,aAAA;QACQ,UAAU,CAAC,MAAM;YACb,MAAM,CAAC,UAAU,EAAE,CAAC;QAChC,CAAS,EAAE,CAAC,CAAC,CAAC;QACN,OAAO,MAAM,CAAC;IACtB,CAAK;AACL,CAAC;AAED,MAAM,MAAM,GAAG;IACd,MAAM,EAAE;QACP,MAAM,EAAE;YACP,QAAQ,EAAE;gBACT,OAAO,EAAE;oBACR,gBAAgB,EAAE,gCAAgC;oBAClD,UAAU,EAAE,4CAA4C;oBACxD,YAAY,EAAE,qBAAqB;oBACnC,oBAAoB,EAAE,eAAe;oBACrC,mBAAmB,EAAE,IAAI;oBACzB,iBAAiB,EAAE,KAAK;oBACxB,gBAAgB,EAAE,IAAI;oBACtB,YAAY,EAAE,OAAO;gBAC1B,CAAK;gBACD,MAAM,EAAE;oBACP,SAAS,EAAE;wBACV,MAAM,EAAE;4BACP,OAAO,EAAE;gCACR,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,KAAK,EAAE;gCACN,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,iBAAiB,EAAE;wBAClB,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,qBAAqB;gCAC3B,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,mBAAmB,EAAE;wBACpB,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,SAAS,EAAE;gCACV,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,UAAU,EAAE;gCACX,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,gBAAgB,EAAE;gCACjB,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,EAAE;gCACN,OAAO,EAAE;oCACR,MAAM,EAAE,KAAK;gCACtB,CAAS;4BACT,CAAQ;4BACD,cAAc,EAAE;gCACf,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,EAAE;gCACN,OAAO,EAAE;oCACR,MAAM,EAAE,KAAK;gCACtB,CAAS;4BACT,CAAQ;4BACD,WAAW,EAAE;gCACZ,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,iBAAiB;gCACvB,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,QAAQ,EAAE;gCACT,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,qBAAqB;gCAC3B,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,OAAO,EAAE;gCACR,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,wBAAwB;gCAC9B,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,SAAS,EAAE;gCACV,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,sBAAsB;gCAC5B,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,OAAO,EAAE;gCACR,IAAI,EAAE,aAAa;gCACnB,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,cAAc,EAAE;gCACf,IAAI,EAAE,gBAAgB;gCACtB,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,MAAM,EAAE;gCACP,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,EAAE;4BACd,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,eAAe,EAAE;wBAChB,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,KAAK,EAAE;gCACN,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,sBAAsB;gCAC5B,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,SAAS,EAAE;gCACV,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,sBAAsB;gCAC5B,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,UAAU,EAAE;gCACX,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,iBAAiB;gCACvB,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,QAAQ,EAAE;gCACT,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,qBAAqB;gCAC3B,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,cAAc,EAAE;gCACf,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,gBAAgB;gCACtB,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,SAAS,EAAE;gCACV,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,sBAAsB;gCAC5B,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,OAAO,EAAE;gCACR,IAAI,EAAE,gBAAgB;gCACtB,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,aAAa,EAAE;gCACd,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,eAAe;gCACrB,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,YAAY,EAAE;gCACb,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,EAAE;4BACd,CAAQ;wBACR,CAAO;wBACD,MAAM,EAAE;4BACP,cAAc,EAAE;gCACf,MAAM,EAAE;oCACP,KAAK,EAAE;wCACN,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,GAAG,EAAE;wCACJ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,aAAa,EAAE;gCACd,MAAM,EAAE;oCACP,KAAK,EAAE;wCACN,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,GAAG,EAAE;wCACJ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,oBAAoB,EAAE;wBACrB,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,MAAM,EAAE;gCACP,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,KAAK,EAAE;gCACN,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,IAAI,EAAE;gCACL,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,QAAQ,EAAE;gCACT,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,QAAQ,EAAE;gCACT,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,YAAY,EAAE;gCACb,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,UAAU,EAAE;gCACX,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,QAAQ,EAAE;gCACT,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,OAAO,EAAE;gCACR,IAAI,EAAE,cAAc;gCACpB,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;wBACD,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,MAAM,EAAE;oCACP,WAAW,EAAE,CAAC;oCACd,UAAU,EAAE,CAAC;oCACb,UAAU,EAAE,CAAC;oCACb,WAAW,EAAE,CAAC;oCACd,UAAU,EAAE,CAAC;oCACb,YAAY,EAAE,CAAC;oCACf,YAAY,EAAE,CAAC;oCACf,SAAS,EAAE,CAAC;oCACZ,WAAW,EAAE,CAAC;oCACd,UAAU,EAAE,EAAE;oCACd,YAAY,EAAE,EAAE;oCAChB,UAAU,EAAE,EAAE;oCACd,WAAW,EAAE,EAAE;oCACf,SAAS,EAAE,EAAE;oCACb,aAAa,EAAE,EAAE;oCACjB,aAAa,EAAE,EAAE;oCACjB,WAAW,EAAE,EAAE;oCACf,WAAW,EAAE,EAAE;gCACxB,CAAS;4BACT,CAAQ;4BACD,KAAK,EAAE;gCACN,MAAM,EAAE;oCACP,cAAc,EAAE,CAAC;oCACjB,cAAc,EAAE,CAAC;oCACjB,cAAc,EAAE,CAAC;gCAC1B,CAAS;4BACT,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,oBAAoB,EAAE;wBACrB,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,OAAO,EAAE;gCACR,IAAI,EAAE,cAAc;gCACpB,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,mBAAmB,EAAE;wBACpB,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,KAAK,EAAE;gCACN,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,0BAA0B;gCAChC,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,OAAO,EAAE;gCACR,IAAI,EAAE,aAAa;gCACnB,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,wBAAwB,EAAE;wBACzB,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,MAAM,EAAE;gCACP,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,OAAO,EAAE;gCACR,IAAI,EAAE,kBAAkB;gCACxB,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,sBAAsB,EAAE;wBACvB,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,MAAM,EAAE;gCACP,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,uBAAuB;gCAC7B,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,OAAO,EAAE;gCACR,IAAI,EAAE,gBAAgB;gCACtB,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,qBAAqB,EAAE;wBACtB,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,SAAS,EAAE;gCACV,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,UAAU,EAAE;gCACX,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,OAAO,EAAE;gCACR,IAAI,EAAE,eAAe;gCACrB,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,eAAe,EAAE;gCAChB,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,eAAe,EAAE;gCAChB,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,WAAW,EAAE;wBACZ,MAAM,EAAE;4BACP,WAAW,EAAE;gCACZ,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,kBAAkB,EAAE;gCACnB,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,iBAAiB,EAAE;gCAClB,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,yBAAyB,EAAE;gCAC1B,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,EAAE;gCACN,OAAO,EAAE;oCACR,UAAU,EAAE,IAAI;gCACzB,CAAS;4BACT,CAAQ;4BACD,mBAAmB,EAAE;gCACpB,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,WAAW,EAAE;gCACZ,IAAI,EAAE,cAAc;gCACpB,EAAE,EAAE,CAAC;gCACL,OAAO,EAAE;oCACR,SAAS,EAAE,OAAO;gCAC3B,CAAS;4BACT,CAAQ;4BACD,SAAS,EAAE;gCACV,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,iBAAiB,EAAE;gCAClB,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,mBAAmB,EAAE;gCACpB,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,iBAAiB,EAAE;gCAClB,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,UAAU,EAAE;gCACX,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,cAAc,EAAE;gCACf,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,eAAe,EAAE;gCAChB,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,eAAe,EAAE;gCAChB,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,mBAAmB,EAAE;gCACpB,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,qBAAqB;gCAC3B,EAAE,EAAE,GAAG;4BACf,CAAQ;wBACR,CAAO;wBACD,UAAU,EAAE;4BACX;gCACC,IAAI;gCACJ,SAAS;6BACT;yBACD;wBACD,QAAQ,EAAE;4BACT;gCACC,EAAE;gCACF,EAAE;6BACF;yBACD;wBACD,MAAM,EAAE;4BACP,YAAY,EAAE;gCACb,MAAM,EAAE;oCACP,KAAK,EAAE,CAAC;oCACR,SAAS,EAAE,CAAC;oCACZ,YAAY,EAAE,CAAC;gCACxB,CAAS;4BACT,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,cAAc,EAAE;wBACf,MAAM,EAAE;4BACP,oBAAoB,EAAE;gCACrB,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,4BAA4B,EAAE;gCAC7B,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,UAAU,EAAE;gCACX,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,QAAQ,EAAE;gCACT,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,mBAAmB,EAAE;gCACpB,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,qBAAqB;gCAC3B,EAAE,EAAE,GAAG;4BACf,CAAQ;wBACR,CAAO;wBACD,UAAU,EAAE;4BACX;gCACC,IAAI;gCACJ,SAAS;6BACT;yBACD;wBACD,QAAQ,EAAE;4BACT;gCACC,CAAC;gCACD,CAAC;6BACD;yBACD;oBACP,CAAM;oBACD,YAAY,EAAE;wBACb,MAAM,EAAE;4BACP,KAAK,EAAE;gCACN,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;gCACL,OAAO,EAAE;oCACR,SAAS,EAAE,QAAQ;gCAC5B,CAAS;4BACT,CAAQ;4BACD,MAAM,EAAE;gCACP,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,MAAM,EAAE;gCACP,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;gCACL,OAAO,EAAE;oCACR,SAAS,EAAE,WAAW;gCAC/B,CAAS;4BACT,CAAQ;4BACD,IAAI,EAAE;gCACL,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,UAAU,EAAE;gCACX,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,IAAI,EAAE;gCACL,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,mBAAmB,EAAE;gCACpB,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,qBAAqB;gCAC3B,EAAE,EAAE,GAAG;4BACf,CAAQ;wBACR,CAAO;wBACD,UAAU,EAAE;4BACX;gCACC,IAAI;gCACJ,SAAS;6BACT;yBACD;wBACD,QAAQ,EAAE;4BACT;gCACC,CAAC;gCACD,CAAC;6BACD;yBACD;wBACD,MAAM,EAAE;4BACP,KAAK,EAAE;gCACN,MAAM,EAAE;oCACP,MAAM,EAAE,CAAC;oCACT,IAAI,EAAE,CAAC;oCACP,YAAY,EAAE,CAAC;gCACxB,CAAS;4BACT,CAAQ;4BACD,MAAM,EAAE;gCACP,MAAM,EAAE;oCACP,SAAS,EAAE,CAAC;oCACZ,SAAS,EAAE,CAAC;oCACZ,SAAS,EAAE,CAAC;gCACrB,CAAS;4BACT,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,YAAY,EAAE;wBACb,MAAM,EAAE;4BACP,mBAAmB,EAAE;gCACpB,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,qBAAqB;gCAC3B,EAAE,EAAE,GAAG;4BACf,CAAQ;wBACR,CAAO;wBACD,UAAU,EAAE;4BACX;gCACC,IAAI;gCACJ,SAAS;6BACT;yBACD;oBACP,CAAM;oBACD,WAAW,EAAE;wBACZ,MAAM,EAAE;4BACP,UAAU,EAAE;gCACX,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,UAAU,EAAE;gCACX,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,mBAAmB,EAAE;gCACpB,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,qBAAqB;gCAC3B,EAAE,EAAE,GAAG;4BACf,CAAQ;wBACR,CAAO;wBACD,UAAU,EAAE;4BACX;gCACC,IAAI;gCACJ,SAAS;6BACT;yBACD;oBACP,CAAM;oBACD,gBAAgB,EAAE;wBACjB,MAAM,EAAE;4BACP,UAAU,EAAE;gCACX,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,mBAAmB,EAAE;gCACpB,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,qBAAqB;gCAC3B,EAAE,EAAE,GAAG;4BACf,CAAQ;wBACR,CAAO;wBACD,UAAU,EAAE;4BACX;gCACC,IAAI;gCACJ,SAAS;6BACT;yBACD;oBACP,CAAM;oBACD,cAAc,EAAE;wBACf,MAAM,EAAE;4BACP,UAAU,EAAE;gCACX,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,mBAAmB,EAAE;gCACpB,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,qBAAqB;gCAC3B,EAAE,EAAE,GAAG;4BACf,CAAQ;wBACR,CAAO;wBACD,UAAU,EAAE;4BACX;gCACC,IAAI;gCACJ,SAAS;6BACT;yBACD;oBACP,CAAM;oBACD,aAAa,EAAE;wBACd,MAAM,EAAE;4BACP,UAAU,EAAE;gCACX,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,EAAE;4BACd,CAAQ;4BACD,mBAAmB,EAAE;gCACpB,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,qBAAqB;gCAC3B,EAAE,EAAE,GAAG;4BACf,CAAQ;wBACR,CAAO;wBACD,UAAU,EAAE;4BACX;gCACC,IAAI;gCACJ,SAAS;6BACT;yBACD;oBACP,CAAM;oBACD,mBAAmB,EAAE;wBACpB,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,UAAU;gCAChB,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,eAAe,EAAE;gCAChB,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,gBAAgB,EAAE;gCACjB,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,gBAAgB,EAAE;gCACjB,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,WAAW,EAAE;gCACZ,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,WAAW,EAAE;gCACZ,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,cAAc,EAAE;gCACf,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;wBACD,MAAM,EAAE;4BACP,QAAQ,EAAE;gCACT,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,MAAM;wCACZ,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,cAAc,EAAE;wBACf,MAAM,EAAE;4BACP,QAAQ,EAAE;gCACT,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,UAAU;gCAChB,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;wBACD,MAAM,EAAE;4BACP,QAAQ,EAAE;gCACT,MAAM,EAAE;oCACP,IAAI,EAAE;wCACL,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,IAAI,EAAE;wCACL,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,eAAe,EAAE;wCAChB,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,gBAAgB,EAAE;wCACjB,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,uBAAuB,EAAE;wCACxB,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,iBAAiB,EAAE;wBAClB,MAAM,EAAE;4BACP,UAAU,EAAE;gCACX,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,YAAY;gCAClB,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;wBACD,MAAM,EAAE;4BACP,UAAU,EAAE;gCACX,MAAM,EAAE;oCACP,IAAI,EAAE;wCACL,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,UAAU,EAAE;wCACX,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,KAAK,EAAE;wCACN,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,GAAG,EAAE;wCACJ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,MAAM,EAAE;wBACP,MAAM,EAAE;4BACP,MAAM,EAAE;gCACP,OAAO,EAAE,QAAQ;gCACjB,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,KAAK,EAAE;wBACN,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,KAAK,EAAE;oCACN,WAAW;oCACX,aAAa;oCACb,aAAa;oCACb,WAAW;oCACX,aAAa;oCACb,WAAW;iCACX;4BACT,CAAQ;wBACR,CAAO;wBACD,MAAM,EAAE;4BACP,SAAS,EAAE;gCACV,IAAI,EAAE,WAAW;gCACjB,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,WAAW,EAAE;gCACZ,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,WAAW,EAAE;gCACZ,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,SAAS,EAAE;gCACV,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,WAAW,EAAE;gCACZ,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,SAAS,EAAE;gCACV,IAAI,EAAE,WAAW;gCACjB,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,SAAS,EAAE;wBACV,MAAM,EAAE;4BACP,UAAU,EAAE,CAAC;wBACpB,CAAO;oBACP,CAAM;oBACD,SAAS,EAAE;wBACV,MAAM,EAAE;4BACP,MAAM,EAAE;gCACP,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,KAAK,EAAE;wBACN,MAAM,EAAE,CACd,CAAO;oBACP,CAAM;oBACD,WAAW,EAAE;wBACZ,MAAM,EAAE;4BACP,KAAK,EAAE;gCACN,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,UAAU,EAAE;wBACX,MAAM,EAAE;4BACP,KAAK,EAAE;gCACN,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,UAAU,EAAE;wBACX,MAAM,EAAE;4BACP,KAAK,EAAE;gCACN,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,WAAW,EAAE;wBACZ,MAAM,EAAE;4BACP,KAAK,EAAE;gCACN,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,UAAU,EAAE;wBACX,MAAM,EAAE;4BACP,KAAK,EAAE;gCACN,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,WAAW,EAAE;wBACZ,MAAM,EAAE;4BACP,KAAK,EAAE;gCACN,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,SAAS,EAAE;wBACV,MAAM,EAAE;4BACP,KAAK,EAAE;gCACN,IAAI,EAAE,MAAM;gCACZ,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,WAAW,EAAE;wBACZ,MAAM,EAAE;4BACP,KAAK,EAAE;gCACN,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,UAAU,EAAE;wBACX,MAAM,EAAE;4BACP,KAAK,EAAE;gCACN,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,GAAG,EAAE;wBACJ,MAAM,EAAE;4BACP,OAAO,EAAE;gCACR,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,KAAK,EAAE;gCACN,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;gBACN,CAAK;YACL,CAAI;YACD,SAAS,EAAE;gBACV,MAAM,EAAE;oBACP,EAAE,EAAE;wBACH,OAAO,EAAE;4BACR,gBAAgB,EAAE,2BAA2B;4BAC7C,UAAU,EAAE,8DAA8D;4BAC1E,mBAAmB,EAAE,IAAI;4BACzB,oBAAoB,EAAE,YAAY;4BAClC,YAAY,EAAE,yBAAyB;4BACvC,iBAAiB,EAAE,MAAM;4BACzB,aAAa,EAAE,8BAA8B;4BAC7C,YAAY,EAAE,8BAA8B;wBACnD,CAAO;wBACD,MAAM,EAAE;4BACP,iBAAiB,EAAE;gCAClB,MAAM,EAAE;oCACP,eAAe,EAAE;wCAChB,OAAO,EAAE,QAAQ;wCACjB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,WAAW,EAAE;gCACZ,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,OAAO,EAAE;wCACR,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,WAAW,EAAE;gCACZ,MAAM,EAAE;oCACP,IAAI,EAAE;wCACL,IAAI,EAAE,aAAa;wCACnB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,SAAS,EAAE;wCACV,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,YAAY,EAAE;gCACb,MAAM,EAAE;oCACP,UAAU,EAAE;wCACX,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,YAAY,EAAE;gCACb,MAAM,EAAE;oCACP,aAAa,EAAE;wCACd,KAAK,EAAE;4CACN,QAAQ;4CACR,YAAY;yCACZ;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,MAAM;wCACZ,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,UAAU,EAAE;wCACX,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,kBAAkB,EAAE;gCACnB,MAAM,EAAE;oCACP,IAAI,EAAE;wCACL,KAAK,EAAE;4CACN,UAAU;4CACV,WAAW;yCACX;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,UAAU;wCAChB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,SAAS,EAAE;wCACV,IAAI,EAAE,WAAW;wCACjB,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,SAAS,EAAE;wCACV,MAAM,EAAE;4CACP,gBAAgB,EAAE;gDACjB,IAAI,EAAE,OAAO;gDACb,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;oCACX,CAAU;oCACD,QAAQ,EAAE;wCACT,MAAM,EAAE;4CACP,mBAAmB,EAAE;gDACpB,KAAK,EAAE;oDACN,UAAU;iDACV;4CACb,CAAY;wCACZ,CAAW;wCACD,MAAM,EAAE;4CACP,QAAQ,EAAE;gDACT,IAAI,EAAE,2BAA2B;gDACjC,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;oCACX,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,QAAQ,EAAE;gCACT,MAAM,EAAE;oCACP,IAAI,EAAE;wCACL,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,MAAM,EAAE;wCACP,OAAO,EAAE,QAAQ;wCACjB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,UAAU,EAAE;wCACX,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,UAAU,EAAE;wCACX,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,KAAK,EAAE;gCACN,MAAM,EAAE;oCACP,SAAS,EAAE;wCACV,KAAK,EAAE;4CACN,WAAW;4CACX,cAAc;4CACd,cAAc;4CACd,aAAa;4CACb,gBAAgB;4CAChB,aAAa;4CACb,YAAY;4CACZ,gBAAgB;4CAChB,eAAe;4CACf,YAAY;4CACZ,UAAU;yCACV;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,SAAS,EAAE;wCACV,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,EAAE;oCAChB,CAAU;oCACD,YAAY,EAAE;wCACb,IAAI,EAAE,MAAM;wCACZ,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,YAAY,EAAE;wCACb,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,cAAc,EAAE;wCACf,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,EAAE;oCAChB,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,EAAE;oCAChB,CAAU;oCACD,UAAU,EAAE;wCACX,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,EAAE;oCAChB,CAAU;oCACD,cAAc,EAAE;wCACf,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,aAAa,EAAE;wCACd,IAAI,EAAE,oBAAoB;wCAC1B,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,UAAU,EAAE;wCACX,IAAI,EAAE,YAAY;wCAClB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,UAAU;wCAChB,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,UAAU,EAAE;gCACX,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,QAAQ,EAAE;gCACT,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,OAAO,EAAE,QAAQ;wCACjB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,SAAS,EAAE;gCACV,OAAO,EAAE;oCACR,2BAA2B,EAAE,0BAA0B;oCACvD,2BAA2B,EAAE,0FAA0F;gCAChI,CAAS;gCACD,OAAO,EAAE;oCACR,WAAW,EAAE;wCACZ,WAAW,EAAE,oBAAoB;wCACjC,YAAY,EAAE,UAAU;wCACxB,OAAO,EAAE;4CACR,uBAAuB,EAAE,kDAAkD;wCACtF,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,GAAG,EAAE,kDAAkD;gDACpE,CAAa;4CACb,CAAY;yCACD;oCACX,CAAU;oCACD,aAAa,EAAE;wCACd,WAAW,EAAE,sBAAsB;wCACnC,YAAY,EAAE,uBAAuB;wCACrC,OAAO,EAAE;4CACR,uBAAuB,EAAE,oEAAoE;wCACxG,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,GAAG,EAAE,oEAAoE;gDACtF,CAAa;4CACb,CAAY;yCACD;oCACX,CAAU;oCACD,cAAc,EAAE;wCACf,WAAW,EAAE,uBAAuB;wCACpC,YAAY,EAAE,UAAU;wCACxB,OAAO,EAAE;4CACR,yBAAyB,EAAE,2DAA2D;4CACtF,wBAAwB,EAAE,UAAU;4CACpC,+BAA+B,EAAE,sBAAsB;wCAClE,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,KAAK,EAAE,2DAA2D;oDAClE,IAAI,EAAE,UAAU;gDAC7B,CAAa;4CACb,CAAY;4CACD;gDACC,+BAA+B,EAAE,sBAAsB;4CACnE,CAAY;yCACD;oCACX,CAAU;oCACD,cAAc,EAAE;wCACf,WAAW,EAAE,uBAAuB;wCACpC,YAAY,EAAE,uBAAuB;wCACrC,OAAO,EAAE;4CACR,0BAA0B,EAAE,kDAAkD;4CAC9E,+BAA+B,EAAE,MAAM;wCAClD,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,QAAQ,EAAE,kDAAkD;gDACzE,CAAa;4CACb,CAAY;4CACD;gDACC,+BAA+B,EAAE,MAAM;4CACnD,CAAY;yCACD;oCACX,CAAU;oCACD,iBAAiB,EAAE;wCAClB,WAAW,EAAE,0BAA0B;wCACvC,YAAY,EAAE,2BAA2B;wCACzC,cAAc,EAAE,IAAI;wCACpB,OAAO,EAAE;4CACR,wBAAwB,EAAE,0DAA0D;4CACpF,wBAAwB,EAAE,GAAG;wCACxC,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,IAAI,EAAE,0DAA0D;oDAChE,IAAI,EAAE,GAAG;gDACtB,CAAa;4CACb,CAAY;yCACD;oCACX,CAAU;oCACD,gBAAgB,EAAE;wCACjB,WAAW,EAAE,yBAAyB;wCACtC,YAAY,EAAE,0BAA0B;wCACxC,OAAO,EAAE;4CACR,wBAAwB,EAAE,kEAAkE;4CAC5F,wBAAwB,EAAE,GAAG;4CAC7B,+BAA+B,EAAE,UAAU;wCACtD,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,IAAI,EAAE,kEAAkE;oDACxE,IAAI,EAAE,GAAG;gDACtB,CAAa;4CACb,CAAY;4CACD;gDACC,+BAA+B,EAAE,UAAU;4CACvD,CAAY;yCACD;oCACX,CAAU;oCACD,MAAM,EAAE;wCACP,WAAW,EAAE,eAAe;wCAC5B,YAAY,EAAE,gBAAgB;wCAC9B,OAAO,EAAE;4CACR,wBAAwB,EAAE,wDAAwD;4CAClF,wBAAwB,EAAE,GAAG;4CAC7B,+BAA+B,EAAE,iBAAiB;wCAC7D,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,IAAI,EAAE,wDAAwD;oDAC9D,IAAI,EAAE,GAAG;gDACtB,CAAa;4CACb,CAAY;4CACD;gDACC,+BAA+B,EAAE,iBAAiB;4CAC9D,CAAY;yCACD;oCACX,CAAU;oCACD,QAAQ,EAAE;wCACT,WAAW,EAAE,iBAAiB;wCAC9B,YAAY,EAAE,uBAAuB;wCACrC,OAAO,EAAE;4CACR,wBAAwB,EAAE,0DAA0D;4CACpF,wBAAwB,EAAE,GAAG;4CAC7B,+BAA+B,EAAE,sBAAsB;wCAClE,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,IAAI,EAAE,0DAA0D;oDAChE,IAAI,EAAE,GAAG;gDACtB,CAAa;4CACb,CAAY;4CACD;gDACC,+BAA+B,EAAE,sBAAsB;4CACnE,CAAY;yCACD;oCACX,CAAU;oCACD,QAAQ,EAAE;wCACT,WAAW,EAAE,iBAAiB;wCAC9B,YAAY,EAAE,kBAAkB;wCAChC,cAAc,EAAE,IAAI;wCACpB,OAAO,EAAE;4CACR,wBAAwB,EAAE,wDAAwD;4CAClF,wBAAwB,EAAE,GAAG;4CAC7B,4CAA4C,EAAE,6DAA6D;4CAC3G,4CAA4C,EAAE,GAAG;wCAC5D,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,IAAI,EAAE,wDAAwD;oDAC9D,IAAI,EAAE,GAAG;oDACT,mBAAmB,EAAE;wDACpB,IAAI,EAAE,6DAA6D;wDACnE,IAAI,EAAE,GAAG;oDACvB,CAAc;gDACd,CAAa;4CACb,CAAY;yCACD;oCACX,CAAU;oCACD,mBAAmB,EAAE;wCACpB,WAAW,EAAE,4BAA4B;wCACzC,YAAY,EAAE,6BAA6B;wCAC3C,cAAc,EAAE,IAAI;wCACpB,OAAO,EAAE;4CACR,wBAAwB,EAAE,mEAAmE;4CAC7F,wBAAwB,EAAE,GAAG;4CAC7B,4CAA4C,EAAE,wEAAwE;4CACtH,4CAA4C,EAAE,GAAG;wCAC5D,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,IAAI,EAAE,mEAAmE;oDACzE,IAAI,EAAE,GAAG;oDACT,mBAAmB,EAAE;wDACpB,IAAI,EAAE,wEAAwE;wDAC9E,IAAI,EAAE,GAAG;oDACvB,CAAc;gDACd,CAAa;4CACb,CAAY;yCACD;oCACX,CAAU;oCACD,cAAc,EAAE;wCACf,WAAW,EAAE,uBAAuB;wCACpC,YAAY,EAAE,wBAAwB;wCACtC,OAAO,EAAE;4CACR,wBAAwB,EAAE,8DAA8D;4CACxF,wBAAwB,EAAE,GAAG;4CAC7B,4CAA4C,EAAE,mEAAmE;4CACjH,4CAA4C,EAAE,GAAG;wCAC5D,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,IAAI,EAAE,8DAA8D;oDACpE,IAAI,EAAE,GAAG;oDACT,mBAAmB,EAAE;wDACpB,IAAI,EAAE,mEAAmE;wDACzE,IAAI,EAAE,GAAG;oDACvB,CAAc;gDACd,CAAa;4CACb,CAAY;yCACD;oCACX,CAAU;oCACD,KAAK,EAAE;wCACN,WAAW,EAAE,cAAc;wCAC3B,aAAa,EAAE,IAAI;wCACnB,YAAY,EAAE,eAAe;wCAC7B,cAAc,EAAE,IAAI;wCACpB,OAAO,EAAE;4CACR,wBAAwB,EAAE,uDAAuD;4CACjF,wBAAwB,EAAE,GAAG;wCACxC,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,IAAI,EAAE,uDAAuD;oDAC7D,IAAI,EAAE,GAAG;gDACtB,CAAa;4CACb,CAAY;yCACD;oCACX,CAAU;oCACD,MAAM,EAAE;wCACP,WAAW,EAAE,eAAe;wCAC5B,aAAa,EAAE,IAAI;wCACnB,YAAY,EAAE,gBAAgB;wCAC9B,cAAc,EAAE,IAAI;wCACpB,OAAO,EAAE;4CACR,wBAAwB,EAAE,wDAAwD;4CAClF,wBAAwB,EAAE,GAAG;wCACxC,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,IAAI,EAAE,wDAAwD;oDAC9D,IAAI,EAAE,GAAG;gDACtB,CAAa;4CACb,CAAY;yCACD;oCACX,CAAU;oCACD,iBAAiB,EAAE;wCAClB,WAAW,EAAE,0BAA0B;wCACvC,YAAY,EAAE,2BAA2B;wCACzC,OAAO,EAAE;4CACR,wBAAwB,EAAE,iEAAiE;4CAC3F,wBAAwB,EAAE,GAAG;4CAC7B,4CAA4C,EAAE,sEAAsE;4CACpH,4CAA4C,EAAE,GAAG;4CACjD,+BAA+B,EAAE,QAAQ;wCACpD,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,IAAI,EAAE,iEAAiE;oDACvE,IAAI,EAAE,GAAG;oDACT,mBAAmB,EAAE;wDACpB,IAAI,EAAE,sEAAsE;wDAC5E,IAAI,EAAE,GAAG;oDACvB,CAAc;gDACd,CAAa;4CACb,CAAY;4CACD;gDACC,+BAA+B,EAAE,QAAQ;4CACrD,CAAY;yCACD;oCACX,CAAU;oCACD,UAAU,EAAE;wCACX,WAAW,EAAE,mBAAmB;wCAChC,YAAY,EAAE,oBAAoB;wCAClC,OAAO,EAAE;4CACR,wBAAwB,EAAE,4DAA4D;4CACtF,wBAAwB,EAAE,GAAG;wCACxC,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,IAAI,EAAE,4DAA4D;oDAClE,IAAI,EAAE,GAAG;gDACtB,CAAa;4CACb,CAAY;yCACD;oCACX,CAAU;oCACD,cAAc,EAAE;wCACf,WAAW,EAAE,uBAAuB;wCACpC,YAAY,EAAE,UAAU;wCACxB,OAAO,EAAE;4CACR,wBAAwB,EAAE,kEAAkE;4CAC5F,wBAAwB,EAAE,UAAU;wCAC/C,CAAW;wCACD,aAAa,EAAE;4CACd;gDACC,mBAAmB,EAAE;oDACpB,IAAI,EAAE,kEAAkE;oDACxE,IAAI,EAAE,UAAU;gDAC7B,CAAa;4CACb,CAAY;yCACD;oCACX,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,kBAAkB,EAAE;gCACnB,MAAM,EAAE;oCACP,mBAAmB,EAAE;wCACpB,KAAK,EAAE;4CACN,aAAa;4CACb,UAAU;yCACV;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,IAAI,EAAE;wCACL,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,IAAI,EAAE;wCACL,IAAI,EAAE,cAAc;wCACpB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,oBAAoB,EAAE;gCACrB,MAAM,EAAE;oCACP,mBAAmB,EAAE;wCACpB,KAAK,EAAE;4CACN,aAAa;4CACb,UAAU;yCACV;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,YAAY,EAAE;wCACb,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,SAAS,EAAE;wCACV,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,OAAO,EAAE;wCACR,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,IAAI,EAAE;wCACL,IAAI,EAAE,cAAc;wCACpB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,EAAE;oCAChB,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,MAAM;wCACZ,EAAE,EAAE,EAAE;oCAChB,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,qBAAqB,EAAE;gCACtB,MAAM,EAAE;oCACP,SAAS,EAAE;wCACV,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,UAAU;wCAChB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,aAAa,EAAE;wCACd,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,qBAAqB,EAAE;gCACtB,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,YAAY,EAAE;wCACb,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,UAAU,EAAE;wCACX,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,UAAU;wCAChB,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,IAAI,EAAE;wCACL,IAAI,EAAE,cAAc;wCACpB,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,qBAAqB,EAAE;gCACtB,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,UAAU;wCAChB,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,UAAU,EAAE;wCACX,IAAI,EAAE,cAAc;wCACpB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,IAAI,EAAE;wCACL,IAAI,EAAE,cAAc;wCACpB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,eAAe,EAAE;wCAChB,IAAI,EAAE,cAAc;wCACpB,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,qBAAqB,EAAE;gCACtB,MAAM,EAAE;oCACP,IAAI,EAAE;wCACL,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,eAAe,EAAE;wCAChB,IAAI,EAAE,cAAc;wCACpB,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,wBAAwB,EAAE;gCACzB,MAAM,EAAE;oCACP,mBAAmB,EAAE;wCACpB,KAAK,EAAE;4CACN,aAAa;4CACb,gBAAgB;4CAChB,UAAU;yCACV;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,SAAS,EAAE;wCACV,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,IAAI,EAAE;wCACL,IAAI,EAAE,cAAc;wCACpB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,cAAc,EAAE;wCACf,IAAI,EAAE,oBAAoB;wCAC1B,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,yBAAyB,EAAE;gCAC1B,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,KAAK,EAAE;4CACN,OAAO;4CACP,SAAS;yCACT;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,KAAK,EAAE;wCACN,IAAI,EAAE,UAAU;wCAChB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,OAAO,EAAE;wCACR,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,uBAAuB,EAAE;gCACxB,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,OAAO,EAAE;wCACR,IAAI,EAAE,oBAAoB;wCAC1B,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,wBAAwB,EAAE;gCACzB,MAAM,EAAE;oCACP,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,aAAa,EAAE;gCACd,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,MAAM,EAAE;wCACP,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,cAAc,EAAE;gCACf,MAAM,EAAE;oCACP,YAAY,EAAE;wCACb,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,aAAa;wCACnB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,UAAU,EAAE;wCACX,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,eAAe,EAAE;gCAChB,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,eAAe,EAAE;gCAChB,MAAM,EAAE;oCACP,SAAS,EAAE;wCACV,KAAK,EAAE;4CACN,iBAAiB;yCACjB;oCACX,CAAU;oCACD,mBAAmB,EAAE;wCACpB,KAAK,EAAE;4CACN,aAAa;4CACb,gBAAgB;4CAChB,UAAU;yCACV;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,eAAe,EAAE;wCAChB,IAAI,EAAE,iBAAiB;wCACvB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,cAAc,EAAE;wCACf,IAAI,EAAE,oBAAoB;wCAC1B,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,gBAAgB,EAAE;gCACjB,MAAM,EAAE;oCACP,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,UAAU;wCAChB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,cAAc,EAAE;wCACf,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,0BAA0B,EAAE;gCAC3B,MAAM,EAAE;oCACP,SAAS,EAAE;wCACV,KAAK,EAAE;4CACN,4BAA4B;yCAC5B;oCACX,CAAU;oCACD,mBAAmB,EAAE;wCACpB,KAAK,EAAE;4CACN,aAAa;4CACb,gBAAgB;4CAChB,UAAU;yCACV;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,0BAA0B,EAAE;wCAC3B,IAAI,EAAE,4BAA4B;wCAClC,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,cAAc,EAAE;wCACf,IAAI,EAAE,oBAAoB;wCAC1B,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,2BAA2B,EAAE;gCAC5B,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,mBAAmB;wCACzB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,qBAAqB,EAAE;gCACtB,MAAM,EAAE;oCACP,SAAS,EAAE;wCACV,KAAK,EAAE;4CACN,iBAAiB;yCACjB;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,eAAe,EAAE;wCAChB,IAAI,EAAE,iBAAiB;wCACvB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,cAAc,EAAE;wCACf,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,SAAS,EAAE;wCACV,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,sBAAsB,EAAE;gCACvB,MAAM,EAAE;oCACP,UAAU,EAAE;wCACX,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,aAAa,EAAE;wCACd,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,YAAY,EAAE;gCACb,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,MAAM,EAAE;wCACP,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,MAAM,EAAE;wCACP,OAAO,EAAE,QAAQ;wCACjB,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,aAAa,EAAE;gCACd,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,YAAY,EAAE;wCACb,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,aAAa;wCACnB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,UAAU,EAAE;wCACX,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,aAAa,EAAE;gCACd,MAAM,EAAE;oCACP,YAAY,EAAE;wCACb,KAAK,EAAE;4CACN,WAAW;4CACX,cAAc;yCACd;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,SAAS,EAAE;wCACV,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,YAAY,EAAE;wCACb,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,MAAM,EAAE;wCACP,OAAO,EAAE,QAAQ;wCACjB,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,cAAc,EAAE;gCACf,MAAM,EAAE;oCACP,YAAY,EAAE;wCACb,KAAK,EAAE;4CACN,cAAc;4CACd,gBAAgB;4CAChB,gBAAgB;4CAChB,gBAAgB;4CAChB,QAAQ;yCACR;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,YAAY,EAAE;wCACb,IAAI,EAAE,cAAc;wCACpB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,cAAc,EAAE;wCACf,IAAI,EAAE,gBAAgB;wCACtB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,cAAc,EAAE;wCACf,IAAI,EAAE,gBAAgB;wCACtB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,cAAc,EAAE;wCACf,IAAI,EAAE,gBAAgB;wCACtB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,MAAM,EAAE;wCACP,IAAI,EAAE,iBAAiB;wCACvB,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,MAAM,EAAE;gCACP,MAAM,EAAE;oCACP,UAAU,EAAE;wCACX,KAAK,EAAE;4CACN,OAAO;4CACP,WAAW;yCACX;oCACX,CAAU;oCACD,UAAU,EAAE;wCACX,KAAK,EAAE;4CACN,aAAa;4CACb,UAAU;yCACV;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,KAAK,EAAE;wCACN,IAAI,EAAE,aAAa;wCACnB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,SAAS,EAAE;wCACV,IAAI,EAAE,iBAAiB;wCACvB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,EAAE;oCAChB,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,IAAI,EAAE;wCACL,IAAI,EAAE,MAAM;wCACZ,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,aAAa,EAAE;wCACd,IAAI,EAAE,4BAA4B;wCAClC,EAAE,EAAE,EAAE;oCAChB,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,eAAe,EAAE;wCAChB,MAAM,EAAE;4CACP,SAAS,EAAE;gDACV,IAAI,EAAE,UAAU;gDAChB,IAAI,EAAE,QAAQ;gDACd,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;oCACX,CAAU;oCACD,WAAW,EAAE;wCACZ,MAAM,EAAE;4CACP,SAAS,EAAE;gDACV,KAAK,EAAE;oDACN,iBAAiB;iDACjB;4CACb,CAAY;wCACZ,CAAW;wCACD,MAAM,EAAE;4CACP,MAAM,EAAE;gDACP,IAAI,EAAE,QAAQ;gDACd,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,eAAe,EAAE;gDAChB,IAAI,EAAE,iBAAiB;gDACvB,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;oCACX,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,YAAY,EAAE;gCACb,MAAM,EAAE;oCACP,gBAAgB,EAAE;wCACjB,IAAI,EAAE,kBAAkB;wCACxB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,SAAS,EAAE;wCACV,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,KAAK,EAAE;wCACN,IAAI,EAAE,mBAAmB;wCACzB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,WAAW,EAAE;wCACZ,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,gBAAgB,EAAE;wCACjB,MAAM,EAAE;4CACP,SAAS,EAAE,CAAC;4CACZ,GAAG,EAAE,CAAC;4CACN,MAAM,EAAE,CAAC;4CACT,OAAO,EAAE,CAAC;4CACV,KAAK,EAAE,CAAC;wCACnB,CAAW;oCACX,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,wBAAwB,EAAE;gCACzB,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,SAAS,EAAE;wCACV,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,yBAAyB,EAAE;gCAC1B,MAAM,EAAE;oCACP,aAAa,EAAE;wCACd,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,aAAa,EAAE;wCACd,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,iBAAiB,EAAE;gCAClB,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;wCACL,OAAO,EAAE;4CACR,6BAA6B,EAAE,UAAU;wCACpD,CAAW;oCACX,CAAU;oCACD,MAAM,EAAE;wCACP,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,MAAM,EAAE;wCACP,OAAO,EAAE,QAAQ;wCACjB,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,kBAAkB,EAAE;gCACnB,MAAM,EAAE;oCACP,YAAY,EAAE;wCACb,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,aAAa;wCACnB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,MAAM,EAAE;wCACP,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,mBAAmB;wCACzB,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,eAAe,EAAE;gCAChB,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,YAAY;wCAClB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,IAAI,EAAE;wCACL,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,oBAAoB;wCAC1B,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,KAAK,EAAE;wCACN,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,OAAO,EAAE;wCACR,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,OAAO,EAAE;wCACR,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,KAAK,EAAE;wCACN,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,MAAM,EAAE;wCACP,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,KAAK,EAAE;wCACN,IAAI,EAAE,4BAA4B;wCAClC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,kBAAkB,EAAE;wCACnB,MAAM,EAAE;4CACP,YAAY,EAAE;gDACb,IAAI,EAAE,QAAQ;gDACd,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,cAAc,EAAE;gDACf,IAAI,EAAE,MAAM;gDACZ,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;oCACX,CAAU;oCACD,MAAM,EAAE;wCACP,MAAM,EAAE;4CACP,UAAU,EAAE;gDACX,KAAK,EAAE;oDACN,iBAAiB;oDACjB,aAAa;oDACb,aAAa;iDACb;4CACb,CAAY;wCACZ,CAAW;wCACD,MAAM,EAAE;4CACP,eAAe,EAAE;gDAChB,IAAI,EAAE,iBAAiB;gDACvB,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,WAAW,EAAE;gDACZ,IAAI,EAAE,aAAa;gDACnB,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,WAAW,EAAE;gDACZ,IAAI,EAAE,aAAa;gDACnB,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;oCACX,CAAU;oCACD,eAAe,EAAE;wCAChB,MAAM,EAAE;4CACP,EAAE,EAAE;gDACH,IAAI,EAAE,UAAU;gDAChB,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,OAAO,EAAE;gDACR,IAAI,EAAE,UAAU;gDAChB,IAAI,EAAE,QAAQ;gDACd,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;wCACD,MAAM,EAAE;4CACP,QAAQ,EAAE;gDACT,MAAM,EAAE;oDACP,oBAAoB,EAAE,CAAC;oDACvB,GAAG,EAAE,CAAC;oDACN,EAAE,EAAE,CAAC;gDAClB,CAAa;4CACb,CAAY;wCACZ,CAAW;oCACX,CAAU;oCACD,WAAW,EAAE;wCACZ,MAAM,EAAE;4CACP,KAAK,EAAE;gDACN,IAAI,EAAE,gBAAgB;gDACtB,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,EAAE,EAAE;gDACH,IAAI,EAAE,UAAU;gDAChB,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,KAAK,EAAE;gDACN,IAAI,EAAE,OAAO;gDACb,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;wCACD,MAAM,EAAE;4CACP,QAAQ,EAAE;gDACT,MAAM,EAAE;oDACP,oBAAoB,EAAE,CAAC;oDACvB,SAAS,EAAE,CAAC;oDACZ,kBAAkB,EAAE,CAAC;oDACrB,YAAY,EAAE,CAAC;oDACf,qBAAqB,EAAE,CAAC;oDACxB,KAAK,EAAE,CAAC;oDACR,SAAS,EAAE,CAAC;oDACZ,cAAc,EAAE,CAAC;oDACjB,EAAE,EAAE,CAAC;oDACL,kBAAkB,EAAE,CAAC;oDACrB,MAAM,EAAE,EAAE;gDACvB,CAAa;4CACb,CAAY;wCACZ,CAAW;oCACX,CAAU;oCACD,WAAW,EAAE;wCACZ,MAAM,EAAE;4CACP,WAAW,EAAE;gDACZ,KAAK,EAAE;oDACN,OAAO;iDACP;4CACb,CAAY;wCACZ,CAAW;wCACD,MAAM,EAAE;4CACP,EAAE,EAAE;gDACH,IAAI,EAAE,UAAU;gDAChB,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,KAAK,EAAE;gDACN,IAAI,EAAE,gBAAgB;gDACtB,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;wCACD,MAAM,EAAE;4CACP,QAAQ,EAAE;gDACT,MAAM,EAAE;oDACP,oBAAoB,EAAE,CAAC;oDACvB,MAAM,EAAE,CAAC;oDACT,OAAO,EAAE,CAAC;oDACV,UAAU,EAAE,CAAC;oDACb,WAAW,EAAE,CAAC;gDAC3B,CAAa;4CACb,CAAY;wCACZ,CAAW;oCACX,CAAU;oCACD,KAAK,EAAE;wCACN,MAAM,EAAE;4CACP,KAAK,EAAE;gDACN,IAAI,EAAE,gBAAgB;gDACtB,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,SAAS,EAAE;gDACV,IAAI,EAAE,WAAW;gDACjB,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;oCACX,CAAU;oCACD,cAAc,EAAE;wCACf,MAAM,EAAE;4CACP,SAAS,EAAE;gDACV,IAAI,EAAE,QAAQ;gDACd,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;oCACX,CAAU;oCACD,UAAU,EAAE;wCACX,MAAM,EAAE;4CACP,MAAM,EAAE;gDACP,IAAI,EAAE,UAAU;gDAChB,IAAI,EAAE,gBAAgB;gDACtB,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;oCACX,CAAU;oCACD,SAAS,EAAE;wCACV,MAAM,EAAE;4CACP,qBAAqB,EAAE,CAAC;4CACxB,SAAS,EAAE,CAAC;4CACZ,UAAU,EAAE,CAAC;wCACxB,CAAW;oCACX,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,0BAA0B,EAAE;gCAC3B,MAAM,EAAE;oCACP,SAAS,EAAE;wCACV,KAAK,EAAE;4CACN,iBAAiB;yCACjB;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,eAAe,EAAE;wCAChB,IAAI,EAAE,iBAAiB;wCACvB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,YAAY,EAAE;wCACb,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,aAAa;wCACnB,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,WAAW,EAAE;wCACZ,MAAM,EAAE;4CACP,QAAQ,EAAE;gDACT,KAAK,EAAE;oDACN,OAAO;oDACP,KAAK;oDACL,KAAK;iDACL;4CACb,CAAY;wCACZ,CAAW;wCACD,MAAM,EAAE;4CACP,KAAK,EAAE;gDACN,IAAI,EAAE,OAAO;gDACb,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,GAAG,EAAE;gDACJ,IAAI,EAAE,KAAK;gDACX,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,GAAG,EAAE;gDACJ,IAAI,EAAE,KAAK;gDACX,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,KAAK,EAAE;gDACN,IAAI,EAAE,QAAQ;gDACd,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;wCACD,MAAM,EAAE;4CACP,KAAK,EAAE;gDACN,MAAM,EAAE;oDACP,IAAI,EAAE;wDACL,IAAI,EAAE,4BAA4B;wDAClC,EAAE,EAAE,CAAC;oDACnB,CAAc;gDACd,CAAa;4CACb,CAAY;4CACD,GAAG,EAAE;gDACJ,MAAM,EAAE;oDACP,KAAK,EAAE;wDACN,IAAI,EAAE,gBAAgB;wDACtB,EAAE,EAAE,CAAC;oDACnB,CAAc;gDACd,CAAa;4CACb,CAAY;4CACD,GAAG,EAAE;gDACJ,MAAM,EAAE;oDACP,KAAK,EAAE;wDACN,IAAI,EAAE,gBAAgB;wDACtB,EAAE,EAAE,CAAC;oDACnB,CAAc;gDACd,CAAa;4CACb,CAAY;wCACZ,CAAW;oCACX,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,MAAM,EAAE;gCACP,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,MAAM,EAAE;wCACP,IAAI,EAAE,MAAM;wCACZ,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,KAAK,EAAE;gCACN,MAAM,EAAE;oCACP,SAAS,EAAE;wCACV,KAAK,EAAE;4CACN,QAAQ;4CACR,QAAQ;4CACR,QAAQ;4CACR,WAAW;yCACX;oCACX,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,MAAM,EAAE;wCACP,IAAI,EAAE,UAAU;wCAChB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,MAAM,EAAE;wCACP,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,SAAS,EAAE;wCACV,IAAI,EAAE,mBAAmB;wCACzB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,UAAU,EAAE;wCACX,IAAI,EAAE,cAAc;wCACpB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,gBAAgB,EAAE;wCACjB,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,kCAAkC;wCACxC,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,eAAe,EAAE;wCAChB,IAAI,EAAE,cAAc;wCACpB,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,iBAAiB,EAAE;gCAClB,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,eAAe,EAAE;wCAChB,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,gBAAgB;wCACtB,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;gCACD,MAAM,EAAE;oCACP,cAAc,EAAE;wCACf,MAAM,EAAE;4CACP,aAAa,EAAE;gDACd,KAAK,EAAE;oDACN,kBAAkB;oDAClB,WAAW;oDACX,SAAS;oDACT,SAAS;oDACT,uBAAuB;oDACvB,oBAAoB;iDACpB;4CACb,CAAY;wCACZ,CAAW;wCACD,MAAM,EAAE;4CACP,SAAS,EAAE;gDACV,IAAI,EAAE,QAAQ;gDACd,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,gBAAgB,EAAE;gDACjB,IAAI,EAAE,aAAa;gDACnB,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,SAAS,EAAE;gDACV,IAAI,EAAE,OAAO;gDACb,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,OAAO,EAAE;gDACR,IAAI,EAAE,OAAO;gDACb,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,OAAO,EAAE;gDACR,IAAI,EAAE,OAAO;gDACb,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,qBAAqB,EAAE;gDACtB,IAAI,EAAE,YAAY;gDAClB,EAAE,EAAE,CAAC;4CACjB,CAAY;4CACD,kBAAkB,EAAE;gDACnB,IAAI,EAAE,YAAY;gDAClB,EAAE,EAAE,CAAC;4CACjB,CAAY;wCACZ,CAAW;wCACD,MAAM,EAAE;4CACP,WAAW,EAAE;gDACZ,MAAM,EAAE;oDACP,wBAAwB,EAAE,CAAC;oDAC3B,YAAY,EAAE,CAAC;gDAC5B,CAAa;4CACb,CAAY;wCACZ,CAAW;oCACX,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,WAAW,EAAE;gCACZ,MAAM,EAAE;oCACP,UAAU,EAAE;wCACX,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,gBAAgB,EAAE;wCACjB,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,cAAc,EAAE;gCACf,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,UAAU;wCAChB,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,SAAS,EAAE;wCACV,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,gBAAgB,EAAE;wCACjB,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,cAAc,EAAE;gCACf,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,gBAAgB,EAAE;wCACjB,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,cAAc,EAAE;gCACf,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,QAAQ;wCACd,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,gBAAgB,EAAE;wCACjB,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,QAAQ,EAAE;wCACT,IAAI,EAAE,2BAA2B;wCACjC,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;4BACD,eAAe,EAAE;gCAChB,MAAM,EAAE;oCACP,QAAQ,EAAE;wCACT,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,KAAK,EAAE;wCACN,IAAI,EAAE,OAAO;wCACb,EAAE,EAAE,CAAC;oCACf,CAAU;oCACD,cAAc,EAAE;wCACf,IAAI,EAAE,aAAa;wCACnB,EAAE,EAAE,CAAC;oCACf,CAAU;gCACV,CAAS;4BACT,CAAQ;wBACR,CAAO;oBACP,CAAM;gBACN,CAAK;YACL,CAAI;YACD,GAAG,EAAE;gBACJ,OAAO,EAAE;oBACR,UAAU,EAAE,mEAAmE;oBAC/E,mBAAmB,EAAE,IAAI;oBACzB,oBAAoB,EAAE,WAAW;oBACjC,YAAY,EAAE,gBAAgB;oBAC9B,iBAAiB,EAAE,MAAM;oBACzB,gBAAgB,EAAE,IAAI;gBAC3B,CAAK;gBACD,MAAM,EAAE;oBACP,IAAI,EAAE;wBACL,IAAI,EAAE,UAAU;wBAChB,EAAE,EAAE,QAAQ;wBACZ,MAAM,EAAE,+BAA+B;oBAC7C,CAAM;oBACD,IAAI,EAAE;wBACL,MAAM,EAAE;4BACP,KAAK,EAAE;gCACN,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,UAAU;gCAChB,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,QAAQ,EAAE;wBACT,MAAM,EAAE;4BACP,OAAO,EAAE;gCACR,KAAK,EAAE;oCACN,KAAK;oCACL,KAAK;oCACL,MAAM;oCACN,QAAQ;oCACR,OAAO;oCACP,QAAQ;iCACR;4BACT,CAAQ;wBACR,CAAO;wBACD,MAAM,EAAE;4BACP,GAAG,EAAE;gCACJ,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,GAAG,EAAE;gCACJ,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,IAAI,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,QAAQ,EAAE;gCACT,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,KAAK,EAAE;gCACN,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,MAAM,EAAE;gCACP,IAAI,EAAE,mBAAmB;gCACzB,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,QAAQ,EAAE;gCACT,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,IAAI,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,kBAAkB,EAAE;gCACnB,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,UAAU;gCAChB,EAAE,EAAE,EAAE;4BACd,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,iBAAiB,EAAE;wBAClB,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,IAAI,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;oBACD,eAAe,EAAE;wBAChB,IAAI,EAAE,UAAU;wBAChB,IAAI,EAAE,QAAQ;wBACd,EAAE,EAAE,IAAI;wBACR,MAAM,EAAE,+BAA+B;oBAC7C,CAAM;oBACD,WAAW,EAAE;wBACZ,IAAI,EAAE,QAAQ;wBACd,EAAE,EAAE,IAAI;wBACR,MAAM,EAAE,gCAAgC;oBAC9C,CAAM;oBACD,WAAW,EAAE;wBACZ,IAAI,EAAE,QAAQ;wBACd,EAAE,EAAE,IAAI;wBACR,MAAM,EAAE,gCAAgC;oBAC9C,CAAM;oBACD,aAAa,EAAE;wBACd,IAAI,EAAE,UAAU;wBAChB,IAAI,EAAE,0BAA0B;wBAChC,EAAE,EAAE,IAAI;wBACR,MAAM,EAAE,8BAA8B;oBAC5C,CAAM;oBACD,aAAa,EAAE;wBACd,MAAM,EAAE;4BACP,0BAA0B,EAAE,CAAC;4BAC7B,QAAQ,EAAE,CAAC;4BACX,QAAQ,EAAE,CAAC;4BACX,WAAW,EAAE,CAAC;4BACd,UAAU,EAAE,CAAC;4BACb,SAAS,EAAE,CAAC;4BACZ,cAAc,EAAE,CAAC;4BACjB,iBAAiB,EAAE,CAAC;wBAC3B,CAAO;oBACP,CAAM;gBACN,CAAK;YACL,CAAI;YACD,IAAI,EAAE;gBACL,OAAO,EAAE;oBACR,gBAAgB,EAAE,IAAI;oBACtB,UAAU,EAAE,0DAA0D;oBACtE,mBAAmB,EAAE,IAAI;oBACzB,oBAAoB,EAAE,aAAa;oBACnC,YAAY,EAAE,iBAAiB;oBAC/B,iBAAiB,EAAE,KAAK;gBAC7B,CAAK;gBACD,MAAM,EAAE;oBACP,MAAM,EAAE;wBACP,MAAM,EAAE;4BACP,QAAQ,EAAE;gCACT,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,SAAS,EAAE;gCACV,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;gBACN,CAAK;YACL,CAAI;YACD,GAAG,EAAE;gBACJ,OAAO,EAAE;oBACR,gBAAgB,EAAE,IAAI;oBACtB,UAAU,EAAE,yDAAyD;oBACrE,mBAAmB,EAAE,IAAI;oBACzB,oBAAoB,EAAE,aAAa;oBACnC,YAAY,EAAE,gBAAgB;oBAC9B,iBAAiB,EAAE,KAAK;gBAC7B,CAAK;gBACD,MAAM,EAAE;oBACP,MAAM,EAAE;wBACP,MAAM,EAAE;4BACP,IAAI,EAAE;gCACL,IAAI,EAAE,OAAO;gCACb,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,OAAO,EAAE;gCACR,IAAI,EAAE,QAAQ;gCACd,EAAE,EAAE,CAAC;4BACb,CAAQ;4BACD,OAAO,EAAE;gCACR,IAAI,EAAE,UAAU;gCAChB,IAAI,EAAE,qBAAqB;gCAC3B,EAAE,EAAE,CAAC;4BACb,CAAQ;wBACR,CAAO;oBACP,CAAM;gBACN,CAAK;YACL,CAAI;QACJ,CAAG;IACH,CAAE;AACF,CAAC,CAAC;AACF,IAAI,MAAM,GAAG;IACZ,MAAM,EAAE,MAAM;AACf,CAAC,CAAC;AAEF,IAAI,QAAQ,GAAA,WAAA,GAAgB,MAAM,CAAC,MAAM,CAAC;IACxC,SAAS,EAAE,IAAI;IACf,MAAM,EAAE,MAAM;IACd,SAAS,EAAE,MAAM;AACnB,CAAC,CAAC,CAAC;AAEH;;;;;;;;;;;;;;;CAeA,GACA,+DAAA,GACA,MAAM,kBAAkB,GAAG;IACvB,KAAK,EAAE,MAAM;IACb,KAAK,EAAE,MAAM;IACb,QAAQ,EAAE,IAAI;IACd,MAAM,EAAE,KAAK;AACjB,CAAC,CAAC;AACF;;;;CAIA,GACA,SAAS,UAAU,GAAG;IAClB,MAAM,iBAAiB,qNAAG,WAAW,AAAC,AAAQ,CAAR,CAAS,QAAQ,EAAE,kBAAkB,CAAC,CAAC;IAC7E,QAAO,IAAI,CAAC,+NAAA,AAAqB,EAAC,iBAAiB,CAAC,CAAC;AACzD,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,yBAAA,GACA,SAAS,aAAa,CAAC,YAAY,EAAE;IACjC,MAAM,MAAM,GAAG,UAAU,EAAE,CAAC;IAC5B,OAAO,IAAI,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AACpD,CAAC;AACD,uDAAA,GACA,SAAS,sBAAsB,GAAG;IAC9B,OAAO,IAAI,uBAAuB,EAAE,CAAC;AACzC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,qEAAA,GACA,SAAS,SAAS,GAAG;IACjB,IAAI,OAAO,CAAC,GAAG,CAAC,oBAAoB,KAAK,KAAK,EAAE;QACpD,iDAAA;QACQ,OAAO,MAAM,CAAC;IACtB,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD,uEAAA,GACA,SAAS,WAAW,GAAG;IACnB,OAAO,IAAI,CAAC;AAChB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,SAAS,aAAa,CAAC,UAAU,EAAE;IAC/B,OAAO,IAAI,mBAAmB,CAAC,UAAU,EAAA,kBAAA,GAAuB,KAAK,CAAC,CAAC;AAC3E,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,oBAAoB,CAAC;AACvC;;;CAGA,GACA,MAAM,gCAAgC,GAAG,IAAI,CAAC;AAC9C,MAAM,sBAAsB,GAAG,GAAG,CAAC;AACnC,yCAAA,GACA,MAAM,4BAA4B,GAAG,EAAE,GAAG,IAAI,CAAC;AAC/C;;;;;;;;CAQA,GACA,MAAM,kBAAkB,CAAC;IACrB,WAAW,CACf;;KAEA,GACI,KAAK,EACT;;KAEA,GACI,OAAO,EACX;;;;KAIA,GACI,cAAc,GAAG,gCAAgC,EACrD;;;KAGA,GACI,aAAa,GAAG,sBAAsB,EAC1C;;;;KAIA,GACI,UAAU,GAAG,4BAA4B,CAAE;QACvC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACjC,qDAAA,GACQ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAClC,IAAI,CAAC,KAAK,EAAE,CAAC;IACrB,CAAK;IACL;;;;;;KAMA,GACI,KAAK,GAAG;QACJ,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;IAC/B,CAAK;IACL;;;KAGA,GACI,UAAU,GAAG;QACT,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC;IAC7C,CAAK;IACL;;;;KAIA,GACI,aAAa,CAAC,EAAE,EAAE;QACtB,wCAAA;QACQ,IAAI,CAAC,MAAM,EAAE,CAAC;QACtB,sEAAA;QACA,oBAAA;QACQ,MAAM,wBAAwB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;QAC/F,2EAAA;QACQ,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC;QAC5E,sDAAA;QACQ,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,wBAAwB,GAAG,YAAY,CAAC,CAAC;QAC9E,IAAI,gBAAgB,GAAG,CAAC,EAAE;YACtB,QAAQ,CAAC,SAAS,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,IAAI,CAAC,GACzD,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GACzC,CAAC,mBAAmB,EAAE,wBAAwB,CAAC,KAAK,CAAC,GACrD,CAAC,cAAc,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;QACzD,CAAS;QACD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,MAAM;YACnF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAClC,OAAO,EAAE,EAAE,CAAC;QACxB,CAAS,CAAC,CAAC;QACX,uEAAA;QACA,UAAA;QACQ,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC;QACzC,IAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,cAAc,EAAE;YAC1C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;QACrD,CAAS;QACD,IAAI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,EAAE;YACtC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC;QACjD,CAAS;IACT,CAAK;IACD,WAAW,GAAG;QACV,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,EAAE;YAC5B,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC;YAC9B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACrC,CAAS;IACT,CAAK;IACD,MAAM,GAAG;QACL,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,EAAE;YAC5B,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;YAC3B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACrC,CAAS;IACT,CAAK;IACL,4EAAA,GACI,aAAa,GAAG;QACZ,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC;IAC1D,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,kBAAkB,CAAC;AACrC,0DAAA,GACA,MAAM,eAAe,GAAG,EAAE,GAAG,IAAI,CAAC;AAClC,+DAAA,GACA,MAAM,kBAAkB,GAAG,EAAE,GAAG,IAAI,CAAC;AACrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BA,GACA,MAAM,gBAAgB,CAAC;IACnB,WAAW,CAAC,KAAK,EAAE,iBAAiB,EAAE,WAAW,EAAE,aAAa,EAAE,UAAU,EAAE,uBAAuB,EAAE,2BAA2B,EAAE,QAAQ,CAAE;QAC1I,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACvD,IAAI,CAAC,2BAA2B,GAAG,2BAA2B,CAAC;QAC/D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA,iCAAA,GAAqC;QAC3D;;;;SAIA,GACQ,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,kBAAkB,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;IACxE,CAAK;IACL;;;;;;KAMA,GACI,SAAS,GAAG;QACR,OAAQ,IAAI,CAAC,KAAK,KAAK,CAAC,CAAA,kCAAA,OACpB,IAAI,CAAC,KAAK,KAAK,CAAC,CAAA,iCAAA,OAChB,IAAI,CAAC,MAAM,EAAE,EAAE;IAC3B,CAAK;IACL;;;KAGA,GACI,MAAM,GAAG;QACL,OAAQ,IAAI,CAAC,KAAK,KAAK,CAAC,CAAA,8BAAA,OACpB,IAAI,CAAC,KAAK,KAAK,CAAC,CAAA,iCAAA,IAAsC;IAClE,CAAK;IACL;;;;;;KAMA,GACI,KAAK,GAAG;QACJ,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,CAAA,+BAAA,KAAoC;YACpD,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,OAAO;QACnB,CAAS;QACD,IAAI,CAAC,IAAI,EAAE,CAAC;IACpB,CAAK;IACL;;;;;KAKA,GACI,MAAM,IAAI,GAAG;QACT,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE;YAClB,MAAM,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA,iCAAA,GAAqC,CAAC;QACpE,CAAS;IACT,CAAK;IACL;;;;;;;KAOA,GACI,cAAc,GAAG;QACb,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA,iCAAA,GAAqC;QACnD,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAK;IACL;;;;;;;;;KASA,GACI,QAAQ,GAAG;QACf,yEAAA;QACA,2EAAA;QACQ,IAAI,IAAI,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;YAC1C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,eAAe,EAAE,IAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAChI,CAAS;IACT,CAAK;IACL,8CAAA,GACI,WAAW,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAK;IACL,6EAAA,GACI,MAAM,oBAAoB,GAAG;QACzB,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE;YAC3B,yFAAA;YACA,mEAAA;YACY,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA,iCAAA,GAAqC,CAAC;QACrE,CAAS;IACT,CAAK;IACL,sCAAA,GACI,eAAe,GAAG;QACd,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;YACxB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAClC,CAAS;IACT,CAAK;IACL,gDAAA,GACI,iBAAiB,GAAG;QAChB,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;YAC1B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACpC,CAAS;IACT,CAAK;IACL;;;;;;;;;;;;KAYA,GACI,MAAM,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE;QACnC,qEAAA;QACQ,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QAC9B,kEAAA;QACA,uDAAA;QACQ,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,UAAU,KAAK,CAAC,CAAA,+BAAA,KAAoC;YAChE,qFAAA;YACY,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACjC,CAAS,MACI,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,kBAAkB,EAAE;YAClE,mFAAA;YACY,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC3B,QAAQ,CAAC,iEAAiE,CAAC,CAAC;YAC5E,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QACtC,CAAS,MACI,IAAI,KAAK,IACV,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,eAAe,IACnC,IAAI,CAAC,KAAK,KAAK,CAAC,CAAA,iCAAA,KAAsC;YAClE,2EAAA;YACA,sEAAA;YACA,yEAAA;YACA,0EAAA;YACA,2EAAA;YACA,uCAAA;YACY,IAAI,CAAC,uBAAuB,CAAC,eAAe,EAAE,CAAC;YAC/C,IAAI,CAAC,2BAA2B,CAAC,eAAe,EAAE,CAAC;QAC/D,CAAS;QACT,gFAAA;QACQ,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;YACtB,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QAC/B,CAAS;QACT,gFAAA;QACA,8EAAA;QACQ,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;QAChC,8CAAA;QACQ,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAK;IACL;;;KAGA,GACI,QAAQ,GAAG,CAAA,CAAG;IACd,IAAI,GAAG;QACH,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA,kCAAA,GAAsC;QACpD,MAAM,mBAAmB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACpF,qEAAA;QACQ,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,OAAO,CAAC,GAAG,CAAC;YACR,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE;YACvC,IAAI,CAAC,2BAA2B,CAAC,QAAQ,EAAE;SAC9C,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,aAAa,CAAC,KAAK;YAChD,0DAAA;YACA,iEAAA;YACA,wEAAA;YACA,sDAAA;YACY,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,EAAE;gBAChD,iEAAA;gBACA,iEAAA;gBACA,uDAAA;gBACgB,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YAC3D,CAAa;QACb,CAAS,EAAE,CAAC,KAAK,KAAK;YACV,mBAAmB,CAAC,MAAM;gBACtB,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,8BAA8B,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;gBAClG,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;YACxD,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACD,WAAW,CAAC,SAAS,EAAE,aAAa,EAAE;QAClC,MAAM,mBAAmB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5E,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QACtD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM;YACrB,mBAAmB,CAAC,MAAM;gBACtB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA,8BAAA,GAAkC;gBAChD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,EAAE,kBAAkB,EAAE,MAAM;oBAC1F,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE;wBACf,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA,iCAAA,GAAqC;oBAC3E,CAAqB;oBACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7C,CAAiB,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;YAC9C,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK;YAC3B,mBAAmB,CAAC,MAAM;gBACtB,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACrD,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,KAAK;YAC3B,mBAAmB,CAAC,MAAM;gBACtB,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC3C,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;IACX,CAAK;IACD,cAAc,GAAG;QACb,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA,iCAAA,GAAqC;QACnD,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,YAAY;YACnC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA,iCAAA,GAAqC;YACnD,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,CAAS,CAAC,CAAC;IACX,CAAK;IACL,oBAAA;IACI,iBAAiB,CAAC,KAAK,EAAE;QACrB,QAAQ,CAAC,SAAS,EAAE,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QAC3B,0EAAA;QACA,wEAAA;QACA,sEAAA;QACA,2EAAA;QACQ,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA,+BAAA,KAAoC,KAAK,CAAC,CAAC;IACtE,CAAK;IACL;;;;;KAKA,GACI,yBAAyB,CAAC,eAAe,EAAE;QACvC,OAAO,CAAC,EAAE,KAAK;YACX,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAM;gBAC9B,IAAI,IAAI,CAAC,UAAU,KAAK,eAAe,EAAE;oBACrC,OAAO,EAAE,EAAE,CAAC;gBAChC,CAAiB,MACI;oBACD,QAAQ,CAAC,SAAS,EAAE,uDAAuD,CAAC,CAAC;oBAC7E,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;gBAC7C,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC;IACV,CAAK;AACL,CAAC;AACD;;;;;;CAMA,GACA,MAAM,sBAAsB,SAAS,gBAAgB,CAAC;IAClD,WAAW,CAAC,KAAK,EAAE,UAAU,EAAE,eAAe,EAAE,mBAAmB,EAAE,UAAU,EAAE,QAAQ,CAAE;QACvF,KAAK,CAAC,KAAK,EAAE,kCAAkC,CAAA,yCAAA,KAA8C,oBAAoB,CAAA,4BAAA,KAAiC,sBAAsB,CAAA,8BAAA,KAAmC,UAAU,EAAE,eAAe,EAAE,mBAAmB,EAAE,QAAQ,CAAC,CAAC;QACvQ,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;IACD,QAAQ,CAAC,SAAS,EAAE,aAAa,EAAE;QAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;IAC9E,CAAK;IACD,SAAS,CAAC,gBAAgB,EAAE;QAChC,oDAAA;QACQ,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrB,MAAM,WAAW,GAAG,eAAe,CAAC,IAAI,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,yBAAyB,CAAC,gBAAgB,CAAC,CAAC;QAC7D,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAClE,CAAK;IACL;;;;;KAKA,GACI,KAAK,CAAC,UAAU,EAAE;QACd,MAAM,OAAO,GAAG,CAAA,CAAE,CAAC;QACnB,OAAO,CAAC,QAAQ,GAAG,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACzD,OAAO,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAC1D,MAAM,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAClE,IAAI,MAAM,EAAE;YACR,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;QACpC,CAAS;QACD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAClC,CAAK;IACL;;;KAGA,GACI,OAAO,CAAC,QAAQ,EAAE;QACd,MAAM,OAAO,GAAG,CAAA,CAAE,CAAC;QACnB,OAAO,CAAC,QAAQ,GAAG,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACzD,OAAO,CAAC,YAAY,GAAG,QAAQ,CAAC;QAChC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAClC,CAAK;AACL,CAAC;AACD;;;;;;;;;;;;;;;;CAgBA,GACA,MAAM,qBAAqB,SAAS,gBAAgB,CAAC;IACjD,WAAW,CAAC,KAAK,EAAE,UAAU,EAAE,eAAe,EAAE,mBAAmB,EAAE,UAAU,EAAE,QAAQ,CAAE;QACvF,KAAK,CAAC,KAAK,EAAE,iCAAiC,CAAA,wCAAA,KAA6C,mBAAmB,CAAA,2BAAA,KAAgC,sBAAsB,CAAA,8BAAA,KAAmC,UAAU,EAAE,eAAe,EAAE,mBAAmB,EAAE,QAAQ,CAAC,CAAC;QACnQ,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;IACxC,CAAK;IACL;;;KAGA,GACI,IAAI,iBAAiB,GAAG;QACpB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACvC,CAAK;IACL,qCAAA;IACI,KAAK,GAAG;QACJ,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;QACjC,KAAK,CAAC,KAAK,EAAE,CAAC;IACtB,CAAK;IACD,QAAQ,GAAG;QACP,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QACpC,CAAS;IACT,CAAK;IACD,QAAQ,CAAC,SAAS,EAAE,aAAa,EAAE;QAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;IAC7E,CAAK;IACD,SAAS,CAAC,aAAa,EAAE;QAC7B,wCAAA;QACQ,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QACxC,IAAI,CAAC,eAAe,GAAG,aAAa,CAAC,WAAW,CAAC;QACjD,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YACtC,sDAAA;YACY,UAAU,CAAC,CAAC,aAAa,CAAC,YAAY,IAAI,aAAa,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;YACnF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC;QACvD,CAAS,MACI;YACb,iEAAA;YACA,wEAAA;YACA,uEAAA;YACY,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YACrB,MAAM,OAAO,GAAG,gBAAgB,CAAC,aAAa,CAAC,YAAY,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC;YACvF,MAAM,aAAa,GAAG,WAAW,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YAC5D,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAC1E,CAAS;IACT,CAAK;IACL;;;;KAIA,GACI,cAAc,GAAG;QACrB,2EAAA;QACA,0EAAA;QACQ,MAAM,OAAO,GAAG,CAAA,CAAE,CAAC;QACnB,OAAO,CAAC,QAAQ,GAAG,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACzD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAClC,CAAK;IACL,kEAAA,GACI,cAAc,CAAC,SAAS,EAAE;QACtB,MAAM,OAAO,GAAG;YACZ,WAAW,EAAE,IAAI,CAAC,eAAe;YACjC,MAAM,EAAE,SAAS,CAAC,GAAG,EAAC,QAAQ,GAAI,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QACpF,CAAS,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAClC,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;CAIA,GACA,MAAM,SAAS,CAAC;AAChB,CAAC;AACD;;;CAGA,GACA,MAAM,aAAa,SAAS,SAAS,CAAC;IAClC,WAAW,CAAC,eAAe,EAAE,mBAAmB,EAAE,UAAU,EAAE,UAAU,CAAE;QACtE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAChC,CAAK;IACD,iBAAiB,GAAG;QAChB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,yCAAyC,CAAC,CAAC;QAC1G,CAAS;IACT,CAAK;IACL,4DAAA,GACI,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE;QAC9B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,OAAO,OAAO,CAAC,GAAG,CAAC;YACf,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;YAC/B,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE;SACtC,CAAC,CACG,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,aAAa,CAAC,KAAK;YACtC,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;QAC/F,CAAS,CAAC,CACG,KAAK,CAAC,CAAC,KAAK,KAAK;YAClB,IAAI,KAAK,CAAC,IAAI,KAAK,eAAe,EAAE;gBAChC,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,eAAe,EAAE;oBACrC,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;oBACvC,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE,CAAC;gBAC/D,CAAiB;gBACD,MAAM,KAAK,CAAC;YAC5B,CAAa,MACI;gBACD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzE,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACL,kFAAA,GACI,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,qBAAqB,EAAE;QAC9D,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,OAAO,OAAO,CAAC,GAAG,CAAC;YACf,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;YAC/B,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE;SACtC,CAAC,CACG,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,aAAa,CAAC,KAAK;YACtC,OAAO,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,qBAAqB,CAAC,CAAC;QAC/H,CAAS,CAAC,CACG,KAAK,CAAC,CAAC,KAAK,KAAK;YAClB,IAAI,KAAK,CAAC,IAAI,KAAK,eAAe,EAAE;gBAChC,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,eAAe,EAAE;oBACrC,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;oBACvC,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE,CAAC;gBAC/D,CAAiB;gBACD,MAAM,KAAK,CAAC;YAC5B,CAAa,MACI;gBACD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzE,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,SAAS,GAAG;QACR,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC/B,CAAK;AACL,CAAC;AACD,wEAAA;AACA,wBAAA;AACA,SAAS,YAAY,CAAC,eAAe,EAAE,mBAAmB,EAAE,UAAU,EAAE,UAAU,EAAE;IAChF,OAAO,IAAI,aAAa,CAAC,eAAe,EAAE,mBAAmB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;AAC3F,CAAC;AACD,eAAe,eAAe,CAAC,SAAS,EAAE,SAAS,EAAE;IACjD,MAAM,aAAa,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;IAC3C,MAAM,IAAI,GAAG,oBAAoB,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;IAC3E,MAAM,OAAO,GAAG;QACZ,MAAM,EAAE,SAAS,CAAC,GAAG,EAAC,CAAC,GAAI,UAAU,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IAC3E,CAAK,CAAC;IACF,MAAM,aAAa,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AAC3D,CAAC;AACD,eAAe,0BAA0B,CAAC,SAAS,EAAE,IAAI,EAAE;IACvD,MAAM,aAAa,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;IAC3C,MAAM,IAAI,GAAG,oBAAoB,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;IAC3E,MAAM,OAAO,GAAG;QACZ,SAAS,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC,GAAI,MAAM,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IACrE,CAAK,CAAC;IACF,MAAM,QAAQ,GAAG,MAAM,aAAa,CAAC,kBAAkB,CAAC,mBAAmB,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACzG,MAAM,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC;IACvB,QAAQ,CAAC,OAAO,EAAC,KAAK,IAAI;QACtB,MAAM,GAAG,GAAG,6BAA6B,CAAC,aAAa,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAC3E,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;IAC1C,CAAK,CAAC,CAAC;IACH,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI;QAChB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QACrC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAClB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzB,CAAK,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,eAAe,4BAA4B,CAAC,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE;IACtE,IAAI,EAAE,CAAC;IACP,MAAM,aAAa,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;IAC3C,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,4BAA4B,CAAC,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC,CAAC;IACvH,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAC9B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,qCAAqC,EAAE;QACjE,OAAO,OAAO,CAAC,MAAM,CAAC;IAC9B,CAAK;IACD,MAAM,QAAQ,GAAG,MAAM,aAAa,CAAC,kBAAkB,CAAC,qBAAqB,EAAE,MAAM,EAAE,OAAO,EAAA,wBAAA,GAA6B,CAAC,CAAC,CAAC;IAClI,gEAAA;IACI,MAAM,cAAc,GAAG,QAAQ,CAAC,MAAM,EAAC,KAAK,GAAI,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAChE,UAAU,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;IAC5C,4DAAA;IACA,4DAAA;IACA,+BAAA;IACI,MAAM,uBAAuB,GAAG,CAAC,EAAE,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC;IACxH,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK;QACrF,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;QAC1D,OAAO,WAAW,CAAC;IAC3B,CAAK,EAAE,CAAA,CAAE,CAAC,CAAC;IACP,OAAO,cAAc,CAAC;AAC1B,CAAC;AACD,SAAS,wBAAwB,CAAC,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE;IAC1D,MAAM,aAAa,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;IAC3C,aAAa,CAAC,iBAAiB,EAAE,CAAC;IAClC,OAAO,IAAI,qBAAqB,CAAC,KAAK,EAAE,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,eAAe,EAAE,aAAa,CAAC,mBAAmB,EAAE,aAAa,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AAC5K,CAAC;AACD,SAAS,wBAAwB,CAAC,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE;IAC1D,MAAM,aAAa,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;IAC3C,aAAa,CAAC,iBAAiB,EAAE,CAAC;IAClC,OAAO,IAAI,sBAAsB,CAAC,KAAK,EAAE,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,eAAe,EAAE,aAAa,CAAC,mBAAmB,EAAE,aAAa,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AAC7K,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,oBAAoB,CAAC;AACvC,4EAAA;AACA,mEAAA;AACA,4EAAA;AACA,8EAAA;AACA,6EAAA;AACA,MAAM,yBAAyB,GAAG,CAAC,CAAC;AACpC,8EAAA;AACA,gEAAA;AACA,0EAAA;AACA,gBAAA;AACA,MAAM,uBAAuB,GAAG,EAAE,GAAG,IAAI,CAAC;AAC1C;;;;;;;;;;CAUA,GACA,MAAM,kBAAkB,CAAC;IACrB,WAAW,CAAC,UAAU,EAAE,kBAAkB,CAAE;QACxC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QACrD,6BAAA,GACQ,IAAI,CAAC,KAAK,GAAG,SAAS,CAAA,uBAAA,GAA2B;QACzD;;;;SAIA,GACQ,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QACrC;;;;SAIA,GACQ,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QACrC;;;;SAIA,GACQ,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;IAC9C,CAAK;IACL;;;;;;KAMA,GACI,sBAAsB,GAAG;QACrB,IAAI,IAAI,CAAC,mBAAmB,KAAK,CAAC,EAAE;YAChC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;YAC1D,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,sBAAsB,CAAA,8BAAA,KAAmC,uBAAuB,EAAE,MAAM;gBAC9I,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;gBAC7B,IAAI,CAAC,kCAAkC,CAAC,CAAC,8BAA8B,EAAE,uBAAuB,GAAG,IAAI,CAAC,CAAC,CAAC,GACtG,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,eAAe,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;gBAC1E,8DAAA;gBACA,iEAAA;gBACA,2BAAA;gBACgB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;YACzC,CAAa,CAAC,CAAC;QACf,CAAS;IACT,CAAK;IACL;;;;;KAKA,GACI,wBAAwB,CAAC,KAAK,EAAE;QAC5B,IAAI,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAA,sBAAA,KAA2B;YAClD,IAAI,CAAC,eAAe,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;QACtE,CAAS,MACI;YACD,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3B,IAAI,IAAI,CAAC,mBAAmB,IAAI,yBAAyB,EAAE;gBACvD,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAC7B,IAAI,CAAC,kCAAkC,CAAC,CAAC,kBAAkB,EAAE,yBAAyB,CAAC,CAAC,CAAC,GACrF,CAAC,0BAA0B,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;gBACrD,IAAI,CAAC,eAAe,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;YAC1E,CAAa;QACb,CAAS;IACT,CAAK;IACL;;;;;;KAMA,GACI,GAAG,CAAC,QAAQ,EAAE;QACV,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAC7B,IAAI,QAAQ,KAAK,QAAQ,CAAA,sBAAA,KAA2B;YAC5D,mEAAA;YACA,qCAAA;YACY,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;QACnD,CAAS;QACD,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAK;IACD,eAAe,CAAC,QAAQ,EAAE;QACtB,IAAI,QAAQ,KAAK,IAAI,CAAC,KAAK,EAAE;YACzB,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;YACtB,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAC9C,CAAS;IACT,CAAK;IACD,kCAAkC,CAAC,OAAO,EAAE;QACxC,MAAM,OAAO,GAAG,CAAC,yCAAyC,EAAE,OAAO,CAAC,EAAE,CAAC,GACnE,CAAC,kEAAkE,CAAC,GACpE,CAAC,sEAAsE,CAAC,GACxE,CAAC,6DAA6D,CAAC,CAAC;QACpE,IAAI,IAAI,CAAC,yBAAyB,EAAE;YAChC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAClB,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;QACnD,CAAS,MACI;YACD,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACzC,CAAS;IACT,CAAK;IACD,qBAAqB,GAAG;QACpB,IAAI,IAAI,CAAC,gBAAgB,KAAK,IAAI,EAAE;YAChC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;YAC/B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QACzC,CAAS;IACT,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,aAAa,CAAC;AAChC,oDAAA;AACA,MAAM,kBAAkB,GAAG,EAAE,CAAC;AAC9B,MAAM,eAAe,CAAC;IAClB,WAAW,CACf;;KAEA,GACI,UAAU,EACd,4DAAA,GACI,SAAS,EAAE,UAAU,EAAE,kBAAkB,EAAE,mBAAmB,CAAE;QAC5D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,CAAA,CAAE,CAAC;QAC/B;;;;;;;;;;;;;;;;SAgBA,GACQ,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QAChC;;;;;;;;SAQA,GACQ,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;QACvC;;;SAGA,GACQ,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;QACvC;;;;;;SAMA,GACQ,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK;YACxC,UAAU,CAAC,gBAAgB,CAAC,YAAY;gBACpD,uEAAA;gBACA,qEAAA;gBACA,oBAAA;gBACgB,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;oBACrB,QAAQ,CAAC,SAAS,EAAE,qDAAqD,CAAC,CAAC;oBAC3E,MAAM,cAAc,CAAC,IAAI,CAAC,CAAC;gBAC/C,CAAiB;YACjB,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;QACH,IAAI,CAAC,kBAAkB,GAAG,IAAI,kBAAkB,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;IACzF,CAAK;AACL,CAAC;AACD,SAAS,cAAc,CAAC,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,kBAAkB,EAAE,mBAAmB,EAAE;IAChG,OAAO,IAAI,eAAe,CAAC,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,CAAC;AAC3G,CAAC;AACD,wCAAA,GACA,SAAS,wBAAwB,CAAC,WAAW,EAAE;IAC3C,MAAM,eAAe,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;IAC/C,eAAe,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAA,6BAAA,GAAiC,CAAC;IACxE,OAAO,qBAAqB,CAAC,eAAe,CAAC,CAAC;AAClD,CAAC;AACD,eAAe,qBAAqB,CAAC,eAAe,EAAE;IAClD,IAAI,aAAa,CAAC,eAAe,CAAC,EAAE;QAChC,KAAK,MAAM,oBAAoB,IAAI,eAAe,CAAC,qBAAqB,CAAE;YACtE,MAAM,oBAAoB,CAAA,YAAA,GAAgB,IAAI,CAAC,CAAC;QAC5D,CAAS;IACT,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,eAAe,yBAAyB,CAAC,WAAW,EAAE;IAClD,MAAM,eAAe,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;IAC/C,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAA,6BAAA,GAAiC,CAAC;IACrE,MAAM,sBAAsB,CAAC,eAAe,CAAC,CAAC;IAClD,mEAAA;IACI,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;AAChF,CAAC;AACD,eAAe,sBAAsB,CAAC,eAAe,EAAE;IACnD,KAAK,MAAM,oBAAoB,IAAI,eAAe,CAAC,qBAAqB,CAAE;QACtE,MAAM,oBAAoB,CAAA,YAAA,GAAgB,KAAK,CAAC,CAAC;IACzD,CAAK;AACL,CAAC;AACD,eAAe,mBAAmB,CAAC,WAAW,EAAE;IAC5C,MAAM,eAAe,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;IAC/C,QAAQ,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC;IAClD,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAA,yBAAA,GAA6B,CAAC;IACjE,MAAM,sBAAsB,CAAC,eAAe,CAAC,CAAC;IAC9C,eAAe,CAAC,mBAAmB,CAAC,QAAQ,EAAE,CAAC;IACnD,4EAAA;IACA,6DAAA;IACI,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;AAChF,CAAC;AACD;;;CAGA,GACA,SAAS,iBAAiB,CAAC,WAAW,EAAE,UAAU,EAAE;IAChD,MAAM,eAAe,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;IAC/C,IAAI,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;QACxD,OAAO;IACf,CAAK;IACL,gEAAA;IACI,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACnE,IAAI,sBAAsB,CAAC,eAAe,CAAC,EAAE;QACjD,+CAAA;QACQ,gBAAgB,CAAC,eAAe,CAAC,CAAC;IAC1C,CAAK,MACI,IAAI,iBAAiB,CAAC,eAAe,CAAC,CAAC,MAAM,EAAE,EAAE;QAClD,gBAAgB,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;IACtD,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,mBAAmB,CAAC,WAAW,EAAE,QAAQ,EAAE;IAChD,MAAM,eAAe,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;IAC/C,MAAM,WAAW,GAAG,iBAAiB,CAAC,eAAe,CAAC,CAAC;IACvD,eAAe,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC/C,IAAI,WAAW,CAAC,MAAM,EAAE,EAAE;QACtB,kBAAkB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAK;IACD,IAAI,eAAe,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,EAAE;QAC1C,IAAI,WAAW,CAAC,MAAM,EAAE,EAAE;YACtB,WAAW,CAAC,QAAQ,EAAE,CAAC;QACnC,CAAS,MACI,IAAI,aAAa,CAAC,eAAe,CAAC,EAAE;YACjD,uEAAA;YACA,iEAAA;YACA,sEAAA;YACY,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;QACxF,CAAS;IACT,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,gBAAgB,CAAC,eAAe,EAAE,UAAU,EAAE;IACnD,eAAe,CAAC,qBAAqB,CAAC,0BAA0B,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACtF,IAAI,UAAU,CAAC,WAAW,CAAC,mBAAmB,EAAE,GAAG,CAAC,IAChD,UAAU,CAAC,eAAe,CAAC,SAAS,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE;QACjE,MAAM,aAAa,GAAG,eAAe,CAAC,YAAY,CAAC,sBAAsB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;QACpG,UAAU,GAAG,UAAU,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;IACjE,CAAK;IACD,iBAAiB,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AACzD,CAAC;AACD;;;;CAIA,GACA,SAAS,kBAAkB,CAAC,eAAe,EAAE,QAAQ,EAAE;IACnD,eAAe,CAAC,qBAAqB,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;IAC3E,iBAAiB,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACzD,CAAC;AACD,SAAS,gBAAgB,CAAC,eAAe,EAAE;IACvC,eAAe,CAAC,qBAAqB,GAAG,IAAI,qBAAqB,CAAC;QAC9D,sBAAsB,GAAE,QAAQ,GAAI,eAAe,CAAC,YAAY,CAAC,sBAAsB,CAAC,QAAQ,CAAC;QACjG,sBAAsB,EAAE,QAAQ,IAAI,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI;QACvF,aAAa,EAAE,IAAM,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU;IAC5E,CAAK,CAAC,CAAC;IACH,iBAAiB,CAAC,eAAe,CAAC,CAAC,KAAK,EAAE,CAAC;IAC3C,eAAe,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,CAAC;AAChE,CAAC;AACD;;;CAGA,GACA,SAAS,sBAAsB,CAAC,eAAe,EAAE;IAC7C,OAAQ,aAAa,CAAC,eAAe,CAAC,IAClC,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC,SAAS,EAAE,IAC/C,eAAe,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,EAAE;AAChD,CAAC;AACD,SAAS,aAAa,CAAC,WAAW,EAAE;IAChC,MAAM,eAAe,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;IAC/C,OAAO,eAAe,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,CAAC;AACpD,CAAC;AACD,SAAS,uBAAuB,CAAC,eAAe,EAAE;IAC9C,eAAe,CAAC,qBAAqB,GAAG,SAAS,CAAC;AACtD,CAAC;AACD,eAAe,iBAAiB,CAAC,eAAe,EAAE;IAC9C,eAAe,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,QAAQ,KAAK;QAC5D,gBAAgB,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;IACtD,CAAK,CAAC,CAAC;AACP,CAAC;AACD,eAAe,kBAAkB,CAAC,eAAe,EAAE,KAAK,EAAE;IACtD,uBAAuB,CAAC,eAAe,CAAC,CAAC;IAC7C,2DAAA;IACI,IAAI,sBAAsB,CAAC,eAAe,CAAC,EAAE;QACzC,eAAe,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;QACnE,gBAAgB,CAAC,eAAe,CAAC,CAAC;IAC1C,CAAK,MACI;QACT,uEAAA;QACA,wEAAA;QACA,+BAAA;QACQ,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;IACpF,CAAK;AACL,CAAC;AACD,eAAe,mBAAmB,CAAC,eAAe,EAAE,WAAW,EAAE,eAAe,EAAE;IAClF,mEAAA;IACI,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAA,sBAAA,GAA0B,CAAC;IAC1E,IAAI,WAAW,YAAY,iBAAiB,IACxC,WAAW,CAAC,KAAK,KAAK,CAAC,CAAA,kCAAA,OACvB,WAAW,CAAC,KAAK,EAAE;QAC3B,uEAAA;QACA,kBAAA;QACQ,IAAI;YACA,MAAM,iBAAiB,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QAClE,CAAS,CACD,OAAO,CAAC,EAAE;YACN,QAAQ,CAAC,SAAS,EAAE,kCAAkC,EAAE,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5F,MAAM,2BAA2B,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAClE,CAAS;QACD,OAAO;IACf,CAAK;IACD,IAAI,WAAW,YAAY,mBAAmB,EAAE;QAC5C,eAAe,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;IAChF,CAAK,MACI,IAAI,WAAW,YAAY,qBAAqB,EAAE;QACnD,eAAe,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;IACjF,CAAK,MACI;QACD,eAAe,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;IAC9E,CAAK;IACD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE;QACjD,IAAI;YACA,MAAM,yBAAyB,GAAG,MAAM,sCAAsC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAC3G,IAAI,eAAe,CAAC,SAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAE;gBAC3E,0EAAA;gBACA,iDAAA;gBACgB,MAAM,kBAAkB,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;YAC3E,CAAa;QACb,CAAS,CACD,OAAO,CAAC,EAAE;YACN,QAAQ,CAAC,SAAS,EAAE,2BAA2B,EAAE,CAAC,CAAC,CAAC;YACpD,MAAM,2BAA2B,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAClE,CAAS;IACT,CAAK;AACL,CAAC;AACD;;;;;;;;CAQA,GACA,eAAe,2BAA2B,CAAC,eAAe,EAAE,CAAC,EAAE,EAAE,EAAE;IAC/D,IAAI,2BAA2B,CAAC,CAAC,CAAC,EAAE;QAChC,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAA,gCAAA,GAAoC,CAAC;QAChF,8CAAA;QACQ,MAAM,sBAAsB,CAAC,eAAe,CAAC,CAAC;QAC9C,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;QAC5E,IAAI,CAAC,EAAE,EAAE;YACjB,mEAAA;YACA,oEAAA;YACA,iEAAA;YACY,EAAE,GAAG,IAAM,sCAAsC,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC1F,CAAS;QACT,qDAAA;QACQ,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;YACpD,QAAQ,CAAC,SAAS,EAAE,2BAA2B,CAAC,CAAC;YACjD,MAAM,EAAE,EAAE,CAAC;YACX,eAAe,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAA,gCAAA,GAAoC,CAAC;YAC3E,MAAM,qBAAqB,CAAC,eAAe,CAAC,CAAC;QACzD,CAAS,CAAC,CAAC;IACX,CAAK,MACI;QACD,MAAM,CAAC,CAAC;IAChB,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,mBAAmB,CAAC,eAAe,EAAE,EAAE,EAAE;IAC9C,OAAO,EAAE,EAAE,CAAC,KAAK,EAAC,CAAC,GAAI,2BAA2B,CAAC,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAChF,CAAC;AACD;;;;CAIA,GACA,SAAS,kBAAkB,CAAC,eAAe,EAAE,eAAe,EAAE;IAC1D,MAAM,WAAW,GAAG,eAAe,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;IACjG,6DAAA;IACA,oEAAA;IACI,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,QAAQ,KAAK;QACpD,IAAI,MAAM,CAAC,WAAW,CAAC,mBAAmB,EAAE,GAAG,CAAC,EAAE;YAC9C,MAAM,UAAU,GAAG,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC3E,oDAAA;YACY,IAAI,UAAU,EAAE;gBACZ,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC,CAAC;YAC7H,CAAa;QACb,CAAS;IACT,CAAK,CAAC,CAAC;IACP,qEAAA;IACA,+BAAA;IACI,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,aAAa,KAAK;QAC9D,MAAM,UAAU,GAAG,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/D,IAAI,CAAC,UAAU,EAAE;YACzB,oDAAA;YACY,OAAO;QACnB,CAAS;QACT,yEAAA;QACA,SAAA;QACQ,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,eAAe,CAAC,UAAU,CAAC,iBAAiB,EAAE,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;QAC1I,mEAAA;QACA,uEAAA;QACQ,kBAAkB,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;QACtD,oEAAA;QACA,0EAAA;QACA,qEAAA;QACA,gEAAA;QACQ,MAAM,iBAAiB,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,EAAE,QAAQ,EAAE,aAAa,EAAE,UAAU,CAAC,cAAc,CAAC,CAAC;QAChH,gBAAgB,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC;IAC7D,CAAK,CAAC,CAAC;IACH,OAAO,eAAe,CAAC,YAAY,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;AACtE,CAAC;AACD,iCAAA,GACA,eAAe,iBAAiB,CAAC,eAAe,EAAE,WAAW,EAAE;IAC3D,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;IAChC,KAAK,MAAM,QAAQ,IAAI,WAAW,CAAC,SAAS,CAAE;QAClD,oDAAA;QACQ,IAAI,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAC7C,MAAM,eAAe,CAAC,YAAY,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACjE,eAAe,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC/C,eAAe,CAAC,qBAAqB,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACzE,CAAS;IACT,CAAK;AACL,CAAC;AACD;;;;;;;CAOA,GACA,eAAe,iBAAiB,CAAC,WAAW,EAAE;IAC1C,MAAM,eAAe,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;IAC/C,MAAM,WAAW,GAAG,iBAAiB,CAAC,eAAe,CAAC,CAAC;IACvD,IAAI,oBAAoB,GAAG,eAAe,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,GAC7D,eAAe,CAAC,aAAa,CAAC,eAAe,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CACpE,OAAO,GACV,eAAe,CAAC;IACtB,MAAO,qBAAqB,CAAC,eAAe,CAAC,CAAE;QAC3C,IAAI;YACA,MAAM,KAAK,GAAG,MAAM,8BAA8B,CAAC,eAAe,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC;YACrG,IAAI,KAAK,KAAK,IAAI,EAAE;gBAChB,IAAI,eAAe,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC5C,WAAW,CAAC,QAAQ,EAAE,CAAC;gBAC3C,CAAiB;gBACD,MAAM;YACtB,CAAa,MACI;gBACD,oBAAoB,GAAG,KAAK,CAAC,OAAO,CAAC;gBACrC,kBAAkB,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;YAC3D,CAAa;QACb,CAAS,CACD,OAAO,CAAC,EAAE;YACN,MAAM,2BAA2B,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QAClE,CAAS;IACT,CAAK;IACD,IAAI,sBAAsB,CAAC,eAAe,CAAC,EAAE;QACzC,gBAAgB,CAAC,eAAe,CAAC,CAAC;IAC1C,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,qBAAqB,CAAC,eAAe,EAAE;IAC5C,OAAQ,aAAa,CAAC,eAAe,CAAC,IAClC,eAAe,CAAC,aAAa,CAAC,MAAM,GAAG,kBAAkB,EAAE;AACnE,CAAC;AACD;;;CAGA,GACA,SAAS,kBAAkB,CAAC,eAAe,EAAE,KAAK,EAAE;IAChD,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1C,MAAM,WAAW,GAAG,iBAAiB,CAAC,eAAe,CAAC,CAAC;IACvD,IAAI,WAAW,CAAC,MAAM,EAAE,IAAI,WAAW,CAAC,iBAAiB,EAAE;QACvD,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACpD,CAAK;AACL,CAAC;AACD,SAAS,sBAAsB,CAAC,eAAe,EAAE;IAC7C,OAAQ,aAAa,CAAC,eAAe,CAAC,IAClC,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC,SAAS,EAAE,IAC/C,eAAe,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;AAClD,CAAC;AACD,SAAS,gBAAgB,CAAC,eAAe,EAAE;IACvC,iBAAiB,CAAC,eAAe,CAAC,CAAC,KAAK,EAAE,CAAC;AAC/C,CAAC;AACD,eAAe,iBAAiB,CAAC,eAAe,EAAE;IAC9C,iBAAiB,CAAC,eAAe,CAAC,CAAC,cAAc,EAAE,CAAC;AACxD,CAAC;AACD,eAAe,wBAAwB,CAAC,eAAe,EAAE;IACrD,MAAM,WAAW,GAAG,iBAAiB,CAAC,eAAe,CAAC,CAAC;IAC3D,8DAAA;IACI,KAAK,MAAM,KAAK,IAAI,eAAe,CAAC,aAAa,CAAE;QAC/C,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACpD,CAAK;AACL,CAAC;AACD,eAAe,gBAAgB,CAAC,eAAe,EAAE,aAAa,EAAE,OAAO,EAAE;IACrE,MAAM,KAAK,GAAG,eAAe,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IACpD,MAAM,OAAO,GAAG,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACxE,MAAM,mBAAmB,CAAC,eAAe,EAAE,IAAM,eAAe,CAAC,YAAY,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;IACjH,kEAAA;IACA,qBAAA;IACI,MAAM,iBAAiB,CAAC,eAAe,CAAC,CAAC;AAC7C,CAAC;AACD,eAAe,kBAAkB,CAAC,eAAe,EAAE,KAAK,EAAE;IAC1D,0EAAA;IACA,sDAAA;IACI,IAAI,KAAK,IAAI,iBAAiB,CAAC,eAAe,CAAC,CAAC,iBAAiB,EAAE;QACvE,uCAAA;QACQ,MAAM,gBAAgB,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IACvD,CAAK;IACL,kEAAA;IACA,6BAAA;IACI,IAAI,sBAAsB,CAAC,eAAe,CAAC,EAAE;QACzC,gBAAgB,CAAC,eAAe,CAAC,CAAC;IAC1C,CAAK;AACL,CAAC;AACD,eAAe,gBAAgB,CAAC,eAAe,EAAE,KAAK,EAAE;IACxD,2EAAA;IACA,iBAAA;IACI,IAAI,qBAAqB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QAC3C,iEAAA;QACA,gDAAA;QACQ,MAAM,KAAK,GAAG,eAAe,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAC5D,oEAAA;QACA,qEAAA;QACA,WAAA;QACQ,iBAAiB,CAAC,eAAe,CAAC,CAAC,cAAc,EAAE,CAAC;QACpD,MAAM,mBAAmB,CAAC,eAAe,EAAE,IAAM,eAAe,CAAC,YAAY,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAC/H,0DAAA;QACA,6BAAA;QACQ,MAAM,iBAAiB,CAAC,eAAe,CAAC,CAAC;IACjD,CAAK;AACL,CAAC;AACD,eAAe,cAAc,CAAC,WAAW,EAAE;IACvC,MAAM,eAAe,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;IAC/C,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAA,mCAAA,GAAuC,CAAC;IAC3E,MAAM,sBAAsB,CAAC,eAAe,CAAC,CAAC;IAC9C,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;IAC5E,eAAe,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAA,mCAAA,GAAuC,CAAC;IAC9E,MAAM,qBAAqB,CAAC,eAAe,CAAC,CAAC;AACjD,CAAC;AACD,eAAe,iCAAiC,CAAC,WAAW,EAAE,IAAI,EAAE;IAChE,MAAM,eAAe,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;IAC/C,eAAe,CAAC,UAAU,CAAC,yBAAyB,EAAE,CAAC;IACvD,QAAQ,CAAC,SAAS,EAAE,sCAAsC,CAAC,CAAC;IAC5D,MAAM,WAAW,GAAG,aAAa,CAAC,eAAe,CAAC,CAAC;IACvD,yEAAA;IACA,wEAAA;IACA,oEAAA;IACI,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAA,iCAAA,GAAqC,CAAC;IACzE,MAAM,sBAAsB,CAAC,eAAe,CAAC,CAAC;IAC9C,IAAI,WAAW,EAAE;QACrB,6DAAA;QACQ,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;IACpF,CAAK;IACD,MAAM,eAAe,CAAC,YAAY,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IAChE,eAAe,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAA,iCAAA,GAAqC,CAAC;IAC5E,MAAM,qBAAqB,CAAC,eAAe,CAAC,CAAC;AACjD,CAAC;AACD;;CAEA,GACA,eAAe,4BAA4B,CAAC,WAAW,EAAE,SAAS,EAAE;IAChE,MAAM,eAAe,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;IAC/C,IAAI,SAAS,EAAE;QACX,eAAe,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAA,4BAAA,GAAgC,CAAC;QACvE,MAAM,qBAAqB,CAAC,eAAe,CAAC,CAAC;IACrD,CAAK,MACI,IAAI,CAAC,SAAS,EAAE;QACjB,eAAe,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAA,4BAAA,GAAgC,CAAC;QACpE,MAAM,sBAAsB,CAAC,eAAe,CAAC,CAAC;QAC9C,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;IACpF,CAAK;AACL,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,iBAAiB,CAAC,eAAe,EAAE;IACxC,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE;QACtC,uDAAA;QACQ,eAAe,CAAC,WAAW,GAAG,wBAAwB,CAAC,eAAe,CAAC,SAAS,EAAE,eAAe,CAAC,UAAU,EAAE;YAC1G,MAAM,EAAE,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC;YACrD,OAAO,EAAE,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC;YACvD,aAAa,EAAE,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC;QAC1E,CAAS,CAAC,CAAC;QACH,eAAe,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,OAAO,KAAK;YAC1D,IAAI,OAAO,EAAE;gBACT,eAAe,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;gBAC7C,IAAI,sBAAsB,CAAC,eAAe,CAAC,EAAE;oBACzC,gBAAgB,CAAC,eAAe,CAAC,CAAC;gBACtD,CAAiB,MACI;oBACD,eAAe,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAA,uBAAA,GAA2B,CAAC;gBAChG,CAAiB;YACjB,CAAa,MACI;gBACD,MAAM,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;gBACzC,uBAAuB,CAAC,eAAe,CAAC,CAAC;YACzD,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,OAAO,eAAe,CAAC,WAAW,CAAC;AACvC,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,iBAAiB,CAAC,eAAe,EAAE;IACxC,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE;QACtC,uDAAA;QACQ,eAAe,CAAC,WAAW,GAAG,wBAAwB,CAAC,eAAe,CAAC,SAAS,EAAE,eAAe,CAAC,UAAU,EAAE;YAC1G,MAAM,EAAE,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC;YACrD,OAAO,EAAE,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC;YACvD,mBAAmB,EAAE,wBAAwB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC;YACzE,gBAAgB,EAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC;QAC1E,CAAS,CAAC,CAAC;QACH,eAAe,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,OAAO,KAAK;YAC1D,IAAI,OAAO,EAAE;gBACT,eAAe,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;gBAC7D,iDAAA;gBACgB,MAAM,iBAAiB,CAAC,eAAe,CAAC,CAAC;YACzD,CAAa,MACI;gBACD,MAAM,eAAe,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;gBACzC,IAAI,eAAe,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC1C,QAAQ,CAAC,SAAS,EAAE,CAAC,2BAA2B,EAAE,eAAe,CAAC,aAAa,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;oBACzG,eAAe,CAAC,aAAa,GAAG,EAAE,CAAC;gBACvD,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,OAAO,eAAe,CAAC,WAAW,CAAC;AACvC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,YAAY,CAAC;AAC/B;;;;;;;;;;CAUA,GACA,MAAM,gBAAgB,CAAC;IACnB,WAAW,CAAC,UAAU,EAAE,OAAO,EAAE,YAAY,EAAE,EAAE,EAAE,eAAe,CAAE;QAChE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC3E,4EAAA;QACA,mDAAA;QACA,+CAAA;QACQ,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAC,GAAG,IAAI,CAAG,CAAC,CAAC;IAChD,CAAK;IACL;;;;;;;;;;;;;KAaA,GACI,OAAO,iBAAiB,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,eAAe,EAAE;QACxE,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC;QACxC,MAAM,SAAS,GAAG,IAAI,gBAAgB,CAAC,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,eAAe,CAAC,CAAC;QAC7F,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACzB,OAAO,SAAS,CAAC;IACzB,CAAK;IACL;;;KAGA,GACI,KAAK,CAAC,OAAO,EAAE;QACX,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,IAAM,IAAI,CAAC,kBAAkB,EAAE,EAAE,OAAO,CAAC,CAAC;IAChF,CAAK;IACL;;;KAGA,GACI,SAAS,GAAG;QACR,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC;IACzC,CAAK;IACL;;;;;;KAMA,GACI,MAAM,CAAC,MAAM,EAAE;QACX,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;YAC3B,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,qBAAqB,GAAA,CAAI,MAAM,GAAG,IAAI,GAAG,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5H,CAAS;IACT,CAAK;IACD,kBAAkB,GAAG;QACjB,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,MAAM;YACnC,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;gBAC3B,IAAI,CAAC,YAAY,EAAE,CAAC;gBACpB,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,EAAC,MAAM,IAAI;oBAC5B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACzD,CAAiB,CAAC,CAAC;YACnB,CAAa,MACI;gBACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;YACzC,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,YAAY,GAAG;QACX,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;YAC3B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC3B,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACpC,CAAS;IACT,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,4BAA4B,CAAC,CAAC,EAAE,GAAG,EAAE;IAC1C,QAAQ,CAAC,SAAS,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,IAAI,2BAA2B,CAAC,CAAC,CAAC,EAAE;QAChC,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,CAAK,MACI;QACD,MAAM,CAAC,CAAC;IAChB,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;CAKA,GACA,MAAM,WAAW,CAAC;IAClB,gEAAA,GACI,WAAW,CAAC,IAAI,CAAE;QACtB,oEAAA;QACA,4CAAA;QACQ,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,GAAK,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;QACjG,CAAS,MACI;YACD,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,GAAK,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;QACjF,CAAS;QACD,IAAI,CAAC,QAAQ,GAAG,WAAW,EAAE,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACxD,CAAK;IACL;;;KAGA,GACI,OAAO,QAAQ,CAAC,MAAM,EAAE;QACpB,OAAO,IAAI,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAClD,CAAK;IACD,GAAG,CAAC,GAAG,EAAE;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC;IAC9C,CAAK;IACD,GAAG,CAAC,GAAG,EAAE;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACtC,CAAK;IACD,KAAK,GAAG;QACJ,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IACvC,CAAK;IACD,IAAI,GAAG;QACH,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IACvC,CAAK;IACD,OAAO,GAAG;QACN,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IACxC,CAAK;IACL;;;KAGA,GACI,OAAO,CAAC,GAAG,EAAE;QACT,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnC,OAAO,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,CAAK;IACD,IAAI,IAAI,GAAG;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;IACnC,CAAK;IACL,wDAAA,GACI,OAAO,CAAC,EAAE,EAAE;QACR,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;YACtC,EAAE,CAAC,CAAC,CAAC,CAAC;YACN,OAAO,KAAK,CAAC;QACzB,CAAS,CAAC,CAAC;IACX,CAAK;IACL,oDAAA,GACI,GAAG,CAAC,GAAG,EAAE;QACb,0CAAA;QACQ,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjC,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;IAC5F,CAAK;IACL,wCAAA,GACI,MAAM,CAAC,GAAG,EAAE;QACR,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,GAAG,EAAE;YACN,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IAChF,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,IAAI,CAAA,CAAE,KAAK,YAAY,WAAW,CAAC,EAAE;YACjC,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;YAC1B,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QAC5C,MAAM,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QAC9C,MAAO,MAAM,CAAC,OAAO,EAAE,CAAE;YACrB,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACrC,MAAM,QAAQ,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACvC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC5B,OAAO,KAAK,CAAC;YAC7B,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,QAAQ,GAAG;QACP,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,OAAO,EAAC,GAAG,IAAI;YAChB,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5C,CAAS,CAAC,CAAC;QACH,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YACzB,OAAO,gBAAgB,CAAC;QACpC,CAAS,MACI;YACD,OAAO,mBAAmB,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QACzE,CAAS;IACT,CAAK;IACD,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE;QACtB,MAAM,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;QACjC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACpC,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC3B,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC;QAC7B,OAAO,MAAM,CAAC;IACtB,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,iBAAiB,CAAC;IACpB,WAAW,EAAG;QACV,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IAC/D,CAAK;IACD,KAAK,CAAC,MAAM,EAAE;QACV,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC;QAC3B,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC1C,IAAI,CAAC,SAAS,EAAE;YACZ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YACpD,OAAO;QACnB,CAAS;QACT,iDAAA;QACQ,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,CAAA,oBAAA,OACjB,SAAS,CAAC,IAAI,KAAK,CAAC,CAAA,uBAAA,KAA4B;YAChD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAChE,CAAS,MACI,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,CAAA,uBAAA,OACtB,SAAS,CAAC,IAAI,KAAK,CAAC,CAAA,sBAAA,KAA2B;YAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE;gBACxC,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,GAAG,EAAE,MAAM,CAAC,GAAG;YAC/B,CAAa,CAAC,CAAC;QACf,CAAS,MACI,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,CAAA,uBAAA,OACtB,SAAS,CAAC,IAAI,KAAK,CAAC,CAAA,uBAAA,KAA4B;YAChD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE;gBACxC,IAAI,EAAE,CAAC,CAAA,uBAAA;gBACP,GAAG,EAAE,MAAM,CAAC,GAAG;YAC/B,CAAa,CAAC,CAAC;QACf,CAAS,MACI,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,CAAA,uBAAA,OACtB,SAAS,CAAC,IAAI,KAAK,CAAC,CAAA,oBAAA,KAAyB;YAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE;gBACxC,IAAI,EAAE,CAAC,CAAA,oBAAA;gBACP,GAAG,EAAE,MAAM,CAAC,GAAG;YAC/B,CAAa,CAAC,CAAC;QACf,CAAS,MACI,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,CAAA,sBAAA,OACtB,SAAS,CAAC,IAAI,KAAK,CAAC,CAAA,oBAAA,KAAyB;YAC7C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACxD,CAAS,MACI,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,CAAA,sBAAA,OACtB,SAAS,CAAC,IAAI,KAAK,CAAC,CAAA,uBAAA,KAA4B;YAChD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE;gBACxC,IAAI,EAAE,CAAC,CAAA,sBAAA;gBACP,GAAG,EAAE,SAAS,CAAC,GAAG;YAClC,CAAa,CAAC,CAAC;QACf,CAAS,MACI,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,CAAA,oBAAA,OACtB,SAAS,CAAC,IAAI,KAAK,CAAC,CAAA,sBAAA,KAA2B;YAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE;gBACxC,IAAI,EAAE,CAAC,CAAA,uBAAA;gBACP,GAAG,EAAE,MAAM,CAAC,GAAG;YAC/B,CAAa,CAAC,CAAC;QACf,CAAS,MACI;YACb,qDAAA;YACA,eAAA;YACA,mBAAA;YACA,kBAAA;YACA,oBAAA;YACA,kBAAA;YACA,oBAAA;YACY,IAAI,EAAE,CAAC;QACnB,CAAS;IACT,CAAK;IACD,UAAU,GAAG;QACT,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,GAAG,EAAE,MAAM,KAAK;YAC7C,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACjC,CAAS,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACvB,CAAK;AACL,CAAC;AACD,MAAM,YAAY,CAAC;IACf,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,gBAAgB,EAAE,uBAAuB,EAAE,gBAAgB,CAAE;QAC/H,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACvD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IACjD,CAAK;IACL,4EAAA,GACI,OAAO,oBAAoB,CAAC,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,gBAAgB,EAAE;QACpF,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,SAAS,CAAC,OAAO,EAAC,GAAG,IAAI;YACrB,OAAO,CAAC,IAAI,CAAC;gBAAE,IAAI,EAAE,CAAC,CAAA,oBAAA;gBAAyB,GAAG;YAAA,CAAE,CAAC,CAAC;QAClE,CAAS,CAAC,CAAC;QACH,OAAO,IAAI,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAClH,qBAAA,GAAgC,IAAI,EACpC,4BAAA,GAAuC,KAAK,EAAE,gBAAgB,CAAC,CAAC;IAChE,CAAK;IACD,IAAI,gBAAgB,GAAG;QACnB,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IAC3C,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,IAClC,IAAI,CAAC,gBAAgB,KAAK,KAAK,CAAC,gBAAgB,IAChD,IAAI,CAAC,gBAAgB,KAAK,KAAK,CAAC,gBAAgB,IAChD,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,IAC5C,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,IACrC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAC9B,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;YACtC,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;QAChC,MAAM,YAAY,GAAG,KAAK,CAAC,UAAU,CAAC;QACtC,IAAI,OAAO,CAAC,MAAM,KAAK,YAAY,CAAC,MAAM,EAAE;YACxC,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;YACrC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,IACxC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;gBAC9C,OAAO,KAAK,CAAC;YAC7B,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,kBAAkB,CAAC;IACrB,WAAW,EAAG;QACV,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IAC5B,CAAK;AACL,CAAC;AACD,SAAS,eAAe,GAAG;IACvB,OAAO,IAAI,gBAAgB,EAAE,CAAC;AAClC,CAAC;AACD,MAAM,gBAAgB,CAAC;IACnB,WAAW,EAAG;QACV,IAAI,CAAC,OAAO,GAAG,IAAI,SAAS,EAAC,CAAC,GAAI,aAAa,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QACjE,IAAI,CAAC,WAAW,GAAG,SAAS,CAAA,uBAAA,GAA2B;QACvD,IAAI,CAAC,wBAAwB,GAAG,IAAI,GAAG,EAAE,CAAC;IAClD,CAAK;AACL,CAAC;AACD,eAAe,kBAAkB,CAAC,YAAY,EAAE,QAAQ,EAAE;IACtD,MAAM,gBAAgB,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;IACjD,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;IAC7B,IAAI,WAAW,GAAG,KAAK,CAAC;IACxB,IAAI,SAAS,GAAG,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACpD,IAAI,CAAC,SAAS,EAAE;QACZ,WAAW,GAAG,IAAI,CAAC;QACnB,SAAS,GAAG,IAAI,kBAAkB,EAAE,CAAC;IAC7C,CAAK;IACD,IAAI,WAAW,EAAE;QACb,IAAI;YACA,SAAS,CAAC,QAAQ,GAAG,MAAM,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACxE,CAAS,CACD,OAAO,CAAC,EAAE;YACN,MAAM,cAAc,GAAG,4BAA4B,CAAC,CAAC,EAAE,CAAC,yBAAyB,EAAE,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7H,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YACjC,OAAO;QACnB,CAAS;IACT,CAAK;IACD,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IAC/C,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvC,2EAAA;IACI,QAAQ,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;IAC9D,IAAI,SAAS,CAAC,QAAQ,EAAE;QACpB,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAChE,IAAI,WAAW,EAAE;YACb,yBAAyB,CAAC,gBAAgB,CAAC,CAAC;QACxD,CAAS;IACT,CAAK;AACL,CAAC;AACD,eAAe,oBAAoB,CAAC,YAAY,EAAE,QAAQ,EAAE;IACxD,MAAM,gBAAgB,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;IACjD,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;IAC7B,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,MAAM,SAAS,GAAG,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACtD,IAAI,SAAS,EAAE;QACX,MAAM,CAAC,GAAG,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,CAAC,EAAE;YACR,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACjC,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC;QAC1D,CAAS;IACT,CAAK;IACD,IAAI,UAAU,EAAE;QACZ,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvC,OAAO,gBAAgB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAClD,CAAK;AACL,CAAC;AACD,SAAS,yBAAyB,CAAC,YAAY,EAAE,SAAS,EAAE;IACxD,MAAM,gBAAgB,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;IACjD,IAAI,WAAW,GAAG,KAAK,CAAC;IACxB,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAE;QAC9B,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC7B,MAAM,SAAS,GAAG,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACtD,IAAI,SAAS,EAAE;YACX,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAC,SAAS,CAAE;gBACxC,IAAI,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;oBACnC,WAAW,GAAG,IAAI,CAAC;gBACvC,CAAiB;YACjB,CAAa;YACD,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1C,CAAS;IACT,CAAK;IACD,IAAI,WAAW,EAAE;QACb,yBAAyB,CAAC,gBAAgB,CAAC,CAAC;IACpD,CAAK;AACL,CAAC;AACD,SAAS,wBAAwB,CAAC,YAAY,EAAE,KAAK,EAAE,KAAK,EAAE;IAC1D,MAAM,gBAAgB,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;IACjD,MAAM,SAAS,GAAG,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACtD,IAAI,SAAS,EAAE;QACX,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAC,SAAS,CAAE;YACxC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACpC,CAAS;IACT,CAAK;IACL,0EAAA;IACA,kBAAA;IACI,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC3C,CAAC;AACD,SAAS,+BAA+B,CAAC,YAAY,EAAE,WAAW,EAAE;IAChE,MAAM,gBAAgB,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;IACjD,gBAAgB,CAAC,WAAW,GAAG,WAAW,CAAC;IAC3C,IAAI,WAAW,GAAG,KAAK,CAAC;IACxB,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,SAAS,KAAK;QAC/C,KAAK,MAAM,QAAQ,IAAI,SAAS,CAAC,SAAS,CAAE;YACpD,2EAAA;YACY,IAAI,QAAQ,CAAC,sBAAsB,CAAC,WAAW,CAAC,EAAE;gBAC9C,WAAW,GAAG,IAAI,CAAC;YACnC,CAAa;QACb,CAAS;IACT,CAAK,CAAC,CAAC;IACH,IAAI,WAAW,EAAE;QACb,yBAAyB,CAAC,gBAAgB,CAAC,CAAC;IACpD,CAAK;AACL,CAAC;AACD,SAAS,0BAA0B,CAAC,YAAY,EAAE,QAAQ,EAAE;IACxD,MAAM,gBAAgB,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;IACjD,gBAAgB,CAAC,wBAAwB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC5D,uEAAA;IACA,eAAA;IACI,QAAQ,CAAC,IAAI,EAAE,CAAC;AACpB,CAAC;AACD,SAAS,6BAA6B,CAAC,YAAY,EAAE,QAAQ,EAAE;IAC3D,MAAM,gBAAgB,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC;IACjD,gBAAgB,CAAC,wBAAwB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC/D,CAAC;AACD,yDAAA;AACA,SAAS,yBAAyB,CAAC,gBAAgB,EAAE;IACjD,gBAAgB,CAAC,wBAAwB,CAAC,OAAO,EAAC,QAAQ,IAAI;QAC1D,QAAQ,CAAC,IAAI,EAAE,CAAC;IACxB,CAAK,CAAC,CAAC;AACP,CAAC;AACD;;;;;CAKA,GACA,MAAM,aAAa,CAAC;IAChB,WAAW,CAAC,KAAK,EAAE,aAAa,EAAE,OAAO,CAAE;QACvC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAC3C;;;SAGA,GACQ,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,SAAS,CAAA,uBAAA,GAA2B;QACvD,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,CAAA,CAAE,CAAC;IACrC,CAAK;IACL;;;;;KAKA,GACI,cAAc,CAAC,IAAI,EAAE;QACjB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE;YAClD,oCAAA;YACY,MAAM,UAAU,GAAG,EAAE,CAAC;YACtB,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,CAAE;gBACrC,IAAI,SAAS,CAAC,IAAI,KAAK,CAAC,CAAA,uBAAA,KAA4B;oBAChD,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC/C,CAAiB;YACjB,CAAa;YACD,IAAI,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,gBAAgB,EAC5I,4BAAA,GAA2C,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACxE,CAAS;QACD,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAC1B,IAAI,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE;gBACtD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAC7B,WAAW,GAAG,IAAI,CAAC;YACnC,CAAa;QACb,CAAS,MACI,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;YAClC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9B,WAAW,GAAG,IAAI,CAAC;QAC/B,CAAS;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,OAAO,WAAW,CAAC;IAC3B,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACxC,CAAK;IACL,2CAAA,GACI,sBAAsB,CAAC,WAAW,EAAE;QAChC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,WAAW,GAAG,KAAK,CAAC;QACxB,IAAI,IAAI,CAAC,IAAI,IACT,CAAC,IAAI,CAAC,kBAAkB,IACxB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE;YACtD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClC,WAAW,GAAG,IAAI,CAAC;QAC/B,CAAS;QACD,OAAO,WAAW,CAAC;IAC3B,CAAK;IACD,uBAAuB,CAAC,IAAI,EAAE,WAAW,EAAE;QAC/C,iDAAA;QACQ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,OAAO,IAAI,CAAC;QACxB,CAAS;QACT,4EAAA;QACA,qCAAA;QACQ,MAAM,WAAW,GAAG,WAAW,KAAK,SAAS,CAAA,uBAAA,GAA2B;QAChF,oEAAA;QACA,qCAAA;QACQ,IAAI,IAAI,CAAC,OAAO,CAAC,qBAAqB,IAAI,WAAW,EAAE;YACnD,OAAO,KAAK,CAAC;QACzB,CAAS;QACT,8EAAA;QACA,qBAAA;QACQ,OAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IACxB,IAAI,CAAC,gBAAgB,IACrB,WAAW,KAAK,SAAS,CAAA,uBAAA,IAA4B;IACjE,CAAK;IACD,gBAAgB,CAAC,IAAI,EAAE;QAC3B,sEAAA;QACA,sEAAA;QACA,oEAAA;QACA,aAAA;QACQ,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,MAAM,uBAAuB,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,gBAAgB,CAAC;QAClG,IAAI,IAAI,CAAC,gBAAgB,IAAI,uBAAuB,EAAE;YAClD,OAAO,IAAI,CAAC,OAAO,CAAC,sBAAsB,KAAK,IAAI,CAAC;QAChE,CAAS;QACT,yEAAA;QACA,kEAAA;QACA,gBAAA;QACQ,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,iBAAiB,CAAC,IAAI,EAAE;QACpB,IAAI,GAAG,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACzH,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;CAIA,GACA,MAAM,gBAAgB,CAAC;IACnB,WAAW,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,CAAE;QACrD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACvC,CAAK;IACD,OAAO,YAAY,CAAC,QAAQ,EAAE,YAAY,EAAE;QACxC,IAAI,SAAS,GAAG,cAAc,EAAE,CAAC;QACjC,IAAI,WAAW,GAAG,cAAc,EAAE,CAAC;QACnC,KAAK,MAAM,SAAS,IAAI,YAAY,CAAC,UAAU,CAAE;YAC7C,OAAQ,SAAS,CAAC,IAAI;gBAClB,KAAK,CAAC,CAAA,oBAAA;oBACF,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBAC7C,MAAM;gBACV,KAAK,CAAC,CAAA,sBAAA;oBACF,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACjD,MAAM;YAE1B,CAAa;QACb,CAAS;QACD,OAAO,IAAI,gBAAgB,CAAC,QAAQ,EAAE,YAAY,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;IAC9F,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,MAAM,mBAAmB,CAAC;IACtB,WAAW,CAAC,UAAU,CAAE;QACpB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;IACD,aAAa,CAAC,IAAI,EAAE;QAChB,OAAO,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAK;IACL;;KAEA,GACI,iBAAiB,CAAC,UAAU,EAAE;QAC1B,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE;YAC5B,OAAO,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC7E,CAAS,MACI;YACD,OAAO,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QACrJ,CAAS;IACT,CAAK;IACD,iBAAiB,CAAC,IAAI,EAAE;QACpB,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC;IACjC,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,MAAM,YAAY,CAAC;IACf,WAAW,CAAC,cAAc,EAAE,UAAU,EAAE,UAAU,CAAE;QAChD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QACrC,6CAAA,GACQ,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAC1B,+CAAA,GACQ,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QAC5B,mDAAA,GACQ,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG,qBAAqB,CAAC,cAAc,CAAC,CAAC;IAC9D,CAAK;IACL;;;;;KAKA,GACI,eAAe,CAAC,OAAO,EAAE;QACrB,IAAI,CAAC,QAAQ,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,CAAC;QAChD,IAAI,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC;QACpD,IAAI,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE;YAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC1D,CAAS,MACI,IAAI,OAAO,CAAC,OAAO,CAAC,gBAAgB,EAAE;YACvC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBAAE,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,gBAAgB;YAAA,CAAE,CAAC,CAAC;YACpE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,MAAM,EAAE;gBAC1C,EAAE,eAAe,CAAC;YAClC,CAAa;YACD,MAAM,IAAI,GAAG,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAC5E,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACjE,CAAS,MACI,IAAI,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE;YAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,GAC9C,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC7B,EAAE,eAAe,CAAC;QAC9B,CAAS;QACD,IAAI,eAAe,KAAK,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE;YACnD,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAC;YAChD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpD,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,uBAAuB,CAAC,SAAS,EAAE;QAC/B,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;QACnC,MAAM,eAAe,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACjE,KAAK,MAAM,SAAS,IAAI,SAAS,CAAE;YAC/B,IAAI,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE;gBAC5B,MAAM,WAAW,GAAG,eAAe,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC3E,KAAK,MAAM,SAAS,IAAI,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAE;oBAChD,MAAM,YAAY,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,cAAc,EAAE,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;oBAC5F,gBAAgB,CAAC,GAAG,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;gBAClE,CAAiB;YACjB,CAAa;QACb,CAAS;QACD,OAAO,gBAAgB,CAAC;IAChC,CAAK;IACL;;KAEA,GACI,MAAM,QAAQ,GAAG;QACb,MAAM,WAAW,GAAG,MAAM,+BAA+B,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAC7J,MAAM,gBAAgB,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACtE,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,CAAE;YAC1B,MAAM,wBAAwB,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7F,CAAS;QACD,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;QACpC,OAAO;YACH,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,uBAAuB,EAAE,IAAI,CAAC,gBAAgB;YAC9C,WAAW;QACvB,CAAS,CAAC;IACV,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,qBAAqB,CAAC,QAAQ,EAAE;IACrC,OAAO;QACH,SAAS,EAAE,SAAS;QACpB,eAAe,EAAE,CAAC;QAClB,WAAW,EAAE,CAAC;QACd,cAAc,EAAE,QAAQ,CAAC,cAAc;QACvC,UAAU,EAAE,QAAQ,CAAC,UAAU;IACvC,CAAK,CAAC;AACN,CAAC;AACD;;;CAGA,GACA,SAAS,qBAAqB,CAAC,QAAQ,EAAE;IACrC,OAAO;QACH,SAAS,EAAE,SAAS;QACpB,eAAe,EAAE,QAAQ,CAAC,cAAc;QACxC,WAAW,EAAE,QAAQ,CAAC,UAAU;QAChC,cAAc,EAAE,QAAQ,CAAC,cAAc;QACvC,UAAU,EAAE,QAAQ,CAAC,UAAU;IACvC,CAAK,CAAC;AACN,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,kBAAkB,CAAC;IACrB,WAAW,CAAC,GAAG,CAAE;QACb,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACvB,CAAK;AACL,CAAC;AACD,MAAM,oBAAoB,CAAC;IACvB,WAAW,CAAC,GAAG,CAAE;QACb,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACvB,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,MAAM,IAAI,CAAC;IACP,WAAW,CAAC,KAAK,EACrB,4CAAA,GACI,gBAAgB,CAAE;QACd,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QACtC;;;;;SAKA,GACQ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QAC7B,uDAAA,GACQ,IAAI,CAAC,cAAc,GAAG,cAAc,EAAE,CAAC;QAC/C,0CAAA,GACQ,IAAI,CAAC,WAAW,GAAG,cAAc,EAAE,CAAC;QACpC,IAAI,CAAC,aAAa,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC/D,CAAK;IACL;;;KAGA,GACI,IAAI,eAAe,GAAG;QAClB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IACrC,CAAK;IACL;;;;;;;;;KASA,GACI,iBAAiB,CAAC,UAAU,EAAE,eAAe,EAAE;QAC3C,MAAM,SAAS,GAAG,eAAe,GAC3B,eAAe,CAAC,SAAS,GACzB,IAAI,iBAAiB,EAAE,CAAC;QAC9B,MAAM,cAAc,GAAG,eAAe,GAChC,eAAe,CAAC,WAAW,GAC3B,IAAI,CAAC,WAAW,CAAC;QACvB,IAAI,cAAc,GAAG,eAAe,GAC9B,eAAe,CAAC,WAAW,GAC3B,IAAI,CAAC,WAAW,CAAC;QACvB,IAAI,cAAc,GAAG,cAAc,CAAC;QACpC,IAAI,WAAW,GAAG,KAAK,CAAC;QAChC,wEAAA;QACA,wEAAA;QACA,0EAAA;QACA,4EAAA;QACA,sEAAA;QACA,2EAAA;QACA,EAAA;QACA,4EAAA;QACA,kEAAA;QACQ,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAA,mBAAA,OAC/C,cAAc,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,GACtC,cAAc,CAAC,IAAI,EAAE,GACrB,IAAI,CAAC;QACX,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAA,kBAAA,OAChD,cAAc,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,KAAK,GACtC,cAAc,CAAC,KAAK,EAAE,GACtB,IAAI,CAAC;QACX,UAAU,CAAC,gBAAgB,CAAC,CAAC,GAAG,EAAE,KAAK,KAAK;YACxC,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACvC,MAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,KAAK,GAAG,IAAI,CAAC;YAC9D,MAAM,yBAAyB,GAAG,MAAM,GAClC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAChC,KAAK,CAAC;YACZ,MAAM,yBAAyB,GAAG,MAAM,GAClC,MAAM,CAAC,iBAAiB,IAGrB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,qBAAqB,CAAC,EACpE,KAAK,CAAC;YACZ,IAAI,aAAa,GAAG,KAAK,CAAC;YACtC,mBAAA;YACY,IAAI,MAAM,IAAI,MAAM,EAAE;gBAClB,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACnD,IAAI,CAAC,SAAS,EAAE;oBACZ,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;wBACnD,SAAS,CAAC,KAAK,CAAC;4BACZ,IAAI,EAAE,CAAC,CAAA,uBAAA;4BACP,GAAG,EAAE,MAAM;wBACvC,CAAyB,CAAC,CAAC;wBACH,aAAa,GAAG,IAAI,CAAC;wBACrB,IAAI,AAAC,cAAc,IACf,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,cAAc,CAAC,GAAG,CAAC,IAC7C,eAAe,IACZ,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,eAAe,CAAC,GAAG,CAAC,CAAC,CAAE;4BAClF,6DAAA;4BACA,4DAAA;4BACA,mCAAA;4BAC4B,WAAW,GAAG,IAAI,CAAC;wBAC/C,CAAyB;oBACzB,CAAqB;gBACrB,CAAiB,MACI,IAAI,yBAAyB,KAAK,yBAAyB,EAAE;oBAC9D,SAAS,CAAC,KAAK,CAAC;wBAAE,IAAI,EAAE,CAAC,CAAA,uBAAA;wBAA4B,GAAG,EAAE,MAAM;oBAAA,CAAE,CAAC,CAAC;oBACpE,aAAa,GAAG,IAAI,CAAC;gBACzC,CAAiB;YACjB,CAAa,MACI,IAAI,CAAC,MAAM,IAAI,MAAM,EAAE;gBACxB,SAAS,CAAC,KAAK,CAAC;oBAAE,IAAI,EAAE,CAAC,CAAA,oBAAA;oBAAyB,GAAG,EAAE,MAAM;gBAAA,CAAE,CAAC,CAAC;gBACjE,aAAa,GAAG,IAAI,CAAC;YACrC,CAAa,MACI,IAAI,MAAM,IAAI,CAAC,MAAM,EAAE;gBACxB,SAAS,CAAC,KAAK,CAAC;oBAAE,IAAI,EAAE,CAAC,CAAA,sBAAA;oBAA2B,GAAG,EAAE,MAAM;gBAAA,CAAE,CAAC,CAAC;gBACnE,aAAa,GAAG,IAAI,CAAC;gBACrB,IAAI,cAAc,IAAI,eAAe,EAAE;oBACvD,2DAAA;oBACA,kEAAA;oBACA,qCAAA;oBACoB,WAAW,GAAG,IAAI,CAAC;gBACvC,CAAiB;YACjB,CAAa;YACD,IAAI,aAAa,EAAE;gBACf,IAAI,MAAM,EAAE;oBACR,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;oBAC5C,IAAI,yBAAyB,EAAE;wBAC3B,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACjE,CAAqB,MACI;wBACD,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBACpE,CAAqB;gBACrB,CAAiB,MACI;oBACD,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC5C,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChE,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;QACX,4DAAA;QACQ,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,IAAI,EAAE;YAC3B,MAAO,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAE;gBAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,GAAG,CAAA,mBAAA,MACrC,cAAc,CAAC,IAAI,EAAE,GACrB,cAAc,CAAC,KAAK,EAAE,CAAC;gBAC7B,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACnD,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACnD,SAAS,CAAC,KAAK,CAAC;oBAAE,IAAI,EAAE,CAAC,CAAA,sBAAA;oBAA2B,GAAG,EAAE,MAAM;gBAAA,CAAE,CAAC,CAAC;YACnF,CAAa;QACb,CAAS;QACD,OAAO;YACH,WAAW,EAAE,cAAc;YAC3B,SAAS;YACT,WAAW;YACX,WAAW,EAAE,cAAc;QACvC,CAAS,CAAC;IACV,CAAK;IACD,2BAA2B,CAAC,MAAM,EAAE,MAAM,EAAE;QAChD,2EAAA;QACA,4EAAA;QACA,6DAAA;QACA,4EAAA;QACA,2EAAA;QACA,2DAAA;QACA,2DAAA;QACQ,OAAQ,MAAM,CAAC,iBAAiB,IAC5B,MAAM,CAAC,qBAAqB,IAC5B,CAAC,MAAM,CAAC,iBAAiB,EAAE;IACvC,CAAK;IACL;;;;;;;;;KASA,GACA,+EAAA;IACI,YAAY,CAAC,UAAU,EAAE,oBAAoB,EAAE,YAAY,EAAE;QACzD,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC;QAC1C,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC;QAClD,kDAAA;QACQ,MAAM,OAAO,GAAG,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAClD,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK;YACrB,OAAQ,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IACvC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE;QACpD,CAAS,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACrC,MAAM,YAAY,GAAG,oBAAoB,GACnC,IAAI,CAAC,oBAAoB,EAAE,GAC3B,EAAE,CAAC;QACT,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC;QAC9D,MAAM,YAAY,GAAG,MAAM,GAAG,CAAC,CAAA,oBAAA,MAA0B,CAAC,CAAA,mBAAA,GAAuB;QACjF,MAAM,gBAAgB,GAAG,YAAY,KAAK,IAAI,CAAC,SAAS,CAAC;QACzD,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC;QAC9B,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACvD,aAAA;YACY,OAAO;gBAAE,YAAY;YAAA,CAAE,CAAC;QACpC,CAAS,MACI;YACD,MAAM,IAAI,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,UAAU,CAAC,WAAW,EAAE,YAAY,KAAK,CAAC,CAAA,mBAAA,KAAwB,gBAAgB,EAClL,4BAAA,GAA2C,KAAK,EAAE,YAAY,GAC5C,YAAY,CAAC,WAAW,CAAC,mBAAmB,EAAE,GAAG,CAAC,GAClD,KAAK,CAAC,CAAC;YACb,OAAO;gBACH,QAAQ,EAAE,IAAI;gBACd,YAAY;YAC5B,CAAa,CAAC;QACd,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,sBAAsB,CAAC,WAAW,EAAE;QAChC,IAAI,IAAI,CAAC,OAAO,IAAI,WAAW,KAAK,SAAS,CAAA,uBAAA,KAA4B;YACjF,wEAAA;YACA,wEAAA;YACA,uEAAA;YACA,uCAAA;YACY,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,OAAO,IAAI,CAAC,YAAY,CAAC;gBACrB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,SAAS,EAAE,IAAI,iBAAiB,EAAE;gBAClC,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,WAAW,EAAE,KAAK;YAClC,CAAa,EACb,yBAAA,GAAwC,KAAK,CAAC,CAAC;QAC/C,CAAS,MACI;YACb,6CAAA;YACY,OAAO;gBAAE,YAAY,EAAE,EAAE;YAAA,CAAE,CAAC;QACxC,CAAS;IACT,CAAK;IACL;;KAEA,GACI,eAAe,CAAC,GAAG,EAAE;QACzB,qEAAA;QACQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAChC,OAAO,KAAK,CAAC;QACzB,CAAS;QACT,4EAAA;QACQ,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC5B,OAAO,KAAK,CAAC;QACzB,CAAS;QACT,2EAAA;QACA,sEAAA;QACA,2EAAA;QACA,8BAAA;QACQ,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,iBAAiB,EAAE;YAC7C,OAAO,KAAK,CAAC;QACzB,CAAS;QACT,+BAAA;QACQ,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;KAGA,GACI,iBAAiB,CAAC,YAAY,EAAE;QAC5B,IAAI,YAAY,EAAE;YACd,YAAY,CAAC,cAAc,CAAC,OAAO,EAAC,GAAG,GAAK,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACrG,YAAY,CAAC,iBAAiB,CAAC,OAAO,EAAC,GAAG,IACtD,AAD0D,CAC7C,CAAC,CAAC;YACH,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAC,GAAG,GAAK,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1G,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC;QAChD,CAAS;IACT,CAAK;IACD,oBAAoB,GAAG;QAC3B,4EAAA;QACQ,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,OAAO,EAAE,CAAC;QACtB,CAAS;QACT,qEAAA;QACA,2BAAA;QACQ,MAAM,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC;QAC9C,IAAI,CAAC,cAAc,GAAG,cAAc,EAAE,CAAC;QACvC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAC,GAAG,IAAI;YAC5B,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC/B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACvE,CAAa;QACb,CAAS,CAAC,CAAC;QACX,mDAAA;QACQ,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,iBAAiB,CAAC,OAAO,CAAC,GAAG,IAAI;YAC7B,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC/B,OAAO,CAAC,IAAI,CAAC,IAAI,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5D,CAAa;QACb,CAAS,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,CAAC,OAAO,EAAC,GAAG,IAAI;YAC/B,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC7B,OAAO,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC;YAC1D,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACvB,CAAK;IACL;;;;;;;;;;;;;;;;;;KAkBA,GACA,gCAAA;IACI,6BAA6B,CAAC,WAAW,EAAE;QACvC,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC,UAAU,CAAC;QAC/C,IAAI,CAAC,cAAc,GAAG,cAAc,EAAE,CAAC;QACvC,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACjE,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,EAAA,uBAAA,GAA4B,IAAI,CAAC,CAAC;IAC7E,CAAK;IACL;;;;KAIA,GACA,gCAAA;IACI,sBAAsB,GAAG;QACrB,OAAO,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,KAAK,CAAC,CAAA,mBAAA,KAAwB,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACpK,CAAK;AACL,CAAC;AACD,SAAS,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE;IAC/B,MAAM,KAAK,GAAG,CAAC,MAAM,KAAK;QACtB,OAAQ,MAAM;YACV,KAAK,CAAC,CAAA,oBAAA;gBACF,OAAO,CAAC,CAAC;YACb,KAAK,CAAC,CAAA,uBAAA;gBACF,OAAO,CAAC,CAAC;YACb,KAAK,CAAC,CAAA,uBAAA;gBAClB,oEAAA;gBACA,kEAAA;gBACA,6DAAA;gBACgB,OAAO,CAAC,CAAC;YACb,KAAK,CAAC,CAAA,sBAAA;gBACF,OAAO,CAAC,CAAC;YACb;gBACI,OAAO,IAAI,EAAE,CAAC;QAC9B,CAAS;IACT,CAAK,CAAC;IACF,OAAO,KAAK,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;AACjC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,YAAY,CAAC;AAC/B;;;CAGA,GACA,MAAM,SAAS,CAAC;IACZ,WAAW,CACf;;KAEA,GACI,KAAK,EACT;;;KAGA,GACI,QAAQ,EACZ;;;;;KAKA,GACI,IAAI,CAAE;QACF,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,CAAK;AACL,CAAC;AACD,+BAAA,GACA,MAAM,eAAe,CAAC;IAClB,WAAW,CAAC,GAAG,CAAE;QACb,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACvB;;;;;SAKA,GACQ,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;IACtC,CAAK;AACL,CAAC;AACD;;;;;;;;;;;;CAYA,GACA,MAAM,cAAc,CAAC;IACjB,WAAW,CAAC,UAAU,EAAE,WAAW,EAAE,YAAY,EACrD,yEAAA;IACI,iBAAiB,EAAE,WAAW,EAAE,6BAA6B,CAAE;QAC3D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,6BAA6B,GAAG,6BAA6B,CAAC;QACnE,IAAI,CAAC,kBAAkB,GAAG,CAAA,CAAE,CAAC;QAC7B,IAAI,CAAC,iBAAiB,GAAG,IAAI,SAAS,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QAC3E,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,EAAE,CAAC;QACzC;;;;;;;;SAQA,GACQ,IAAI,CAAC,wBAAwB,GAAG,IAAI,GAAG,EAAE,CAAC;QAClD;;;SAGA,GACQ,IAAI,CAAC,uBAAuB,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC7E;;;SAGA,GACQ,IAAI,CAAC,8BAA8B,GAAG,IAAI,GAAG,EAAE,CAAC;QAChD,IAAI,CAAC,iBAAiB,GAAG,IAAI,YAAY,EAAE,CAAC;QACpD,kEAAA,GACQ,IAAI,CAAC,qBAAqB,GAAG,CAAA,CAAE,CAAC;QACxC,6EAAA,GACQ,IAAI,CAAC,sBAAsB,GAAG,IAAI,GAAG,EAAE,CAAC;QACxC,IAAI,CAAC,sBAAsB,GAAG,iBAAiB,CAAC,aAAa,EAAE,CAAC;QAChE,IAAI,CAAC,WAAW,GAAG,SAAS,CAAA,uBAAA,GAA2B;QAC/D,4EAAA;QACA,yEAAA;QACA,uBAAA;QACQ,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;IAC1C,CAAK;IACD,IAAI,eAAe,GAAG;QAClB,OAAO,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC;IAC9C,CAAK;AACL,CAAC;AACD,SAAS,aAAa,CAAC,UAAU,EAAE,WAAW,EAAE,YAAY,EAC5D,yEAAA;AACA,iBAAiB,EAAE,WAAW,EAAE,6BAA6B,EAAE,SAAS,EAAE;IACtE,MAAM,UAAU,GAAG,IAAI,cAAc,CAAC,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE,6BAA6B,CAAC,CAAC;IAC5I,IAAI,SAAS,EAAE;QACX,UAAU,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC3C,CAAK;IACD,OAAO,UAAU,CAAC;AACtB,CAAC;AACD;;;;CAIA,GACA,eAAe,gBAAgB,CAAC,UAAU,EAAE,KAAK,EAAE;IAC/C,MAAM,cAAc,GAAG,oBAAoB,CAAC,UAAU,CAAC,CAAC;IACxD,IAAI,QAAQ,CAAC;IACb,IAAI,YAAY,CAAC;IACjB,MAAM,SAAS,GAAG,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC9D,IAAI,SAAS,EAAE;QACnB,qEAAA;QACA,qEAAA;QACA,qEAAA;QACA,0EAAA;QACA,yEAAA;QACA,6CAAA;QACQ,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;QAC9B,cAAc,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QAC/D,YAAY,GAAG,SAAS,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAC/D,CAAK,MACI;QACD,MAAM,UAAU,GAAG,MAAM,wBAAwB,CAAC,cAAc,CAAC,UAAU,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;QACnG,MAAM,MAAM,GAAG,cAAc,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACzF,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;QAC/B,YAAY,GAAG,MAAM,gCAAgC,CAAC,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,KAAK,SAAS,EAAE,UAAU,CAAC,WAAW,CAAC,CAAC;QACrI,IAAI,cAAc,CAAC,eAAe,EAAE;YAChC,iBAAiB,CAAC,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QACtE,CAAS;IACT,CAAK;IACD,OAAO,YAAY,CAAC;AACxB,CAAC;AACD;;;CAGA,GACA,eAAe,gCAAgC,CAAC,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE;IACvG,yEAAA;IACA,wEAAA;IACA,2CAAA;IACI,cAAc,CAAC,eAAe,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,WAAW,GAAK,eAAe,CAAC,cAAc,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;IACvI,MAAM,WAAW,GAAG,MAAM,sBAAsB,CAAC,cAAc,CAAC,UAAU,EAAE,KAAK,EACrF,uBAAA,GAA8B,IAAI,CAAC,CAAC;IAChC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;IACrD,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACrE,MAAM,uBAAuB,GAAG,YAAY,CAAC,6CAA6C,CAAC,QAAQ,EAAE,OAAO,IAAI,cAAc,CAAC,WAAW,KAAK,SAAS,CAAA,uBAAA,KAA4B,WAAW,CAAC,CAAC;IACjM,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,EACvD,yBAAA,GAAgC,cAAc,CAAC,eAAe,EAAE,uBAAuB,CAAC,CAAC;IACrF,mBAAmB,CAAC,cAAc,EAAE,QAAQ,EAAE,UAAU,CAAC,YAAY,CAAC,CAAC;IACvE,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;IAClD,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAClD,IAAI,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QAC9C,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjE,CAAK,MACI;QACD,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE;YAAC,KAAK;SAAC,CAAC,CAAC;IAC9D,CAAK;IACD,OAAO,UAAU,CAAC,QAAQ,CAAC;AAC/B,CAAC;AACD,kCAAA,GACA,eAAe,kBAAkB,CAAC,UAAU,EAAE,KAAK,EAAE;IACjD,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,SAAS,GAAG,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAClE,2EAAA;IACA,iBAAA;IACI,MAAM,OAAO,GAAG,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACvE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QACpB,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,EAAC,CAAC,GAAI,CAAC,WAAW,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QACpG,cAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/C,OAAO;IACf,CAAK;IACL,gFAAA;IACI,IAAI,cAAc,CAAC,eAAe,EAAE;QACxC,uEAAA;QACA,+DAAA;QACQ,cAAc,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC5E,MAAM,mBAAmB,GAAG,cAAc,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACrG,IAAI,CAAC,mBAAmB,EAAE;YACtB,MAAM,uBAAuB,CAAC,cAAc,CAAC,UAAU,EAAE,SAAS,CAAC,QAAQ,EACvF,0BAAA,GAAyC,KAAK,CAAC,CAC9B,IAAI,CAAC,MAAM;gBACZ,cAAc,CAAC,iBAAiB,CAAC,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBACrE,mBAAmB,CAAC,cAAc,CAAC,WAAW,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;gBACpE,sBAAsB,CAAC,cAAc,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC3E,CAAa,CAAC,CACG,KAAK,CAAC,wBAAwB,CAAC,CAAC;QACjD,CAAS;IACT,CAAK,MACI;QACD,sBAAsB,CAAC,cAAc,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC3D,MAAM,uBAAuB,CAAC,cAAc,CAAC,UAAU,EAAE,SAAS,CAAC,QAAQ,EACnF,0BAAA,GAAqC,IAAI,CAAC,CAAC;IAC3C,CAAK;AACL,CAAC;AACD;;;;;;;;;CASA,GACA,eAAe,eAAe,CAAC,UAAU,EAAE,KAAK,EAAE,YAAY,EAAE;IAC5D,MAAM,cAAc,GAAG,8BAA8B,CAAC,UAAU,CAAC,CAAC;IAClE,IAAI;QACA,MAAM,MAAM,GAAG,MAAM,sBAAsB,CAAC,cAAc,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QAC9E,cAAc,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACpE,mBAAmB,CAAC,cAAc,EAAE,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAClE,MAAM,yCAAyC,CAAC,cAAc,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAChF,MAAM,iBAAiB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IAC5D,CAAK,CACD,OAAO,CAAC,EAAE;QACd,oEAAA;QACA,8DAAA;QACQ,MAAM,KAAK,GAAG,4BAA4B,CAAC,CAAC,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;QACzE,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACnC,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,eAAe,0BAA0B,CAAC,UAAU,EAAE,WAAW,EAAE;IAC/D,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,IAAI;QACA,MAAM,OAAO,GAAG,MAAM,sCAAsC,CAAC,cAAc,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QAC7G,kEAAA;QACQ,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,QAAQ,KAAK;YAC1D,MAAM,eAAe,GAAG,cAAc,CAAC,8BAA8B,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACpF,IAAI,eAAe,EAAE;gBACjC,sEAAA;gBACA,sEAAA;gBACgB,UAAU,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,GACvC,YAAY,CAAC,iBAAiB,CAAC,IAAI,GACnC,YAAY,CAAC,gBAAgB,CAAC,IAAI,IAClC,CAAC,CAAC,CAAC;gBACP,IAAI,YAAY,CAAC,cAAc,CAAC,IAAI,GAAG,CAAC,EAAE;oBACtC,eAAe,CAAC,gBAAgB,GAAG,IAAI,CAAC;gBAC5D,CAAiB,MACI,IAAI,YAAY,CAAC,iBAAiB,CAAC,IAAI,GAAG,CAAC,EAAE;oBAC9C,UAAU,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;gBACjE,CAAiB,MACI,IAAI,YAAY,CAAC,gBAAgB,CAAC,IAAI,GAAG,CAAC,EAAE;oBAC7C,UAAU,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;oBAC7C,eAAe,CAAC,gBAAgB,GAAG,KAAK,CAAC;gBAC7D,CAAiB,MACI;gBACrB,4DAAA;gBACA,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;QACH,MAAM,yCAAyC,CAAC,cAAc,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;IAC9F,CAAK,CACD,OAAO,KAAK,EAAE;QACV,MAAM,wBAAwB,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,gCAAgC,CAAC,UAAU,EAAE,WAAW,EAAE,MAAM,EAAE;IACvE,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IACjD,0EAAA;IACA,yEAAA;IACA,yEAAA;IACA,qBAAA;IACI,IAAI,AAAC,cAAc,CAAC,eAAe,IAC/B,MAAM,KAAK,CAAC,CAAA,iCAAA,OACX,CAAC,cAAc,CAAC,eAAe,IAC5B,MAAM,KAAK,CAAC,CAAA,uCAAA,GAA2C,EAAE;QAC7D,MAAM,gBAAgB,GAAG,EAAE,CAAC;QAC5B,cAAc,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,SAAS,KAAK;YAC3D,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;YACtE,IAAI,UAAU,CAAC,QAAQ,EAAE;gBACrB,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC3D,CAAa;QACb,CAAS,CAAC,CAAC;QACH,+BAA+B,CAAC,cAAc,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QAC1E,IAAI,gBAAgB,CAAC,MAAM,EAAE;YACzB,cAAc,CAAC,kBAAkB,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;QAC9E,CAAS;QACD,cAAc,CAAC,WAAW,GAAG,WAAW,CAAC;QACzC,IAAI,cAAc,CAAC,eAAe,EAAE;YAChC,cAAc,CAAC,iBAAiB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QACzE,CAAS;IACT,CAAK;AACL,CAAC;AACD;;;;;;;;;;CAUA,GACA,eAAe,sBAAsB,CAAC,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE;IAC7D,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IACjD,gCAAA;IACI,cAAc,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;IAC7E,MAAM,eAAe,GAAG,cAAc,CAAC,8BAA8B,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACpF,MAAM,QAAQ,GAAG,eAAe,IAAI,eAAe,CAAC,GAAG,CAAC;IACxD,IAAI,QAAQ,EAAE;QAClB,oEAAA;QACA,wDAAA;QACA,oEAAA;QACA,uEAAA;QACA,wEAAA;QACA,oDAAA;QACQ,IAAI,eAAe,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QACpE,0EAAA;QACA,qEAAA;QACA,0DAAA;QACQ,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE,eAAe,CAAC,aAAa,CAAC,QAAQ,EAAE,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACnH,MAAM,sBAAsB,GAAG,cAAc,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC9D,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,eAAe,CAAC,GAAG,EAAE,EAC3D,kBAAA,GAA6B,IAAI,GAAG,EAAE,EACtC,qBAAA,GAAgC,IAAI,SAAS,CAAC,mBAAmB,CAAC,EAAE,eAAe,EAAE,sBAAsB,CAAC,CAAC;QACrG,MAAM,0BAA0B,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QAChE,qEAAA;QACA,uEAAA;QACA,uEAAA;QACA,0EAAA;QACA,iCAAA;QACQ,cAAc,CAAC,uBAAuB,GAClC,cAAc,CAAC,uBAAuB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC5D,cAAc,CAAC,8BAA8B,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC/D,4BAA4B,CAAC,cAAc,CAAC,CAAC;IACrD,CAAK,MACI;QACD,MAAM,uBAAuB,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,EACzE,2BAAA,GAAsC,KAAK,CAAC,CAC/B,IAAI,CAAC,IAAM,sBAAsB,CAAC,cAAc,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,CACjE,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC7C,CAAK;AACL,CAAC;AACD,eAAe,8BAA8B,CAAC,UAAU,EAAE,mBAAmB,EAAE;IAC3E,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,OAAO,GAAG,mBAAmB,CAAC,KAAK,CAAC,OAAO,CAAC;IAClD,IAAI;QACA,MAAM,OAAO,GAAG,MAAM,0BAA0B,CAAC,cAAc,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;QACzG,uEAAA;QACA,uEAAA;QACA,yEAAA;QACA,wBAAA;QACQ,mBAAmB,CAAC,cAAc,EAAE,OAAO,EAAA,QAAA,GAAa,IAAI,CAAC,CAAC;QAC9D,6BAA6B,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QACvD,cAAc,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QAC9E,MAAM,yCAAyC,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IACjF,CAAK,CACD,OAAO,KAAK,EAAE;QACV,MAAM,wBAAwB,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAK;AACL,CAAC;AACD,eAAe,2BAA2B,CAAC,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE;IACnE,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,IAAI;QACA,MAAM,OAAO,GAAG,MAAM,qBAAqB,CAAC,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACxF,uEAAA;QACA,4EAAA;QACA,2EAAA;QACA,iBAAA;QACQ,mBAAmB,CAAC,cAAc,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QACpD,6BAA6B,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QACvD,cAAc,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QACjF,MAAM,yCAAyC,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;IACjF,CAAK,CACD,OAAO,KAAK,EAAE;QACV,MAAM,wBAAwB,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,eAAe,uCAAuC,CAAC,UAAU,EAAE,QAAQ,EAAE;IACzE,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;QAC5C,QAAQ,CAAC,SAAS,EAAE,gDAAgD,GAChE,wEAAwE,CAAC,CAAC;IACtF,CAAK;IACD,IAAI;QACA,MAAM,cAAc,GAAG,MAAM,yCAAyC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QAClG,IAAI,cAAc,KAAK,eAAe,EAAE;YAChD,+EAAA;YACY,QAAQ,CAAC,OAAO,EAAE,CAAC;YACnB,OAAO;QACnB,CAAS;QACD,MAAM,SAAS,GAAG,cAAc,CAAC,sBAAsB,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QAClF,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzB,cAAc,CAAC,sBAAsB,CAAC,GAAG,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;IAC7E,CAAK,CACD,OAAO,CAAC,EAAE;QACN,MAAM,cAAc,GAAG,4BAA4B,CAAC,CAAC,EAAE,2DAA2D,CAAC,CAAC;QACpH,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IACxC,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,6BAA6B,CAAC,cAAc,EAAE,OAAO,EAAE;IAC5D,CAAC,cAAc,CAAC,sBAAsB,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,OAAO,EAAC,QAAQ,IAAI;QAC3E,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAK,CAAC,CAAC;IACH,cAAc,CAAC,sBAAsB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC1D,CAAC;AACD,6EAAA,GACA,SAAS,uCAAuC,CAAC,cAAc,EAAE,YAAY,EAAE;IAC3E,cAAc,CAAC,sBAAsB,CAAC,OAAO,EAAC,SAAS,IAAI;QACvD,SAAS,CAAC,OAAO,EAAC,QAAQ,IAAI;YAC1B,QAAQ,CAAC,MAAM,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC;QAC9E,CAAS,CAAC,CAAC;IACX,CAAK,CAAC,CAAC;IACH,cAAc,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;AAClD,CAAC;AACD,SAAS,mBAAmB,CAAC,cAAc,EAAE,OAAO,EAAE,QAAQ,EAAE;IAC5D,IAAI,YAAY,GAAG,cAAc,CAAC,qBAAqB,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;IAC5F,IAAI,CAAC,YAAY,EAAE;QACf,YAAY,GAAG,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;IAC1D,CAAK;IACD,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACtD,cAAc,CAAC,qBAAqB,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,GACpE,YAAY,CAAC;AACrB,CAAC;AACD;;;CAGA,GACA,SAAS,mBAAmB,CAAC,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE;IACrD,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,IAAI,YAAY,GAAG,cAAc,CAAC,qBAAqB,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;IAChG,0EAAA;IACA,gDAAA;IACI,IAAI,YAAY,EAAE;QACd,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3C,IAAI,QAAQ,EAAE;YACV,IAAI,KAAK,EAAE;gBACP,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACvC,CAAa,MACI;gBACD,QAAQ,CAAC,OAAO,EAAE,CAAC;YACnC,CAAa;YACD,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACxD,CAAS;QACD,cAAc,CAAC,qBAAqB,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,GACpE,YAAY,CAAC;IACzB,CAAK;AACL,CAAC;AACD,SAAS,sBAAsB,CAAC,cAAc,EAAE,QAAQ,EAAE,KAAK,GAAG,IAAI,EAAE;IACpE,cAAc,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IAClE,KAAK,MAAM,KAAK,IAAI,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAE;QAC9D,cAAc,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,KAAK,EAAE;YACP,cAAc,CAAC,kBAAkB,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACzE,CAAS;IACT,CAAK;IACD,cAAc,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAChD,IAAI,cAAc,CAAC,eAAe,EAAE;QAChC,MAAM,SAAS,GAAG,cAAc,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QACnF,SAAS,CAAC,OAAO,EAAC,QAAQ,IAAI;YAC1B,MAAM,YAAY,GAAG,cAAc,CAAC,iBAAiB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAC5E,IAAI,CAAC,YAAY,EAAE;gBAC/B,6CAAA;gBACgB,iBAAiB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;YAC5D,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AACD,SAAS,iBAAiB,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5C,cAAc,CAAC,wBAAwB,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;IAC/E,4FAAA;IACA,+FAAA;IACI,MAAM,aAAa,GAAG,cAAc,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACtE,IAAI,aAAa,KAAK,IAAI,EAAE;QAChC,6DAAA;QACQ,OAAO;IACf,CAAK;IACD,mBAAmB,CAAC,cAAc,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IAC/D,cAAc,CAAC,uBAAuB,GAClC,cAAc,CAAC,uBAAuB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACvD,cAAc,CAAC,8BAA8B,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IACpE,4BAA4B,CAAC,cAAc,CAAC,CAAC;AACjD,CAAC;AACD,SAAS,mBAAmB,CAAC,cAAc,EAAE,QAAQ,EAAE,YAAY,EAAE;IACjE,KAAK,MAAM,WAAW,IAAI,YAAY,CAAE;QACpC,IAAI,WAAW,YAAY,kBAAkB,EAAE;YAC3C,cAAc,CAAC,iBAAiB,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YACzE,gBAAgB,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QAC1D,CAAS,MACI,IAAI,WAAW,YAAY,oBAAoB,EAAE;YAClD,QAAQ,CAAC,SAAS,EAAE,+BAA+B,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;YACvE,cAAc,CAAC,iBAAiB,CAAC,eAAe,CAAC,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YAC5E,MAAM,YAAY,GAAG,cAAc,CAAC,iBAAiB,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACnF,IAAI,CAAC,YAAY,EAAE;gBAC/B,6CAAA;gBACgB,iBAAiB,CAAC,cAAc,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC;YACnE,CAAa;QACb,CAAS,MACI;YACD,IAAI,EAAE,CAAC;QACnB,CAAS;IACT,CAAK;AACL,CAAC;AACD,SAAS,gBAAgB,CAAC,cAAc,EAAE,WAAW,EAAE;IACnD,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC;IAC5B,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;IAC7C,IAAI,CAAC,cAAc,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,CAAC,IAChD,CAAC,cAAc,CAAC,wBAAwB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;QACzD,QAAQ,CAAC,SAAS,EAAE,yBAAyB,GAAG,GAAG,CAAC,CAAC;QACrD,cAAc,CAAC,wBAAwB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACvD,4BAA4B,CAAC,cAAc,CAAC,CAAC;IACrD,CAAK;AACL,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,4BAA4B,CAAC,cAAc,EAAE;IAClD,MAAO,cAAc,CAAC,wBAAwB,CAAC,IAAI,GAAG,CAAC,IACnD,cAAc,CAAC,uBAAuB,CAAC,IAAI,GACvC,cAAc,CAAC,6BAA6B,CAAE;QAClD,MAAM,SAAS,GAAG,cAAc,CAAC,wBAAwB,CACpD,MAAM,EAAE,CACR,IAAI,EAAE,CAAC,KAAK,CAAC;QAClB,cAAc,CAAC,wBAAwB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC1D,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;QAChE,MAAM,aAAa,GAAG,cAAc,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC;QACnE,cAAc,CAAC,8BAA8B,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3F,cAAc,CAAC,uBAAuB,GAClC,cAAc,CAAC,uBAAuB,CAAC,MAAM,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACtE,iBAAiB,CAAC,cAAc,CAAC,WAAW,EAAE,IAAI,UAAU,CAAC,aAAa,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,aAAa,EAAE,8BAA8B,CAAA,iCAAA,KAAsC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;IAC3N,CAAK;AACL,CAAC;AACD,eAAe,yCAAyC,CAAC,UAAU,EAAE,OAAO,EAAE,WAAW,EAAE;IACvF,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,QAAQ,GAAG,EAAE,CAAC;IACpB,MAAM,oBAAoB,GAAG,EAAE,CAAC;IAChC,MAAM,gBAAgB,GAAG,EAAE,CAAC;IAC5B,IAAI,cAAc,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE;QACpD,yEAAA;QACQ,OAAO;IACf,CAAK;IACD,cAAc,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,SAAS,KAAK;QACvD,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAC/B,eAAe,CAAC,SAAS,EAAE,OAAO,EAAE,WAAW,CAAC,CAChD,IAAI,EAAC,YAAY,IAAI;YAClC,qEAAA;YACA,2CAAA;YACY,IAAI,YAAY,IAAI,WAAW,EAAE;gBAC7B,IAAI,cAAc,CAAC,eAAe,EAAE;oBAChC,cAAc,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,YAAY,KAAK,IAAI,IAAI,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,YAAY,CAAC,SAAS,IAAI,aAAa,GAAG,SAAS,CAAC,CAAC;gBAC5M,CAAiB;YACjB,CAAa;YACb,4CAAA;YACY,IAAI,CAAC,CAAC,YAAY,EAAE;gBAChB,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC5B,MAAM,UAAU,GAAG,gBAAgB,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;gBACnF,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACtD,CAAa;QACb,CAAS,CAAC,CAAC,CAAC;IACZ,CAAK,CAAC,CAAC;IACH,MAAM,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IACpC,cAAc,CAAC,kBAAkB,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC1D,MAAM,gCAAgC,CAAC,cAAc,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC;AAC5F,CAAC;AACD,eAAe,eAAe,CAAC,cAAc,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE;IAC5E,IAAI,cAAc,GAAG,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAC/D,IAAI,cAAc,CAAC,WAAW,EAAE;QACpC,+DAAA;QACA,8DAAA;QACA,0DAAA;QACQ,cAAc,GAAG,MAAM,sBAAsB,CAAC,cAAc,CAAC,UAAU,EAAE,SAAS,CAAC,KAAK,EAChG,uBAAA,GAAkC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK;YACrD,OAAO,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QAC/E,CAAS,CAAC,CAAC;IACX,CAAK;IACD,MAAM,YAAY,GAAG,WAAW,IAAI,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACtF,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,cAAc,EACjE,yBAAA,GAAgC,cAAc,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;IAC1E,mBAAmB,CAAC,cAAc,EAAE,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC,YAAY,CAAC,CAAC;IACjF,OAAO,UAAU,CAAC,QAAQ,CAAC;AAC/B,CAAC;AACD,eAAe,gCAAgC,CAAC,UAAU,EAAE,IAAI,EAAE;IAC9D,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,WAAW,GAAG,CAAC,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9D,IAAI,WAAW,EAAE;QACb,QAAQ,CAAC,SAAS,EAAE,wBAAwB,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAC5D,MAAM,MAAM,GAAG,MAAM,0BAA0B,CAAC,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACjF,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1C,qEAAA;QACQ,uCAAuC,CAAC,cAAc,EAAE,kEAAkE,CAAC,CAAC;QACpI,oEAAA;QACQ,cAAc,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;QACtG,MAAM,yCAAyC,CAAC,cAAc,EAAE,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAClG,CAAK;AACL,CAAC;AACD,SAAS,gCAAgC,CAAC,UAAU,EAAE,QAAQ,EAAE;IAC5D,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,eAAe,GAAG,cAAc,CAAC,8BAA8B,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACpF,IAAI,eAAe,IAAI,eAAe,CAAC,gBAAgB,EAAE;QACrD,OAAO,cAAc,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IACzD,CAAK,MACI;QACD,IAAI,MAAM,GAAG,cAAc,EAAE,CAAC;QAC9B,MAAM,OAAO,GAAG,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,EAAE;YACV,OAAO,MAAM,CAAC;QAC1B,CAAS;QACD,KAAK,MAAM,KAAK,IAAI,OAAO,CAAE;YACzB,MAAM,SAAS,GAAG,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC9D,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtE,CAAS;QACD,OAAO,MAAM,CAAC;IACtB,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,eAAe,iCAAiC,CAAC,UAAU,EAAE,SAAS,EAAE;IACpE,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,WAAW,GAAG,MAAM,sBAAsB,CAAC,cAAc,CAAC,UAAU,EAAE,SAAS,CAAC,KAAK,EAC/F,uBAAA,GAA8B,IAAI,CAAC,CAAC;IAChC,MAAM,YAAY,GAAG,SAAS,CAAC,IAAI,CAAC,6BAA6B,CAAC,WAAW,CAAC,CAAC;IAC/E,IAAI,cAAc,CAAC,eAAe,EAAE;QAChC,mBAAmB,CAAC,cAAc,EAAE,SAAS,CAAC,QAAQ,EAAE,YAAY,CAAC,YAAY,CAAC,CAAC;IAC3F,CAAK;IACD,OAAO,YAAY,CAAC;AACxB,CAAC;AACD;;;CAGA,GACA,gCAAA;AACA,eAAe,yCAAyC,CAAC,UAAU,EAAE,eAAe,EAAE;IAClF,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,OAAO,+BAA+B,CAAC,cAAc,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC,IAAI,EAAC,OAAO,GAAI,yCAAyC,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;AAC3K,CAAC;AACD,oDAAA,GACA,gCAAA;AACA,eAAe,yBAAyB,CAAC,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE;IAC7E,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,SAAS,GAAG,MAAM,iCAAiC,CAAC,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAC9F,IAAI,SAAS,KAAK,IAAI,EAAE;QAC5B,yEAAA;QACA,0EAAA;QACA,uEAAA;QACA,sEAAA;QACA,yEAAA;QACA,wEAAA;QACA,iBAAA;QACQ,QAAQ,CAAC,SAAS,EAAE,uCAAuC,GAAG,OAAO,CAAC,CAAC;QACvE,OAAO;IACf,CAAK;IACD,IAAI,UAAU,KAAK,SAAS,EAAE;QAClC,kEAAA;QACA,yEAAA;QACA,0BAAA;QACQ,MAAM,iBAAiB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IAC5D,CAAK,MACI,IAAI,UAAU,KAAK,cAAc,IAAI,UAAU,KAAK,UAAU,EAAE;QACzE,uEAAA;QACA,iBAAA;QACQ,mBAAmB,CAAC,cAAc,EAAE,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC;QACnE,6BAA6B,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;QACvD,2CAA2C,CAAC,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACxF,CAAK,MACI;QACD,IAAI,EAAE,CAAC;IACf,CAAK;IACD,MAAM,yCAAyC,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;AAC/E,CAAC;AACD,wDAAA,GACA,gCAAA;AACA,eAAe,2BAA2B,CAAC,UAAU,EAAE,SAAS,EAAE;IAC9D,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,oBAAoB,CAAC,cAAc,CAAC,CAAC;IACrC,8BAA8B,CAAC,cAAc,CAAC,CAAC;IAC/C,IAAI,SAAS,KAAK,IAAI,IAAI,cAAc,CAAC,gBAAgB,KAAK,IAAI,EAAE;QACxE,uEAAA;QACA,gEAAA;QACA,uEAAA;QACA,qEAAA;QACA,uEAAA;QACA,2BAAA;QACQ,MAAM,aAAa,GAAG,cAAc,CAAC,iBAAiB,CAAC,wBAAwB,EAAE,CAAC;QAClF,MAAM,aAAa,GAAG,MAAM,sCAAsC,CAAC,cAAc,EAAE,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;QAC5G,cAAc,CAAC,gBAAgB,GAAG,IAAI,CAAC;QACvC,MAAM,4BAA4B,CAAC,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QACrE,KAAK,MAAM,UAAU,IAAI,aAAa,CAAE;YACpC,iBAAiB,CAAC,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QACtE,CAAS;IACT,CAAK,MACI,IAAI,SAAS,KAAK,KAAK,IAAI,cAAc,CAAC,gBAAgB,KAAK,KAAK,EAAE;QACvE,MAAM,aAAa,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;QAC1B,cAAc,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,KAAK;YACpD,IAAI,cAAc,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,EAAE;gBAC/D,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAa,MACI;gBACD,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM;oBACb,sBAAsB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;oBACjD,OAAO,uBAAuB,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,EACtF,0BAAA,GAAiD,IAAI,CAAC,CAAC;gBACvD,CAAiB,CAAC,CAAC;YACnB,CAAa;YACD,mBAAmB,CAAC,cAAc,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QACtE,CAAS,CAAC,CAAC;QACH,MAAM,CAAC,CAAC;QACR,MAAM,sCAAsC,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;QAC5E,mBAAmB,CAAC,cAAc,CAAC,CAAC;QACpC,cAAc,CAAC,gBAAgB,GAAG,KAAK,CAAC;QACxC,MAAM,4BAA4B,CAAC,cAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAC9E,CAAK;AACL,CAAC;AACD,gCAAA;AACA,SAAS,mBAAmB,CAAC,UAAU,EAAE;IACrC,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,cAAc,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,KAAK;QACnE,mBAAmB,CAAC,cAAc,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAClE,CAAK,CAAC,CAAC;IACH,cAAc,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;IACvD,cAAc,CAAC,8BAA8B,GAAG,IAAI,GAAG,EAAE,CAAC;IAC1D,cAAc,CAAC,uBAAuB,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AACnF,CAAC;AACD;;;;;;;;;CASA,GACA,gCAAA;AACA,eAAe,sCAAsC,CAAC,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE;IAC5F,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,MAAM,aAAa,GAAG,EAAE,CAAC;IACzB,MAAM,gBAAgB,GAAG,EAAE,CAAC;IAC5B,KAAK,MAAM,QAAQ,IAAI,OAAO,CAAE;QAC5B,IAAI,UAAU,CAAC;QACf,MAAM,OAAO,GAAG,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC7D,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7C,mEAAA;YACA,gEAAA;YACA,mEAAA;YACA,mEAAA;YACY,UAAU,GAAG,MAAM,wBAAwB,CAAC,cAAc,CAAC,UAAU,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClG,KAAK,MAAM,KAAK,IAAI,OAAO,CAAE;gBACzB,MAAM,SAAS,GAAG,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC9D,MAAM,UAAU,GAAG,MAAM,iCAAiC,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;gBACtF,IAAI,UAAU,CAAC,QAAQ,EAAE;oBACrB,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;gBAC/D,CAAiB;YACjB,CAAa;QACb,CAAS,MACI;YACb,6DAAA;YACA,+DAAA;YACY,MAAM,MAAM,GAAG,MAAM,yBAAyB,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YACpF,UAAU,GAAG,MAAM,wBAAwB,CAAC,cAAc,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAC/E,MAAM,gCAAgC,CAAC,cAAc,EAAE,uBAAuB,CAAC,MAAM,CAAC,EAAE,QAAQ,EAC5G,UAAA,GAAyB,KAAK,EAAE,UAAU,CAAC,WAAW,CAAC,CAAC;QACxD,CAAS;QACD,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACvC,CAAK;IACD,cAAc,CAAC,kBAAkB,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;IAClE,OAAO,aAAa,CAAC;AACzB,CAAC;AACD;;;;;;;;;CASA,GACA,gCAAA;AACA,SAAS,uBAAuB,CAAC,MAAM,EAAE;IACrC,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,EAAE,GAAG,CAAA,mBAAA,KAAwB,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;AAChK,CAAC;AACD,8DAAA,GACA,gCAAA;AACA,SAAS,0BAA0B,CAAC,UAAU,EAAE;IAC5C,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,OAAO,0BAA0B,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;AACjE,CAAC;AACD,wDAAA,GACA,gCAAA;AACA,eAAe,0BAA0B,CAAC,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE;IAC1E,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,IAAI,cAAc,CAAC,gBAAgB,EAAE;QACzC,mEAAA;QACA,uEAAA;QACQ,QAAQ,CAAC,SAAS,EAAE,+CAA+C,CAAC,CAAC;QACrE,OAAO;IACf,CAAK;IACD,MAAM,KAAK,GAAG,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC3D,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3B,OAAQ,KAAK;YACT,KAAK,SAAS,CAAC;YACf,KAAK,aAAa;gBAAE;oBAChB,MAAM,OAAO,GAAG,MAAM,+BAA+B,CAAC,cAAc,CAAC,UAAU,EAAE,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjH,MAAM,sBAAsB,GAAG,WAAW,CAAC,4CAA4C,CAAC,QAAQ,EAAE,KAAK,KAAK,SAAS,EAAE,UAAU,CAAC,iBAAiB,CAAC,CAAC;oBACrJ,MAAM,yCAAyC,CAAC,cAAc,EAAE,OAAO,EAAE,sBAAsB,CAAC,CAAC;oBACjG,MAAM;gBACtB,CAAa;YACD,KAAK,UAAU;gBAAE;oBACb,MAAM,uBAAuB,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,EACjF,2BAAA,GAA8C,IAAI,CAAC,CAAC;oBACpC,sBAAsB,CAAC,cAAc,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;oBACxD,MAAM;gBACtB,CAAa;YACD;gBACI,IAAI,EAAE,CAAC;QACvB,CAAS;IACT,CAAK;AACL,CAAC;AACD,mEAAA,GACA,eAAe,kCAAkC,CAAC,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE;IAC1E,MAAM,cAAc,GAAG,oBAAoB,CAAC,UAAU,CAAC,CAAC;IACxD,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE;QAClC,OAAO;IACf,CAAK;IACD,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAE;QAC1B,IAAI,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAC1D,uDAAA;YACY,QAAQ,CAAC,SAAS,EAAE,kCAAkC,GAAG,QAAQ,CAAC,CAAC;YACnE,SAAS;QACrB,CAAS;QACD,MAAM,MAAM,GAAG,MAAM,yBAAyB,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QACpF,MAAM,UAAU,GAAG,MAAM,wBAAwB,CAAC,cAAc,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QACrF,MAAM,gCAAgC,CAAC,cAAc,EAAE,uBAAuB,CAAC,MAAM,CAAC,EAAE,UAAU,CAAC,QAAQ,EACnH,UAAA,GAAqB,KAAK,EAAE,UAAU,CAAC,WAAW,CAAC,CAAC;QAC5C,iBAAiB,CAAC,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAClE,CAAK;IACD,KAAK,MAAM,QAAQ,IAAI,OAAO,CAAE;QACpC,yEAAA;QACA,kDAAA;QACQ,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAC/C,SAAS;QACrB,CAAS;QACT,yCAAA;QACQ,MAAM,uBAAuB,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,EACzE,2BAAA,GAAsC,KAAK,CAAC,CAC/B,IAAI,CAAC,MAAM;YACZ,mBAAmB,CAAC,cAAc,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YAC1D,sBAAsB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QAC7D,CAAS,CAAC,CACG,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC7C,CAAK;AACL,CAAC;AACD,SAAS,oBAAoB,CAAC,UAAU,EAAE;IACtC,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,gBAAgB,GACpD,0BAA0B,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IAC1D,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,sBAAsB,GAC1D,gCAAgC,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IAChE,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,YAAY,GAChD,sBAAsB,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IACtD,cAAc,CAAC,kBAAkB,CAAC,aAAa,GAC3C,yBAAyB,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;IACtE,cAAc,CAAC,kBAAkB,CAAC,YAAY,GAC1C,wBAAwB,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;IACrE,OAAO,cAAc,CAAC;AAC1B,CAAC;AACD,SAAS,8BAA8B,CAAC,UAAU,EAAE;IAChD,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,oBAAoB,GACxD,8BAA8B,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IAC9D,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC,iBAAiB,GACrD,2BAA2B,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IAC3D,OAAO,cAAc,CAAC;AAC1B,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,oBAAoB,CAAC,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE;IAC1D,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC;IACjD,mEAAA;IACI,cAAc,CAAC,cAAc,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC,IAAI,EAAC,gBAAgB,IAAI;QACxE,cAAc,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;IAC9E,CAAK,CAAC,CAAC;AACP,CAAC;AACD,uEAAA,GACA,eAAe,cAAc,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE;IACpD,IAAI;QACA,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,WAAW,EAAE,CAAC;QAC5C,MAAM,IAAI,GAAG,MAAM,wBAAwB,CAAC,UAAU,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC7E,IAAI,IAAI,EAAE;YACN,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC;QAC9C,CAAS;QACD,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC;QACtD,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,UAAU,CAAC,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QACpF,IAAI,OAAO,GAAG,MAAM,MAAM,CAAC,WAAW,EAAE,CAAC;QACzC,MAAO,OAAO,CAAE;;YAEZ,MAAM,QAAQ,GAAG,MAAM,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YACvD,IAAI,QAAQ,EAAE;gBACV,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC/C,CAAa;YACD,OAAO,GAAG,MAAM,MAAM,CAAC,WAAW,EAAE,CAAC;QACjD,CAAS;QACD,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,QAAQ,EAAE,CAAC;QACvC,MAAM,yCAAyC,CAAC,UAAU,EAAE,MAAM,CAAC,WAAW,EACtF,eAAA,GAA0B,SAAS,CAAC,CAAC;QACrC,uDAAA;QACQ,MAAM,oBAAoB,CAAC,UAAU,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC5D,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpC,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;IAC/D,CAAK,CACD,OAAO,CAAC,EAAE;QACN,OAAO,CAAC,SAAS,EAAE,CAAC,2BAA2B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAClB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC;IAC1C,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,8BAA8B,CAAC;IACjC,WAAW,EAAG;QACV,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IACrC,CAAK;IACD,MAAM,UAAU,CAAC,GAAG,EAAE;QAClB,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAC7D,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;QAC3D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;QAC/C,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC7C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,gCAAgC,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/E,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,8BAA8B,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IAClG,CAAK;IACD,gCAAgC,CAAC,GAAG,EAAE,UAAU,EAAE;QAC9C,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,8BAA8B,CAAC,GAAG,EAAE,UAAU,EAAE;QAC5C,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,gBAAgB,CAAC,GAAG,EAAE;QAClB,OAAO,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,WAAW,EAAE,EAAE,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACpG,CAAK;IACD,iBAAiB,CAAC,GAAG,EAAE;QACnB,OAAO,IAAI,iBAAiB,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACnF,CAAK;IACD,uBAAuB,CAAC,GAAG,EAAE;QACzB,OAAO,IAAI,uBAAuB,EAAE,CAAC;IAC7C,CAAK;IACD,MAAM,SAAS,GAAG;QACd,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QACpC,CAAS;QACD,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;QACxC,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;IAC1C,CAAK;AACL,CAAC;AACD,MAAM,mCAAmC,SAAS,8BAA8B,CAAC;IAC7E,WAAW,CAAC,cAAc,CAAE;QACxB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IAC7C,CAAK;IACD,gCAAgC,CAAC,GAAG,EAAE,UAAU,EAAE;QAC9C,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,iBAAiB,YAAY,iBAAiB,CAAC,CAAC;QAC5E,MAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;QAC7E,OAAO,IAAI,YAAY,CAAC,gBAAgB,EAAE,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAC9E,CAAK;IACD,iBAAiB,CAAC,GAAG,EAAE;QACnB,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,KAAK,SAAS,GAC7C,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,GAC5C,SAAS,CAAC,OAAO,CAAC;QACxB,OAAO,IAAI,iBAAiB,EAAC,CAAC,GAAI,iBAAiB,CAAC,OAAO,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACpG,CAAK;AACL,CAAC;AACD;;CAEA,GACA,MAAM,iCAAiC,SAAS,8BAA8B,CAAC;IAC3E,WAAW,CAAC,uBAAuB,EAAE,cAAc,EAAE,cAAc,CAAE;QACjE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACvD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IACrC,CAAK;IACD,MAAM,UAAU,CAAC,GAAG,EAAE;QAClB,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC5B,MAAM,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACjE,yCAAA;QACQ,MAAM,8BAA8B,CAAC,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;QAC9E,MAAM,iBAAiB,CAAC,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;QAC1E,oEAAA;QACA,qDAAA;QACQ,MAAM,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,MAAM;YACjD,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBAC/C,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YACzC,CAAa;YACD,IAAI,IAAI,CAAC,wBAAwB,IAC7B,CAAC,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE;gBACxC,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC;YACtD,CAAa;YACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QACrC,CAAS,CAAC,CAAC;IACX,CAAK;IACD,gBAAgB,CAAC,GAAG,EAAE;QAClB,OAAO,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,WAAW,EAAE,EAAE,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;IACpG,CAAK;IACD,gCAAgC,CAAC,GAAG,EAAE,UAAU,EAAE;QAC9C,MAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;QAC7E,OAAO,IAAI,YAAY,CAAC,gBAAgB,EAAE,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAC9E,CAAK;IACD,8BAA8B,CAAC,GAAG,EAAE,UAAU,EAAE;QAC5C,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1E,OAAO,IAAI,wBAAwB,CAAC,GAAG,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;IAC7E,CAAK;IACD,iBAAiB,CAAC,GAAG,EAAE;QACnB,MAAM,cAAc,GAAG,sBAAsB,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,EAAE,GAAG,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC5G,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,KAAK,SAAS,GAC7C,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,GAC5C,SAAS,CAAC,OAAO,CAAC;QACxB,OAAO,IAAI,oBAAoB,CAAC,IAAI,CAAC,eAAe,EAAE,cAAc,EAAE,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,GAAG,CAAC,UAAU,EAAE,SAAS,EAAE,EAAE,WAAW,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACnN,CAAK;IACD,uBAAuB,CAAC,GAAG,EAAE;QACzB,OAAO,IAAI,uBAAuB,EAAE,CAAC;IAC7C,CAAK;AACL,CAAC;AACD;;;;;;;CAOA,GACA,MAAM,gCAAgC,SAAS,iCAAiC,CAAC;IAC7E,WAAW,CAAC,uBAAuB,EAAE,cAAc,CAAE;QACjD,KAAK,CAAC,uBAAuB,EAAE,cAAc,EAAA,mBAAA,GAAwB,KAAK,CAAC,CAAC;QAC5E,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACvD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IACpC,CAAK;IACD,MAAM,UAAU,CAAC,GAAG,EAAE;QAClB,MAAM,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC;QAC3D,IAAI,IAAI,CAAC,iBAAiB,YAAY,2BAA2B,EAAE;YAC/D,IAAI,CAAC,iBAAiB,CAAC,UAAU,GAAG;gBAChC,eAAe,EAAE,yBAAyB,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC;gBACjE,gBAAgB,EAAE,0BAA0B,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC;gBACnE,wBAAwB,EAAE,kCAAkC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC;gBACnF,gBAAgB,EAAE,0BAA0B,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC;gBACnE,+BAA+B,EAAE,yCAAyC,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC;YACjH,CAAa,CAAC;YACF,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;QACjD,CAAS;QACT,oEAAA;QACA,qDAAA;QACQ,MAAM,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,OAAO,SAAS,KAAK;YAChE,MAAM,2BAA2B,CAAC,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;YACtF,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,IAAI,SAAS,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;oBACxC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;gBAC7C,CAAiB,MACI,IAAI,CAAC,SAAS,EAAE;oBACjB,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;gBAC5C,CAAiB;YACjB,CAAa;YACD,IAAI,IAAI,CAAC,wBAAwB,EAAE;gBAC/B,IAAI,SAAS,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE;oBACrD,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC;gBAC1D,CAAiB,MACI,IAAI,CAAC,SAAS,EAAE;oBACjB,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;gBACzD,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,uBAAuB,CAAC,GAAG,EAAE;QACzB,MAAM,MAAM,IAAG,SAAS,EAAE,CAAC;QAC3B,IAAI,CAAC,2BAA2B,CAAC,WAAW,CAAC,MAAM,CAAC,GAAE;YAClD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,aAAa,EAAE,iFAAiF,CAAC,CAAC;QAC5I,CAAS;QACD,MAAM,cAAc,GAAG,sBAAsB,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,EAAE,GAAG,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAC5G,OAAO,IAAI,2BAA2B,CAAC,MAAM,GAAE,GAAG,CAAC,UAAU,EAAE,cAAc,EAAE,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;IACtH,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,MAAM,uBAAuB,CAAC;IAC1B,MAAM,UAAU,CAAC,wBAAwB,EAAE,GAAG,EAAE;QAC5C,IAAI,IAAI,CAAC,UAAU,EAAE;YAC7B,gEAAA;YACA,iCAAA;YACY,OAAO;QACnB,CAAS;QACD,IAAI,CAAC,UAAU,GAAG,wBAAwB,CAAC,UAAU,CAAC;QACtD,IAAI,CAAC,iBAAiB,GAAG,wBAAwB,CAAC,iBAAiB,CAAC;QACpE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;QAC/C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QACjD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,EACnD,kBAAA,GAA6B,CAAC,wBAAwB,CAAC,eAAe,CAAC,CAAC;QAChE,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,IAAG,WAAW,GAAI,gCAAgC,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,EAAE,CAAC,CAAA,uCAAA,GAA2C,CAAC;QACvK,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,sBAAsB,GAChD,gCAAgC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACjE,MAAM,4BAA4B,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;IAC9F,CAAK;IACD,kBAAkB,CAAC,GAAG,EAAE;QACpB,OAAO,eAAe,EAAE,CAAC;IACjC,CAAK;IACD,eAAe,CAAC,GAAG,EAAE;QACjB,MAAM,UAAU,GAAG,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAC9D,MAAM,UAAU,GAAG,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACnD,OAAO,YAAY,CAAC,GAAG,CAAC,eAAe,EAAE,GAAG,CAAC,mBAAmB,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;IAClG,CAAK;IACD,iBAAiB,CAAC,GAAG,EAAE;QACnB,OAAO,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,UAAU,GAAE,WAAW,GAAI,gCAAgC,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,EAAE,CAAC,CAAA,iCAAA,GAAqC,GAAE,sBAAsB,EAAE,CAAC,CAAC;IAC/N,CAAK;IACD,gBAAgB,CAAC,GAAG,EAAE,cAAc,EAAE;QAClC,OAAO,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,6BAA6B,EAAE,cAAc,CAAC,CAAC;IAC/K,CAAK;IACD,SAAS,GAAG;QACR,OAAO,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrD,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;CAIA,GACA,MAAM,sBAAsB,GAAG,KAAK,CAAC;AACrC;;;;;CAKA,GACA,SAAS,wBAAwB,CAAC,MAAM,EAAE,YAAY,GAAG,sBAAsB,EAAE;IAC7E,IAAI,QAAQ,GAAG,CAAC,CAAC;IACrB,qEAAA;IACA,oEAAA;IACA,2DAAA;IACA,8DAAA;IACI,MAAM,MAAM,GAAG;QACnB,8DAAA;QACQ,MAAM,IAAI,GAAG;YACT,IAAI,QAAQ,GAAG,MAAM,CAAC,UAAU,EAAE;gBAC9B,MAAM,MAAM,GAAG;oBACX,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,GAAG,YAAY,CAAC;oBACtD,IAAI,EAAE,KAAK;gBAC/B,CAAiB,CAAC;gBACF,QAAQ,IAAI,YAAY,CAAC;gBACzB,OAAO,MAAM,CAAC;YAC9B,CAAa;YACD,OAAO;gBAAE,IAAI,EAAE,IAAI;YAAA,CAAE,CAAC;QAClC,CAAS;QACD,MAAM,MAAM,GAAG,EAAA,CAAG;QAClB,WAAW,GAAG,EAAA,CAAG;QACjB,MAAM,EAAE,OAAO,CAAC,OAAO,EAAE;IACjC,CAAK,CAAC;IACF,OAAO,MAAM,CAAC;AAClB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,SAAS,wBAAwB,CAAC,YAAY,EAAE,YAAY,EAAE,QAAQ,EAAE;IACpE,IAAI,CAAC,QAAQ,EAAE;QACX,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC,kCAAkC,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;IACtI,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,yBAAyB,CAAC,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE;IAC/E,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,IAAI,EAAE;QAC1C,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,yBAAyB,CAAC,CAAC,CAAC;IACtH,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,oBAAoB,CAAC,IAAI,EAAE;IAChC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;QAClC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,0FAA0F,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACjL,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,sBAAsB,CAAC,IAAI,EAAE;IAClC,IAAI,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;QACjC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,6FAA6F,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACpL,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,aAAa,CAAC,KAAK,EAAE;IAC1B,OAAQ,OAAO,KAAK,KAAK,QAAQ,IAC7B,KAAK,KAAK,IAAI,IACtB,CAAS,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,MAAM,CAAC,SAAS,IAC9C,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,EAAE;AACpD,CAAC;AACD,wEAAA,GACA,SAAS,gBAAgB,CAAC,KAAK,EAAE;IAC7B,IAAI,KAAK,KAAK,SAAS,EAAE;QACrB,OAAO,WAAW,CAAC;IAC3B,CAAK,MACI,IAAI,KAAK,KAAK,IAAI,EAAE;QACrB,OAAO,MAAM,CAAC;IACtB,CAAK,MACI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAChC,IAAI,KAAK,CAAC,MAAM,GAAG,EAAE,EAAE;YACnB,KAAK,GAAG,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QACnD,CAAS;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACrC,CAAK,MACI,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE;QAC9D,OAAO,EAAE,GAAG,KAAK,CAAC;IAC1B,CAAK,MACI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAChC,IAAI,KAAK,YAAY,KAAK,EAAE;YACxB,OAAO,UAAU,CAAC;QAC9B,CAAS,MACI;YACD,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;YACvD,IAAI,gBAAgB,EAAE;gBAClB,OAAO,CAAC,SAAS,EAAE,gBAAgB,CAAC,OAAO,CAAC,CAAC;YAC7D,CAAa,MACI;gBACD,OAAO,WAAW,CAAC;YACnC,CAAa;QACb,CAAS;IACT,CAAK,MACI,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;QAClC,OAAO,YAAY,CAAC;IAC5B,CAAK,MACI;QACD,OAAO,IAAI,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AACD,mDAAA,GACA,SAAS,sBAAsB,CAAC,KAAK,EAAE;IACnC,IAAI,KAAK,CAAC,WAAW,EAAE;QACnB,OAAO,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;IACtC,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,IAAI,CAAC,GAAG,EACjB,8DAAA;AACA,WAAW,EAAE;IACT,IAAI,WAAW,IAAI,GAAG,EAAE;QAC5B,sBAAA;QACA,8DAAA;QACQ,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC;IAC5B,CAAK;IACD,IAAI,CAAA,CAAE,GAAG,YAAY,WAAW,CAAC,EAAE;QAC/B,IAAI,WAAW,CAAC,IAAI,KAAK,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE;YAC3C,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,4DAA4D,GACxG,CAAC,yCAAyC,CAAC,CAAC,CAAC;QAC7D,CAAS,MACI;YACD,MAAM,WAAW,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;YAC1C,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,eAAe,EAAE,WAAW,CAAC,IAAI,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;QAC/H,CAAS;IACT,CAAK;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AACD,SAAS,sBAAsB,CAAC,YAAY,EAAE,CAAC,EAAE;IAC7C,IAAI,CAAC,IAAI,CAAC,EAAE;QACR,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC,2CAA2C,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpI,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,SAAS,kBAAkB,CAAC,MAAM,EAAE,YAAY,EAAE;IAC9C,IAAI,CAAA,CAAE,MAAM,YAAY,UAAU,CAAC,EAAE;QACjC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,qEAAqE,EAAE,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5J,CAAK;IACD,OAAO,wBAAwB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AAC1D,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;CAIA,GACA,MAAM,aAAa,CAAC;IAChB,WAAW,CAAC,QAAQ,CAAE;QAClB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACjC;;;SAGA,GACQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,CAAK;IACD,IAAI,CAAC,KAAK,EAAE;QACR,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YACpB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC1D,CAAS;IACT,CAAK;IACD,KAAK,CAAC,KAAK,EAAE;QACT,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;YACrB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAS,MACI;YACD,QAAQ,CAAC,sCAAsC,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/E,CAAS;IACT,CAAK;IACD,IAAI,GAAG;QACH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IAC1B,CAAK;IACD,aAAa,CAAC,YAAY,EAAE,KAAK,EAAE;QAC/B,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACb,UAAU,CAAC,MAAM;gBACb,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;oBACb,YAAY,CAAC,KAAK,CAAC,CAAC;gBACxC,CAAiB;YACjB,CAAa,EAAE,CAAC,CAAC,CAAC;QAClB,CAAS;IACT,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,kBAAkB,CAAC;IACrB,WAAW,CAAC,OAAO,EACvB,4DAAA;IACI,UAAU,CAAE;QACR,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;IACD,gBAAgB,GAAG;QACf,OAAO,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC;IAC1C,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;CAKA,GACA,MAAM,gBAAgB,CAAC;IACnB,WAAW,CACf,kEAAA,GACI,MAAM,EAAE,UAAU,CAAE;QAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QACrC,4BAAA,GACQ,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QACvC;;;SAGA,GACQ,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,cAAc,EAAE,CAAC;QAC5C,kDAAA;QACQ,IAAI,CAAC,eAAe,EAAE,CAAC,IAAI,EAAC,OAAO,IAAI;YACnC,IAAI,OAAO,IAAI,OAAO,CAAC,gBAAgB,EAAE,EAAE;gBACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAChE,CAAa,MACI;gBACD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC;aACnC,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrG,CAAa;QACb,CAAS,GAAE,KAAK,GAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IACjD,CAAK;IACD,KAAK,GAAG;QACJ,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IACpC,CAAK;IACD,MAAM,WAAW,GAAG;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;IACrC,CAAK;IACD,MAAM,WAAW,GAAG;QACxB,iDAAA;QACQ,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QACzB,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IACtC,CAAK;IACL;;;;;;;;;KASA,GACI,MAAM,eAAe,GAAG;QACpB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QAC7C,IAAI,YAAY,KAAK,IAAI,EAAE;YACvB,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC3D,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;QACpC,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE;YACf,IAAI,CAAC,UAAU,CAAC,CAAC,eAAe,EAAE,YAAY,CAAC,qBAAqB,CAAC,CAAC,CAAC;QACnF,CAAS;QACD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACrD,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;IAC5F,CAAK;IACL,mDAAA,GACI,kBAAkB,GAAG;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,EAAC,CAAC,GAAI,CAAC,KAAK,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACnE,CAAK;IACL;;;;;KAKA,GACI,MAAM,UAAU,GAAG;QACf,MAAO,IAAI,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAE;YAClC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC/C,IAAI,IAAI,EAAE;gBACN,MAAM;YACtB,CAAa;QACb,CAAS;QACT,uEAAA;QACA,yCAAA;QACQ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACnD,uEAAA;QACA,+BAAA;QACQ,IAAI,QAAQ,GAAG,CAAC,EAAE;YACd,IAAI,CAAC,UAAU,CAAC,6DAA6D,CAAC,CAAC;QAC3F,CAAS;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;QACtD,sDAAA;QACQ,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC1C,OAAO,MAAM,CAAC;IACtB,CAAK;IACL;;;;;KAKA,GACI,MAAM,cAAc,CAAC,MAAM,EAAE;QACzB,MAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAE;YAChC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC/C,IAAI,IAAI,EAAE;gBACN,IAAI,CAAC,UAAU,CAAC,kDAAkD,CAAC,CAAC;YACpF,CAAa;QACb,CAAS;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;QAC7E,2DAAA;QACQ,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,MAAM,CAAC;IACtB,CAAK;IACD,UAAU,CAAC,OAAO,EAAE;QACxB,mEAAA;QACQ,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,CAAC,uBAAuB,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAK;IACL;;;KAGA,GACI,MAAM,oBAAoB,GAAG;QACzB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACxC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YACd,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAC3E,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC3B,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAChD,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QACpC,CAAS;QACD,OAAO,MAAM,CAAC,IAAI,CAAC;IAC3B,CAAK;AACL,CAAC;AACD,SAAS,eAAe,CAAC,MAAM,EAAE,UAAU,EAAE;IACzC,OAAO,IAAI,gBAAgB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AACpD,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,aAAa,CAAC;IAChB,WAAW,CAAC,SAAS,CAAE;QACnB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QACnC,sEAAA;QACQ,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAC/B;;;SAGA,GACQ,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QACnC;;;;;SAKA,GACQ,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;IACrC,CAAK;IACD,MAAM,MAAM,CAAC,IAAI,EAAE;QACf,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,4EAA4E,CAAC,CAAC;QAC1I,CAAS;QACD,MAAM,IAAI,GAAG,MAAM,0BAA0B,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACpE,IAAI,CAAC,OAAO,EAAC,GAAG,GAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE;QACX,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC7C,CAAK;IACD,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE;QACd,IAAI;YACA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9E,CAAS,CACD,OAAO,CAAC,EAAE;YACN,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACpC,CAAS;QACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC7C,CAAK;IACD,MAAM,CAAC,GAAG,EAAE;QACR,IAAI,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5D,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC7C,CAAK;IACD,MAAM,MAAM,GAAG;QACX,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,MAAM,IAAI,CAAC,cAAc,CAAC;QACtC,CAAS;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC;QAC5C,oDAAA;QACQ,IAAI,CAAC,SAAS,CAAC,OAAO,EAAC,QAAQ,IAAI;YAC/B,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QACtD,CAAS,CAAC,CAAC;QACX,yEAAA;QACA,wBAAA;QACQ,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK;YAC3B,MAAM,GAAG,GAAG,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACvC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjF,CAAS,CAAC,CAAC;QACH,MAAM,eAAe,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACtD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC9B,CAAK;IACD,aAAa,CAAC,GAAG,EAAE;QACf,IAAI,UAAU,CAAC;QACf,IAAI,GAAG,CAAC,eAAe,EAAE,EAAE;YACvB,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC;QACrC,CAAS,MACI,IAAI,GAAG,CAAC,YAAY,EAAE,EAAE;YACrC,uDAAA;YACY,UAAU,GAAG,eAAe,CAAC,GAAG,EAAE,CAAC;QAC/C,CAAS,MACI;YACD,MAAM,IAAI,EAAE,CAAC;QACzB,CAAS;QACD,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAClE,IAAI,eAAe,EAAE;YACjB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;gBACtD,6CAAA;gBACgB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,6CAA6C,CAAC,CAAC;YACtG,CAAa;QACb,CAAS,MACI;YACD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,CAAC;QAClE,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,YAAY,CAAC,GAAG,EAAE;QACd,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QACtD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,IAAI,OAAO,EAAE;YAClD,IAAI,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE;gBACxC,OAAO,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAClD,CAAa,MACI;gBACD,OAAO,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACxD,CAAa;QACb,CAAS,MACI;YACD,OAAO,YAAY,CAAC,IAAI,EAAE,CAAC;QACvC,CAAS;IACT,CAAK;IACL;;KAEA,GACI,qBAAqB,CAAC,GAAG,EAAE;QACvB,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9D,yEAAA;QACA,0BAAA;QACQ,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,IAAI,OAAO,EAAE;YAClD,IAAI,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,EAAE;gBACxD,uDAAA;gBACA,4DAAA;gBACA,mEAAA;gBACA,sEAAA;gBACA,qEAAA;gBACA,kEAAA;gBACA,4DAAA;gBACA,uEAAA;gBACA,eAAA;gBACgB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,6CAA6C,CAAC,CAAC;YAC/G,CAAa;YACb,8DAAA;YACY,OAAO,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACpD,CAAS,MACI;YACb,sEAAA;YACA,UAAA;YACY,OAAO,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAS;IACT,CAAK;IACD,KAAK,CAAC,QAAQ,EAAE;QACZ,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAK;IACD,qBAAqB,GAAG,CAC5B,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,iBAAiB,CAAC;IACpB,WAAW,CAAC,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,CAAE;QAClE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,WAAW,CAAC;QAC7C,IAAI,CAAC,OAAO,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,mBAAmB,CAAA,4BAAA,GAAgC,CAAC;IACnH,CAAK;IACL,0DAAA,GACI,GAAG,GAAG;QACF,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,cAAc,EAAE,CAAC;IAC9B,CAAK;IACD,cAAc,GAAG;QACb,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,YAAY;YACnC,MAAM,WAAW,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACtD,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YAC3D,IAAI,WAAW,EAAE;gBACb,WAAW,CACN,IAAI,EAAC,MAAM,IAAI;oBAChB,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,MAAM;wBACnC,OAAO,WAAW,CACb,MAAM,EAAE,CACR,IAAI,CAAC,MAAM;4BACZ,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;wBAC1D,CAAyB,CAAC,CACG,KAAK,EAAC,WAAW,IAAI;4BACtB,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;wBACrE,CAAyB,CAAC,CAAC;oBAC3B,CAAqB,CAAC,CAAC;gBACvB,CAAiB,CAAC,CACG,KAAK,EAAC,gBAAgB,IAAI;oBAC3B,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;gBAClE,CAAiB,CAAC,CAAC;YACnB,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,oBAAoB,CAAC,WAAW,EAAE;QAC9B,IAAI;YACA,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACrD,IAAI,iBAAiB,CAAC,WAAW,CAAC,IAC9B,CAAC,WAAW,CAAC,KAAK,IAClB,CAAC,WAAW,CAAC,IAAI,EAAE;gBACnB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC,CAAC;gBAC1E,OAAO,IAAI,CAAC;YAC5B,CAAa;YACD,OAAO,WAAW,CAAC;QAC/B,CAAS,CACD,OAAO,KAAK,EAAE;YACtB,8DAAA;YACY,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5B,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;IACD,sBAAsB,CAAC,KAAK,EAAE;QAC1B,IAAI,IAAI,CAAC,iBAAiB,GAAG,CAAC,IAAI,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,EAAE;YACvE,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAC;YAC5B,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,MAAM;gBACnC,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;YACzC,CAAa,CAAC,CAAC;QACf,CAAS,MACI;YACD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACxC,CAAS;IACT,CAAK;IACD,2BAA2B,CAAC,KAAK,EAAE;QAC/B,IAAI,KAAK,CAAC,IAAI,KAAK,eAAe,EAAE;YAC5C,qFAAA;YACA,+EAAA;YACY,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;YACxB,OAAQ,IAAI,KAAK,SAAS,IACtB,IAAI,KAAK,qBAAqB,IAC9B,IAAI,KAAK,gBAAgB,IACzB,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;QACzC,CAAS;QACD,OAAO,KAAK,CAAC;IACrB,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,iBAAiB,CAAC;AACpC,MAAM,gCAAgC,GAAG,GAAG,CAAC;AAC7C,uCAAA,GACA,MAAM,2BAA2B,GAAG,EAAE,CAAC;AACvC,MAAM,qBAAqB,GAAG,EAAE,CAAC;AACjC,MAAM,4BAA4B,GAAG,EAAE,CAAC;AACxC;;;;CAIA,GACA,MAAM,eAAe,CAAC;IAClB,WAAW,CAAC,eAAe,EAAE,mBAAmB,EACpD;;;;;;;KAOA,GACI,UAAU,EAAE,YAAY,CAAE;QACtB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;QAC/B,IAAI,CAAC,sBAAsB,GAAG,IAAM,OAAO,CAAC,OAAO,EAAE,CAAC;QACtD,IAAI,CAAC,0BAA0B,GAAG,IAAM,OAAO,CAAC,OAAO,EAAE,CAAC;QAC1D,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,UAAU,EAAE,OAAO,IAAI,KAAK;YACnD,QAAQ,CAAC,SAAS,EAAE,gBAAgB,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAChD,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;YACxC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAC7B,CAAS,CAAC,CAAC;QACH,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,UAAU,GAAE,gBAAgB,IAAI;YAC3D,QAAQ,CAAC,SAAS,EAAE,+BAA+B,EAAE,gBAAgB,CAAC,CAAC;YACvE,OAAO,IAAI,CAAC,0BAA0B,CAAC,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAChF,CAAS,CAAC,CAAC;IACX,CAAK;IACD,MAAM,gBAAgB,GAAG;QACrB,OAAO;YACH,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;YAC7C,WAAW,EAAE,IAAI,CAAC,IAAI;YACtB,6BAA6B,EAAE,gCAAgC;QAC3E,CAAS,CAAC;IACV,CAAK;IACD,2BAA2B,CAAC,QAAQ,EAAE;QAClC,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC;IAC/C,CAAK;IACD,8BAA8B,CAAC,QAAQ,EAAE;QACrC,IAAI,CAAC,0BAA0B,GAAG,QAAQ,CAAC;IACnD,CAAK;IACL;;;KAGA,GACI,mBAAmB,GAAG;QAClB,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE;YAChC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,yCAAyC,CAAC,CAAC;QAC1G,CAAS;IACT,CAAK;IACD,SAAS,GAAG;QACR,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC;QACtC,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAChC,IAAI,CAAC,UAAU,CAAC,mCAAmC,CAAC,YAAY;YAC5D,IAAI;gBACA,IAAI,IAAI,CAAC,iBAAiB,EAAE;oBACxB,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC;gBAC7D,CAAiB;gBACD,IAAI,IAAI,CAAC,kBAAkB,EAAE;oBACzB,MAAM,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC;gBAC9D,CAAiB;gBACjB,sEAAA;gBACA,sEAAA;gBACA,UAAA;gBACgB,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;gBAChC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,CAAC;gBACpC,QAAQ,CAAC,OAAO,EAAE,CAAC;YACnC,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,MAAM,cAAc,GAAG,4BAA4B,CAAC,CAAC,EAAE,CAAC,8BAA8B,CAAC,CAAC,CAAC;gBACzF,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAChD,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC,OAAO,CAAC;IAChC,CAAK;AACL,CAAC;AACD,eAAe,2BAA2B,CAAC,MAAM,EAAE,wBAAwB,EAAE;IACzE,MAAM,CAAC,UAAU,CAAC,yBAAyB,EAAE,CAAC;IAC9C,QAAQ,CAAC,SAAS,EAAE,uCAAuC,CAAC,CAAC;IAC7D,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,gBAAgB,EAAE,CAAC;IACtD,MAAM,wBAAwB,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IACzD,IAAI,WAAW,GAAG,aAAa,CAAC,WAAW,CAAC;IAC5C,MAAM,CAAC,2BAA2B,CAAC,OAAO,IAAI,KAAK;QAC/C,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC5B,MAAM,0BAA0B,CAAC,wBAAwB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAC5E,WAAW,GAAG,IAAI,CAAC;QAC/B,CAAS;IACT,CAAK,CAAC,CAAC;IACP,wEAAA;IACA,wDAAA;IACI,wBAAwB,CAAC,WAAW,CAAC,0BAA0B,CAAC,IAAM,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;IAC1F,MAAM,CAAC,kBAAkB,GAAG,wBAAwB,CAAC;AACzD,CAAC;AACD,eAAe,0BAA0B,CAAC,MAAM,EAAE,uBAAuB,EAAE;IACvE,MAAM,CAAC,UAAU,CAAC,yBAAyB,EAAE,CAAC;IAC9C,MAAM,wBAAwB,GAAG,MAAM,uBAAuB,CAAC,MAAM,CAAC,CAAC;IACvE,QAAQ,CAAC,SAAS,EAAE,sCAAsC,CAAC,CAAC;IAC5D,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,gBAAgB,EAAE,CAAC;IACtD,MAAM,uBAAuB,CAAC,UAAU,CAAC,wBAAwB,EAAE,aAAa,CAAC,CAAC;IACtF,sEAAA;IACA,kDAAA;IACI,MAAM,CAAC,2BAA2B,EAAC,IAAI,GAAI,iCAAiC,CAAC,uBAAuB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;IACzH,MAAM,CAAC,8BAA8B,CAAC,CAAC,CAAC,EAAE,IAAI,GAAK,iCAAiC,CAAC,uBAAuB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;IACjI,MAAM,CAAC,iBAAiB,GAAG,uBAAuB,CAAC;AACvD,CAAC;AACD;;;CAGA,GACA,SAAS,6BAA6B,CAAC,KAAK,EAAE;IAC1C,IAAI,KAAK,CAAC,IAAI,KAAK,eAAe,EAAE;QAChC,OAAQ,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,mBAAmB,IAC3C,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,EAAE;IAC/C,CAAK,MACI,IAAI,OAAO,YAAY,KAAK,WAAW,IACxC,KAAK,YAAY,YAAY,EAAE;QACvC,sEAAA;QACA,4DAAA;QACA,wEAAA;QACA,mCAAA;QACA,qEAAA;QACA,yEAAA;QACA,gCAAA;QACQ,OACR,sEAAA;QACA,qEAAA;QACA,oBAAA;QACQ,KAAK,CAAC,IAAI,KAAK,4BAA4B,IACvC,KAAK,CAAC,IAAI,KAAK,qBAAqB,IAChD,+DAAA;QACA,+BAAA;QACY,KAAK,CAAC,IAAI,KAAK,2BAA2B,EAAE;IACxD,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD,eAAe,uBAAuB,CAAC,MAAM,EAAE;IAC3C,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE;QAC5B,IAAI,MAAM,CAAC,gCAAgC,EAAE;YACzC,QAAQ,CAAC,SAAS,EAAE,8CAA8C,CAAC,CAAC;YACpE,IAAI;gBACA,MAAM,2BAA2B,CAAC,MAAM,EAAE,MAAM,CAAC,gCAAgC,CAAC,QAAQ,CAAC,CAAC;YAC5G,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,MAAM,KAAK,GAAG,CAAC,CAAC;gBAChB,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,EAAE;oBACvC,MAAM,KAAK,CAAC;gBAChC,CAAiB;gBACD,OAAO,CAAC,mDAAmD,GACvD,gBAAgB,GAChB,KAAK,CAAC,CAAC;gBACX,MAAM,2BAA2B,CAAC,MAAM,EAAE,IAAI,8BAA8B,EAAE,CAAC,CAAC;YAChG,CAAa;QACb,CAAS,MACI;YACD,QAAQ,CAAC,SAAS,EAAE,wCAAwC,CAAC,CAAC;YAC9D,MAAM,2BAA2B,CAAC,MAAM,EAAE,IAAI,8BAA8B,EAAE,CAAC,CAAC;QAC5F,CAAS;IACT,CAAK;IACD,OAAO,MAAM,CAAC,kBAAkB,CAAC;AACrC,CAAC;AACD,eAAe,sBAAsB,CAAC,MAAM,EAAE;IAC1C,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE;QAC3B,IAAI,MAAM,CAAC,gCAAgC,EAAE;YACzC,QAAQ,CAAC,SAAS,EAAE,6CAA6C,CAAC,CAAC;YACnE,MAAM,0BAA0B,CAAC,MAAM,EAAE,MAAM,CAAC,gCAAgC,CAAC,OAAO,CAAC,CAAC;QACtG,CAAS,MACI;YACD,QAAQ,CAAC,SAAS,EAAE,uCAAuC,CAAC,CAAC;YAC7D,MAAM,0BAA0B,CAAC,MAAM,EAAE,IAAI,uBAAuB,EAAE,CAAC,CAAC;QACpF,CAAS;IACT,CAAK;IACD,OAAO,MAAM,CAAC,iBAAiB,CAAC;AACpC,CAAC;AACD,SAAS,cAAc,CAAC,MAAM,EAAE;IAC5B,OAAO,uBAAuB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC;AACpE,CAAC;AACD,SAAS,aAAa,CAAC,MAAM,EAAE;IAC3B,OAAO,uBAAuB,CAAC,MAAM,CAAC,CAAC,IAAI,EAAC,CAAC,GAAI,CAAC,CAAC,UAAU,CAAC,CAAC;AACnE,CAAC;AACD,SAAS,cAAc,CAAC,MAAM,EAAE;IAC5B,OAAO,sBAAsB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,CAAC;AACnE,CAAC;AACD,SAAS,aAAa,CAAC,MAAM,EAAE;IAC3B,OAAO,sBAAsB,CAAC,MAAM,CAAC,CAAC,IAAI,EAAC,CAAC,GAAI,CAAC,CAAC,UAAU,CAAC,CAAC;AAClE,CAAC;AACD,SAAS,YAAY,CAAC,MAAM,EAAE;IAC1B,OAAO,sBAAsB,CAAC,MAAM,CAAC,CAAC,IAAI,EAAC,CAAC,GAAI,CAAC,CAAC,SAAS,CAAC,CAAC;AACjE,CAAC;AACD,eAAe,eAAe,CAAC,MAAM,EAAE;IACnC,MAAM,uBAAuB,GAAG,MAAM,sBAAsB,CAAC,MAAM,CAAC,CAAC;IACrE,MAAM,YAAY,GAAG,uBAAuB,CAAC,YAAY,CAAC;IAC1D,YAAY,CAAC,QAAQ,GAAG,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,uBAAuB,CAAC,UAAU,CAAC,CAAC;IACxF,YAAY,CAAC,UAAU,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,uBAAuB,CAAC,UAAU,CAAC,CAAC;IAC5F,OAAO,YAAY,CAAC;AACxB,CAAC;AACD,2EAAA,GACA,SAAS,4BAA4B,CAAC,MAAM,EAAE;IAC1C,OAAO,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,YAAY;QACzC,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,MAAM,CAAC,CAAC;QACjD,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,MAAM,CAAC,CAAC;QACjD,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACpC,OAAO,wBAAwB,CAAC,WAAW,CAAC,CAAC;IACrD,CAAK,CAAC,CAAC;AACP,CAAC;AACD,2EAAA,GACA,SAAS,6BAA6B,CAAC,MAAM,EAAE;IAC3C,OAAO,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,YAAY;QACzC,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,MAAM,CAAC,CAAC;QACjD,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,MAAM,CAAC,CAAC;QACjD,WAAW,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QACrC,OAAO,yBAAyB,CAAC,WAAW,CAAC,CAAC;IACtD,CAAK,CAAC,CAAC;AACP,CAAC;AACD;;;;CAIA,GACA,SAAS,mCAAmC,CAAC,MAAM,EAAE;IACjD,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IAChC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;QAC3C,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,CAAC;QAC/C,OAAO,uCAAuC,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC7E,CAAK,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC5B,CAAC;AACD,SAAS,qBAAqB,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE;IAC7D,MAAM,eAAe,GAAG,IAAI,aAAa,CAAC,QAAQ,CAAC,CAAC;IACpD,MAAM,QAAQ,GAAG,IAAI,aAAa,CAAC,KAAK,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IACpE,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;QAC3C,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;QACnD,OAAO,kBAAkB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IAC1D,CAAK,CAAC,CAAC;IACH,OAAO,MAAM;QACT,eAAe,CAAC,IAAI,EAAE,CAAC;QACvB,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;YAC3C,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;YACnD,OAAO,oBAAoB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QAChE,CAAS,CAAC,CAAC;IACX,CAAK,CAAC;AACN,CAAC;AACD,SAAS,wCAAwC,CAAC,MAAM,EAAE,MAAM,EAAE;IAC9D,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IAChC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;QAC3C,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,CAAC;QAC/C,OAAO,qBAAqB,CAAC,UAAU,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IACnE,CAAK,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC5B,CAAC;AACD,SAAS,6CAA6C,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,GAAG,CAAA,CAAE,EAAE;IAC9E,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IAChC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;QAC3C,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;QACnD,OAAO,+BAA+B,CAAC,YAAY,EAAE,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxG,CAAK,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC5B,CAAC;AACD,SAAS,yCAAyC,CAAC,MAAM,EAAE,KAAK,EAAE;IAC9D,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IAChC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;QAC3C,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,CAAC;QAC/C,OAAO,qBAAqB,CAAC,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;IAClE,CAAK,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC5B,CAAC;AACD,SAAS,8CAA8C,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,GAAG,CAAA,CAAE,EAAE;IACjF,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IAChC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;QAC3C,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;QACnD,OAAO,+BAA+B,CAAC,YAAY,EAAE,MAAM,CAAC,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IAC1G,CAAK,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC5B,CAAC;AACD,SAAS,gCAAgC,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE;IACjE,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IAChC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;QACnD,iEAAA;QACA,uEAAA;QACA,0EAAA;QACA,QAAA;QACQ,IAAI;YACZ,mEAAA;YACY,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC;YAC7C,QAAQ,CAAC,OAAO,CAAC,4BAA4B,CAAC,SAAS,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;QACzF,CAAS,CACD,OAAO,CAAC,EAAE;YACN,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAS;IACT,CAAK,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC5B,CAAC;AACD,SAAS,oBAAoB,CAAC,MAAM,EAAE,SAAS,EAAE;IAC7C,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IAChC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;QAC3C,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,CAAC;QAC/C,OAAO,eAAe,CAAC,UAAU,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;IAChE,CAAK,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC5B,CAAC;AACD,SAAS,yCAAyC,CAAC,MAAM,EAAE,QAAQ,EAAE;IACjE,MAAM,eAAe,GAAG,IAAI,aAAa,CAAC,QAAQ,CAAC,CAAC;IACpD,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;QAC3C,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;QACnD,OAAO,0BAA0B,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;IACzE,CAAK,CAAC,CAAC;IACH,OAAO,MAAM;QACT,eAAe,CAAC,IAAI,EAAE,CAAC;QACvB,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;YAC3C,MAAM,YAAY,GAAG,MAAM,eAAe,CAAC,MAAM,CAAC,CAAC;YACnD,OAAO,6BAA6B,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;QAChF,CAAS,CAAC,CAAC;IACX,CAAK,CAAC;AACN,CAAC;AACD;;;;;;;;;;;;;;CAcA,GACA,SAAS,0BAA0B,CAAC,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE;IACjE,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IAChC,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;QAC3C,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,iBAAiB,CAAC,MAAM,CAAC,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;IACrG,CAAK,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC5B,CAAC;AACD,eAAe,qBAAqB,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE;IAC7D,IAAI;QACA,MAAM,QAAQ,GAAG,MAAM,sBAAsB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAClE,IAAI,QAAQ,CAAC,eAAe,EAAE,EAAE;YAC5B,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAS,MACI,IAAI,QAAQ,CAAC,YAAY,EAAE,EAAE;YAC9B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjC,CAAS,MACI;YACD,MAAM,CAAC,MAAM,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,iEAAiE,GAChH,6DAA6D,GAC7D,8DAA8D,GAC9D,UAAU,CAAC,CAAC,CAAC;QAC7B,CAAS;IACT,CAAK,CACD,OAAO,CAAC,EAAE;QACN,MAAM,cAAc,GAAG,4BAA4B,CAAC,CAAC,EAAE,CAAC,wBAAwB,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;QACvG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IACtC,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,+BAA+B,CAAC,YAAY,EAAE,UAAU,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE;IACrF,MAAM,eAAe,GAAG,IAAI,aAAa,CAAC;QACtC,IAAI,EAAE,CAAC,IAAI,KAAK;YACxB,2DAAA;YACA,8CAAA;YACY,UAAU,CAAC,gBAAgB,CAAC,IAAM,oBAAoB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC;YAChF,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAClC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,EAAE;gBAC3C,yDAAA;gBACA,2DAAA;gBACA,uDAAA;gBACA,yDAAA;gBACA,qDAAA;gBACA,4DAAA;gBACA,iCAAA;gBACgB,MAAM,CAAC,MAAM,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,uDAAuD,CAAC,CAAC,CAAC;YAC7H,CAAa,MACI,IAAI,MAAM,IACX,IAAI,CAAC,SAAS,IACd,OAAO,IACP,OAAO,CAAC,MAAM,KAAK,QAAQ,EAAE;gBAC7B,MAAM,CAAC,MAAM,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,qDAAqD,GACpG,oDAAoD,GACpD,wCAAwC,GACxC,gCAAgC,CAAC,CAAC,CAAC;YACvD,CAAa,MACI;gBACD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrC,CAAa;QACb,CAAS;QACD,KAAK,GAAE,CAAC,GAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IACpC,CAAK,CAAC,CAAC;IACH,MAAM,QAAQ,GAAG,IAAI,aAAa,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,eAAe,EAAE;QAC3E,sBAAsB,EAAE,IAAI;QAC5B,qBAAqB,EAAE,IAAI;IACnC,CAAK,CAAC,CAAC;IACH,OAAO,kBAAkB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;AACtD,CAAC;AACD,eAAe,qBAAqB,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE;IAC5D,IAAI;QACA,MAAM,WAAW,GAAG,MAAM,sBAAsB,CAAC,UAAU,EAAE,KAAK,EAC1E,uBAAA,GAAkC,IAAI,CAAC,CAAC;QAChC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;QACrD,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACrE,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,EAC3D,yBAAA,GAAoC,KAAK,CAAC,CAAC;QACnC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC5C,CAAK,CACD,OAAO,CAAC,EAAE;QACN,MAAM,cAAc,GAAG,4BAA4B,CAAC,CAAC,EAAE,CAAC,yBAAyB,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;QAC1G,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IACtC,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,+BAA+B,CAAC,YAAY,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE;IACvF,MAAM,eAAe,GAAG,IAAI,aAAa,CAAC;QACtC,IAAI,GAAE,QAAQ,IAAI;YAC1B,2DAAA;YACA,8CAAA;YACY,UAAU,CAAC,gBAAgB,CAAC,IAAM,oBAAoB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC;YAChF,IAAI,QAAQ,CAAC,SAAS,IAAI,OAAO,CAAC,MAAM,KAAK,QAAQ,EAAE;gBACnD,MAAM,CAAC,MAAM,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,uDAAuD,GACtG,oDAAoD,GACpD,wCAAwC,GACxC,iCAAiC,CAAC,CAAC,CAAC;YACxD,CAAa,MACI;gBACD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACzC,CAAa;QACb,CAAS;QACD,KAAK,EAAE,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IACpC,CAAK,CAAC,CAAC;IACH,MAAM,QAAQ,GAAG,IAAI,aAAa,CAAC,KAAK,EAAE,eAAe,EAAE;QACvD,sBAAsB,EAAE,IAAI;QAC5B,qBAAqB,EAAE,IAAI;IACnC,CAAK,CAAC,CAAC;IACH,OAAO,kBAAkB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;AACtD,CAAC;AACD,SAAS,yBAAyB,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE;IACrE,MAAM,MAAM,GAAG,kBAAkB,CAAC,IAAI,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;IACnE,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY;QAC3C,oBAAoB,CAAC,MAAM,aAAa,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;IAC9E,CAAK,CAAC,CAAC;AACP,CAAC;AACD,SAAS,4BAA4B,CAAC,MAAM,EAAE,SAAS,EAAE;IACrD,OAAO,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,UAAY,uBAAuB,CAAC,MAAM,aAAa,CAAC,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;AAClH,CAAC;AACD,SAAS,kBAAkB,CAAC,IAAI,EAAE,UAAU,EAAE;IAC1C,IAAI,OAAO,CAAC;IACZ,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC1B,OAAO,GAAG,cAAc,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAChD,CAAK,MACI;QACD,OAAO,GAAG,IAAI,CAAC;IACvB,CAAK;IACD,OAAO,eAAe,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,UAAU,CAAC,CAAC;AACpE,CAAC;AACD,SAAS,oCAAoC,CAAC,MAAM,EAAE,OAAO,EAAE;IAC3D,OAAO,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,YAAY;QACzC,OAAO,+BAA+B,CAAC,MAAM,aAAa,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC;IACrF,CAAK,CAAC,CAAC;AACP,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,SAAS,uBAAuB,CAAC,QAAQ,EAAE,QAAQ,EAAE;IACjD,OAAO,QAAQ,CAAC,cAAc,KAAK,QAAQ,CAAC,cAAc,CAAC;AAC/D,CAAC;AACD;;;CAGA,GACA,SAAS,uBAAuB,CAAC,OAAO,EAAE;IACtC,MAAM,KAAK,GAAG,CAAA,CAAE,CAAC;IACjB,IAAI,OAAO,CAAC,cAAc,KAAK,SAAS,EAAE;QACtC,KAAK,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;IACtD,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,SAAS,GAAG,mBAAmB,CAAC;AACtC;;;CAGA,GACA,MAAM,kBAAkB,GAAG,IAAI,GAAG,EAAE,CAAC;AACrC;;;CAGA,GACA,SAAS,gBAAgB,CAAC,SAAS,EAAE;IACjC,MAAM,SAAS,GAAG,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACpD,IAAI,SAAS,EAAE;QACX,QAAQ,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC;QAC1C,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACrC,SAAS,CAAC,SAAS,EAAE,CAAC;IAC9B,CAAK;AACL,CAAC;AACD,SAAS,gBAAgB,CAAC,UAAU,EAAE,KAAK,EAAE,cAAc,EAAE,QAAQ,EAAE;IACnE,OAAO,IAAI,YAAY,CAAC,UAAU,EAAE,KAAK,EAAE,cAAc,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,4BAA4B,EAAE,QAAQ,CAAC,iCAAiC,EAAE,uBAAuB,CAAC,QAAQ,CAAC,8BAA8B,CAAC,EAAE,QAAQ,CAAC,eAAe,CAAC,CAAC;AAC3Q,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,uBAAA;AACA,MAAM,YAAY,GAAG,0BAA0B,CAAC;AAChD,MAAM,WAAW,GAAG,IAAI,CAAC;AACzB,8EAAA;AACA,+EAAA;AACA,0EAAA;AACA,oDAAA;AACA,MAAM,gCAAgC,GAAG,CAAC,CAAC;AAC3C,+EAAA;AACA,kDAAA;AACA,oDAAA;AACA,MAAM,gCAAgC,GAAG,EAAE,CAAC;AAC5C,4DAAA;AACA,MAAM,gCAAgC,GAAG,IAAI,CAAC;AAC9C;;;;CAIA,GACA,MAAM,qBAAqB,CAAC;IACxB,WAAW,CAAC,QAAQ,CAAE;QAClB,IAAI,EAAE,EAAE,EAAE,CAAC;QACX,IAAI,QAAQ,CAAC,IAAI,KAAK,SAAS,EAAE;YAC7B,IAAI,QAAQ,CAAC,GAAG,KAAK,SAAS,EAAE;gBAC5B,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,oDAAoD,CAAC,CAAC;YACtH,CAAa;YACD,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;YACzB,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC;QACnC,CAAS,MACI;YACD,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YAC1B,IAAI,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,QAAQ,CAAC,GAAG,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,WAAW,CAAC;QACxF,CAAS;QACD,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;QACxC,IAAI,CAAC,yBAAyB,GAAG,CAAC,CAAC,QAAQ,CAAC,yBAAyB,CAAC;QACtE,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,UAAU,CAAC;QACjC,IAAI,QAAQ,CAAC,cAAc,KAAK,SAAS,EAAE;YACvC,IAAI,CAAC,cAAc,GAAG,4BAA4B,CAAC;QAC/D,CAAS,MACI;YACD,IAAI,QAAQ,CAAC,cAAc,KAAK,uBAAuB,IACnD,QAAQ,CAAC,cAAc,GAAG,4BAA4B,EAAE;gBACxD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,gCAAgC,EAAE,4BAA4B,CAAC,CAAC,CAAC,CAAC;YACnI,CAAa,MACI;gBACD,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC;YAC9D,CAAa;QACb,CAAS;QACD,yBAAyB,CAAC,8BAA8B,EAAE,QAAQ,CAAC,4BAA4B,EAAE,mCAAmC,EAAE,QAAQ,CAAC,iCAAiC,CAAC,CAAC;QAClL,IAAI,CAAC,4BAA4B,GAAG,CAAC,CAAC,QAAQ,CAAC,4BAA4B,CAAC;QAC5E,IAAI,IAAI,CAAC,4BAA4B,EAAE;YACnC,IAAI,CAAC,iCAAiC,GAAG,KAAK,CAAC;QAC3D,CAAS,MACI,IAAI,QAAQ,CAAC,iCAAiC,KAAK,SAAS,EAAE;YAC/D,IAAI,CAAC,iCAAiC,GAAG,gCAAgC,CAAC;QACtF,CAAS,MACI;YACb,uEAAA;YACA,oEAAA;YACA,4CAAA;YACY,IAAI,CAAC,iCAAiC,GAClC,CAAC,CAAC,QAAQ,CAAC,iCAAiC,CAAC;QAC7D,CAAS;QACD,IAAI,CAAC,8BAA8B,GAAG,uBAAuB,CAAC,CAAC,EAAE,GAAG,QAAQ,CAAC,8BAA8B,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,CAAA,CAAE,CAAC,CAAC;QAClJ,0BAA0B,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;QAChE,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC;IAC1D,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAQ,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAC5B,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,IACtB,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,WAAW,IACtC,IAAI,CAAC,cAAc,KAAK,KAAK,CAAC,cAAc,IAC5C,IAAI,CAAC,4BAA4B,KAC7B,KAAK,CAAC,4BAA4B,IACtC,IAAI,CAAC,iCAAiC,KAClC,KAAK,CAAC,iCAAiC,IAC3C,uBAAuB,CAAC,IAAI,CAAC,8BAA8B,EAAE,KAAK,CAAC,8BAA8B,CAAC,IAClG,IAAI,CAAC,yBAAyB,KAAK,KAAK,CAAC,yBAAyB,IAClE,IAAI,CAAC,eAAe,KAAK,KAAK,CAAC,eAAe,EAAE;IAC5D,CAAK;AACL,CAAC;AACD,SAAS,0BAA0B,CAAC,OAAO,EAAE;IACzC,IAAI,OAAO,CAAC,cAAc,KAAK,SAAS,EAAE;QACtC,IAAI,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;YAC/B,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,8BAA8B,CAAC,GAC5E,CAAC,EAAE,OAAO,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAC/D,CAAS;QACD,IAAI,OAAO,CAAC,cAAc,GAAG,gCAAgC,EAAE;YAC3D,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,8BAA8B,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,GACtG,CAAC,0BAA0B,EAAE,gCAAgC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClF,CAAS;QACD,IAAI,OAAO,CAAC,cAAc,GAAG,gCAAgC,EAAE;YAC3D,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,8BAA8B,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,GACtG,CAAC,0BAA0B,EAAE,gCAAgC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClF,CAAS;IACT,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;CAIA,GACA,MAAM,WAAW,CAAC;IAClB,qBAAA,GACI,WAAW,CAAC,gBAAgB,EAAE,oBAAoB,EAAE,WAAW,EAAE,IAAI,CAAE;QACnE,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACzB;;SAEA,GACQ,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;QAC7B,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG,IAAI,qBAAqB,CAAC,CAAA,CAAE,CAAC,CAAC;QAC/C,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IACrC,CAAK;IACL;;;KAGA,GACI,IAAI,GAAG,GAAG;QACN,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,iEAAiE,GAChH,eAAe,CAAC,CAAC;QACjC,CAAS;QACD,OAAO,IAAI,CAAC,IAAI,CAAC;IACzB,CAAK;IACD,IAAI,YAAY,GAAG;QACf,OAAO,IAAI,CAAC,eAAe,CAAC;IACpC,CAAK;IACD,IAAI,WAAW,GAAG;QACd,OAAO,IAAI,CAAC,cAAc,KAAK,SAAS,CAAC;IACjD,CAAK;IACD,YAAY,CAAC,QAAQ,EAAE;QACnB,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,oEAAoE,GACnH,oEAAoE,GACpE,gCAAgC,CAAC,CAAC;QAClD,CAAS;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QACrD,IAAI,QAAQ,CAAC,WAAW,KAAK,SAAS,EAAE;YACpC,IAAI,CAAC,gBAAgB,GAAG,2BAA2B,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACtF,CAAS;IACT,CAAK;IACD,YAAY,GAAG;QACX,OAAO,IAAI,CAAC,SAAS,CAAC;IAC9B,CAAK;IACD,eAAe,GAAG;QACd,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,OAAO,IAAI,CAAC,SAAS,CAAC;IAC9B,CAAK;IACD,OAAO,GAAG;QACN,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACtB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACpD,CAAS;QACD,OAAO,IAAI,CAAC,cAAc,CAAC;IACnC,CAAK;IACL,6EAAA,GACI,MAAM,GAAG;QACL,OAAO;YACH,GAAG,EAAE,IAAI,CAAC,IAAI;YACd,UAAU,EAAE,IAAI,CAAC,WAAW;YAC5B,QAAQ,EAAE,IAAI,CAAC,SAAS;QACpC,CAAS,CAAC;IACV,CAAK;IACL;;;;;;KAMA,GACI,UAAU,GAAG;QACT,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACvB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IACjC,CAAK;AACL,CAAC;AACD;;;;;;;;;;;;CAYA,GACA,SAAS,wBAAwB,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,GAAG,CAAA,CAAE,EAAE;IACnE,IAAI,EAAE,CAAC;IACP,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IACzC,MAAM,QAAQ,GAAG,SAAS,CAAC,YAAY,EAAE,CAAC;IAC1C,MAAM,cAAc,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACzC,IAAI,QAAQ,CAAC,IAAI,KAAK,YAAY,IAAI,QAAQ,CAAC,IAAI,KAAK,cAAc,EAAE;QACpE,OAAO,CAAC,qFAAqF,GACzF,eAAe,CAAC,CAAC;IAC7B,CAAK;IACD,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,QAAQ,CAAC,EAAE;QAAE,IAAI,EAAE,cAAc;QAAE,GAAG,EAAE,KAAK;IAAA,CAAE,CAAC,CAAC,CAAC;IACzG,IAAI,OAAO,CAAC,aAAa,EAAE;QACvB,IAAI,KAAK,CAAC;QACV,IAAI,IAAI,CAAC;QACT,IAAI,OAAO,OAAO,CAAC,aAAa,KAAK,QAAQ,EAAE;YAC3C,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC;YAC9B,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;QAClC,CAAS,MACI;YACb,uEAAA;YACA,4DAAA;YACY,KAAK,yLAAG,sBAAmB,AAAnB,EAAoB,OAAO,CAAC,aAAa,EAAE,CAAC,EAAE,GAAG,SAAS,CAAC,IAAI,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACpI,MAAM,GAAG,GAAG,OAAO,CAAC,aAAa,CAAC,GAAG,IAAI,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC;YACvE,IAAI,CAAC,GAAG,EAAE;gBACN,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,sDAAsD,CAAC,CAAC;YACxH,CAAa;YACD,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;QACjC,CAAS;QACD,SAAS,CAAC,gBAAgB,GAAG,IAAI,+BAA+B,CAAC,IAAI,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;IACtG,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;CAIA,GACA,MAAM,iBAAiB,CAAC;IACxB,qBAAA,GACI,WAAW,CAAC,SAAS,EACzB;;KAEA,GACI,SAAS,EAAE,IAAI,CAAE;QACb,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACzB,0CAAA,GACQ,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,CAAK;IACD,IAAI,KAAK,GAAG;QACR,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAC9B,CAAK;IACL;;KAEA,GACI,IAAI,EAAE,GAAG;QACL,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;IAC5C,CAAK;IACL;;;KAGA,GACI,IAAI,IAAI,GAAG;QACP,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;IAChD,CAAK;IACL;;KAEA,GACI,IAAI,MAAM,GAAG;QACT,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACjG,CAAK;IACD,aAAa,CAAC,SAAS,EAAE;QACrB,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3E,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,MAAM,KAAK,CAAC;IACZ,+DAAA;IACA,+BAAA,GACI,WAAW,CAAC,SAAS,EACzB;;KAEA,GACI,SAAS,EAAE,MAAM,CAAE;QACf,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAC7B,0CAAA,GACQ,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,CAAK;IACD,aAAa,CAAC,SAAS,EAAE;QACrB,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACjE,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,MAAM,mBAAmB,SAAS,KAAK,CAAC;IACxC,qBAAA,GACI,WAAW,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,CAAE;QACrC,KAAK,CAAC,SAAS,EAAE,SAAS,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;QACpD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC3B,0CAAA,GACQ,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;IACjC,CAAK;IACL,iCAAA,GACI,IAAI,EAAE,GAAG;QACL,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9C,CAAK;IACL;;;KAGA,GACI,IAAI,IAAI,GAAG;QACP,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;IAClD,CAAK;IACL;;;KAGA,GACI,IAAI,MAAM,GAAG;QACT,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QACxC,IAAI,UAAU,CAAC,OAAO,EAAE,EAAE;YACtB,OAAO,IAAI,CAAC;QACxB,CAAS,MACI;YACD,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,SAAS,EACvD,cAAA,GAA6B,IAAI,EAAE,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;QAChE,CAAS;IACT,CAAK;IACD,aAAa,CAAC,SAAS,EAAE;QACrB,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9E,CAAK;AACL,CAAC;AACD,SAAS,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,YAAY,EAAE;IAC/C,MAAM,yLAAG,qBAAA,AAAkB,EAAC,MAAM,CAAC,CAAC;IACpC,wBAAwB,CAAC,YAAY,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IACrD,IAAI,MAAM,YAAY,WAAW,EAAE;QAC/B,MAAM,YAAY,GAAG,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,YAAY,CAAC,CAAC;QACpE,sBAAsB,CAAC,YAAY,CAAC,CAAC;QACrC,OAAO,IAAI,mBAAmB,CAAC,MAAM,EAAA,cAAA,GAAmB,IAAI,EAAE,YAAY,CAAC,CAAC;IACpF,CAAK,MACI;QACD,IAAI,CAAA,CAAE,MAAM,YAAY,iBAAiB,CAAC,IACtC,CAAA,CAAE,MAAM,YAAY,mBAAmB,CAAC,EAAE;YAC1C,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,uEAAuE,GACnH,0CAA0C,CAAC,CAAC;QAC5D,CAAS;QACD,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC;QACxF,sBAAsB,CAAC,YAAY,CAAC,CAAC;QACrC,OAAO,IAAI,mBAAmB,CAAC,MAAM,CAAC,SAAS,EACvD,cAAA,GAAyB,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAK;AACL,CAAC;AACD,qDAAA;AACA,4FAAA;AACA;;;;;;;;;;CAUA,GACA,SAAS,eAAe,CAAC,SAAS,EAAE,YAAY,EAAE;IAC9C,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IACzC,wBAAwB,CAAC,iBAAiB,EAAE,eAAe,EAAE,YAAY,CAAC,CAAC;IAC3E,IAAI,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QAChC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,uBAAuB,EAAE,YAAY,CAAC,qBAAqB,CAAC,GACzG,CAAC,uDAAuD,CAAC,CAAC,CAAC;IACvE,CAAK;IACD,OAAO,IAAI,KAAK,CAAC,SAAS,EAC9B,cAAA,GAAqB,IAAI,EAAE,0BAA0B,CAAC,YAAY,CAAC,CAAC,CAAC;AACrE,CAAC;AACD,SAAS,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,YAAY,EAAE;IACxC,MAAM,yLAAG,qBAAA,AAAkB,EAAC,MAAM,CAAC,CAAC;IACxC,4EAAA;IACA,0BAAA;IACI,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;QACxB,IAAI,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAK;IACD,wBAAwB,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IAC9C,IAAI,MAAM,YAAY,WAAW,EAAE;QAC/B,MAAM,YAAY,GAAG,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,YAAY,CAAC,CAAC;QACpE,oBAAoB,CAAC,YAAY,CAAC,CAAC;QACnC,OAAO,IAAI,iBAAiB,CAAC,MAAM,EAC3C,cAAA,GAAyB,IAAI,EAAE,IAAI,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;IAC9D,CAAK,MACI;QACD,IAAI,CAAA,CAAE,MAAM,YAAY,iBAAiB,CAAC,IACtC,CAAA,CAAE,MAAM,YAAY,mBAAmB,CAAC,EAAE;YAC1C,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,uEAAuE,GACnH,0CAA0C,CAAC,CAAC;QAC5D,CAAS;QACD,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC;QACxF,oBAAoB,CAAC,YAAY,CAAC,CAAC;QACnC,OAAO,IAAI,iBAAiB,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,YAAY,mBAAmB,GAAG,MAAM,CAAC,SAAS,GAAG,IAAI,EAAE,IAAI,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;IACvJ,CAAK;AACL,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE;IAC3B,IAAI,OAAG,uMAAkB,AAAlB,EAAmB,IAAI,CAAC,CAAC;IAChC,KAAK,yLAAG,qBAAA,AAAkB,EAAC,KAAK,CAAC,CAAC;IAClC,IAAI,CAAC,IAAI,YAAY,iBAAiB,IAClC,IAAI,YAAY,mBAAmB,KAC3C,CAAS,KAAK,YAAY,iBAAiB,IAAI,KAAK,YAAY,mBAAmB,CAAC,EAAE;QAC9E,OAAQ,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,IACtC,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IACxB,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,EAAE;IAChD,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AACD;;;;;;;;CAQA,GACA,SAAS,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE;IAC7B,IAAI,OAAG,uMAAA,AAAkB,EAAC,IAAI,CAAC,CAAC;IAChC,KAAK,yLAAG,qBAAA,AAAkB,EAAC,KAAK,CAAC,CAAC;IAClC,IAAI,IAAI,YAAY,KAAK,IAAI,KAAK,YAAY,KAAK,EAAE;QACjD,OAAQ,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,IACtC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,IACtC,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,EAAE;IAChD,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,OAAO,GAAG,YAAY,CAAC;AAC7B,MAAM,cAAc,CAAC;IACjB,WAAW,EAAG;QAClB,iCAAA;QACQ,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;QACtC,4EAAA;QACA,wBAAA;QACQ,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QAC/B,0EAAA;QACA,oBAAA;QACQ,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QACrC,kEAAA;QACA,wDAAA;QACQ,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;QACpC,sBAAA;QACQ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAC5B,uEAAA;QACA,2BAAA;QACQ,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;QACzC,2EAAA;QACQ,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;QAC5C,+CAAA;QACQ,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACjC,kEAAA;QACQ,IAAI,CAAC,OAAO,GAAG,IAAI,kBAAkB,CAAC,IAAI,EAAE,mBAAmB,CAAA,2BAAA,GAA+B,CAAC;QACvG,uEAAA;QACA,2EAAA;QACA,oCAAA;QACQ,IAAI,CAAC,iBAAiB,GAAG,MAAM;YAC3B,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QACvC,CAAS,CAAC;IACV,CAAK;IACD,IAAI,cAAc,GAAG;QACjB,OAAO,IAAI,CAAC,eAAe,CAAC;IACpC,CAAK;IACL;;;KAGA,GACI,gBAAgB,CAAC,EAAE,EAAE;QACzB,mEAAA;QACQ,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACzB,CAAK;IACD,mCAAmC,CAAC,EAAE,EAAE;QACpC,IAAI,CAAC,eAAe,EAAE,CAAC;QAC/B,mEAAA;QACQ,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;IACjC,CAAK;IACD,mBAAmB,CAAC,kBAAkB,EAAE;QACpC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACvB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,sBAAsB,GAAG,kBAAkB,IAAI,KAAK,CAAC;QACtE,CAAS;IACT,CAAK;IACD,OAAO,CAAC,EAAE,EAAE;QACR,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,IAAI,CAAC,eAAe,EAAE;YAClC,yCAAA;YACY,OAAO,IAAI,OAAO,CAAC,KAAM,CAAA,AAAG,CAAC,CAAC;QAC1C,CAAS;QACT,mEAAA;QACA,uEAAA;QACA,wDAAA;QACQ,MAAM,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC5B,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM;YAC9B,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,sBAAsB,EAAE;gBACrE,2BAAA;gBACgB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;YACzC,CAAa;YACD,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,IAAI,CAAC,OAAO,CAAC;QAChC,CAAS,CAAC,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,OAAO,CAAC,CAAC;IACpC,CAAK;IACD,gBAAgB,CAAC,EAAE,EAAE;QACjB,IAAI,CAAC,gBAAgB,CAAC,MAAM;YACxB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC3B,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;QACtC,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;KAGA,GACI,MAAM,WAAW,GAAG;QAChB,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;YAChC,OAAO;QACnB,CAAS;QACD,IAAI;YACA,MAAM,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC;YAC7B,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACjC,CAAS,CACD,OAAO,CAAC,EAAE;YACN,IAAI,2BAA2B,CAAC,CAAC,CAAC,EAAE;gBAChC,QAAQ,CAAC,OAAO,EAAE,yCAAyC,GAAG,CAAC,CAAC,CAAC;YACjF,CAAa,MACI;gBACD,MAAM,CAAC,CAAC,CAAA,wCAAA;YACxB,CAAa;QACb,CAAS;QACD,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1C,sEAAA;YACA,mEAAA;YACA,qEAAA;YACA,wEAAA;YACA,iEAAA;YACA,0EAAA;YACA,uBAAA;YACA,sEAAA;YACA,oEAAA;YACA,0BAAA;YACY,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;QACjE,CAAS;IACT,CAAK;IACD,eAAe,CAAC,EAAE,EAAE;QAChB,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM;YACjC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;YAChC,OAAO,EAAE,EAAE,CACN,KAAK,CAAC,CAAC,KAAK,KAAK;gBAClB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;gBACjC,MAAM,OAAO,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC;gBACzC,QAAQ,CAAC,4BAA4B,EAAE,OAAO,CAAC,CAAC;gBAChE,sEAAA;gBACA,oEAAA;gBACA,mCAAA;gBACgB,MAAM,KAAK,CAAC;YAC5B,CAAa,CAAC,CACG,IAAI,EAAC,MAAM,IAAI;gBAChB,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;gBACjC,OAAO,MAAM,CAAC;YAC9B,CAAa,CAAC,CAAC;QACf,CAAS,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,OAAO,OAAO,CAAC;IACvB,CAAK;IACD,iBAAiB,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE;QACpC,IAAI,CAAC,eAAe,EAAE,CAAC;QAC/B,6DAAA;QACQ,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE;YAC3C,OAAO,GAAG,CAAC,CAAC;QACxB,CAAS;QACD,MAAM,SAAS,GAAG,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,GAAE,SAAS,GAAI,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC,CAAC;QACtI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACvC,OAAO,SAAS,CAAC;IACzB,CAAK;IACD,eAAe,GAAG;QACd,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,EAAE,CAAC;QACnB,CAAS;IACT,CAAK;IACD,yBAAyB,GAAG,CAChC,CAAK;IACL;;;KAGA,GACI,MAAM,KAAK,GAAG;QAClB,yEAAA;QACA,4EAAA;QACA,yEAAA;QACA,4BAAA;QACQ,IAAI,WAAW,CAAC;QAChB,GAAG;YACC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;YACxB,MAAM,WAAW,CAAC;QAC9B,CAAS,OAAQ,WAAW,KAAK,IAAI,CAAC,IAAI,CAAE;IAC5C,CAAK;IACL;;;KAGA,GACI,wBAAwB,CAAC,OAAO,EAAE;QAC9B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAE;YACrC,IAAI,EAAE,CAAC,OAAO,KAAK,OAAO,EAAE;gBACxB,OAAO,IAAI,CAAC;YAC5B,CAAa;QACb,CAAS;QACD,OAAO,KAAK,CAAC;IACrB,CAAK;IACL;;;;;;KAMA,GACI,4BAA4B,CAAC,WAAW,EAAE;QAC9C,yEAAA;QACQ,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,MAAM;YACvC,8DAAA;YACY,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAK,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;YACvE,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAE;gBACrC,EAAE,CAAC,SAAS,EAAE,CAAC;gBACf,IAAI,WAAW,KAAK,KAAK,CAAA,eAAA,OAAsB,EAAE,CAAC,OAAO,KAAK,WAAW,EAAE;oBACvE,MAAM;gBAC1B,CAAiB;YACjB,CAAa;YACD,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;QAChC,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;KAEA,GACI,oBAAoB,CAAC,OAAO,EAAE;QAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAK;IACL,uDAAA,GACI,sBAAsB,CAAC,EAAE,EAAE;QAC/B,iFAAA;QACQ,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACjD,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAChD,CAAK;AACL,CAAC;AACD,SAAS,aAAa,GAAG;IACrB,OAAO,IAAI,cAAc,EAAE,CAAC;AAChC,CAAC;AACD;;;;CAIA,GACA,SAAS,iBAAiB,CAAC,KAAK,EAAE;IAC9B,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC;IAClC,IAAI,KAAK,CAAC,KAAK,EAAE;QACb,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;YACrC,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC;QAClC,CAAS,MACI;YACD,OAAO,GAAG,KAAK,CAAC,OAAO,GAAG,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC;QACzD,CAAS;IACT,CAAK;IACD,OAAO,OAAO,CAAC;AACnB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;CAKA,GACA,MAAM,cAAc,CAAC;IACjB,WAAW,EAAG;QACV,IAAI,CAAC,iBAAiB,GAAG,CAAA,CAAE,CAAC;QAC5B,IAAI,CAAC,uBAAuB,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC9C,IAAI,CAAC,aAAa,GAAG;YACjB,SAAS,EAAE,SAAS;YACpB,UAAU,EAAE,CAAC;YACb,cAAc,EAAE,CAAC;YACjB,WAAW,EAAE,CAAC;YACd,eAAe,EAAE,CAAC;QAC9B,CAAS,CAAC;IACV,CAAK;IACL;;;;;;;KAOA,GACI,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE;QAC9B,IAAI,CAAC,iBAAiB,GAAG;YACrB,IAAI;YACJ,KAAK;YACL,QAAQ;QACpB,CAAS,CAAC;IACV,CAAK;IACL;;;;KAIA,GACI,KAAK,CAAC,UAAU,EAAE;QACd,OAAO,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IACtE,CAAK;IACL;;;;;;KAMA,GACI,IAAI,CAAC,WAAW,EAAE,UAAU,EAAE;QAC1B,OAAO,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAClF,CAAK;IACL;;;;;KAKA,GACI,aAAa,CAAC,QAAQ,EAAE;QACpB,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAC/B,IAAI,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE;YACjC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;QAC9C,CAAS;QACD,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACvD,CAAK;IACL;;;;;KAKA,GACI,SAAS,CAAC,KAAK,EAAE;QACb,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,OAAO,CAAC;QACvC,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE;YAC7B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5D,CAAS;QACD,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE;YAC9B,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAChD,CAAS;QACD,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACnD,CAAK;IACL;;;;;KAKA,GACI,eAAe,CAAC,QAAQ,EAAE;QACtB,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE;YAC7B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAS;IACT,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;CAIA,GACK,MAAC,oBAAoB,GAAG,wBAAwB;AACrD;;;;CAIA,GACA,MAAM,SAAS,SAAS,WAAW,CAAC;IACpC,qBAAA,GACI,WAAW,CAAC,uBAAuB,EAAE,2BAA2B,EAAE,UAAU,EAAE,GAAG,CAAE;QAC/E,KAAK,CAAC,uBAAuB,EAAE,2BAA2B,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;QACrF;;SAEA,GACQ,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,aAAa,EAAE,CAAC;QAC9B,IAAI,CAAC,eAAe,GAAG,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,IAAI,KAAK,WAAW,CAAC;IACnG,CAAK;IACD,UAAU,GAAG;QACT,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACpC,mEAAA;YACA,6BAAA;YACY,kBAAkB,CAAC,IAAI,CAAC,CAAC;QACrC,CAAS;QACD,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC;IACjD,CAAK;AACL,CAAC;AACD;;;;;;;;;;;CAWA,GACA,SAAS,mBAAmB,CAAC,GAAG,EAAE,QAAQ,EAAE,UAAU,EAAE;IACpD,IAAI,CAAC,UAAU,EAAE;QACb,UAAU,GAAG,qBAAqB,CAAC;IAC3C,CAAK;IACD,MAAM,QAAQ,4LAAG,eAAA,AAAY,EAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IAChD,IAAI,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,EAAE;QACpC,MAAM,gBAAgB,GAAG,QAAQ,CAAC,YAAY,CAAC;YAC3C,UAAU,EAAE,UAAU;QAClC,CAAS,CAAC,CAAC;QACH,MAAM,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACxD,0LAAI,YAAA,AAAS,EAAC,eAAe,EAAE,QAAQ,CAAC,EAAE;YACtC,OAAO,gBAAgB,CAAC;QACpC,CAAS,MACI;YACD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,qDAAqD,GACpG,8EAA8E,GAC9E,qFAAqF,GACrF,gCAAgC,CAAC,CAAC;QAClD,CAAS;IACT,CAAK;IACD,IAAI,QAAQ,CAAC,cAAc,KAAK,SAAS,IACrC,QAAQ,CAAC,UAAU,KAAK,SAAS,EAAE;QACnC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,oFAAoF,CAAC,GAClI,CAAC,kEAAkE,CAAC,CAAC,CAAC;IAClF,CAAK;IACD,IAAI,QAAQ,CAAC,cAAc,KAAK,SAAS,IACrC,QAAQ,CAAC,cAAc,KAAK,oBAAoB,IAChD,QAAQ,CAAC,cAAc,GAAG,4BAA4B,EAAE;QACxD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,gCAAgC,EAAE,4BAA4B,CAAC,CAAC,CAAC,CAAC;IAC3H,CAAK;IACD,OAAO,QAAQ,CAAC,UAAU,CAAC;QACvB,OAAO,EAAE,QAAQ;QACjB,kBAAkB,EAAE,UAAU;IACtC,CAAK,CAAC,CAAC;AACP,CAAC;AACD,SAAS,YAAY,CAAC,eAAe,EAAE,kBAAkB,EAAE;IACvD,MAAM,GAAG,GAAG,OAAO,eAAe,KAAK,QAAQ,GAAG,eAAe,4LAAG,SAAA,AAAM,EAAE,CAAC;IAC7E,MAAM,UAAU,GAAG,OAAO,eAAe,KAAK,QAAQ,GAChD,eAAe,GACf,kBAAkB,IAAI,qBAAqB,CAAC;IAClD,MAAM,EAAE,2LAAG,gBAAA,AAAY,EAAC,GAAG,EAAE,WAAW,CAAC,CAAC,YAAY,CAAC;QACnD,UAAU,EAAE,UAAU;IAC9B,CAAK,CAAC,CAAC;IACH,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE;QAClB,MAAM,QAAQ,yLAAG,oCAAA,AAAiC,EAAC,WAAW,CAAC,CAAC;QAChE,IAAI,QAAQ,EAAE;YACV,wBAAwB,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC;QACtD,CAAS;IACT,CAAK;IACD,OAAO,EAAE,CAAC;AACd,CAAC;AACD;;CAEA,GACA,SAAS,yBAAyB,CAAC,SAAS,EAAE;IAC1C,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE;QAC7B,kBAAkB,CAAC,SAAS,CAAC,CAAC;IACtC,CAAK;IACD,SAAS,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,CAAC;IACjD,OAAO,SAAS,CAAC,gBAAgB,CAAC;AACtC,CAAC;AACD,SAAS,kBAAkB,CAAC,SAAS,EAAE;IACnC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACf,MAAM,QAAQ,GAAG,SAAS,CAAC,eAAe,EAAE,CAAC;IAC7C,MAAM,YAAY,GAAG,gBAAgB,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,GAAG,SAAS,CAAC,IAAI,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,KAAK,EAAE,EAAE,SAAS,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;IACvL,SAAS,CAAC,gBAAgB,GAAG,IAAI,eAAe,CAAC,SAAS,CAAC,gBAAgB,EAAE,SAAS,CAAC,oBAAoB,EAAE,SAAS,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IAC7I,IAAI,CAAC,CAAC,EAAE,GAAG,QAAQ,CAAC,KAAK,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,yBAAyB,KAChG,CAAS,CAAC,EAAE,GAAG,QAAQ,CAAC,KAAK,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,wBAAwB,CAAC,EAAE;QAC1F,SAAS,CAAC,gBAAgB,CAAC,gCAAgC,GAAG;YAC1D,YAAY,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI;YACjC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,yBAAyB;YAClD,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,wBAAwB;QAC5D,CAAS,CAAC;IACV,CAAK;AACL,CAAC;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BA,GACA,SAAS,0BAA0B,CAAC,SAAS,EAAE,mBAAmB,EAAE;IAChE,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvC,oBAAoB,CAAC,SAAS,CAAC,CAAC;IAChC,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,IAAI,MAAM,CAAC,gCAAgC,EAAE;QACzC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,iCAAiC,CAAC,CAAC;IAC9F,CAAK;IACD,OAAO,CAAC,iEAAiE,GACrE,gDAAgD,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,SAAS,CAAC,eAAe,EAAE,CAAC;IAC7C,MAAM,uBAAuB,GAAG,IAAI,uBAAuB,EAAE,CAAC;IAC9D,MAAM,wBAAwB,GAAG,IAAI,iCAAiC,CAAC,uBAAuB,EAAE,QAAQ,CAAC,cAAc,EAAE,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,mBAAmB,CAAC,cAAc,CAAC,CAAC;IACvO,OAAO,uBAAuB,CAAC,MAAM,EAAE,uBAAuB,EAAE,wBAAwB,CAAC,CAAC;AAC9F,CAAC;AACD;;;;;;;;;;;;;;;;;;;;;;;;;CAyBA,GACA,SAAS,kCAAkC,CAAC,SAAS,EAAE;IACnD,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvC,oBAAoB,CAAC,SAAS,CAAC,CAAC;IAChC,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,IAAI,MAAM,CAAC,gCAAgC,EAAE;QACzC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,iCAAiC,CAAC,CAAC;IAC9F,CAAK;IACD,OAAO,CAAC,yEAAyE,GAC7E,gDAAgD,CAAC,CAAC;IACtD,MAAM,QAAQ,GAAG,SAAS,CAAC,eAAe,EAAE,CAAC;IAC7C,MAAM,uBAAuB,GAAG,IAAI,uBAAuB,EAAE,CAAC;IAC9D,MAAM,wBAAwB,GAAG,IAAI,gCAAgC,CAAC,uBAAuB,EAAE,QAAQ,CAAC,cAAc,CAAC,CAAC;IACxH,OAAO,uBAAuB,CAAC,MAAM,EAAE,uBAAuB,EAAE,wBAAwB,CAAC,CAAC;AAC9F,CAAC;AACD;;;;;CAKA,GACA,SAAS,uBAAuB,CAAC,MAAM,EAAE,uBAAuB,EAAE,wBAAwB,EAAE;IACxF,MAAM,iBAAiB,GAAG,IAAI,QAAQ,EAAE,CAAC;IACzC,OAAO,MAAM,CAAC,UAAU,CACnB,OAAO,CAAC,YAAY;QACrB,IAAI;YACA,MAAM,2BAA2B,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC;YACpE,MAAM,0BAA0B,CAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC;YAClE,iBAAiB,CAAC,OAAO,EAAE,CAAC;QACxC,CAAS,CACD,OAAO,CAAC,EAAE;YACN,MAAM,KAAK,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,EAAE;gBACvC,MAAM,KAAK,CAAC;YAC5B,CAAa;YACD,OAAO,CAAC,kDAAkD,GACtD,gBAAgB,GAChB,KAAK,CAAC,CAAC;YACX,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAS;IACT,CAAK,CAAC,CACG,IAAI,CAAC,IAAM,iBAAiB,CAAC,OAAO,CAAC,CAAC;AAC/C,CAAC;AACD;;;;;;;;;;;;;;;;;;;;;CAqBA,GACA,SAAS,yBAAyB,CAAC,SAAS,EAAE;IAC1C,IAAI,SAAS,CAAC,YAAY,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE;QAClD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,iEAAiE,GAChH,wCAAwC,CAAC,CAAC;IACtD,CAAK;IACD,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IAChC,SAAS,CAAC,MAAM,CAAC,mCAAmC,CAAC,YAAY;QAC7D,IAAI;YACA,MAAM,yBAAyB,CAAC,sBAAsB,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC;YAC1G,QAAQ,CAAC,OAAO,EAAE,CAAC;QAC/B,CAAS,CACD,OAAO,CAAC,EAAE;YACN,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC/B,CAAS;IACT,CAAK,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC,OAAO,CAAC;AAC5B,CAAC;AACD;;;;;;;;;;;;;;;CAeA,GACA,SAAS,oBAAoB,CAAC,SAAS,EAAE;IACrC,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvC,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,OAAO,mCAAmC,CAAC,MAAM,CAAC,CAAC;AACvD,CAAC;AACD;;;;;CAKA,GACA,SAAS,aAAa,CAAC,SAAS,EAAE;IAC9B,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvC,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,OAAO,4BAA4B,CAAC,MAAM,CAAC,CAAC;AAChD,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,cAAc,CAAC,SAAS,EAAE;IAC/B,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvC,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,OAAO,6BAA6B,CAAC,MAAM,CAAC,CAAC;AACjD,CAAC;AACD;;;;;;;;;;;;;;;;;;;;;CAqBA,GACA,SAAS,SAAS,CAAC,SAAS,EAAE;6LAC1B,yBAAA,AAAsB,EAAC,SAAS,CAAC,GAAG,EAAE,WAAW,EAAE,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACnF,OAAO,SAAS,CAAC,OAAO,EAAE,CAAC;AAC/B,CAAC;AACD;;;;;;;;;;CAUA,GACA,SAAS,UAAU,CAAC,SAAS,EAAE,UAAU,EAAE;IACvC,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvC,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,MAAM,UAAU,GAAG,IAAI,cAAc,EAAE,CAAC;IACxC,yBAAyB,CAAC,MAAM,EAAE,SAAS,CAAC,WAAW,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;IACjF,OAAO,UAAU,CAAC;AACtB,CAAC;AACD;;;;;;;;;;;CAWA,GACA,SAAS,UAAU,CAAC,SAAS,EAAE,IAAI,EAAE;IACjC,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvC,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,OAAO,4BAA4B,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,IAAI,EAAC,UAAU,IAAI;QACjE,IAAI,CAAC,UAAU,EAAE;YACb,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,OAAO,IAAI,KAAK,CAAC,SAAS,EAAE,IAAI,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAK,CAAC,CAAC;AACP,CAAC;AACD,SAAS,oBAAoB,CAAC,SAAS,EAAE;IACrC,IAAI,SAAS,CAAC,YAAY,IAAI,SAAS,CAAC,WAAW,EAAE;QACjD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,sEAAsE,GACrH,oEAAoE,GACpE,gCAAgC,CAAC,CAAC;IAC9C,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,SAAS,iBAAiB,CAAC,OAAO,EAAE,eAAe,GAAG,IAAI,EAAE;IACxD,aAAa,sLAAC,cAAa,CAAC,CAAC;IAC7B,8MAAA,AAAkB,EAAC,+KAAI,YAAS,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,EAAE,kBAAkB,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK;QAChH,MAAM,GAAG,GAAG,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,YAAY,EAAE,CAAC;QACxD,MAAM,iBAAiB,GAAG,IAAI,SAAS,CAAC,IAAI,+BAA+B,CAAC,SAAS,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,EAAE,IAAI,6BAA6B,CAAC,SAAS,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE,iBAAiB,CAAC,GAAG,EAAE,UAAU,CAAC,EAAE,GAAG,CAAC,CAAC;QAC9O,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC;YAAE,eAAe;QAAA,CAAE,EAAE,QAAQ,CAAC,CAAC;QACxD,iBAAiB,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACzC,OAAO,iBAAiB,CAAC;IACjC,CAAK,EAAE,QAAQ,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;6LACzC,kBAAA,AAAe,EAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;IAC9C,+FAAA;4LACI,mBAAA,AAAe,EAAC,IAAI,EAAE,SAAS,EAAE,SAAkB,CAAC,CAAC;AACzD,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,MAAM,aAAa,CAAC;IAChB,WAAW,CAAC,KAAK,EAAE,aAAa,EAAE,SAAS,CAAE;QACzC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,6DAAA;AACA,MAAM,cAAc,CAAC;IACrB;;;;;KAKA,GACI,WAAW,CACf,yEAAA;IACI,cAAc,GAAG,OAAO,EAAE,kBAAkB,CAAE;QAC1C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QACrD,gEAAA,GACQ,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;IACrC,CAAK;AACL,CAAC;AACD;;CAEA,GACA,MAAM,sBAAsB,CAAC;IAC7B,qBAAA,GACI,WAAW,CAAC,KAAK,EAAE,eAAe,EAAE,KAAK,CAAE;QACvC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAC3B,gEAAA,GACQ,IAAI,CAAC,IAAI,GAAG,wBAAwB,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,CAAK;IACL;;;;;;;;;;KAUA,GACI,IAAI,GAAG;QACH,OAAO,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjE,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,MAAM,KAAK,CAAC;IACZ,qBAAA,GACI,WAAW,CAAC,UAAU,CAAE;QACpB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IACtC,CAAK;IACL;;;;;KAKA,GACI,OAAO,gBAAgB,CAAC,MAAM,EAAE;QAC5B,IAAI;YACA,OAAO,IAAI,KAAK,CAAC,UAAU,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;QAClE,CAAS,CACD,OAAO,CAAC,EAAE;YACN,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,+CAA+C,GAAG,CAAC,CAAC,CAAC;QACjH,CAAS;IACT,CAAK;IACL;;;;KAIA,GACI,OAAO,cAAc,CAAC,KAAK,EAAE;QACzB,OAAO,IAAI,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3D,CAAK;IACL;;;;KAIA,GACI,QAAQ,GAAG;QACP,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;IAC3C,CAAK;IACL;;;;KAIA,GACI,YAAY,GAAG;QACX,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;IAC/C,CAAK;IACL;;;;KAIA,GACI,QAAQ,GAAG;QACP,OAAO,gBAAgB,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;IACxD,CAAK;IACL;;;;;KAKA,GACI,OAAO,CAAC,KAAK,EAAE;QACX,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAC3D,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;CAOA,GACA,MAAM,SAAS,CAAC;IAChB;;;;;KAKA,GACI,WAAW,CAAC,GAAG,UAAU,CAAE;QACvB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,CAAE;YACxC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC5B,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,yCAAyC,CAAC,GACvF,gCAAgC,CAAC,CAAC;YACtD,CAAa;QACb,CAAS;QACD,IAAI,CAAC,aAAa,GAAG,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC;IACzD,CAAK;IACL;;;;;KAKA,GACI,OAAO,CAAC,KAAK,EAAE;QACX,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC/D,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,UAAU,GAAG;IAClB,OAAO,IAAI,SAAS,CAAC,iBAAiB,CAAC,CAAC;AAC5C,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,MAAM,UAAU,CAAC;IACjB;;;KAGA,GACI,WAAW,CAAC,WAAW,CAAE;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACvC,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;CAMA,GACA,MAAM,QAAQ,CAAC;IACf;;;;;KAKA,GACI,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAE;QAC7B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,QAAQ,GAAG,CAAC,EAAE,IAAI,QAAQ,GAAG,EAAE,EAAE;YACxD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,yDAAyD,GAAG,QAAQ,CAAC,CAAC;QAClI,CAAS;QACD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,SAAS,GAAG,GAAG,EAAE;YAC7D,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,4DAA4D,GAAG,SAAS,CAAC,CAAC;QACtI,CAAS;QACD,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IAC/B,CAAK;IACL;;KAEA,GACI,IAAI,QAAQ,GAAG;QACX,OAAO,IAAI,CAAC,IAAI,CAAC;IACzB,CAAK;IACL;;KAEA,GACI,IAAI,SAAS,GAAG;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC;IAC1B,CAAK;IACL;;;;;KAKA,GACI,OAAO,CAAC,KAAK,EAAE;QACX,OAAO,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC;IACtE,CAAK;IACL,iEAAA,GACI,MAAM,GAAG;QACL,OAAO;YAAE,QAAQ,EAAE,IAAI,CAAC,IAAI;YAAE,SAAS,EAAE,IAAI,CAAC,KAAK;QAAA,CAAE,CAAC;IAC9D,CAAK;IACL;;;KAGA,GACI,UAAU,CAAC,KAAK,EAAE;QACd,OAAQ,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAC9C,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE;IAC1D,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,oBAAoB,GAAG,UAAU,CAAC;AACxC,mEAAA,GACA,MAAM,aAAa,CAAC;IAChB,WAAW,CAAC,IAAI,EAAE,SAAS,EAAE,eAAe,CAAE;QAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC/C,CAAK;IACD,UAAU,CAAC,GAAG,EAAE,YAAY,EAAE;QAC1B,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;YACzB,OAAO,IAAI,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACzG,CAAS,MACI;YACD,OAAO,IAAI,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACvF,CAAS;IACT,CAAK;AACL,CAAC;AACD,uEAAA,GACA,MAAM,gBAAgB,CAAC;IACnB,WAAW,CAAC,IAAI,EACpB,sDAAA;IACI,SAAS,EAAE,eAAe,CAAE;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC/C,CAAK;IACD,UAAU,CAAC,GAAG,EAAE,YAAY,EAAE;QAC1B,OAAO,IAAI,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACrG,CAAK;AACL,CAAC;AACD,SAAS,OAAO,CAAC,UAAU,EAAE;IACzB,OAAQ,UAAU;QACd,KAAK,CAAC,CAAA,sBAAA,GAA0B;QAChC,KAAK,CAAC,CAAA,2BAAA,GAA+B;QACrC,KAAK,CAAC,CAAA,yBAAA;YACF,OAAO,IAAI,CAAC;QAChB,KAAK,CAAC,CAAA,2BAAA,GAA+B;QACrC,KAAK,CAAC,CAAA,gCAAA;YACF,OAAO,KAAK,CAAC;QACjB;YACI,MAAM,IAAI,EAAE,CAAC;IACzB,CAAK;AACL,CAAC;AACD,8DAAA,GACA,MAAM,gBAAgB,CAAC;IACvB;;;;;;;;;;;;;;;;;KAiBA,GACI,WAAW,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,yBAAyB,EAAE,eAAe,EAAE,SAAS,CAAE;QACjG,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QACnE,oEAAA;QACA,yDAAA;QACQ,IAAI,eAAe,KAAK,SAAS,EAAE;YAC/B,IAAI,CAAC,YAAY,EAAE,CAAC;QAChC,CAAS;QACD,IAAI,CAAC,eAAe,GAAG,eAAe,IAAI,EAAE,CAAC;QAC7C,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,EAAE,CAAC;IACzC,CAAK;IACD,IAAI,IAAI,GAAG;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IAClC,CAAK;IACD,IAAI,UAAU,GAAG;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;IACxC,CAAK;IACL,mEAAA,GACI,WAAW,CAAC,aAAa,EAAE;QACvB,OAAO,IAAI,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,CAAC,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,yBAAyB,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5M,CAAK;IACD,oBAAoB,CAAC,KAAK,EAAE;QACxB,IAAI,EAAE,CAAC;QACP,MAAM,SAAS,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACxF,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;YAAE,IAAI,EAAE,SAAS;YAAE,YAAY,EAAE,KAAK;QAAA,CAAE,CAAC,CAAC;QAC3E,OAAO,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QACnC,OAAO,OAAO,CAAC;IACvB,CAAK;IACD,wBAAwB,CAAC,KAAK,EAAE;QAC5B,IAAI,EAAE,CAAC;QACP,MAAM,SAAS,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACxF,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;YAAE,IAAI,EAAE,SAAS;YAAE,YAAY,EAAE,KAAK;QAAA,CAAE,CAAC,CAAC;QAC3E,OAAO,CAAC,YAAY,EAAE,CAAC;QACvB,OAAO,OAAO,CAAC;IACvB,CAAK;IACD,oBAAoB,CAAC,KAAK,EAAE;QAChC,yEAAA;QACA,aAAA;QACQ,OAAO,IAAI,CAAC,WAAW,CAAC;YAAE,IAAI,EAAE,SAAS;YAAE,YAAY,EAAE,IAAI;QAAA,CAAE,CAAC,CAAC;IACzE,CAAK;IACD,WAAW,CAAC,MAAM,EAAE;QAChB,OAAO,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY,IAAI,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACtI,CAAK;IACL,4EAAA,GACI,QAAQ,CAAC,SAAS,EAAE;QAChB,OAAQ,IAAI,CAAC,SAAS,CAAC,IAAI,EAAC,KAAK,GAAI,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,KAAK,SAAS,IAC3E,IAAI,CAAC,eAAe,CAAC,IAAI,EAAC,SAAS,GAAI,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,KAAK,SAAS,EAAE;IACzG,CAAK;IACD,YAAY,GAAG;QACnB,2EAAA;QACA,iBAAA;QACQ,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,OAAO;QACnB,CAAS;QACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;YACvC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACvD,CAAS;IACT,CAAK;IACD,mBAAmB,CAAC,OAAO,EAAE;QACzB,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,IAAI,CAAC,WAAW,CAAC,mCAAmC,CAAC,CAAC;QACxE,CAAS;QACD,IAAI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAChE,MAAM,IAAI,CAAC,WAAW,CAAC,gDAAgD,CAAC,CAAC;QACrF,CAAS;IACT,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,MAAM,cAAc,CAAC;IACjB,WAAW,CAAC,UAAU,EAAE,yBAAyB,EAAE,UAAU,CAAE;QAC3D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAC3D,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,aAAa,CAAC,UAAU,CAAC,CAAC;IAClE,CAAK;IACL,2CAAA,GACI,aAAa,CAAC,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,YAAY,GAAG,KAAK,EAAE;QACnE,OAAO,IAAI,gBAAgB,CAAC;YACxB,UAAU;YACV,UAAU;YACV,SAAS;YACT,IAAI,EAAE,WAAW,CAAC,SAAS,EAAE;YAC7B,YAAY,EAAE,KAAK;YACnB,YAAY;QACxB,CAAS,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC;IAC7E,CAAK;AACL,CAAC;AACD,SAAS,iBAAiB,CAAC,SAAS,EAAE;IAClC,MAAM,QAAQ,GAAG,SAAS,CAAC,eAAe,EAAE,CAAC;IAC7C,MAAM,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IACxD,OAAO,IAAI,cAAc,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,QAAQ,CAAC,yBAAyB,EAAE,UAAU,CAAC,CAAC;AACvG,CAAC;AACD,2CAAA,GACA,SAAS,YAAY,CAAC,cAAc,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE,OAAO,GAAG,CAAA,CAAE,EAAE;IAC5F,MAAM,OAAO,GAAG,cAAc,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,WAAW,GAC3E,CAAC,CAAA,2BAAA,MACD,CAAC,CAAA,sBAAA,KAA2B,UAAU,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;IACvE,mBAAmB,CAAC,qCAAqC,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAC3E,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC/C,IAAI,SAAS,CAAC;IACd,IAAI,eAAe,CAAC;IACpB,IAAI,OAAO,CAAC,KAAK,EAAE;QACf,SAAS,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC7C,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;IAClD,CAAK,MACI,IAAI,OAAO,CAAC,WAAW,EAAE;QAC1B,MAAM,mBAAmB,GAAG,EAAE,CAAC;QAC/B,KAAK,MAAM,iBAAiB,IAAI,OAAO,CAAC,WAAW,CAAE;YACjD,MAAM,SAAS,GAAG,uBAAuB,CAAC,UAAU,EAAE,iBAAiB,EAAE,SAAS,CAAC,CAAC;YACpF,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;gBAC9B,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC,mEAAmE,CAAC,CAAC,CAAC;YAC1J,CAAa;YACD,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,SAAS,CAAC,EAAE;gBACpD,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACpD,CAAa;QACb,CAAS;QACD,SAAS,GAAG,IAAI,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAC/C,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC,MAAM,EAAC,SAAS,GAAI,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACzG,CAAK,MACI;QACD,SAAS,GAAG,IAAI,CAAC;QACjB,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;IAClD,CAAK;IACD,OAAO,IAAI,aAAa,CAAC,IAAI,WAAW,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC;AACtF,CAAC;AACD,MAAM,oBAAoB,SAAS,UAAU,CAAC;IAC1C,iBAAiB,CAAC,OAAO,EAAE;QACvB,IAAI,OAAO,CAAC,UAAU,KAAK,CAAC,CAAA,2BAAA,KAAgC;YACpE,iEAAA;YACA,gCAAA;YACY,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjD,CAAS,MACI,IAAI,OAAO,CAAC,UAAU,KAAK,CAAC,CAAA,yBAAA,KAA8B;YAC3D,MAAM,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,oCAAoC,CAAC,GAC/E,qBAAqB,CAAC,CAAC;QACvC,CAAS,MACI;YACb,gFAAA;YACY,MAAM,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,6CAA6C,CAAC,GACxF,cAAc,CAAC,CAAC;QAChC,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAO,KAAK,YAAY,oBAAoB,CAAC;IACrD,CAAK;AACL,CAAC;AACD;;;;;;;;;;;;;;;CAeA,GACA,SAAS,0BAA0B,CAAC,UAAU,EAAE,OAAO,EAAE,YAAY,EAAE;IACnE,OAAO,IAAI,gBAAgB,CAAC;QACxB,UAAU,EAAE,CAAC,CAAA,2BAAA;QACb,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,SAAS;QACrC,UAAU,EAAE,UAAU,CAAC,WAAW;QAClC,YAAY;IACpB,CAAK,EAAE,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,yBAAyB,CAAC,CAAC;AAClF,CAAC;AACD,MAAM,6BAA6B,SAAS,UAAU,CAAC;IACnD,iBAAiB,CAAC,OAAO,EAAE;QACvB,OAAO,IAAI,cAAc,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,wBAAwB,EAAE,CAAC,CAAC;IAChF,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACX,OAAO,KAAK,YAAY,6BAA6B,CAAC;IAC9D,CAAK;AACL,CAAC;AACD,MAAM,wBAAwB,SAAS,UAAU,CAAC;IAC9C,WAAW,CAAC,UAAU,EAAE,SAAS,CAAE;QAC/B,KAAK,CAAC,UAAU,CAAC,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,CAAK;IACD,iBAAiB,CAAC,OAAO,EAAE;QACvB,MAAM,YAAY,GAAG,0BAA0B,CAAC,IAAI,EAAE,OAAO,EACrE,QAAA,GAAmB,IAAI,CAAC,CAAC;QACjB,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAC,OAAO,GAAI,SAAS,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;QACvF,MAAM,UAAU,GAAG,IAAI,4BAA4B,CAAC,cAAc,CAAC,CAAC;QACpE,OAAO,IAAI,cAAc,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC5D,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACnB,sCAAA;QACQ,OAAO,IAAI,KAAK,KAAK,CAAC;IAC9B,CAAK;AACL,CAAC;AACD,MAAM,yBAAyB,SAAS,UAAU,CAAC;IAC/C,WAAW,CAAC,UAAU,EAAE,SAAS,CAAE;QAC/B,KAAK,CAAC,UAAU,CAAC,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,CAAK;IACD,iBAAiB,CAAC,OAAO,EAAE;QACvB,MAAM,YAAY,GAAG,0BAA0B,CAAC,IAAI,EAAE,OAAO,EACrE,QAAA,GAAmB,IAAI,CAAC,CAAC;QACjB,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAC,OAAO,GAAI,SAAS,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;QACvF,MAAM,UAAU,GAAG,IAAI,6BAA6B,CAAC,cAAc,CAAC,CAAC;QACrE,OAAO,IAAI,cAAc,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC5D,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACnB,sCAAA;QACQ,OAAO,IAAI,KAAK,KAAK,CAAC;IAC9B,CAAK;AACL,CAAC;AACD,MAAM,8BAA8B,SAAS,UAAU,CAAC;IACpD,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAE;QAC9B,KAAK,CAAC,UAAU,CAAC,CAAC;QAClB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACjC,CAAK;IACD,iBAAiB,CAAC,OAAO,EAAE;QACvB,MAAM,gBAAgB,GAAG,IAAI,kCAAkC,CAAC,OAAO,CAAC,UAAU,EAAE,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QACjI,OAAO,IAAI,cAAc,CAAC,OAAO,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;IAClE,CAAK;IACD,OAAO,CAAC,KAAK,EAAE;QACnB,sCAAA;QACQ,OAAO,IAAI,KAAK,KAAK,CAAC;IAC9B,CAAK;AACL,CAAC;AACD,6CAAA,GACA,SAAS,eAAe,CAAC,cAAc,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE;IACnE,MAAM,OAAO,GAAG,cAAc,CAAC,aAAa,CAAC,CAAC,CAAA,yBAAA,KAA8B,UAAU,EAAE,SAAS,CAAC,CAAC;IACnG,mBAAmB,CAAC,qCAAqC,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAC3E,MAAM,cAAc,GAAG,EAAE,CAAC;IAC1B,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;IACvC,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,KAAK,KAAK;QAC3B,MAAM,IAAI,GAAG,+BAA+B,CAAC,UAAU,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;QACjF,qEAAA;QACA,yBAAA;QACQ,KAAK,OAAG,uMAAkB,AAAlB,EAAmB,KAAK,CAAC,CAAC;QAClC,MAAM,YAAY,GAAG,OAAO,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;QAC5D,IAAI,KAAK,YAAY,oBAAoB,EAAE;YACnD,kEAAA;YACY,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAS,MACI;YACD,MAAM,WAAW,GAAG,SAAS,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;YACnD,IAAI,WAAW,IAAI,IAAI,EAAE;gBACrB,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1B,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;YAClD,CAAa;QACb,CAAS;IACT,CAAK,CAAC,CAAC;IACH,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,CAAC;IAC3C,OAAO,IAAI,gBAAgB,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;AAC3E,CAAC;AACD,4DAAA,GACA,SAAS,kBAAkB,CAAC,cAAc,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,mBAAmB,EAAE;IAClG,MAAM,OAAO,GAAG,cAAc,CAAC,aAAa,CAAC,CAAC,CAAA,yBAAA,KAA8B,UAAU,EAAE,SAAS,CAAC,CAAC;IACnG,MAAM,IAAI,GAAG;QAAC,uBAAuB,CAAC,UAAU,EAAE,KAAK,EAAE,SAAS,CAAC;KAAC,CAAC;IACrE,MAAM,MAAM,GAAG;QAAC,KAAK;KAAC,CAAC;IACvB,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;QACtC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC,0CAA0C,CAAC,GAC9G,6DAA6D,CAAC,CAAC;IAC3E,CAAK;IACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAE;QACpD,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvE,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChD,CAAK;IACD,MAAM,cAAc,GAAG,EAAE,CAAC;IAC1B,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;IAC3C,wEAAA;IACA,2CAAA;IACI,IAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAE;QACvC,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;YAC7C,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAClC,qEAAA;YACA,yBAAA;YACY,KAAK,yLAAG,qBAAA,AAAkB,EAAC,KAAK,CAAC,CAAC;YAClC,MAAM,YAAY,GAAG,OAAO,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;YAC5D,IAAI,KAAK,YAAY,oBAAoB,EAAE;gBACvD,kEAAA;gBACgB,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,CAAa,MACI;gBACD,MAAM,WAAW,GAAG,SAAS,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;gBACnD,IAAI,WAAW,IAAI,IAAI,EAAE;oBACrB,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC1B,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;gBACtD,CAAiB;YACjB,CAAa;QACb,CAAS;IACT,CAAK;IACD,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,CAAC;IAC3C,OAAO,IAAI,gBAAgB,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;AAC3E,CAAC;AACD;;;;;;CAMA,GACA,SAAS,eAAe,CAAC,cAAc,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,GAAG,KAAK,EAAE;IAC7E,MAAM,OAAO,GAAG,cAAc,CAAC,aAAa,CAAC,WAAW,GAAG,CAAC,CAAA,gCAAA,MAAsC,CAAC,CAAA,2BAAA,KAAgC,UAAU,CAAC,CAAC;IAC/I,MAAM,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACzC,OAAO,MAAM,CAAC;AAClB,CAAC;AACD;;;;;;;;CAQA,GACA,SAAS,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE;IACnC,yEAAA;IACA,sBAAA;IACI,KAAK,yLAAG,qBAAA,AAAkB,EAAC,KAAK,CAAC,CAAC;IAClC,IAAI,mBAAmB,CAAC,KAAK,CAAC,EAAE;QAC5B,mBAAmB,CAAC,0BAA0B,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAChE,OAAO,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAK,MACI,IAAI,KAAK,YAAY,UAAU,EAAE;QAC1C,mEAAA;QACA,wEAAA;QACA,wEAAA;QACA,4DAAA;QACA,8DAAA;QACQ,uBAAuB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC;IACpB,CAAK,MACI,IAAI,KAAK,KAAK,SAAS,IAAI,OAAO,CAAC,yBAAyB,EAAE;QACvE,0EAAA;QACA,oEAAA;QACA,qDAAA;QACQ,OAAO,IAAI,CAAC;IACpB,CAAK,MACI;QACT,sEAAA;QACA,2DAAA;QACQ,IAAI,OAAO,CAAC,IAAI,EAAE;YACd,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjD,CAAS;QACD,IAAI,KAAK,YAAY,KAAK,EAAE;YACpC,uEAAA;YACA,WAAA;YACA,uEAAA;YACA,uEAAA;YACA,mEAAA;YACA,yCAAA;YACY,IAAI,OAAO,CAAC,QAAQ,CAAC,YAAY,IAC7B,OAAO,CAAC,UAAU,KAAK,CAAC,CAAA,gCAAA,KAAqC;gBAC7D,MAAM,OAAO,CAAC,WAAW,CAAC,iCAAiC,CAAC,CAAC;YAC7E,CAAa;YACD,OAAO,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC9C,CAAS,MACI;YACD,OAAO,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACpD,CAAS;IACT,CAAK;AACL,CAAC;AACD,SAAS,WAAW,CAAC,GAAG,EAAE,OAAO,EAAE;IAC/B,MAAM,MAAM,GAAG,CAAA,CAAE,CAAC;IAClB,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;QACtB,sEAAA;QACA,sDAAA;QACQ,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACzC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjD,CAAS;IACT,CAAK,MACI;QACD,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK;YACvB,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC;YACtE,IAAI,WAAW,IAAI,IAAI,EAAE;gBACrB,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;YAC1C,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,OAAO;QAAE,QAAQ,EAAE;YAAE,MAAM;QAAA,CAAE;IAAA,CAAE,CAAC;AACpC,CAAC;AACD,SAAS,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE;IAChC,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,KAAK,MAAM,KAAK,IAAI,KAAK,CAAE;QACvB,IAAI,WAAW,GAAG,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC;QAC7E,IAAI,WAAW,IAAI,IAAI,EAAE;YACjC,mEAAA;YACA,YAAA;YACY,WAAW,GAAG;gBAAE,SAAS,EAAE,YAAY;YAAA,CAAE,CAAC;QACtD,CAAS;QACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACzB,UAAU,EAAE,CAAC;IACrB,CAAK;IACD,OAAO;QAAE,UAAU,EAAE;YAAE,MAAM;QAAA,CAAE;IAAA,CAAE,CAAC;AACtC,CAAC;AACD;;;CAGA,GACA,SAAS,uBAAuB,CAAC,KAAK,EAAE,OAAO,EAAE;IACjD,mEAAA;IACI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QAC9B,MAAM,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC,2CAA2C,CAAC,CAAC,CAAC;IACrG,CAAK;IACD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;QACf,MAAM,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC,2CAA2C,CAAC,CAAC,CAAC;IACrG,CAAK;IACD,MAAM,cAAc,GAAG,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACxD,IAAI,cAAc,EAAE;QAChB,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACrD,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,SAAS,gBAAgB,CAAC,KAAK,EAAE,OAAO,EAAE;IACtC,KAAK,yLAAG,qBAAkB,AAAlB,EAAmB,KAAK,CAAC,CAAC;IAClC,IAAI,KAAK,KAAK,IAAI,EAAE;QAChB,OAAO;YAAE,SAAS,EAAE,YAAY;QAAA,CAAE,CAAC;IAC3C,CAAK,MACI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAChC,OAAO,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACnD,CAAK,MACI,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE;QACjC,OAAO;YAAE,YAAY,EAAE,KAAK;QAAA,CAAE,CAAC;IACvC,CAAK,MACI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAChC,OAAO;YAAE,WAAW,EAAE,KAAK;QAAA,CAAE,CAAC;IACtC,CAAK,MACI,IAAI,KAAK,YAAY,IAAI,EAAE;QAC5B,MAAM,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC5C,OAAO;YACH,cAAc,EAAE,WAAW,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC;QACtE,CAAS,CAAC;IACV,CAAK,MACI,IAAI,KAAK,YAAY,SAAS,EAAE;QACzC,wEAAA;QACA,sEAAA;QACA,qEAAA;QACQ,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAC5F,OAAO;YACH,cAAc,EAAE,WAAW,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC;QACtE,CAAS,CAAC;IACV,CAAK,MACI,IAAI,KAAK,YAAY,QAAQ,EAAE;QAChC,OAAO;YACH,aAAa,EAAE;gBACX,QAAQ,EAAE,KAAK,CAAC,QAAQ;gBACxB,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1C,CAAa;QACb,CAAS,CAAC;IACV,CAAK,MACI,IAAI,KAAK,YAAY,KAAK,EAAE;QAC7B,OAAO;YAAE,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,WAAW,CAAC;QAAA,CAAE,CAAC;IAC9E,CAAK,MACI,IAAI,KAAK,YAAY,iBAAiB,EAAE;QACzC,MAAM,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC;QAClC,MAAM,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC;QAC5C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC1B,MAAM,OAAO,CAAC,WAAW,CAAC,qCAAqC,GAC3D,CAAC,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,GACzD,CAAC,aAAa,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACvE,CAAS;QACD,OAAO;YACH,cAAc,EAAE,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;QAC9G,CAAS,CAAC;IACV,CAAK,MACI;QACD,MAAM,OAAO,CAAC,WAAW,CAAC,CAAC,yBAAyB,EAAE,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACzF,CAAK;AACL,CAAC;AACD;;;;;;CAMA,GACA,SAAS,mBAAmB,CAAC,KAAK,EAAE;IAChC,OAAQ,OAAO,KAAK,KAAK,QAAQ,IAC7B,KAAK,KAAK,IAAI,IACd,CAAA,CAAE,KAAK,YAAY,KAAK,CAAC,IACzB,CAAA,CAAE,KAAK,YAAY,IAAI,CAAC,IACxB,CAAA,CAAE,KAAK,YAAY,SAAS,CAAC,IAC7B,CAAA,CAAE,KAAK,YAAY,QAAQ,CAAC,IAC5B,CAAA,CAAE,KAAK,YAAY,KAAK,CAAC,IACzB,CAAA,CAAE,KAAK,YAAY,iBAAiB,CAAC,IACrC,CAAA,CAAE,KAAK,YAAY,UAAU,CAAC,EAAE;AACxC,CAAC;AACD,SAAS,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;IAClD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;QACtD,MAAM,WAAW,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,WAAW,KAAK,WAAW,EAAE;YACzC,yCAAA;YACY,MAAM,OAAO,CAAC,WAAW,CAAC,OAAO,GAAG,kBAAkB,CAAC,CAAC;QACpE,CAAS,MACI;YACD,MAAM,OAAO,CAAC,WAAW,CAAC,OAAO,GAAG,GAAG,GAAG,WAAW,CAAC,CAAC;QACnE,CAAS;IACT,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,uBAAuB,CAAC,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE;IAC9D,8EAAA;IACA,aAAA;IACI,IAAI,yLAAG,qBAAA,AAAkB,EAAC,IAAI,CAAC,CAAC;IAChC,IAAI,IAAI,YAAY,SAAS,EAAE;QAC3B,OAAO,IAAI,CAAC,aAAa,CAAC;IAClC,CAAK,MACI,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC/B,OAAO,+BAA+B,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACjE,CAAK,MACI;QACD,MAAM,OAAO,GAAG,iDAAiD,CAAC;QAClE,MAAM,WAAW,CAAC,OAAO,EAAE,UAAU,EAC7C,iBAAA,GAA4B,KAAK,EACjC,SAAA,GAAoB,SAAS,EAAE,SAAS,CAAC,CAAC;IAC1C,CAAK;AACL,CAAC;AACD;;CAEA,GACA,MAAM,mBAAmB,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,CAAC;AACxD;;;;;;;;CAQA,GACA,SAAS,+BAA+B,CAAC,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE;IAClE,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;IAC/C,IAAI,KAAK,IAAI,CAAC,EAAE;QACZ,MAAM,WAAW,CAAC,CAAC,oBAAoB,EAAE,IAAI,CAAC,0BAA0B,CAAC,GACrE,CAAC,0BAA0B,CAAC,EAAE,UAAU,EACpD,iBAAA,GAA4B,KAAK,EACjC,SAAA,GAAoB,SAAS,EAAE,SAAS,CAAC,CAAC;IAC1C,CAAK;IACD,IAAI;QACA,OAAO,IAAI,SAAS,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC;IAC/D,CAAK,CACD,OAAO,CAAC,EAAE;QACN,MAAM,WAAW,CAAC,CAAC,oBAAoB,EAAE,IAAI,CAAC,4BAA4B,CAAC,GACvE,CAAC,6CAA6C,CAAC,EAAE,UAAU,EACvE,iBAAA,GAA4B,KAAK,EACjC,SAAA,GAAoB,SAAS,EAAE,SAAS,CAAC,CAAC;IAC1C,CAAK;AACL,CAAC;AACD,SAAS,WAAW,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE;IACpE,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACxC,MAAM,WAAW,GAAG,SAAS,KAAK,SAAS,CAAC;IAC5C,IAAI,OAAO,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,2BAA2B,CAAC,CAAC;IAClE,IAAI,YAAY,EAAE;QACd,OAAO,IAAI,wBAAwB,CAAC;IAC5C,CAAK;IACD,OAAO,IAAI,IAAI,CAAC;IAChB,IAAI,WAAW,GAAG,EAAE,CAAC;IACrB,IAAI,OAAO,IAAI,WAAW,EAAE;QACxB,WAAW,IAAI,SAAS,CAAC;QACzB,IAAI,OAAO,EAAE;YACT,WAAW,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;QAC/C,CAAS;QACD,IAAI,WAAW,EAAE;YACb,WAAW,IAAI,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC;QACvD,CAAS;QACD,WAAW,IAAI,GAAG,CAAC;IAC3B,CAAK;IACD,OAAO,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO,GAAG,MAAM,GAAG,WAAW,CAAC,CAAC;AACrF,CAAC;AACD,sEAAA,GACA,SAAS,iBAAiB,CAAC,QAAQ,EAAE,MAAM,EAAE;IACzC,OAAO,QAAQ,CAAC,IAAI,EAAC,CAAC,GAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AACjD,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;CAQA,GACA,MAAM,kBAAkB,CAAC;IACzB,uEAAA;IACA,mCAAA;IACA,qCAAA;IACA,oCAAA;IACA,+BAAA,GACI,WAAW,CAAC,UAAU,EAAE,eAAe,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,CAAE;QAClE,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;IACL,wEAAA,GACI,IAAI,EAAE,GAAG;QACL,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;IAC5C,CAAK;IACL;;KAEA,GACI,IAAI,GAAG,GAAG;QACN,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAClF,CAAK;IACL;;;;KAIA,GACI,MAAM,GAAG;QACL,OAAO,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC;IACvC,CAAK;IACL;;;;;;KAMA,GACI,IAAI,GAAG;QACH,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,OAAO,SAAS,CAAC;QAC7B,CAAS,MACI,IAAI,IAAI,CAAC,UAAU,EAAE;YAClC,sEAAA;YACA,oCAAA;YACY,MAAM,QAAQ,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EACzH,cAAA,GAA6B,IAAI,CAAC,CAAC;YACvB,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC3D,CAAS,MACI;YACD,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChF,CAAS;IACT,CAAK;IACL;;;;;;;;KAQA,GACA,kEAAA;IACA,8DAAA;IACI,GAAG,CAAC,SAAS,EAAE;QACX,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC,CAAC;YAClG,IAAI,KAAK,KAAK,IAAI,EAAE;gBAChB,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAChE,CAAa;QACb,CAAS;QACD,OAAO,SAAS,CAAC;IACzB,CAAK;AACL,CAAC;AACD;;;;;;;;;;CAUA,GACA,MAAM,uBAAuB,SAAS,kBAAkB,CAAC;IACzD;;;;;KAKA,GACI,IAAI,GAAG;QACH,OAAO,KAAK,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,qBAAqB,CAAC,UAAU,EAAE,GAAG,EAAE;IAC5C,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QACzB,OAAO,+BAA+B,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;IAChE,CAAK,MACI,IAAI,GAAG,YAAY,SAAS,EAAE;QAC/B,OAAO,GAAG,CAAC,aAAa,CAAC;IACjC,CAAK,MACI;QACD,OAAO,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC;IAC3C,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,SAAS,wCAAwC,CAAC,KAAK,EAAE;IACrD,IAAI,KAAK,CAAC,SAAS,KAAK,GAAG,CAAA,kBAAA,OACvB,KAAK,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE;QACpC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,aAAa,EAAE,wEAAwE,CAAC,CAAC;IAC/H,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,MAAM,mBAAmB,CAAC;AAC1B,CAAC;AACD;;;;;;;CAOA,GACA,MAAM,eAAe,SAAS,mBAAmB,CAAC;AAClD,CAAC;AACD,SAAS,KAAK,CAAC,MAAK,EAAE,eAAe,EAAE,GAAG,0BAA0B,EAAE;IAClE,IAAI,gBAAgB,GAAG,EAAE,CAAC;IAC1B,IAAI,eAAe,YAAY,mBAAmB,EAAE;QAChD,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC/C,CAAK;IACD,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC;IACvE,4BAA4B,CAAC,gBAAgB,CAAC,CAAC;IAC/C,KAAK,MAAM,UAAU,IAAI,gBAAgB,CAAE;QACvC,KAAK,IAAG,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACzC,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AACD;;;;;;CAMA,GACA,MAAM,0BAA0B,SAAS,eAAe,CAAC;IACzD;;KAEA,GACI,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAE;QAC7B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAC7B,sCAAA,GACQ,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;IAC5B,CAAK;IACD,OAAO,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE;QAChC,OAAO,IAAI,0BAA0B,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;IACnE,CAAK;IACD,MAAM,CAAC,KAAK,EAAE;QACV,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAClC,sBAAsB,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,oBAAoB,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;IACvG,CAAK;IACD,MAAM,CAAC,KAAK,EAAE;QACV,MAAM,MAAM,GAAG,iBAAiB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAClD,MAAM,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9H,OAAO,MAAM,CAAC;IACtB,CAAK;AACL,CAAC;AACD;;;;;;;;;;CAUA,GACA,SAAS,KAAK,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE;IACpC,MAAM,EAAE,GAAG,KAAK,CAAC;IACjB,MAAM,KAAK,GAAG,qBAAqB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IACxD,OAAO,0BAA0B,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;AAChE,CAAC;AACD;;;;;;;CAOA,GACA,MAAM,8BAA8B,SAAS,mBAAmB,CAAC;IACjE;;KAEA,GACI,WAAW,CACf,sCAAA,GACI,IAAI,EAAE,iBAAiB,CAAE;QACrB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IACnD,CAAK;IACD,OAAO,OAAO,CAAC,IAAI,EAAE,iBAAiB,EAAE;QACpC,OAAO,IAAI,8BAA8B,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;IAC3E,CAAK;IACD,MAAM,CAAC,KAAK,EAAE;QACV,MAAM,aAAa,GAAG,IAAI,CAAC,iBAAiB,CACvC,GAAG,EAAC,eAAe,IAAI;YACxB,OAAO,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjD,CAAS,CAAC,CACG,MAAM,EAAC,YAAY,GAAI,YAAY,CAAC,UAAU,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAClE,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5B,OAAO,aAAa,CAAC,CAAC,CAAC,CAAC;QACpC,CAAS;QACD,OAAO,eAAe,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;IAC1E,CAAK;IACD,MAAM,CAAC,KAAK,EAAE;QACV,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACxC,IAAI,YAAY,CAAC,UAAU,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;YACpD,0EAAA;YACA,qBAAA;YACY,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,iBAAiB,CAAC,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAC9C,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,oBAAoB,CAAC,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;IAC7G,CAAK;IACD,oBAAoB,GAAG;QACnB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IACtC,CAAK;IACD,YAAY,GAAG;QACX,OAAO,IAAI,CAAC,IAAI,KAAK,KAAK,GAAG,KAAK,CAAA,yBAAA,MAA+B,IAAI,CAAA,wBAAA,GAA4B;IACzG,CAAK;AACL,CAAC;AACD;;;;;;;;;CASA,GACA,SAAS,EAAE,CAAC,GAAG,gBAAgB,EAAE;IACjC,sCAAA;IACI,gBAAgB,CAAC,OAAO,EAAC,eAAe,GAAI,6BAA6B,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC;IAClG,OAAO,8BAA8B,CAAC,OAAO,CAAC,IAAI,CAAA,wBAAA,KAA6B,gBAAgB,CAAC,CAAC;AACrG,CAAC;AACD;;;;;;;;;CASA,GACA,SAAS,GAAG,CAAC,GAAG,gBAAgB,EAAE;IAClC,sCAAA;IACI,gBAAgB,CAAC,OAAO,EAAC,eAAe,GAAI,6BAA6B,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC,CAAC;IACnG,OAAO,8BAA8B,CAAC,OAAO,CAAC,KAAK,CAAA,yBAAA,KAA8B,gBAAgB,CAAC,CAAC;AACvG,CAAC;AACD;;;;;;;;CAQA,GACA,MAAM,sBAAsB,SAAS,eAAe,CAAC;IACrD;;KAEA,GACI,WAAW,CAAC,MAAM,EAAE,UAAU,CAAE;QAC5B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QACrC,sCAAA,GACQ,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;IAC9B,CAAK;IACD,OAAO,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE;QAC/B,OAAO,IAAI,sBAAsB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAC9D,CAAK;IACD,MAAM,CAAC,KAAK,EAAE;QACV,MAAM,OAAO,GAAG,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5E,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,qBAAqB,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;IACzG,CAAK;AACL,CAAC;AACD;;;;;;;;;;;CAWA,GACA,SAAS,OAAO,CAAC,SAAS,EAAE,YAAY,GAAG,KAAK,EAAE;IAC9C,MAAM,SAAS,GAAG,YAAY,CAAC;IAC/B,MAAM,IAAI,GAAG,qBAAqB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACzD,OAAO,sBAAsB,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC3D,CAAC;AACD;;;;;;CAMA,GACA,MAAM,oBAAoB,SAAS,eAAe,CAAC;IACnD;;KAEA,GACI,WAAW,CACf,sCAAA,GACI,IAAI,EAAE,MAAM,EAAE,UAAU,CAAE;QACtB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;IACD,OAAO,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE;QACrC,OAAO,IAAI,oBAAoB,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;IAClE,CAAK;IACD,MAAM,CAAC,KAAK,EAAE;QACV,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IACvH,CAAK;AACL,CAAC;AACD;;;;;;CAMA,GACA,SAAS,KAAK,CAAC,KAAK,EAAE;IAClB,sBAAsB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACvC,OAAO,oBAAoB,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,GAAG,CAAA,mBAAA,GAAuB,CAAC;AACnF,CAAC;AACD;;;;;;;;;CASA,GACA,SAAS,WAAW,CAAC,KAAK,EAAE;IACxB,sBAAsB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;IAC7C,OAAO,oBAAoB,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,EAAE,GAAG,CAAA,kBAAA,GAAsB,CAAC;AACxF,CAAC;AACD;;;;;;CAMA,GACA,MAAM,sBAAsB,SAAS,eAAe,CAAC;IACrD;;KAEA,GACI,WAAW,CACf,sCAAA,GACI,IAAI,EAAE,YAAY,EAAE,UAAU,CAAE;QAC5B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;IACD,OAAO,OAAO,CAAC,IAAI,EAAE,YAAY,EAAE,UAAU,EAAE;QAC3C,OAAO,IAAI,sBAAsB,CAAC,IAAI,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;IAC1E,CAAK;IACD,MAAM,CAAC,KAAK,EAAE;QACV,MAAM,KAAK,GAAG,4BAA4B,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACjG,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,gBAAgB,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;IAClG,CAAK;AACL,CAAC;AACD,SAAS,OAAO,CAAC,GAAG,WAAW,EAAE;IAC7B,OAAO,sBAAsB,CAAC,OAAO,CAAC,SAAS,EAAE,WAAW,EAChE,YAAA,GAAmB,IAAI,CAAC,CAAC;AACzB,CAAC;AACD,SAAS,UAAU,CAAC,GAAG,WAAW,EAAE;IAChC,OAAO,sBAAsB,CAAC,OAAO,CAAC,YAAY,EAAE,WAAW,EACnE,YAAA,GAAmB,KAAK,CAAC,CAAC;AAC1B,CAAC;AACD;;;;;;CAMA,GACA,MAAM,oBAAoB,SAAS,eAAe,CAAC;IACnD;;KAEA,GACI,WAAW,CACf,sCAAA,GACI,IAAI,EAAE,YAAY,EAAE,UAAU,CAAE;QAC5B,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;IACD,OAAO,OAAO,CAAC,IAAI,EAAE,YAAY,EAAE,UAAU,EAAE;QAC3C,OAAO,IAAI,oBAAoB,CAAC,IAAI,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;IACxE,CAAK;IACD,MAAM,CAAC,KAAK,EAAE;QACV,MAAM,KAAK,GAAG,4BAA4B,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACjG,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;IAChG,CAAK;AACL,CAAC;AACD,SAAS,SAAS,CAAC,GAAG,WAAW,EAAE;IAC/B,OAAO,oBAAoB,CAAC,OAAO,CAAC,WAAW,EAAE,WAAW,EAChE,YAAA,GAAmB,KAAK,CAAC,CAAC;AAC1B,CAAC;AACD,SAAS,KAAK,CAAC,GAAG,WAAW,EAAE;IAC3B,OAAO,oBAAoB,CAAC,OAAO,CAAC,OAAO,EAAE,WAAW,EAC5D,YAAA,GAAmB,IAAI,CAAC,CAAC;AACzB,CAAC;AACD,gEAAA,GACA,SAAS,4BAA4B,CAAC,KAAK,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE;IAC7E,WAAW,CAAC,CAAC,CAAC,yLAAG,qBAAA,AAAkB,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,IAAI,WAAW,CAAC,CAAC,CAAC,YAAY,kBAAkB,EAAE;QAC9C,OAAO,yBAAyB,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACrI,CAAK,MACI;QACD,MAAM,MAAM,GAAG,iBAAiB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAClD,OAAO,uBAAuB,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;IAC9H,CAAK;AACL,CAAC;AACD,SAAS,cAAc,CAAC,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,EAAE,EAAE,KAAK,EAAE;IACrF,IAAI,UAAU,CAAC;IACf,IAAI,SAAS,CAAC,UAAU,EAAE,EAAE;QACxB,IAAI,EAAE,KAAK,gBAAgB,CAAA,2BAAA,OAAkC,EAAE,KAAK,oBAAoB,CAAA,+BAAA,KAAoC;YACxH,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,kCAAkC,EAAE,EAAE,CAAC,0BAA0B,CAAC,CAAC,CAAC;QACjI,CAAS,MACI,IAAI,EAAE,KAAK,IAAI,CAAA,eAAA,OAAsB,EAAE,KAAK,QAAQ,CAAA,mBAAA,KAAwB;YAC7E,iCAAiC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YAC7C,MAAM,aAAa,GAAG,EAAE,CAAC;YACzB,KAAK,MAAM,UAAU,IAAI,KAAK,CAAE;gBAC5B,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAAC,UAAU,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;YACxF,CAAa;YACD,UAAU,GAAG;gBAAE,UAAU,EAAE;oBAAE,MAAM,EAAE,aAAa;gBAAA,CAAE;YAAA,CAAE,CAAC;QACnE,CAAS,MACI;YACD,UAAU,GAAG,oBAAoB,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACxE,CAAS;IACT,CAAK,MACI;QACD,IAAI,EAAE,KAAK,IAAI,CAAA,eAAA,OACX,EAAE,KAAK,QAAQ,CAAA,mBAAA,OACf,EAAE,KAAK,oBAAoB,CAAA,+BAAA,KAAoC;YAC/D,iCAAiC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACzD,CAAS;QACD,UAAU,GAAG,eAAe,CAAC,UAAU,EAAE,UAAU,EAAE,KAAK,EAClE,gBAAA,GAA2B,EAAE,KAAK,IAAI,CAAA,eAAA,OAAsB,EAAE,KAAK,QAAQ,CAAA,mBAAA,GAAuB,CAAC;IACnG,CAAK;IACD,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;IAC7D,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,SAAS,eAAe,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE;IAClD,IAAI,KAAK,CAAC,OAAO,KAAK,IAAI,EAAE;QACxB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,oEAAoE,GAChH,oBAAoB,CAAC,CAAC;IAClC,CAAK;IACD,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,EAAE;QACtB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,iEAAiE,GAC7G,oBAAoB,CAAC,CAAC;IAClC,CAAK;IACD,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAClD,kBAAkB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACnC,OAAO,OAAO,CAAC;AACnB,CAAC;AACD;;;;;;;;;;CAUA,GACA,SAAS,yBAAyB,CAAC,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,EAAE;IAC9E,IAAI,CAAC,GAAG,EAAE;QACN,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,oDAAoD,CAAC,GAC3F,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;IAChC,CAAK;IACD,MAAM,UAAU,GAAG,EAAE,CAAC;IAC1B,sEAAA;IACA,4EAAA;IACA,4EAAA;IACA,2EAAA;IACA,qEAAA;IACA,2EAAA;IACA,WAAA;IACI,KAAK,MAAM,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC,CAAE;QACvC,IAAI,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE;YAC5B,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3D,CAAS,MACI;YACD,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC5C,IAAI,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC1B,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,gEAAgE,GAC5G,gCAAgC,GAChC,OAAO,CAAC,KAAK,GACb,4DAA4D,GAC5D,+DAA+D,CAAC,CAAC;YACrF,CAAa,MACI,IAAI,KAAK,KAAK,IAAI,EAAE;gBACrB,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,CAAa,MACI;gBACD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC;gBAC9C,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,8DAA8D,CAAC,GAC5G,CAAC,8BAA8B,EAAE,KAAK,CAAC,eAAe,CAAC,GACvD,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAChD,CAAa;QACb,CAAS;IACT,CAAK;IACD,OAAO,IAAI,KAAK,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AAC5C,CAAC;AACD;;CAEA,GACA,SAAS,uBAAuB,CAAC,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE,SAAS,EAAE;IAC/F,0EAAA;IACI,MAAM,OAAO,GAAG,KAAK,CAAC,eAAe,CAAC;IACtC,IAAI,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE;QAChC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,+BAA+B,EAAE,UAAU,CAAC,IAAI,CAAC,GAC9F,CAAC,0DAA0D,CAAC,GAC5D,CAAC,2BAA2B,CAAC,CAAC,CAAC;IAC3C,CAAK;IACD,MAAM,UAAU,GAAG,EAAE,CAAC;IACtB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QACpC,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,gBAAgB,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,gBAAgB,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE;YACrC,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,oDAAoD,CAAC,GAClG,CAAC,EAAE,UAAU,CAAC,cAAc,EAAE,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;YACrE,CAAa;YACD,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;gBAChE,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,wEAAwE,CAAC,GACtH,CAAC,oBAAoB,EAAE,UAAU,CAAC,oCAAoC,CAAC,GACvE,CAAC,CAAC,EAAE,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACvD,CAAa;YACD,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;gBAClC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,gEAAgE,CAAC,GAC9G,CAAC,kCAAkC,EAAE,UAAU,CAAC,oBAAoB,CAAC,GACrE,CAAC,0BAA0B,EAAE,IAAI,CAAC,2CAA2C,CAAC,GAC9E,CAAC,YAAY,CAAC,CAAC,CAAC;YACpC,CAAa;YACD,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;YAClC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;QACvD,CAAS,MACI;YACD,MAAM,OAAO,GAAG,eAAe,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;YAClE,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,CAAS;IACT,CAAK;IACD,OAAO,IAAI,KAAK,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AAC5C,CAAC;AACD;;;;CAIA,GACA,SAAS,oBAAoB,CAAC,UAAU,EAAE,KAAK,EAAE,eAAe,EAAE;IAC9D,eAAe,yLAAG,qBAAA,AAAkB,EAAC,eAAe,CAAC,CAAC;IACtD,IAAI,OAAO,eAAe,KAAK,QAAQ,EAAE;QACrC,IAAI,eAAe,KAAK,EAAE,EAAE;YACxB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,sDAAsD,GAClG,+DAA+D,CAAC,CAAC;QACjF,CAAS;QACD,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;YACvE,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,6CAA6C,CAAC,GAC3F,CAAC,wDAAwD,CAAC,GAC1D,CAAC,CAAC,EAAE,eAAe,CAAC,2BAA2B,CAAC,CAAC,CAAC;QAClE,CAAS;QACD,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;YAClC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,mDAAmD,CAAC,GACjG,CAAC,uEAAuE,CAAC,GACzE,CAAC,KAAK,EAAE,IAAI,CAAC,mDAAmD,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QACnG,CAAS;QACD,OAAO,QAAQ,CAAC,UAAU,EAAE,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAK,MACI,IAAI,eAAe,YAAY,iBAAiB,EAAE;QACnD,OAAO,QAAQ,CAAC,UAAU,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC;IAC1D,CAAK,MACI;QACD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,yEAAyE,CAAC,GACvH,CAAC,2CAA2C,CAAC,GAC7C,CAAC,EAAE,gBAAgB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,iCAAiC,CAAC,KAAK,EAAE,QAAQ,EAAE;IACxD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QAC7C,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,mDAAmD,GAC/F,CAAC,CAAC,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IACjD,CAAK;AACL,CAAC;AACD;;;;;;;;;CASA,GACA,SAAS,cAAc,CAAC,EAAE,EAAE;IACxB,OAAQ,EAAE;QACN,KAAK,IAAI,CAAA,sBAAA;YACL,OAAO;gBAAC,IAAI,CAAA,sBAAA;gBAA2B,QAAQ,CAAA,mBAAA;aAAuB,CAAC;QAC3E,KAAK,oBAAoB,CAAA,+BAAA,GAAmC;QAC5D,KAAK,IAAI,CAAA,eAAA;YACL,OAAO;gBAAC,QAAQ,CAAA,mBAAA;aAAuB,CAAC;QAC5C,KAAK,QAAQ,CAAA,mBAAA;YACT,OAAO;gBACH,oBAAoB,CAAA,+BAAA;gBACpB,IAAI,CAAA,eAAA;gBACJ,QAAQ,CAAA,mBAAA;gBACR,IAAI,CAAA,sBAAA;aACP,CAAC;QACN;YACI,OAAO,EAAE,CAAC;IACtB,CAAK;AACL,CAAC;AACD,SAAS,sBAAsB,CAAC,KAAK,EAAE,WAAW,EAAE;IAChD,IAAI,WAAW,CAAC,YAAY,EAAE,EAAE;QAC5B,MAAM,kBAAkB,GAAG,wBAAwB,CAAC,KAAK,CAAC,CAAC;QAC3D,MAAM,aAAa,GAAG,WAAW,CAAC,KAAK,CAAC;QACxC,IAAI,kBAAkB,KAAK,IAAI,IAC3B,CAAC,kBAAkB,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;YAC5C,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,qDAAqD,GACjG,wEAAwE,GACxE,CAAC,wBAAwB,EAAE,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,GAC3D,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,CAAS;QACD,MAAM,iBAAiB,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACtD,IAAI,iBAAiB,KAAK,IAAI,EAAE;YAC5B,iCAAiC,CAAC,KAAK,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;QACvF,CAAS;IACT,CAAK;IACD,MAAM,aAAa,GAAG,mBAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IACzF,IAAI,aAAa,KAAK,IAAI,EAAE;QAChC,kFAAA;QACQ,IAAI,aAAa,KAAK,WAAW,CAAC,EAAE,EAAE;YAClC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,8CAA8C,GAC1F,CAAC,CAAC,EAAE,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QAC1D,CAAS,MACI;YACD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,+BAA+B,EAAE,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,GACnH,CAAC,MAAM,EAAE,aAAa,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;QAC/D,CAAS;IACT,CAAK;AACL,CAAC;AACD,SAAS,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE;IACtC,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,MAAM,UAAU,GAAG,MAAM,CAAC,mBAAmB,EAAE,CAAC;IAChD,KAAK,MAAM,SAAS,IAAI,UAAU,CAAE;QAChC,sBAAsB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAC7C,SAAS,GAAG,oBAAoB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC/D,CAAK;AACL,CAAC;AACD,+FAAA;AACA,sDAAA;AACA,SAAS,mBAAmB,CAAC,OAAO,EAAE,SAAS,EAAE;IAC7C,KAAK,MAAM,MAAM,IAAI,OAAO,CAAE;QAC1B,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,mBAAmB,EAAE,CAAE;YACpD,IAAI,SAAS,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;gBACxC,OAAO,WAAW,CAAC,EAAE,CAAC;YACtC,CAAa;QACb,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD,SAAS,kBAAkB,CAAC,KAAK,EAAE,OAAO,EAAE;IACxC,IAAI,oBAAoB,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE;QAC9C,4DAAA;QACQ,MAAM,eAAe,GAAG,wBAAwB,CAAC,KAAK,CAAC,CAAC;QACxD,IAAI,eAAe,KAAK,IAAI,EAAE;YAC1B,iCAAiC,CAAC,KAAK,EAAE,eAAe,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;QACrF,CAAS;IACT,CAAK;AACL,CAAC;AACD,SAAS,iCAAiC,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE;IACvE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QAC9B,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,0DAA0D,CAAC,GACxG,CAAC,wCAAwC,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,GACpE,CAAC,0BAA0B,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,GACtD,CAAC,8DAA8D,CAAC,GAChE,CAAC,aAAa,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAC5D,CAAK;AACL,CAAC;AACD,SAAS,6BAA6B,CAAC,YAAY,EAAE,eAAe,EAAE;IAClE,IAAI,CAAA,CAAE,eAAe,YAAY,0BAA0B,CAAC,IACxD,CAAA,CAAE,eAAe,YAAY,8BAA8B,CAAC,EAAE;QAC9D,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC,+FAA+F,CAAC,CAAC,CAAC;IACnL,CAAK;AACL,CAAC;AACD,SAAS,4BAA4B,CAAC,eAAe,EAAE;IACnD,MAAM,oBAAoB,GAAG,eAAe,CAAC,MAAM,EAAC,MAAM,GAAI,MAAM,YAAY,8BAA8B,CAAC,CAAC,MAAM,CAAC;IACvH,MAAM,gBAAgB,GAAG,eAAe,CAAC,MAAM,EAAC,MAAM,GAAI,MAAM,YAAY,0BAA0B,CAAC,CAAC,MAAM,CAAC;IAC/G,IAAI,oBAAoB,GAAG,CAAC,IACvB,oBAAoB,GAAG,CAAC,IAAI,gBAAgB,GAAG,CAAC,CAAC,CAAE;QACpD,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,6DAA6D,GACzG,uEAAuE,GACvE,uDAAuD,GACvD,gDAAgD,GAChD,2CAA2C,CAAC,CAAC;IACzD,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;CAKA,GACA,MAAM,sBAAsB,CAAC;IACzB,YAAY,CAAC,KAAK,EAAE,uBAAuB,GAAG,MAAM,EAAE;QAClD,OAAQ,SAAS,CAAC,KAAK,CAAC;YACpB,KAAK,CAAC,CAAA,uBAAA;gBACF,OAAO,IAAI,CAAC;YAChB,KAAK,CAAC,CAAA,0BAAA;gBACF,OAAO,KAAK,CAAC,YAAY,CAAC;YAC9B,KAAK,CAAC,CAAA,yBAAA;gBACF,OAAO,eAAe,CAAC,KAAK,CAAC,YAAY,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;YACpE,KAAK,CAAC,CAAA,4BAAA;gBACF,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACvD,KAAK,CAAC,CAAA,kCAAA;gBACF,OAAO,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,uBAAuB,CAAC,CAAC;YACvE,KAAK,CAAC,CAAA,yBAAA;gBACF,OAAO,KAAK,CAAC,WAAW,CAAC;YAC7B,KAAK,CAAC,CAAA,uBAAA;gBACF,OAAO,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;YACpE,KAAK,CAAC,CAAA,sBAAA;gBACF,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACvD,KAAK,CAAC,CAAA,2BAAA;gBACF,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YACrD,KAAK,CAAC,CAAA,wBAAA;gBACF,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,UAAU,EAAE,uBAAuB,CAAC,CAAC;YACxE,KAAK,EAAE,CAAA,yBAAA;gBACH,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,EAAE,uBAAuB,CAAC,CAAC;YACvE;gBACI,MAAM,IAAI,EAAE,CAAC;QAC7B,CAAS;IACT,CAAK;IACD,aAAa,CAAC,QAAQ,EAAE,uBAAuB,EAAE;QAC7C,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC;IAC/E,CAAK;IACL;;KAEA,GACI,gBAAgB,CAAC,MAAM,EAAE,uBAAuB,GAAG,MAAM,EAAE;QACvD,MAAM,MAAM,GAAG,CAAA,CAAE,CAAC;QAClB,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,KAAK,KAAK;YAC5B,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,uBAAuB,CAAC,CAAC;QAC5E,CAAS,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IACtB,CAAK;IACD,eAAe,CAAC,KAAK,EAAE;QACnB,OAAO,IAAI,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;IAC/F,CAAK;IACD,YAAY,CAAC,UAAU,EAAE,uBAAuB,EAAE;QAC9C,OAAO,CAAC,UAAU,CAAC,MAAM,IAAI,EAAE,EAAE,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,uBAAuB,CAAC,CAAC,CAAC;IACzG,CAAK;IACD,sBAAsB,CAAC,KAAK,EAAE,uBAAuB,EAAE;QACnD,OAAQ,uBAAuB;YAC3B,KAAK,UAAU;gBACX,MAAM,aAAa,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBAC9C,IAAI,aAAa,IAAI,IAAI,EAAE;oBACvB,OAAO,IAAI,CAAC;gBAChC,CAAiB;gBACD,OAAO,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC;YACrE,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3D;gBACI,OAAO,IAAI,CAAC;QAC5B,CAAS;IACT,CAAK;IACD,gBAAgB,CAAC,KAAK,EAAE;QACpB,MAAM,eAAe,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAClD,OAAO,IAAI,SAAS,CAAC,eAAe,CAAC,OAAO,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC;IAC7E,CAAK;IACD,kBAAkB,CAAC,IAAI,EAAE,kBAAkB,EAAE;QACzC,MAAM,YAAY,GAAG,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACnD,UAAU,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC;QAC9C,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE;YACrD,wDAAA;YACY,QAAQ,CAAC,CAAC,SAAS,EAAE,GAAG,CAAC,qBAAqB,CAAC,GAC3C,CAAC,uCAAuC,CAAC,GACzC,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,GAC/D,CAAC,4DAA4D,CAAC,GAC9D,CAAC,UAAU,EAAE,kBAAkB,CAAC,SAAS,CAAC,CAAC,EAAE,kBAAkB,CAAC,QAAQ,CAAC,EAAE,CAAC,GAC5E,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5B,CAAS;QACD,OAAO,GAAG,CAAC;IACnB,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;CAQA,GACA,SAAS,2BAA2B,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE;IAC5D,IAAI,cAAc,CAAC;IACnB,IAAI,SAAS,EAAE;QACX,IAAI,OAAO,IAAA,CAAK,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE;YAC/D,iEAAA;YACA,iBAAA;YACA,8DAAA;YACY,cAAc,GAAG,SAAS,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACnE,CAAS,MACI;YACD,cAAc,GAAG,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1D,CAAS;IACT,CAAK,MACI;QACD,cAAc,GAAG,KAAK,CAAC;IAC/B,CAAK;IACD,OAAO,cAAc,CAAC;AAC1B,CAAC;AACD,MAAM,kBAAkB,SAAS,sBAAsB,CAAC;IACpD,WAAW,CAAC,SAAS,CAAE;QACnB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,CAAK;IACD,YAAY,CAAC,KAAK,EAAE;QAChB,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IAChC,CAAK;IACD,gBAAgB,CAAC,IAAI,EAAE;QACnB,MAAM,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACtE,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,SAAS,EAAA,cAAA,GAAmB,IAAI,EAAE,GAAG,CAAC,CAAC;IACjF,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;CAKA,GACA,SAAS,GAAG,CAAC,KAAK,EAAE;IAChB,OAAO,IAAI,cAAc,CAAC,KAAK,EAAE,uBAAuB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;AAC5E,CAAC;AACD;;;;;CAKA,GACA,SAAS,OAAO,CAAC,KAAK,EAAE;IACpB,OAAO,IAAI,cAAc,CAAC,KAAK,EAAE,uBAAuB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;AAChF,CAAC;AACD;;;;CAIA,GACA,SAAS,KAAK,GAAG;IACb,OAAO,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC;AACvC,CAAC;AACD;;;;;;CAMA,GACA,SAAS,mBAAmB,CAAC,IAAI,EAAE,KAAK,EAAE;IACtC,IAAI,EAAE,EAAE,EAAE,CAAC;IACX,OAAQ,IAAI,YAAY,cAAc,IAClC,KAAK,YAAY,cAAc,IAC/B,IAAI,CAAC,cAAc,KAAK,KAAK,CAAC,cAAc,IAC5C,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,kBAAkB,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,eAAe,EAAE,MACjG,CAAa,CAAC,EAAE,GAAG,KAAK,CAAC,kBAAkB,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,eAAe,EAAE,CAAC,EAAE;AACzG,CAAC;AACD;;;;;;;;;;;CAWA,GACA,SAAS,2BAA2B,CAAC,IAAI,EAAE,KAAK,EAAE;IAC9C,OAAQ,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,0LAAI,YAAA,AAAS,EAAC,IAAI,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE;AACzF,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,SAAS,iBAAiB,CAAC,GAAG,EAAE;IAC5B,OAAO,oBAAoB,CAAC,GAAG,EAAE;QAAC,MAAM;QAAE,OAAO;QAAE,UAAU;KAAC,CAAC,CAAC;AACpE,CAAC;AACD;;;CAGA,GACA,SAAS,oBAAoB,CAAC,GAAG,EAAE,OAAO,EAAE;IACxC,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,EAAE;QACzC,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,MAAM,MAAM,GAAG,GAAG,CAAC;IACnB,KAAK,MAAM,MAAM,IAAI,OAAO,CAAE;QAC1B,IAAI,MAAM,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,UAAU,EAAE;YAC1D,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;CAEA,GACA,MAAM,gBAAgB,CAAC;IACvB,qBAAA,GACI,WAAW,CAAC,gBAAgB,EAAE,SAAS,CAAE;QACrC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,CAAK;IACL;;;;;KAKA,GACI,OAAO,CAAC,KAAK,EAAE;QACX,OAAQ,IAAI,CAAC,gBAAgB,KAAK,KAAK,CAAC,gBAAgB,IACpD,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,EAAE;IAChD,CAAK;AACL,CAAC;AACD;;;;;;;;CAQA,GACA,MAAM,gBAAgB,SAAS,kBAAkB,CAAC;IAClD,+BAAA,GACI,WAAW,CAAC,UAAU,EAAE,cAAc,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAE;QACxE,KAAK,CAAC,UAAU,EAAE,cAAc,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACjC,CAAK;IACL;;KAEA,GACI,MAAM,GAAG;QACL,OAAO,KAAK,CAAC,MAAM,EAAE,CAAC;IAC9B,CAAK;IACL;;;;;;;;;;;;;KAaA,GACI,IAAI,CAAC,OAAO,GAAG,CAAA,CAAE,EAAE;QACf,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,OAAO,SAAS,CAAC;QAC7B,CAAS,MACI,IAAI,IAAI,CAAC,UAAU,EAAE;YAClC,sEAAA;YACA,oCAAA;YACY,MAAM,QAAQ,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EACtI,cAAA,GAA6B,IAAI,CAAC,CAAC;YACvB,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACpE,CAAS,MACI;YACD,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC1G,CAAS;IACT,CAAK;IACL;;;;;;;;;;;;;;;KAeA,GACA,kEAAA;IACA,8DAAA;IACI,GAAG,CAAC,SAAS,EAAE,OAAO,GAAG,CAAA,CAAE,EAAE;QACzB,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC,CAAC;YAClG,IAAI,KAAK,KAAK,IAAI,EAAE;gBAChB,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC;YAC1F,CAAa;QACb,CAAS;QACD,OAAO,SAAS,CAAC;IACzB,CAAK;AACL,CAAC;AACD;;;;;;;;;;CAUA,GACA,MAAM,qBAAqB,SAAS,gBAAgB,CAAC;IACrD;;;;;;;;;;;;KAYA,GACI,IAAI,CAAC,OAAO,GAAG,CAAA,CAAE,EAAE;QACf,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnC,CAAK;AACL,CAAC;AACD;;;;;;CAMA,GACA,MAAM,aAAa,CAAC;IACpB,qBAAA,GACI,WAAW,CAAC,UAAU,EAAE,eAAe,EAAE,KAAK,EAAE,SAAS,CAAE;QACvD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;QACtF,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,CAAK;IACL,0DAAA,GACI,IAAI,IAAI,GAAG;QACP,MAAM,MAAM,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,OAAO,EAAC,GAAG,GAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QACtC,OAAO,MAAM,CAAC;IACtB,CAAK;IACL,oDAAA,GACI,IAAI,IAAI,GAAG;QACP,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;IACxC,CAAK;IACL,2DAAA,GACI,IAAI,KAAK,GAAG;QACR,OAAO,IAAI,CAAC,IAAI,KAAK,CAAC,CAAC;IAC/B,CAAK;IACL;;;;;;KAMA,GACI,OAAO,CAAC,QAAQ,EAAE,OAAO,EAAE;QACvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAC,GAAG,IAAI;YAC/B,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,qBAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;QAClO,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;;;;;KAQA,GACI,UAAU,CAAC,OAAO,GAAG,CAAA,CAAE,EAAE;QACrB,MAAM,sBAAsB,GAAG,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC;QAChE,IAAI,sBAAsB,IAAI,IAAI,CAAC,SAAS,CAAC,uBAAuB,EAAE;YAClE,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,mEAAmE,GAC/G,4DAA4D,CAAC,CAAC;QAC9E,CAAS;QACD,IAAI,CAAC,IAAI,CAAC,cAAc,IACpB,IAAI,CAAC,oCAAoC,KAAK,sBAAsB,EAAE;YACtE,IAAI,CAAC,cAAc,GAAG,mBAAmB,CAAC,IAAI,EAAE,sBAAsB,CAAC,CAAC;YACxE,IAAI,CAAC,oCAAoC,GAAG,sBAAsB,CAAC;QAC/E,CAAS;QACD,OAAO,IAAI,CAAC,cAAc,CAAC;IACnC,CAAK;AACL,CAAC;AACD,0EAAA,GACA,SAAS,mBAAmB,CAAC,aAAa,EAAE,sBAAsB,EAAE;IAChE,IAAI,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE;QAC3C,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,OAAO,aAAa,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,EAAC,MAAM,IAAI;YACpD,MAAM,GAAG,GAAG,IAAI,qBAAqB,CAAC,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,eAAe,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,IAAI,gBAAgB,CAAC,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC5Q,MAAM,CAAC,GAAG,CAAC;YACX,OAAO;gBACH,IAAI,EAAE,OAAO;gBACb,GAAG;gBACH,QAAQ,EAAE,CAAC,CAAC;gBACZ,QAAQ,EAAE,KAAK,EAAE;YACjC,CAAa,CAAC;QACd,CAAS,CAAC,CAAC;IACX,CAAK,MACI;QACT,8EAAA;QACA,qCAAA;QACQ,IAAI,YAAY,GAAG,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC;QACnD,OAAO,aAAa,CAAC,SAAS,CAAC,UAAU,CACpC,MAAM,EAAC,MAAM,GAAI,sBAAsB,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,CAAA,uBAAA,GAA2B,EACvF,GAAG,EAAC,MAAM,IAAI;YACf,MAAM,GAAG,GAAG,IAAI,qBAAqB,CAAC,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,eAAe,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,IAAI,gBAAgB,CAAC,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC5Q,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;YAClB,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;YAClB,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,CAAA,oBAAA,KAAyB;gBAC1C,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBAChD,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACnE,CAAa;YACD,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,CAAA,sBAAA,KAA2B;gBAC5C,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC5C,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAChE,CAAa;YACD,OAAO;gBACH,IAAI,EAAE,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC;gBACnC,GAAG;gBACH,QAAQ;gBACR,QAAQ;YACxB,CAAa,CAAC;QACd,CAAS,CAAC,CAAC;IACX,CAAK;AACL,CAAC;AACD,SAAS,gBAAgB,CAAC,IAAI,EAAE;IAC5B,OAAQ,IAAI;QACR,KAAK,CAAC,CAAA,oBAAA;YACF,OAAO,OAAO,CAAC;QACnB,KAAK,CAAC,CAAA,uBAAA,GAA2B;QACjC,KAAK,CAAC,CAAA,uBAAA;YACF,OAAO,UAAU,CAAC;QACtB,KAAK,CAAC,CAAA,sBAAA;YACF,OAAO,SAAS,CAAC;QACrB;YACI,OAAO,IAAI,EAAE,CAAC;IAC1B,CAAK;AACL,CAAC;AACD,0EAAA;AACA,WAAA;AACA;;;;;;CAMA,GACA,SAAS,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE;IAChC,IAAI,IAAI,YAAY,gBAAgB,IAAI,KAAK,YAAY,gBAAgB,EAAE;QACvE,OAAQ,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU,IACxC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IACzC,CAAa,IAAI,CAAC,SAAS,KAAK,IAAI,GAClB,KAAK,CAAC,SAAS,KAAK,IAAI,GACxB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAC9C,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU,EAAE;IAClD,CAAK,MACI,IAAI,IAAI,YAAY,aAAa,IAAI,KAAK,YAAY,aAAa,EAAE;QACtE,OAAQ,IAAI,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU,IACxC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,IACnC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,IACrC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;IACrD,CAAK;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;;CAWA,GACA,SAAS,MAAM,CAAC,SAAS,EAAE;IACvB,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvD,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,OAAO,6CAA6C,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,QAAQ,GAAI,oBAAoB,CAAC,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;AACxJ,CAAC;AACD,MAAM,iBAAiB,SAAS,sBAAsB,CAAC;IACnD,WAAW,CAAC,SAAS,CAAE;QACnB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,CAAK;IACD,YAAY,CAAC,KAAK,EAAE;QAChB,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IAChC,CAAK;IACD,gBAAgB,CAAC,IAAI,EAAE;QACnB,MAAM,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACtE,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,SAAS,EAAA,cAAA,GAAmB,IAAI,EAAE,GAAG,CAAC,CAAC;IACjF,CAAK;AACL,CAAC;AACD;;;;;;CAMA,GACA,SAAS,eAAe,CAAC,SAAS,EAAE;IAChC,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvD,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,MAAM,cAAc,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACxD,OAAO,wCAAwC,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,EAAC,GAAG,GAAI,IAAI,gBAAgB,CAAC,SAAS,EAAE,cAAc,EAAE,SAAS,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,gBAAgB,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,CAAC,iBAAiB,EACvN,cAAA,GAAqB,IAAI,CAAC,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;AAClD,CAAC;AACD;;;;;;CAMA,GACA,SAAS,gBAAgB,CAAC,SAAS,EAAE;IACjC,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvD,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,OAAO,6CAA6C,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI,EAAE;QACzE,MAAM,EAAE,QAAQ;IACxB,CAAK,CAAC,CAAC,IAAI,EAAC,QAAQ,GAAI,oBAAoB,CAAC,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;AAC9E,CAAC;AACD;;;;;;;;;CASA,GACA,SAAS,OAAO,CAAC,KAAK,EAAE;IACpB,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC3B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACnD,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,MAAM,cAAc,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACxD,wCAAwC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACvD,OAAO,8CAA8C,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAC,QAAQ,GAAI,IAAI,aAAa,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;AAChK,CAAC;AACD;;;;;;CAMA,GACA,SAAS,gBAAgB,CAAC,KAAK,EAAE;IAC7B,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC3B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACnD,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,MAAM,cAAc,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACxD,OAAO,yCAAyC,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAC,QAAQ,GAAI,IAAI,aAAa,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;AAC3J,CAAC;AACD;;;;;CAKA,GACA,SAAS,iBAAiB,CAAC,KAAK,EAAE;IAC9B,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC3B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACnD,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,MAAM,cAAc,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACxD,OAAO,8CAA8C,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE;QACxE,MAAM,EAAE,QAAQ;IACxB,CAAK,CAAC,CAAC,IAAI,EAAC,QAAQ,GAAI,IAAI,aAAa,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;AACvF,CAAC;AACD,SAAS,MAAM,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE;IACtC,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvD,MAAM,cAAc,GAAG,2BAA2B,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACvF,MAAM,UAAU,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAChD,MAAM,MAAM,GAAG,YAAY,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC,IAAI,EAAE,cAAc,EAAE,SAAS,CAAC,SAAS,KAAK,IAAI,EAAE,OAAO,CAAC,CAAC;IACzH,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC;IACxE,OAAO,YAAY,CAAC,SAAS,EAAE;QAAC,QAAQ;KAAC,CAAC,CAAC;AAC/C,CAAC;AACD,SAAS,SAAS,CAAC,SAAS,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,mBAAmB,EAAE;IAC5E,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;IAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvD,MAAM,UAAU,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACpD,qEAAA;IACA,yBAAA;IACI,iBAAiB,GAAG,2MAAA,AAAkB,EAAC,iBAAiB,CAAC,CAAC;IAC1D,IAAI,MAAM,CAAC;IACX,IAAI,OAAO,iBAAiB,KAAK,QAAQ,IACrC,iBAAiB,YAAY,SAAS,EAAE;QACxC,MAAM,GAAG,kBAAkB,CAAC,UAAU,EAAE,WAAW,EAAE,SAAS,CAAC,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,mBAAmB,CAAC,CAAC;IAC5H,CAAK,MACI;QACD,MAAM,GAAG,eAAe,CAAC,UAAU,EAAE,WAAW,EAAE,SAAS,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;IAC7F,CAAK;IACD,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9E,OAAO,YAAY,CAAC,SAAS,EAAE;QAAC,QAAQ;KAAC,CAAC,CAAC;AAC/C,CAAC;AACD;;;;;;CAMA,GACA,SAAS,SAAS,CAAC,SAAS,EAAE;IAC1B,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvD,MAAM,SAAS,GAAG;QAAC,IAAI,cAAc,CAAC,SAAS,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC;KAAC,CAAC;IAC5E,OAAO,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAC9C,CAAC;AACD;;;;;;;;;CASA,GACA,SAAS,MAAM,CAAC,SAAS,EAAE,IAAI,EAAE;IAC7B,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvD,MAAM,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC;IAC9B,MAAM,cAAc,GAAG,2BAA2B,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC9E,MAAM,UAAU,GAAG,iBAAiB,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IAC1D,MAAM,MAAM,GAAG,YAAY,CAAC,UAAU,EAAE,QAAQ,EAAE,MAAM,CAAC,IAAI,EAAE,cAAc,EAAE,SAAS,CAAC,SAAS,KAAK,IAAI,EAAE,CAAA,CAAE,CAAC,CAAC;IACjH,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5E,OAAO,YAAY,CAAC,SAAS,EAAE;QAAC,QAAQ;KAAC,CAAC,CAAC,IAAI,CAAC,IAAM,MAAM,CAAC,CAAC;AAClE,CAAC;AACD,SAAS,UAAU,CAAC,SAAS,EAAE,GAAG,IAAI,EAAE;IACpC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACf,SAAS,yLAAG,qBAAA,AAAkB,EAAC,SAAS,CAAC,CAAC;IAC1C,IAAI,OAAO,GAAG;QACV,sBAAsB,EAAE,KAAK;IACrC,CAAK,CAAC;IACF,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE;QACxE,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QACxB,OAAO,EAAE,CAAC;IAClB,CAAK;IACD,MAAM,eAAe,GAAG;QACpB,sBAAsB,EAAE,OAAO,CAAC,sBAAsB;IAC9D,CAAK,CAAC;IACF,IAAI,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE;QAClC,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,YAAY,CAAC,IAAI,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACpG,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,YAAY,CAAC,KAAK,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACzG,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,YAAY,CAAC,QAAQ,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACpH,CAAK;IACD,IAAI,QAAQ,CAAC;IACb,IAAI,SAAS,CAAC;IACd,IAAI,aAAa,CAAC;IAClB,IAAI,SAAS,YAAY,iBAAiB,EAAE;QACxC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACjD,aAAa,GAAG,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,QAAQ,GAAG;YACP,IAAI,GAAE,QAAQ,IAAI;gBACd,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;oBACf,IAAI,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACxF,CAAiB;YACjB,CAAa;YACD,KAAK,EAAE,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;YACxB,QAAQ,EAAE,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACvC,CAAS,CAAC;IACV,CAAK,MACI;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QACrC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAC7C,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC;QAC7B,MAAM,cAAc,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACxD,QAAQ,GAAG;YACP,IAAI,GAAE,QAAQ,IAAI;gBACd,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;oBACf,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,aAAa,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;gBACjG,CAAiB;YACjB,CAAa;YACD,KAAK,EAAE,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;YACxB,QAAQ,EAAE,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACvC,CAAS,CAAC;QACF,wCAAwC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACnE,CAAK;IACD,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,OAAO,qBAAqB,CAAC,MAAM,EAAE,aAAa,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;AACnF,CAAC;AACD,SAAS,iBAAiB,CAAC,SAAS,EAAE,GAAG,EAAE;IACvC,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvC,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,MAAM,QAAQ,GAAG,iBAAiB,CAAC,GAAG,CAAC,GACjC,GAAG,GACH;QACE,IAAI,EAAE,GAAG;IACrB,CAAS,CAAC;IACN,OAAO,yCAAyC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACvE,CAAC;AACD;;;CAGA,GACA,SAAS,YAAY,CAAC,SAAS,EAAE,SAAS,EAAE;IACxC,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,OAAO,oBAAoB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AACnD,CAAC;AACD;;;CAGA,GACA,SAAS,oBAAoB,CAAC,SAAS,EAAE,GAAG,EAAE,QAAQ,EAAE;IACpD,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACxC,MAAM,cAAc,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACxD,OAAO,IAAI,gBAAgB,CAAC,SAAS,EAAE,cAAc,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,gBAAgB,CAAC,QAAQ,CAAC,gBAAgB,EAAE,QAAQ,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC;AAC9J,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;;;;;;;;;;;CAoBA,GACA,SAAS,kBAAkB,CAAC,KAAK,EAAE;IAC/B,MAAM,cAAc,GAAG;QACnB,KAAK,EAAE,KAAK,EAAE;IACtB,CAAK,CAAC;IACF,OAAO,sBAAsB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;AACzD,CAAC;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiCA,GACA,SAAS,sBAAsB,CAAC,KAAK,EAAE,aAAa,EAAE;IAClD,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACnD,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,MAAM,kBAAkB,GAAG,UAAU,CAAC,aAAa,EAAE,CAAC,SAAS,EAAE,KAAK,KAAK;QACvE,OAAO,IAAI,aAAa,CAAC,KAAK,EAAE,SAAS,CAAC,cAAc,EAAE,SAAS,CAAC,kBAAkB,CAAC,CAAC;IAChG,CAAK,CAAC,CAAC;IACP,8CAAA;IACI,OAAO,gCAAgC,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC,IAAI,EAAC,eAAe,GAAI,+BAA+B,CAAC,SAAS,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC,CAAC;AAClL,CAAC;AACD;;;;;;CAMA,GACA,SAAS,+BAA+B,CAAC,SAAS,EAAE,KAAK,EAAE,eAAe,EAAE;IACxE,MAAM,cAAc,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACxD,MAAM,aAAa,GAAG,IAAI,sBAAsB,CAAC,KAAK,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;IACzF,OAAO,aAAa,CAAC;AACzB,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,oBAAoB,CAAC;IACvB,WAAW,CAAC,QAAQ,CAAE;QAClB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,wBAAwB,GAAG,IAAI,uBAAuB,EAAE,CAAC;QAC9D,IAAI,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC,gBAAgB,EAAE;YAC/E,IAAI,CAAC,yBAAyB,GAC1B,QAAQ,CAAC,gBAAgB,CAAC,yBAAyB,CAAC;QACpE,CAAS,MACI;YACD,IAAI,CAAC,yBAAyB,GAAG,IAAI,8BAA8B,EAAE,CAAC;QAClF,CAAS;IACT,CAAK;IACD,MAAM,GAAG;QACL,OAAO;YAAE,IAAI,EAAE,IAAI,CAAC,IAAI;QAAA,CAAE,CAAC;IACnC,CAAK;AACL,CAAC;AACD,MAAM,wBAAwB,CAAC;IAC3B,WAAW,CAAC,QAAQ,CAAE;QAClB,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;QACzB,IAAI,UAAU,CAAC;QACf,IAAI,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC,UAAU,EAAE;YACzE,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAC1C,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;QAC7C,CAAS,MACI;YACD,UAAU,GAAG,0BAA0B,CAAC,SAAS,CAAC,CAAC;YACnD,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC7C,CAAS;QACD,IAAI,CAAC,wBAAwB,GAAG,UAAU,CAAC,wBAAwB,CAAC;QACpE,IAAI,CAAC,yBAAyB,GAAG,UAAU,CAAC,yBAAyB,CAAC;IAC9E,CAAK;IACD,MAAM,GAAG;QACL,OAAO;YAAE,IAAI,EAAE,IAAI,CAAC,IAAI;QAAA,CAAE,CAAC;IACnC,CAAK;AACL,CAAC;AACD,MAAM,8BAA8B,CAAC;IACjC,WAAW,EAAG;QACV,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;QAC1B,IAAI,CAAC,yBAAyB,GAAG,IAAI,8BAA8B,EAAE,CAAC;IAC9E,CAAK;IACD,MAAM,GAAG;QACL,OAAO;YAAE,IAAI,EAAE,IAAI,CAAC,IAAI;QAAA,CAAE,CAAC;IACnC,CAAK;AACL,CAAC;AACD,MAAM,4BAA4B,CAAC;IAC/B,WAAW,CAAC,SAAS,CAAE;QACnB,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;QACxB,IAAI,CAAC,yBAAyB,GAAG,IAAI,mCAAmC,CAAC,SAAS,CAAC,CAAC;IAC5F,CAAK;IACD,MAAM,GAAG;QACL,OAAO;YAAE,IAAI,EAAE,IAAI,CAAC,IAAI;QAAA,CAAE,CAAC;IACnC,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,2BAA2B,GAAG;IACnC,OAAO,IAAI,8BAA8B,EAAE,CAAC;AAChD,CAAC;AACD;;;;;;CAMA,GACA,SAAS,yBAAyB,CAAC,QAAQ,EAAE;IACzC,OAAO,IAAI,4BAA4B,CAAC,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC;AACzH,CAAC;AACD;;;CAGA,GACA,SAAS,gBAAgB,CAAC,QAAQ,EAAE;IAChC,OAAO,IAAI,oBAAoB,CAAC,QAAQ,CAAC,CAAC;AAC9C,CAAC;AACD;;;;;CAKA,GACA,SAAS,oBAAoB,CAAC,QAAQ,EAAE;IACpC,OAAO,IAAI,wBAAwB,CAAC,QAAQ,CAAC,CAAC;AAClD,CAAC;AACD,MAAM,oBAAoB,CAAC;IACvB,WAAW,CAAC,cAAc,CAAE;QACxB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,qBAAqB,CAAC;IAC1C,CAAK;IACD,MAAM,GAAG;QACL,OAAO;YAAE,IAAI,EAAE,IAAI,CAAC,IAAI;QAAA,CAAE,CAAC;IACnC,CAAK;IACL;;KAEA,GACI,WAAW,CAAC,QAAQ,EAAE;QAClB,IAAI,CAAC,wBAAwB,GAAG,IAAI,uBAAuB,EAAE,CAAC;QAC9D,IAAI,CAAC,yBAAyB,GAAG,IAAI,iCAAiC,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IAChN,CAAK;AACL,CAAC;AACD,MAAM,mBAAmB,CAAC;IACtB,WAAW,EAAG;QACV,IAAI,CAAC,IAAI,GAAG,uBAAuB,CAAC;IAC5C,CAAK;IACD,MAAM,GAAG;QACL,OAAO;YAAE,IAAI,EAAE,IAAI,CAAC,IAAI;QAAA,CAAE,CAAC;IACnC,CAAK;IACL;;KAEA,GACI,WAAW,CAAC,QAAQ,EAAE;QAClB,IAAI,CAAC,wBAAwB,GAAG,IAAI,uBAAuB,EAAE,CAAC;QAC9D,IAAI,CAAC,yBAAyB,GAAG,IAAI,gCAAgC,CAAC,IAAI,CAAC,wBAAwB,EAAE,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC;IAC1L,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,SAAS,0BAA0B,CAAC,QAAQ,EAAE;IAC1C,OAAO,IAAI,oBAAoB,CAAC,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC;AACjH,CAAC;AACD;;CAEA,GACA,SAAS,4BAA4B,GAAG;IACpC,OAAO,IAAI,mBAAmB,EAAE,CAAC;AACrC,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,MAAM,2BAA2B,GAAG;IAChC,WAAW,EAAE,CAAC;AAClB,CAAC,CAAC;AACF,SAAS,0BAA0B,CAAC,OAAO,EAAE;IACzC,IAAI,OAAO,CAAC,WAAW,GAAG,CAAC,EAAE;QACzB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,iCAAiC,CAAC,CAAC;IAC3F,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;CAOA,GACA,MAAM,UAAU,CAAC;IACjB,qBAAA,GACI,WAAW,CAAC,UAAU,EAAE,cAAc,CAAE;QACpC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;IACzD,CAAK;IACD,GAAG,CAAC,WAAW,EAAE,IAAI,EAAE,OAAO,EAAE;QAC5B,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5D,MAAM,cAAc,GAAG,2BAA2B,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACjF,MAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,gBAAgB,EAAE,GAAG,CAAC,IAAI,EAAE,cAAc,EAAE,GAAG,CAAC,SAAS,KAAK,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3H,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACvE,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,MAAM,CAAC,WAAW,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,mBAAmB,EAAE;QAClE,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACpE,qEAAA;QACA,yBAAA;QACQ,iBAAiB,yLAAG,qBAAA,AAAkB,EAAC,iBAAiB,CAAC,CAAC;QAC1D,IAAI,MAAM,CAAC;QACX,IAAI,OAAO,iBAAiB,KAAK,QAAQ,IACrC,iBAAiB,YAAY,SAAS,EAAE;YACxC,MAAM,GAAG,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,mBAAmB,EAAE,GAAG,CAAC,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,mBAAmB,CAAC,CAAC;QACxI,CAAS,MACI;YACD,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,mBAAmB,EAAE,GAAG,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;QACzG,CAAS;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7E,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;;;KAKA,GACI,MAAM,CAAC,WAAW,EAAE;QAChB,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,cAAc,CAAC,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC5F,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;;;;;;;;;KAWA,GACI,MAAM,GAAG;QACL,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,CAAS;QACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IACjC,CAAK;IACD,mBAAmB,GAAG;QAClB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,mBAAmB,EAAE,qDAAqD,GACpG,kBAAkB,CAAC,CAAC;QACpC,CAAS;IACT,CAAK;AACL,CAAC;AACD,SAAS,iBAAiB,CAAC,WAAW,EAAE,SAAS,EAAE;IAC/C,WAAW,yLAAG,qBAAA,AAAkB,EAAC,WAAW,CAAC,CAAC;IAC9C,IAAI,WAAW,CAAC,SAAS,KAAK,SAAS,EAAE;QACrC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,qEAAqE,CAAC,CAAC;IAC/H,CAAK,MACI;QACD,OAAO,WAAW,CAAC;IAC3B,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,4EAAA;AACA,cAAA;AACA;;;;;;CAMA,GACA,MAAM,aAAa,CAAC;IACpB,qBAAA,GACI,WAAW,CAAC,UAAU,EAAE,YAAY,CAAE;QAClC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;IACzD,CAAK;IACL;;;;;KAKA,GACI,GAAG,CAAC,WAAW,EAAE;QACb,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5D,MAAM,cAAc,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;YAAC,GAAG,CAAC,IAAI;SAAC,CAAC,CAAC,IAAI,EAAC,IAAI,IAAI;YACrD,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC5B,OAAO,IAAI,EAAE,CAAC;YAC9B,CAAa;YACD,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,GAAG,CAAC,eAAe,EAAE,EAAE;gBACvB,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC;YAC5G,CAAa,MACI,IAAI,GAAG,CAAC,YAAY,EAAE,EAAE;gBACzB,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,EAAE,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC;YAC9G,CAAa,MACI;gBACD,MAAM,IAAI,EAAE,CAAC;YAC7B,CAAa;QACb,CAAS,CAAC,CAAC;IACX,CAAK;IACD,GAAG,CAAC,WAAW,EAAE,KAAK,EAAE,OAAO,EAAE;QAC7B,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5D,MAAM,cAAc,GAAG,2BAA2B,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QAClF,MAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,WAAW,EAAE,iBAAiB,EAAE,GAAG,CAAC,IAAI,EAAE,cAAc,EAAE,GAAG,CAAC,SAAS,KAAK,IAAI,EAAE,OAAO,CAAC,CAAC;QAC5H,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,MAAM,CAAC,WAAW,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,mBAAmB,EAAE;QAClE,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACpE,qEAAA;QACA,yBAAA;QACQ,iBAAiB,yLAAG,qBAAA,AAAkB,EAAC,iBAAiB,CAAC,CAAC;QAC1D,IAAI,MAAM,CAAC;QACX,IAAI,OAAO,iBAAiB,KAAK,QAAQ,IACrC,iBAAiB,YAAY,SAAS,EAAE;YACxC,MAAM,GAAG,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE,oBAAoB,EAAE,GAAG,CAAC,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,mBAAmB,CAAC,CAAC;QACzI,CAAS,MACI;YACD,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,oBAAoB,EAAE,GAAG,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;QAC1G,CAAS;QACD,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;;;KAKA,GACI,MAAM,CAAC,WAAW,EAAE;QAChB,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5D,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC;IACpB,CAAK;AACL,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;CAMA,GACA,MAAM,WAAW,SAAS,aAAa,CAAC;IACxC,8EAAA;IACA,uEAAA;IACA,qBAAA,GACI,WAAW,CAAC,UAAU,EAAE,YAAY,CAAE;QAClC,KAAK,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;IACL;;;;;KAKA,GACI,GAAG,CAAC,WAAW,EAAE;QACb,MAAM,GAAG,GAAG,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5D,MAAM,cAAc,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC9D,OAAO,KAAK,CACP,GAAG,CAAC,WAAW,CAAC,CAChB,IAAI,EAAC,oBAAoB,GAAI,IAAI,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,EAAE,GAAG,CAAC,IAAI,EAAE,oBAAoB,CAAC,SAAS,EAAE,IAAI,gBAAgB,CAC9J,qBAAA,GAAgC,KAAK,EACrC,cAAA,GAAyB,KAAK,CAAC,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;IACjD,CAAK;AACL,CAAC;AACD;;;;;;;;;;;;;;;;;;CAkBA,GACA,SAAS,cAAc,CAAC,SAAS,EAAE,cAAc,EAAE,OAAO,EAAE;IACxD,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvC,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,2BAA2B,CAAC,EAAE,OAAO,CAAC,CAAC;IACnG,0BAA0B,CAAC,mBAAmB,CAAC,CAAC;IAChD,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,OAAO,0BAA0B,CAAC,MAAM,GAAE,mBAAmB,GAAI,cAAc,CAAC,IAAI,WAAW,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC,EAAE,mBAAmB,CAAC,CAAC;AAC3J,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;CAGA,GACA,SAAS,WAAW,GAAG;IACnB,OAAO,IAAI,oBAAoB,CAAC,aAAa,CAAC,CAAC;AACnD,CAAC;AACD;;;CAGA,GACA,SAAS,eAAe,GAAG;IACvB,OAAO,IAAI,6BAA6B,CAAC,iBAAiB,CAAC,CAAC;AAChE,CAAC;AACD;;;;;;;;;;;CAWA,GACA,SAAS,UAAU,CAAC,GAAG,QAAQ,EAAE;IACjC,qEAAA;IACA,8DAAA;IACI,OAAO,IAAI,wBAAwB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;AAChE,CAAC;AACD;;;;;;;;;;CAUA,GACA,SAAS,WAAW,CAAC,GAAG,QAAQ,EAAE;IAClC,qEAAA;IACA,8DAAA;IACI,OAAO,IAAI,yBAAyB,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;AAClE,CAAC;AACD;;;;;;;;;;;;;;;;;;CAkBA,GACA,SAAS,SAAS,CAAC,CAAC,EAAE;IAClB,OAAO,IAAI,8BAA8B,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AAC9D,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA;;;;;;;;;;CAUA,GACA,SAAS,UAAU,CAAC,SAAS,EAAE;IAC3B,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvC,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACrC,OAAO,IAAI,UAAU,CAAC,SAAS,GAAE,SAAS,GAAI,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;AACtF,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,SAAS,qBAAqB,CAAC,SAAS,EAAE,mBAAmB,EAAE;IAC3D,IAAI,EAAE,CAAC;IACP,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IACvC,MAAM,MAAM,GAAG,yBAAyB,CAAC,SAAS,CAAC,CAAC;IACpD,IAAI,CAAC,MAAM,CAAC,gCAAgC,IACxC,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC,gCAAgC,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,YAAY,MAAM,QAAQ,EAAE;QAC5H,qEAAA;QACA,wEAAA;QACQ,OAAO,CAAC,oDAAoD,CAAC,CAAC;QAC9D,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IACjC,CAAK;IACD,MAAM,aAAa,GAAG,YAAY,CAAC,mBAAmB,CAAC,CAAC;IACxD,OAAO,oCAAoC,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;AACvE,CAAC;AACD,SAAS,YAAY,CAAC,mBAAmB,EAAE;IACvC,MAAM,kBAAkB,GAAG,OAAO,mBAAmB,KAAK,QAAQ,GAC5D,YAAY,CAAC,mBAAmB,CAAC,GACjC,mBAAmB,CAAC;IAC1B,MAAM,aAAa,GAAG,EAAE,CAAC;IACzB,IAAI,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;QAC3C,KAAK,MAAM,KAAK,IAAI,kBAAkB,CAAC,OAAO,CAAE;YAC5C,MAAM,eAAe,GAAG,YAAY,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;YAC/D,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;gBAC7B,KAAK,MAAM,KAAK,IAAI,KAAK,CAAC,MAAM,CAAE;oBAC9B,MAAM,eAAe,GAAG,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;oBACzD,MAAM,SAAS,GAAG,+BAA+B,CAAC,uBAAuB,EAAE,eAAe,CAAC,CAAC;oBAC5F,IAAI,KAAK,CAAC,WAAW,KAAK,UAAU,EAAE;wBAClC,QAAQ,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,SAAS,EAAE,CAAC,CAAA,sBAAA,GAA0B,CAAC,CAAC;oBAC/F,CAAqB,MACI,IAAI,KAAK,CAAC,KAAK,KAAK,WAAW,EAAE;wBAClC,QAAQ,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,SAAS,EAAE,CAAC,CAAA,uBAAA,GAA2B,CAAC,CAAC;oBAChG,CAAqB,MACI,IAAI,KAAK,CAAC,KAAK,KAAK,YAAY,EAAE;wBACnC,QAAQ,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,SAAS,EAAE,CAAC,CAAA,wBAAA,GAA4B,CAAC,CAAC;oBACjG,CAAqB;gBACrB,CAAiB;YACjB,CAAa;YACD,aAAa,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,UAAU,EAAE,eAAe,EAAE,QAAQ,EAAE,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACrH,CAAS;IACT,CAAK;IACD,OAAO,aAAa,CAAC;AACzB,CAAC;AACD,SAAS,YAAY,CAAC,IAAI,EAAE;IACxB,IAAI;QACA,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAChC,CAAK,CACD,OAAO,CAAC,EAAE;QACN,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,wBAAwB,GAAA,CAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IACtI,CAAK;AACL,CAAC;AACD,SAAS,YAAY,CAAC,IAAI,EAAE,QAAQ,EAAE;IAClC,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;QACpC,MAAM,IAAI,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,4BAA4B,GAAG,QAAQ,CAAC,CAAC;IACjG,CAAK;IACD,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC1B,CAAC;AAED;;;;;;;;;;;;;;;CAeA,GACA,iBAAiB,CAAC,MAAM,CAAC","ignoreList":[0],"debugId":null}}]
}