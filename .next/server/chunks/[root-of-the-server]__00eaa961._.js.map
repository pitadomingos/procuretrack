{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\n\n// Configure dotenv to load the .env file from the backend directory\ndotenv.config({ path: path.resolve(process.cwd(), 'backend', '.env') });\n\nlet pool = null;\n\nasync function getDbPool() {\n  if (pool) {\n    return pool;\n  }\n\n  // --- Debugging Environment ---\n  console.log('[DB_INIT] Current working directory:', process.cwd());\n  console.log('[DB_INIT] Checking for environment variables...');\n  \n  try {\n    // Check for essential DB environment variables\n    const essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\n    const missingEnvVars = [];\n    for (const v of essentialEnvVars) {\n        if (!process.env[v]) {\n            missingEnvVars.push(v);\n        } else {\n            // Avoid logging password in production\n            if (v !== 'DB_PASSWORD') {\n                console.log(`[DB_INIT] Found ENV VAR: ${v} = ${process.env[v]}`);\n            } else {\n                 console.log(`[DB_INIT] Found ENV VAR: DB_PASSWORD = (hidden)`);\n            }\n        }\n    }\n    \n    if (missingEnvVars.length > 0) {\n      const errorMsg = `Database configuration is incomplete. Missing variables: ${missingEnvVars.join(', ')}. Please define these in your root .env file.`;\n      console.error(`[DB_INIT_ERROR] ${errorMsg}`);\n      throw new Error(errorMsg);\n    }\n\n    // --- SSL Certificate Handling ---\n    const caCertPathOrContent = process.env.DB_SSL_CA;\n    let caCertContent;\n\n    if (caCertPathOrContent) {\n      const potentialPath = path.resolve(process.cwd(), caCertPathOrContent);\n      \n      if (fs.existsSync(potentialPath) && fs.statSync(potentialPath).isFile()) {\n        console.log(`DB_INIT_INFO: DB_SSL_CA points to a file. Reading certificate from \"${potentialPath}\".`);\n        caCertContent = fs.readFileSync(potentialPath, 'utf8');\n      } else {\n        console.log(\"DB_INIT_INFO: DB_SSL_CA does not appear to be a file path. Using its content directly for SSL connection.\");\n        caCertContent = caCertPathOrContent;\n      }\n    } else {\n      console.warn(`DB_WARN: The DB_SSL_CA environment variable is not set. Connecting with SSL using system default CAs. If connection fails, please provide the path to your 'ca.pem' file in the DB_SSL_CA variable in your .env file.`);\n    }\n    \n    const sslConfig = { rejectUnauthorized: true, ca: caCertContent || undefined };\n\n    // --- Connection Pool Creation ---\n    console.log(\"DB_INIT_INFO: Creating database connection pool for the first time.\");\n    const newPool = mysql.createPool({\n      host: process.env.DB_HOST,\n      user: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n      ssl: sslConfig,\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0,\n    });\n\n    try {\n      // Test the connection before assigning it to the singleton\n      const connection = await newPool.getConnection();\n      console.log(\"DB_INIT_SUCCESS: Database connection pool created and verified successfully.\");\n      connection.release();\n    } catch (testError) {\n      console.error(\"CRITICAL_DB_INIT_ERROR: Failed to get a connection from the pool after creation.\", testError);\n      // Destroy the pool if the initial connection test fails\n      newPool.end();\n      throw testError; // Re-throw to be caught by the main catch block\n    }\n\n    pool = newPool;\n    return pool;\n\n  } catch (error) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Failed to create and verify database connection pool. Error: ${error.message}`);\n    // Re-throw the error to be caught by the calling API route\n    throw error;\n  }\n}\n\n// Export the function that provides the pool\nexport { getDbPool };\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAEA,oEAAoE;AACpE,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,WAAW;AAAQ;AAErE,IAAI,OAAO;AAEX,eAAe;IACb,IAAI,MAAM;QACR,OAAO;IACT;IAEA,gCAAgC;IAChC,QAAQ,GAAG,CAAC,wCAAwC,QAAQ,GAAG;IAC/D,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,+CAA+C;QAC/C,MAAM,mBAAmB;YAAC;YAAW;YAAW;YAAe;SAAU;QACzE,MAAM,iBAAiB,EAAE;QACzB,KAAK,MAAM,KAAK,iBAAkB;YAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACjB,eAAe,IAAI,CAAC;YACxB,OAAO;gBACH,uCAAuC;gBACvC,IAAI,MAAM,eAAe;oBACrB,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,GAAG,EAAE,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACnE,OAAO;oBACF,QAAQ,GAAG,CAAC,CAAC,+CAA+C,CAAC;gBAClE;YACJ;QACJ;QAEA,IAAI,eAAe,MAAM,GAAG,GAAG;YAC7B,MAAM,WAAW,CAAC,yDAAyD,EAAE,eAAe,IAAI,CAAC,MAAM,6CAA6C,CAAC;YACrJ,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,UAAU;YAC3C,MAAM,IAAI,MAAM;QAClB;QAEA,mCAAmC;QACnC,MAAM,sBAAsB,QAAQ,GAAG,CAAC,SAAS;QACjD,IAAI;QAEJ,IAAI,qBAAqB;YACvB,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI;YAElD,IAAI,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,kBAAkB,6FAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,eAAe,MAAM,IAAI;gBACvE,QAAQ,GAAG,CAAC,CAAC,oEAAoE,EAAE,cAAc,EAAE,CAAC;gBACpG,gBAAgB,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,eAAe;YACjD,OAAO;gBACL,QAAQ,GAAG,CAAC;gBACZ,gBAAgB;YAClB;QACF,OAAO;YACL,QAAQ,IAAI,CAAC,CAAC,qNAAqN,CAAC;QACtO;QAEA,MAAM,YAAY;YAAE,oBAAoB;YAAM,IAAI,iBAAiB;QAAU;QAE7E,mCAAmC;QACnC,QAAQ,GAAG,CAAC;QACZ,MAAM,UAAU,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YAC/B,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;YACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;YAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;YAChE,KAAK;YACL,oBAAoB;YACpB,iBAAiB;YACjB,YAAY;QACd;QAEA,IAAI;YACF,2DAA2D;YAC3D,MAAM,aAAa,MAAM,QAAQ,aAAa;YAC9C,QAAQ,GAAG,CAAC;YACZ,WAAW,OAAO;QACpB,EAAE,OAAO,WAAW;YAClB,QAAQ,KAAK,CAAC,oFAAoF;YAClG,wDAAwD;YACxD,QAAQ,GAAG;YACX,MAAM,WAAW,gDAAgD;QACnE;QAEA,OAAO;QACP,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,MAAM,OAAO,EAAE;QACrH,2DAA2D;QAC3D,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/fuel-records/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { getDbPool } from '../../../../backend/db.js';\nimport type { FuelRecord, Tag, Site } from '@/types';\nimport csv from 'csv-parser';\nimport { Readable } from 'stream';\nimport { randomUUID } from 'crypto';\n\nexport async function POST(request: Request) {\n  const contentType = request.headers.get('content-type');\n  let connection;\n  const pool = await getDbPool();\n\n  if (contentType && contentType.includes('multipart/form-data')) {\n    console.log('[API_INFO] /api/fuel-records POST: Received multipart/form-data for CSV upload.');\n    try {\n        connection = await pool.getConnection();\n        const formData = await request.formData();\n        const file = formData.get('file') as File | null;\n        if (!file) return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });\n\n        const fileBuffer = Buffer.from(await file.arrayBuffer());\n        const results: any[] = [];\n        const stream = Readable.from(fileBuffer);\n\n        await new Promise<void>((resolve, reject) => {\n            stream.pipe(csv({ mapHeaders: ({ header }) => header.trim().toLowerCase() }))\n                .on('data', (data) => results.push(data))\n                .on('end', resolve)\n                .on('error', reject);\n        });\n\n        if (results.length === 0) return NextResponse.json({ message: 'CSV file is empty.' }, { status: 400 });\n\n        const [tags]: any[] = await connection.execute('SELECT id, tagNumber FROM Tag');\n        const [sites]: any[] = await connection.execute('SELECT id, siteCode FROM Site');\n        const tagMap = new Map(tags.map((t: Tag) => [t.tagNumber.toLowerCase(), t.id]));\n        const siteMap = new Map(sites.map((s: Site) => [s.siteCode?.toLowerCase(), s.id]));\n\n        await connection.beginTransaction();\n        let successfulImports = 0;\n        let failedImports = 0;\n        const errors: string[] = [];\n\n        for (const [index, record] of results.entries()) {\n            const tagNumber = record.tagnumber || record['tag number'];\n            const siteCode = record.sitecode || record['site code'];\n            const fuelDate = record.fueldate || record.date;\n            const quantity = record.quantity ? parseFloat(record.quantity) : null;\n            const unitCost = record.unitcost || record['unit cost'] ? parseFloat(record.unitcost || record['unit cost']) : null;\n            \n            if (!tagNumber || !fuelDate || !quantity || !unitCost) {\n                failedImports++;\n                errors.push(`Skipped row ${index + 2}: Missing required fields (TagNumber, FuelDate, Quantity, UnitCost).`);\n                continue;\n            }\n\n            const tagId = tagMap.get(tagNumber.toLowerCase());\n            const siteId = siteCode ? siteMap.get(siteCode.toLowerCase()) : null;\n            if (!tagId) {\n                 failedImports++;\n                 errors.push(`Skipped row ${index + 2}: TagNumber \"${tagNumber}\" not found in database.`);\n                 continue;\n            }\n\n            const recordId = record.id || randomUUID();\n            try {\n                const query = `\n                    INSERT INTO FuelRecord (id, fuelDate, reqNo, invNo, driver, odometer, tagId, siteId, description, uom, quantity, unitCost, recorderUserId, createdAt, updatedAt)\n                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())\n                    ON DUPLICATE KEY UPDATE \n                        fuelDate=VALUES(fuelDate), reqNo=VALUES(reqNo), invNo=VALUES(invNo), driver=VALUES(driver), odometer=VALUES(odometer), tagId=VALUES(tagId), siteId=VALUES(siteId), \n                        description=VALUES(description), uom=VALUES(uom), quantity=VALUES(quantity), unitCost=VALUES(unitCost), recorderUserId=VALUES(recorderUserId), updatedAt=NOW()`;\n                \n                await connection.execute(query, [\n                    recordId, new Date(fuelDate).toISOString().slice(0, 19).replace('T', ' '),\n                    record.reqno || null, record.invno || null, record.driver || null,\n                    record.odometer ? parseInt(record.odometer, 10) : null,\n                    tagId, siteId, record.description || null, record.uom || 'Liters',\n                    quantity, unitCost, record.recorderuserid || 'CSV_IMPORT'\n                ]);\n                successfulImports++;\n            } catch (dbError: any) {\n                failedImports++;\n                errors.push(`Row ${index + 2} (ID ${recordId}): DB Error - ${dbError.message}`);\n            }\n        }\n\n        await connection.commit();\n        let message = `${successfulImports} record(s) processed. ${failedImports} failed.`;\n        return NextResponse.json({ message, errors: errors.length > 0 ? errors : undefined }, { status: failedImports > 0 ? 207 : 200 });\n\n    } catch (error: any) {\n        if (connection) await connection.rollback();\n        return NextResponse.json({ error: 'Failed to handle fuel record CSV upload.', details: error.message }, { status: 500 });\n    } finally {\n        if (connection) connection.release();\n    }\n  } else if (contentType && contentType.includes('application/json')) {\n    try {\n      const fuelData = await request.json() as Omit<FuelRecord, 'id' | 'tagName' | 'siteName' | 'totalCost' | 'distanceTravelled'>;\n      const recordId = randomUUID();\n\n      const query = `\n        INSERT INTO FuelRecord (id, fuelDate, reqNo, invNo, driver, odometer, tagId, siteId, description, uom, quantity, unitCost, recorderUserId, createdAt, updatedAt)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())\n      `;\n      await pool.execute(query, [\n        recordId,\n        new Date(fuelData.fuelDate).toISOString().slice(0, 19).replace('T', ' '),\n        fuelData.reqNo || null, fuelData.invNo || null, fuelData.driver || null,\n        fuelData.odometer ? Number(fuelData.odometer) : null,\n        fuelData.tagId,\n        fuelData.siteId ? Number(fuelData.siteId) : null,\n        fuelData.description || 'Diesel',\n        fuelData.uom || 'Liters',\n        Number(fuelData.quantity),\n        Number(fuelData.unitCost),\n        fuelData.recorderUserId || null,\n      ]);\n      return NextResponse.json({ message: 'Fuel record saved successfully.', fuelRecordId: recordId }, { status: 201 });\n    } catch (error: any) {\n      return NextResponse.json({ error: 'Failed to create fuel record.', details: error.message, code: error.code }, { status: 500 });\n    }\n  } else {\n    return NextResponse.json({ error: 'Unsupported Content-Type' }, { status: 415 });\n  }\n}\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const month = searchParams.get('month');\n  const year = searchParams.get('year');\n  const siteIdParam = searchParams.get('siteId');\n  const tagIdParam = searchParams.get('tagId');\n  const driver = searchParams.get('driver');\n\n  let connection;\n  try {\n    const pool = await getDbPool();\n    connection = await pool.getConnection();\n\n    let query = `\n      SELECT \n        fr.id, fr.fuelDate, fr.reqNo, fr.invNo, fr.driver, fr.odometer, fr.tagId, \n        fr.siteId, fr.description, fr.uom, fr.quantity, fr.unitCost,\n        t.tagNumber as tagName, s.siteCode as siteName\n      FROM FuelRecord fr\n      JOIN Tag t ON fr.tagId = t.id\n      LEFT JOIN Site s ON fr.siteId = s.id\n      WHERE 1=1\n    `;\n    const queryParams: (string | number)[] = [];\n\n    if (month && month !== 'all') { query += ' AND MONTH(fr.fuelDate) = ?'; queryParams.push(parseInt(month, 10)); }\n    if (year && year !== 'all') { query += ' AND YEAR(fr.fuelDate) = ?'; queryParams.push(parseInt(year, 10)); }\n    if (siteIdParam && siteIdParam !== 'all') { query += ' AND fr.siteId = ?'; queryParams.push(parseInt(siteIdParam, 10)); }\n    if (tagIdParam && tagIdParam !== 'all') { query += ' AND fr.tagId = ?'; queryParams.push(tagIdParam); }\n    if (driver && driver.trim() !== '') { query += ' AND fr.driver LIKE ?'; queryParams.push(`%${driver.trim()}%`); }\n\n    query += ' ORDER BY fr.tagId, fr.fuelDate ASC, fr.odometer ASC';\n    \n    const [rows]: any[] = await connection.execute(query, queryParams);\n\n    const recordsByTag: { [key: string]: any[] } = {};\n    rows.forEach(rec => {\n      if (!recordsByTag[rec.tagId]) {\n        recordsByTag[rec.tagId] = [];\n      }\n      recordsByTag[rec.tagId].push(rec);\n    });\n\n    const recordsWithDistance: FuelRecord[] = [];\n    for (const tagId in recordsByTag) {\n      const tagRecords = recordsByTag[tagId]; // Already sorted by date/odometer\n      for (let i = 0; i < tagRecords.length; i++) {\n        const currentRecord = tagRecords[i];\n        let distanceTravelled: number | null = null;\n        if (i > 0 && currentRecord.odometer && tagRecords[i-1].odometer) {\n          distanceTravelled = currentRecord.odometer - tagRecords[i-1].odometer;\n        }\n        recordsWithDistance.push({\n          ...currentRecord,\n          quantity: parseFloat(currentRecord.quantity),\n          unitCost: parseFloat(currentRecord.unitCost),\n          totalCost: parseFloat(currentRecord.quantity) * parseFloat(currentRecord.unitCost),\n          distanceTravelled: distanceTravelled,\n        });\n      }\n    }\n\n    recordsWithDistance.sort((a, b) => new Date(b.fuelDate).getTime() - new Date(a.fuelDate).getTime());\n\n    return NextResponse.json(recordsWithDistance);\n\n  } catch (error: any) {\n    return NextResponse.json({ error: 'Failed to fetch fuel records', details: error.message, code: error.code }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}