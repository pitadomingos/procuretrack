{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    // throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;AAChQ,uFAAuF;AACvF,8DAA8D;AAC9D,sJAAsJ;AAC1J;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/purchase-orders/%5BpoId%5D/route.js"],"sourcesContent":["\n\nimport { pool } from '../../../../../backend/db.js'; \nimport { NextResponse } from 'next/server';\n\nexport async function GET(request, { params }) {\n  const { poId } = params;\n  try {\n    // Selecting all columns, including siteId from PurchaseOrder table\n    const [rows] = await pool.execute('SELECT * FROM PurchaseOrder WHERE id = ?', [poId]);\n    if (rows.length > 0) {\n      return NextResponse.json(rows[0]);\n    } else {\n      return NextResponse.json({ message: `Purchase order with ID ${poId} not found` }, { status: 404 });\n    }\n  } catch (error) {\n    console.error(`Error fetching purchase order with ID ${poId}:`, error);\n    return NextResponse.json({ error: `Failed to fetch purchase order with ID ${poId}` }, { status: 500 });\n  }\n}\n\nexport async function PUT(request, { params }) {\n  const { poId } = params;\n  const numericPoId = Number(poId);\n\n  if (isNaN(numericPoId)) {\n    return NextResponse.json({ error: 'Invalid Purchase Order ID' }, { status: 400 });\n  }\n\n  let connection;\n  try {\n    const poData = await request.json();\n    const {\n      poNumber,\n      creationDate,\n      requestedByName,\n      supplierId,\n      approverId,\n      siteId, // Added overall PO siteId\n      subTotal,\n      vatAmount,\n      grandTotal,\n      currency,\n      pricesIncludeVat,\n      notes,\n      items \n    } = poData;\n\n    connection = await pool.getConnection();\n    await connection.beginTransaction();\n\n    const finalSiteId = siteId ? Number(siteId) : null; // Ensure siteId is number or null\n\n    const [poUpdateResult] = await connection.execute(\n      `UPDATE PurchaseOrder SET \n        poNumber = ?, creationDate = ?, requestedByName = ?, supplierId = ?, approverId = ?, siteId = ?,\n        subTotal = ?, vatAmount = ?, grandTotal = ?, currency = ?, pricesIncludeVat = ?, notes = ?\n       WHERE id = ?`, // Added siteId to SET clause\n      [\n        poNumber, new Date(creationDate), requestedByName, supplierId, approverId, finalSiteId,\n        subTotal, vatAmount, grandTotal, currency, pricesIncludeVat, notes,\n        numericPoId\n      ]\n    );\n\n    if (poUpdateResult.affectedRows === 0) {\n      await connection.rollback();\n      return NextResponse.json({ error: `Purchase Order with ID ${numericPoId} not found for update.` }, { status: 404 });\n    }\n\n    await connection.execute('DELETE FROM POItem WHERE poId = ?', [numericPoId]);\n\n    if (items && items.length > 0) {\n      for (const item of items) {\n        await connection.execute(\n          `INSERT INTO POItem (poId, partNumber, description, categoryId, siteId, uom, quantity, unitPrice, quantityReceived, itemStatus)\n           VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n          [\n            numericPoId, \n            item.partNumber || null, \n            item.description, \n            item.categoryId ? Number(item.categoryId) : null, \n            item.siteId ? Number(item.siteId) : null, // Item-level siteId\n            item.uom, \n            Number(item.quantity), \n            Number(item.unitPrice),\n            item.quantityReceived || 0, \n            item.itemStatus || 'Pending'   \n          ]\n        );\n      }\n    }\n\n    await connection.commit();\n    return NextResponse.json({ message: 'Purchase order updated successfully', poId: numericPoId, poNumber: poNumber });\n\n  } catch (dbError) {\n    if (connection) {\n      await connection.rollback();\n    }\n    console.error(`Error updating purchase order ${numericPoId}:`, dbError);\n    const errorMessage = dbError instanceof Error ? dbError.message : String(dbError);\n    return NextResponse.json({ error: 'Failed to update purchase order.', details: errorMessage }, { status: 500 });\n  } finally {\n    if (connection) {\n      connection.release();\n    }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}