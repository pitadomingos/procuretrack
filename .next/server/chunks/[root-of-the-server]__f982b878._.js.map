{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    // throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;AAChQ,uFAAuF;AACvF,8DAA8D;AAC9D,sJAAsJ;AAC1J;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/grn/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { pool } from '../../../../backend/db.js';\nimport type { GRNPostPayload, POItemPayload, PurchaseOrderPayload } from '@/types';\n\n// Mock user ID for now, replace with actual authenticated user ID\nconst MOCK_SYSTEM_USER_ID_FOR_GRN_LOG = 'GRN_PROCESSOR_001'; \n\nexport async function POST(request: Request) {\n  let connection;\n  try {\n    const payload = await request.json() as GRNPostPayload;\n    const { poId, grnDate, deliveryNoteNumber, overallGrnNotes, receivedByUserId, items: receivedItems } = payload;\n\n    if (!poId || !grnDate || !receivedByUserId || !receivedItems || receivedItems.length === 0) {\n      return NextResponse.json({ error: 'Missing required GRN data.' }, { status: 400 });\n    }\n\n    connection = await pool.getConnection();\n    await connection.beginTransaction();\n\n    // 1. Fetch the Purchase Order to verify its status\n    const [poRows]: any[] = await connection.execute('SELECT * FROM PurchaseOrder WHERE id = ? FOR UPDATE', [poId]);\n    if (poRows.length === 0) {\n      await connection.rollback();\n      return NextResponse.json({ error: `Purchase Order with ID ${poId} not found.` }, { status: 404 });\n    }\n    const purchaseOrder: PurchaseOrderPayload = poRows[0];\n\n    if (purchaseOrder.status !== 'Approved' && purchaseOrder.status !== 'Partially Received') {\n      await connection.rollback();\n      return NextResponse.json({ error: `Cannot receive items for PO ${purchaseOrder.poNumber}. Status is '${purchaseOrder.status}'.` }, { status: 400 });\n    }\n\n    // 2. Process each received item\n    for (const receivedItem of receivedItems) {\n      const [poItemRows]: any[] = await connection.execute('SELECT * FROM POItem WHERE id = ? AND poId = ? FOR UPDATE', [receivedItem.poItemId, poId]);\n      if (poItemRows.length === 0) {\n        throw new Error(`PO Item ID ${receivedItem.poItemId} not found for PO ${poId}.`);\n      }\n      const poItem: POItemPayload = poItemRows[0];\n      \n      const quantityToReceive = Number(receivedItem.quantityReceivedNow);\n      if (isNaN(quantityToReceive) || quantityToReceive <= 0) {\n        continue; // Skip if quantity is invalid or zero\n      }\n\n      const currentReceived = Number(poItem.quantityReceived || 0);\n      const orderedQuantity = Number(poItem.quantity);\n      const outstandingQty = orderedQuantity - currentReceived;\n\n      if (quantityToReceive > outstandingQty) {\n        throw new Error(`Cannot receive ${quantityToReceive} for item ${poItem.description}. Only ${outstandingQty} outstanding.`);\n      }\n\n      const newTotalReceived = currentReceived + quantityToReceive;\n      let newItemStatus = poItem.itemStatus;\n      if (newTotalReceived >= orderedQuantity) {\n        newItemStatus = 'Fully Received';\n      } else if (newTotalReceived > 0) {\n        newItemStatus = 'Partially Received';\n      }\n\n      await connection.execute(\n        'UPDATE POItem SET quantityReceived = ?, itemStatus = ? WHERE id = ?',\n        [newTotalReceived, newItemStatus, receivedItem.poItemId]\n      );\n    }\n\n    // 3. Update overall PO status\n    const [updatedPoItems]: any[] = await connection.execute('SELECT quantity, quantityReceived FROM POItem WHERE poId = ?', [poId]);\n    const allItemsFullyReceived = updatedPoItems.every((item: any) => Number(item.quantityReceived || 0) >= Number(item.quantity));\n    \n    let newPOStatus = purchaseOrder.status;\n    if (allItemsFullyReceived) {\n      newPOStatus = 'Completed';\n    } else if (updatedPoItems.some((item: any) => Number(item.quantityReceived || 0) > 0)) {\n      // If any item has been received at all (even partially) and not all are complete\n      newPOStatus = 'Partially Received';\n    }\n\n    if (newPOStatus !== purchaseOrder.status) {\n      await connection.execute('UPDATE PurchaseOrder SET status = ? WHERE id = ?', [newPOStatus, poId]);\n    }\n\n    // 4. Log activity (simplified)\n    const grnNumberSimulated = `GRN-${poId}-${Date.now().toString().slice(-5)}`;\n    const logDetails = `GRN: ${grnNumberSimulated} for PO: ${purchaseOrder.poNumber}. Delivery Note: ${deliveryNoteNumber || 'N/A'}. Notes: ${overallGrnNotes || 'None'}. Items received: ${receivedItems.filter(i => i.quantityReceivedNow > 0).length}. PO Status: ${newPOStatus}.`;\n    await connection.execute(\n      'INSERT INTO ActivityLog (id, user, action, timestamp, details) VALUES (?, ?, ?, NOW(), ?)',\n      [crypto.randomUUID(), receivedByUserId, 'GRN Processed', logDetails]\n    );\n    \n    await connection.commit();\n\n    return NextResponse.json({ \n      message: 'GRN processed successfully.', \n      grnNumber: grnNumberSimulated, \n      poId: poId,\n      newPOStatus: newPOStatus\n    }, { status: 200 });\n\n  } catch (error: any) {\n    if (connection) await connection.rollback();\n    console.error('[API_ERROR] /api/grn POST:', error);\n    return NextResponse.json({ error: 'Failed to process GRN.', details: error.message }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}