{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in your hosting environment or a root .env.local file. Database connections will fail.`);\n    throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your environment configuration.`);\n}\n\n// The CA certificate content is now expected to be in an environment variable.\nconst caCert = process.env.DB_SSL_CA;\n\nif (!caCert) {\n    console.warn(`DB_WARN: The DB_SSL_CA environment variable is not set. Database connections may fail if SSL is required by your provider. For local development without SSL, this may be ignored.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    // Conditionally add SSL options only if the certificate is provided.\n    ...(caCert && {\n      ssl: {\n        ca: caCert,\n        rejectUnauthorized: true, // Recommended for production if using a trusted CA\n      }\n    }),\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB environment variables.`);\n}\n\n// Export the connection pool\nexport { pool };\n"],"names":[],"mappings":";;;AACA;;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,gHAAgH,CAAC;IACtO,MAAM,IAAI,MAAM,CAAC,2CAA2C,EAAE,eAAe,IAAI,CAAC,MAAM,uCAAuC,CAAC;AACpI;AAEA,+EAA+E;AAC/E,MAAM,SAAS,QAAQ,GAAG,CAAC,SAAS;AAEpC,IAAI,CAAC,QAAQ;IACT,QAAQ,IAAI,CAAC,CAAC,kLAAkL,CAAC;AACrM;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,qEAAqE;QACrE,GAAI,UAAU;YACZ,KAAK;gBACH,IAAI;gBACJ,oBAAoB;YACtB;QACF,CAAC;QACD,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,kCAAkC,CAAC;AAC5H","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/charts/requisitions-by-status/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { pool } from '../../../../../backend/db.js';\nimport type { ChartDataPoint } from '@/types';\n\ninterface RequisitionStatusQueryResult {\n  status: string | null;\n  count: number | string;\n}\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const month = searchParams.get('month');\n  const year = searchParams.get('year');\n\n  let connection;\n  try {\n    connection = await pool.getConnection();\n    let whereClauses: string[] = [];\n    const queryParams: (string | number)[] = [];\n\n    if (month && month !== 'all') {\n      whereClauses.push(\"MONTH(requisitionDate) = ?\");\n      queryParams.push(parseInt(month, 10));\n    }\n    if (year && year !== 'all') {\n      whereClauses.push(\"YEAR(requisitionDate) = ?\");\n      queryParams.push(parseInt(year, 10));\n    }\n    \n    const whereString = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : '';\n\n    const query = `\n      SELECT \n        COALESCE(status, 'Unknown') as status_name, \n        COUNT(*) as count \n      FROM Requisition\n      ${whereString}\n      GROUP BY status_name\n      ORDER BY count DESC;\n    `;\n    const [rows]: any[] = await connection.execute(query, queryParams);\n\n    const chartData: ChartDataPoint[] = rows.map((row: RequisitionStatusQueryResult) => ({\n      name: row.status_name || 'Unknown',\n      Count: Number(row.count),\n    }));\n\n    return NextResponse.json(chartData);\n  } catch (error: any) {\n    console.error('Error fetching requisitions by status data:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch requisitions by status data', details: error.message },\n      { status: 500 }\n    );\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA;;;AAQO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC;IAC/B,MAAM,OAAO,aAAa,GAAG,CAAC;IAE9B,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,+GAAA,CAAA,OAAI,CAAC,aAAa;QACrC,IAAI,eAAyB,EAAE;QAC/B,MAAM,cAAmC,EAAE;QAE3C,IAAI,SAAS,UAAU,OAAO;YAC5B,aAAa,IAAI,CAAC;YAClB,YAAY,IAAI,CAAC,SAAS,OAAO;QACnC;QACA,IAAI,QAAQ,SAAS,OAAO;YAC1B,aAAa,IAAI,CAAC;YAClB,YAAY,IAAI,CAAC,SAAS,MAAM;QAClC;QAEA,MAAM,cAAc,aAAa,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,aAAa,IAAI,CAAC,UAAU,GAAG;QAEtF,MAAM,QAAQ,CAAC;;;;;MAKb,EAAE,YAAY;;;IAGhB,CAAC;QACD,MAAM,CAAC,KAAK,GAAU,MAAM,WAAW,OAAO,CAAC,OAAO;QAEtD,MAAM,YAA8B,KAAK,GAAG,CAAC,CAAC,MAAsC,CAAC;gBACnF,MAAM,IAAI,WAAW,IAAI;gBACzB,OAAO,OAAO,IAAI,KAAK;YACzB,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,+CAA+C;QAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA+C,SAAS,MAAM,OAAO;QAAC,GAC/E;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,IAAI,YAAY,WAAW,OAAO;IACpC;AACF","debugId":null}}]
}