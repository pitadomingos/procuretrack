{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\n\n// Configure dotenv to load the .env file from the backend directory\ndotenv.config({ path: path.resolve(process.cwd(), '.env') });\n\nlet pool = null;\n\nasync function getDbPool() {\n  if (pool) {\n    return pool;\n  }\n\n  // --- Debugging Environment ---\n  console.log('[DB_INIT] Current working directory:', process.cwd());\n  console.log('[DB_INIT] Checking for environment variables...');\n  \n  try {\n    // Check for essential DB environment variables\n    const essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME', 'JWT_SECRET'];\n    const missingEnvVars = [];\n    for (const v of essentialEnvVars) {\n        if (!process.env[v]) {\n            missingEnvVars.push(v);\n        } else {\n            // Avoid logging password in production\n            if (v !== 'DB_PASSWORD' && v !== 'JWT_SECRET') {\n                console.log(`[DB_INIT] Found ENV VAR: ${v} = ${process.env[v]}`);\n            } else {\n                 console.log(`[DB_INIT] Found ENV VAR: ${v} = (hidden)`);\n            }\n        }\n    }\n    \n    if (missingEnvVars.length > 0) {\n      const errorMsg = `Configuration is incomplete. Missing variables: ${missingEnvVars.join(', ')}. Please define these in your root .env file. For JWT_SECRET, use a long, random string.`;\n      console.error(`[DB_INIT_ERROR] ${errorMsg}`);\n      throw new Error(errorMsg);\n    }\n\n    // --- SSL Certificate Handling ---\n    const caCertPathOrContent = process.env.DB_SSL_CA;\n    let caCertContent;\n\n    if (caCertPathOrContent) {\n      const potentialPath = path.resolve(process.cwd(), caCertPathOrContent);\n      \n      if (fs.existsSync(potentialPath) && fs.statSync(potentialPath).isFile()) {\n        console.log(`DB_INIT_INFO: DB_SSL_CA points to a file. Reading certificate from \"${potentialPath}\".`);\n        caCertContent = fs.readFileSync(potentialPath, 'utf8');\n      } else {\n        console.log(\"DB_INIT_INFO: DB_SSL_CA does not appear to be a file path. Using its content directly for SSL connection.\");\n        caCertContent = caCertPathOrContent;\n      }\n    } else {\n      console.warn(`DB_WARN: The DB_SSL_CA environment variable is not set. Connecting with SSL using system default CAs. If connection fails, please provide the path to your 'ca.pem' file in the DB_SSL_CA variable in your .env file.`);\n    }\n    \n    const sslConfig = { rejectUnauthorized: true, ca: caCertContent || undefined };\n\n    // --- Connection Pool Creation ---\n    console.log(\"DB_INIT_INFO: Creating database connection pool for the first time.\");\n    const newPool = mysql.createPool({\n      host: process.env.DB_HOST,\n      user: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n      ssl: sslConfig,\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0,\n    });\n\n    try {\n      // Test the connection before assigning it to the singleton\n      const connection = await newPool.getConnection();\n      console.log(\"DB_INIT_SUCCESS: Database connection pool created and verified successfully.\");\n      connection.release();\n    } catch (testError) {\n      console.error(\"CRITICAL_DB_INIT_ERROR: Failed to get a connection from the pool after creation.\", testError);\n      // Destroy the pool if the initial connection test fails\n      newPool.end();\n      throw testError; // Re-throw to be caught by the main catch block\n    }\n\n    pool = newPool;\n    return pool;\n\n  } catch (error) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Failed to create and verify database connection pool. Error: ${error.message}`);\n    // Re-throw the error to be caught by the calling API route\n    throw error;\n  }\n}\n\n// Export the function that provides the pool\nexport { getDbPool };\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAEA,oEAAoE;AACpE,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI;AAAQ;AAE1D,IAAI,OAAO;AAEX,eAAe;IACb,IAAI,MAAM;QACR,OAAO;IACT;IAEA,gCAAgC;IAChC,QAAQ,GAAG,CAAC,wCAAwC,QAAQ,GAAG;IAC/D,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,+CAA+C;QAC/C,MAAM,mBAAmB;YAAC;YAAW;YAAW;YAAe;YAAW;SAAa;QACvF,MAAM,iBAAiB,EAAE;QACzB,KAAK,MAAM,KAAK,iBAAkB;YAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACjB,eAAe,IAAI,CAAC;YACxB,OAAO;gBACH,uCAAuC;gBACvC,IAAI,MAAM,iBAAiB,MAAM,cAAc;oBAC3C,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,GAAG,EAAE,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACnE,OAAO;oBACF,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,WAAW,CAAC;gBAC3D;YACJ;QACJ;QAEA,IAAI,eAAe,MAAM,GAAG,GAAG;YAC7B,MAAM,WAAW,CAAC,gDAAgD,EAAE,eAAe,IAAI,CAAC,MAAM,wFAAwF,CAAC;YACvL,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,UAAU;YAC3C,MAAM,IAAI,MAAM;QAClB;QAEA,mCAAmC;QACnC,MAAM,sBAAsB,QAAQ,GAAG,CAAC,SAAS;QACjD,IAAI;QAEJ,IAAI,qBAAqB;YACvB,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI;YAElD,IAAI,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,kBAAkB,6FAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,eAAe,MAAM,IAAI;gBACvE,QAAQ,GAAG,CAAC,CAAC,oEAAoE,EAAE,cAAc,EAAE,CAAC;gBACpG,gBAAgB,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,eAAe;YACjD,OAAO;gBACL,QAAQ,GAAG,CAAC;gBACZ,gBAAgB;YAClB;QACF,OAAO;YACL,QAAQ,IAAI,CAAC,CAAC,qNAAqN,CAAC;QACtO;QAEA,MAAM,YAAY;YAAE,oBAAoB;YAAM,IAAI,iBAAiB;QAAU;QAE7E,mCAAmC;QACnC,QAAQ,GAAG,CAAC;QACZ,MAAM,UAAU,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YAC/B,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;YACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;YAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;YAChE,KAAK;YACL,oBAAoB;YACpB,iBAAiB;YACjB,YAAY;QACd;QAEA,IAAI;YACF,2DAA2D;YAC3D,MAAM,aAAa,MAAM,QAAQ,aAAa;YAC9C,QAAQ,GAAG,CAAC;YACZ,WAAW,OAAO;QACpB,EAAE,OAAO,WAAW;YAClB,QAAQ,KAAK,CAAC,oFAAoF;YAClG,wDAAwD;YACxD,QAAQ,GAAG;YACX,MAAM,WAAW,gDAAgD;QACnE;QAEA,OAAO;QACP,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,MAAM,OAAO,EAAE;QACrH,2DAA2D;QAC3D,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/requisitions/for-po-creation/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { getDbPool } from '../../../../../backend/db.js';\nimport type { RequisitionPayload } from '@/types';\n\nexport async function GET() {\n  try {\n    const pool = await getDbPool();\n    // Fetches requisitions that are marked as 'Approved' and thus ready for PO creation\n    // Only returns minimal data needed for selection in the PO form.\n    // This query implicitly excludes 'Closed' requisitions because it only asks for 'Approved'.\n    const query = `\n      SELECT \n        r.id, \n        r.requisitionNumber, \n        r.requisitionDate, \n        r.requestedByName,\n        r.siteId, -- Added Requisition Header siteId\n        s.siteCode as siteName, -- siteName is actually siteCode here for display\n        (SELECT COUNT(*) FROM RequisitionItem ri WHERE ri.requisitionId = r.id) as itemCount\n      FROM Requisition r\n      LEFT JOIN Site s ON r.siteId = s.id\n      WHERE r.status = 'Approved' \n      ORDER BY r.requisitionDate DESC;\n    `;\n    const [rows]: any[] = await pool.execute(query);\n    \n    const approvedRequisitions = rows.map(row => ({\n        id: row.id,\n        requisitionNumber: row.requisitionNumber,\n        requisitionDate: new Date(row.requisitionDate).toISOString(), // Keep as ISO string for consistency\n        requestedByName: row.requestedByName,\n        siteName: row.siteName || 'N/A', // This is siteCode\n        siteId: Number(row.siteId), // Include the header siteId\n        itemCount: Number(row.itemCount || 0),\n    }));\n\n    return NextResponse.json(approvedRequisitions);\n  } catch (error: any) {\n    console.error('[API_ERROR] /api/requisitions/for-po-creation GET:', error);\n    return NextResponse.json({ error: 'Failed to fetch approved requisitions', details: error.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,MAAM,CAAA,GAAA,+GAAA,CAAA,YAAS,AAAD;QAC3B,oFAAoF;QACpF,iEAAiE;QACjE,4FAA4F;QAC5F,MAAM,QAAQ,CAAC;;;;;;;;;;;;;IAaf,CAAC;QACD,MAAM,CAAC,KAAK,GAAU,MAAM,KAAK,OAAO,CAAC;QAEzC,MAAM,uBAAuB,KAAK,GAAG,CAAC,CAAA,MAAO,CAAC;gBAC1C,IAAI,IAAI,EAAE;gBACV,mBAAmB,IAAI,iBAAiB;gBACxC,iBAAiB,IAAI,KAAK,IAAI,eAAe,EAAE,WAAW;gBAC1D,iBAAiB,IAAI,eAAe;gBACpC,UAAU,IAAI,QAAQ,IAAI;gBAC1B,QAAQ,OAAO,IAAI,MAAM;gBACzB,WAAW,OAAO,IAAI,SAAS,IAAI;YACvC,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,sDAAsD;QACpE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAyC,SAAS,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrH;AACF","debugId":null}}]
}