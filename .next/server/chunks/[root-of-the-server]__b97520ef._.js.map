{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    const errorMessage = `CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. Please define these in your root .env file. Database connections will fail until this is resolved.`;\n    console.error(errorMessage);\n    throw new Error(errorMessage);\n}\n\n// The CA certificate content is now expected to be in an environment variable.\nconst caCert = process.env.DB_SSL_CA;\n\nif (!caCert) {\n    console.warn(`DB_WARN: The DB_SSL_CA environment variable is not set. Database connections may fail if SSL is required by your provider. For local development without SSL, this may be ignored.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    // Conditionally add SSL options only if the certificate is provided.\n    ...(caCert && {\n      ssl: {\n        ca: caCert,\n        rejectUnauthorized: true, // Recommended for production if using a trusted CA\n      }\n    }),\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB environment variables.`);\n}\n\n// Export the connection pool\nexport { pool };\n"],"names":[],"mappings":";;;AACA;;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,MAAM,eAAe,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,oGAAoG,CAAC;IACjO,QAAQ,KAAK,CAAC;IACd,MAAM,IAAI,MAAM;AACpB;AAEA,+EAA+E;AAC/E,MAAM,SAAS,QAAQ,GAAG,CAAC,SAAS;AAEpC,IAAI,CAAC,QAAQ;IACT,QAAQ,IAAI,CAAC,CAAC,kLAAkL,CAAC;AACrM;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,qEAAqE;QACrE,GAAI,UAAU;YACZ,KAAK;gBACH,IAAI;gBACJ,oBAAoB;YACtB;QACF,CAAC;QACD,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,kCAAkC,CAAC;AAC5H","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/requisitions/for-po-creation/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { pool } from '../../../../../backend/db.js';\nimport type { RequisitionPayload } from '@/types';\n\nexport async function GET() {\n  try {\n    // Fetches requisitions that are marked as 'Approved' and thus ready for PO creation\n    // Only returns minimal data needed for selection in the PO form.\n    // This query implicitly excludes 'Closed' requisitions because it only asks for 'Approved'.\n    const query = `\n      SELECT \n        r.id, \n        r.requisitionNumber, \n        r.requisitionDate, \n        r.requestedByName,\n        r.siteId, -- Added Requisition Header siteId\n        s.siteCode as siteName, -- siteName is actually siteCode here for display\n        (SELECT COUNT(*) FROM RequisitionItem ri WHERE ri.requisitionId = r.id) as itemCount\n      FROM Requisition r\n      LEFT JOIN Site s ON r.siteId = s.id\n      WHERE r.status = 'Approved' \n      ORDER BY r.requisitionDate DESC;\n    `;\n    const [rows]: any[] = await pool.execute(query);\n    \n    const approvedRequisitions = rows.map(row => ({\n        id: row.id,\n        requisitionNumber: row.requisitionNumber,\n        requisitionDate: new Date(row.requisitionDate).toISOString(), // Keep as ISO string for consistency\n        requestedByName: row.requestedByName,\n        siteName: row.siteName || 'N/A', // This is siteCode\n        siteId: Number(row.siteId), // Include the header siteId\n        itemCount: Number(row.itemCount || 0),\n    }));\n\n    return NextResponse.json(approvedRequisitions);\n  } catch (error: any) {\n    console.error('[API_ERROR] /api/requisitions/for-po-creation GET:', error);\n    return NextResponse.json({ error: 'Failed to fetch approved requisitions', details: error.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,oFAAoF;QACpF,iEAAiE;QACjE,4FAA4F;QAC5F,MAAM,QAAQ,CAAC;;;;;;;;;;;;;IAaf,CAAC;QACD,MAAM,CAAC,KAAK,GAAU,MAAM,+GAAA,CAAA,OAAI,CAAC,OAAO,CAAC;QAEzC,MAAM,uBAAuB,KAAK,GAAG,CAAC,CAAA,MAAO,CAAC;gBAC1C,IAAI,IAAI,EAAE;gBACV,mBAAmB,IAAI,iBAAiB;gBACxC,iBAAiB,IAAI,KAAK,IAAI,eAAe,EAAE,WAAW;gBAC1D,iBAAiB,IAAI,eAAe;gBACpC,UAAU,IAAI,QAAQ,IAAI;gBAC1B,QAAQ,OAAO,IAAI,MAAM;gBACzB,WAAW,OAAO,IAAI,SAAS,IAAI;YACvC,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,sDAAsD;QACpE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAyC,SAAS,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrH;AACF","debugId":null}}]
}