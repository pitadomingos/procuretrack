{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/purchase-orders/%5BpoId%5D/items/route.js"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport csv from 'csv-parser';\nimport { Readable } from 'stream'; \n\nexport async function GET(request, { params }) {\n  const { poId } = params;\n  let connection;\n  try {\n    const { pool } = await import('../../../../../../backend/db.js'); \n    connection = await pool.getConnection();\n    const [rows] = await connection.execute('SELECT * FROM POItem WHERE poId = ?', [poId]);\n    return NextResponse.json(rows);\n  } catch (error) {\n    console.error(`[API_ERROR] /api/purchase-orders/${poId}/items GET: Error fetching PO items:`, error);\n    return NextResponse.json({ error: `Failed to fetch PO items for PO ${poId}`, details: error.message }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n\nexport async function POST(request, { params }) {\n  const { poId } = params; \n  const contentType = request.headers.get('content-type');\n  let connection;\n\n  if (!(contentType && contentType.includes('multipart/form-data'))) {\n    console.warn(`[API_WARN] /api/purchase-orders/${poId}/items POST: Unsupported Content-Type: ${contentType}`);\n    return NextResponse.json({ error: 'Unsupported Content-Type, expected multipart/form-data.' }, { status: 415 });\n  }\n\n  console.log(`[API_INFO] /api/purchase-orders/${poId}/items POST: Received multipart/form-data request for CSV upload.`);\n  try {\n    const { pool } = await import('../../../../../../backend/db.js'); \n    connection = await pool.getConnection();\n    const formData = await request.formData();\n    const file = formData.get('file');\n\n    if (!file || typeof file === 'string') { // Check if file is a File object\n      console.error(`[API_ERROR] /api/purchase-orders/${poId}/items POST CSV: No file uploaded or file is not a File object.`);\n      return NextResponse.json({ error: 'No file uploaded or invalid file type' }, { status: 400 });\n    }\n    console.log(`[API_INFO] /api/purchase-orders/${poId}/items POST CSV: Received file: ${file.name}, size: ${file.size}, type: ${file.type}`);\n    \n    const fileBuffer = Buffer.from(await file.arrayBuffer());\n    const results = [];\n    const stream = Readable.from(fileBuffer);\n    let firstRecordLogged = false;\n\n    console.log(`[API_INFO] /api/purchase-orders/${poId}/items POST CSV: Starting CSV parsing...`);\n    await new Promise((resolve, reject) => {\n      stream\n        .pipe(csv({\n          mapHeaders: ({ header }) => header.trim() // Trim headers\n        }))\n        .on('headers', (headers) => {\n          console.log(`[API_INFO] /api/purchase-orders/${poId}/items POST CSV: Detected CSV Headers:`, headers);\n        })\n        .on('data', (data) => {\n          if (!firstRecordLogged) {\n            console.log(`[API_DEBUG] /api/purchase-orders/${poId}/items POST CSV: First parsed data record from CSV:`, data);\n            firstRecordLogged = true;\n          }\n          results.push(data);\n        })\n        .on('end', () => {\n          console.log(`[API_INFO] /api/purchase-orders/${poId}/items POST CSV: CSV parsing finished. ${results.length} items found.`);\n          // TODO: Add logic for validating and inserting PO item data into POItem table,\n          // ensuring each item is correctly linked to the poId.\n          resolve();\n        })\n        .on('error', (parseError) => {\n          console.error(`[API_ERROR] /api/purchase-orders/${poId}/items POST CSV: Error during CSV parsing:`, parseError);\n          reject(parseError);\n        });\n    });\n\n    if (results.length === 0) {\n      console.warn(`[API_WARN] /api/purchase-orders/${poId}/items POST CSV: CSV file is empty or could not be parsed into records.`);\n      return NextResponse.json({ message: `PO Items CSV file for PO ID ${poId} is empty or yielded no records.` }, { status: 400 });\n    }\n\n    return NextResponse.json({ message: `PO Items CSV uploaded and parsed successfully for PO ID ${poId}. ${results.length} items found. (Data not saved to DB yet)`, data: results });\n  } catch (error) {\n    console.error(`[API_ERROR] /api/purchase-orders/${poId}/items POST CSV: Error handling PO item file upload:`, error);\n    return NextResponse.json({ error: 'Failed to handle PO item file upload', details: error.message }, { status: 500 });\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}