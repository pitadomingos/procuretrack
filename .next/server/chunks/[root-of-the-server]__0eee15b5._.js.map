{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\n\n// Configure dotenv to load the .env file from the backend directory at module load time.\ndotenv.config({ path: path.resolve(process.cwd(), 'backend', '.env') });\n\nlet pool = null;\n\nasync function getDbPool() {\n  if (pool) {\n    return pool;\n  }\n\n  // --- Debugging Environment ---\n  console.log('[DB_INIT] Current working directory:', process.cwd());\n  console.log('[DB_INIT] Checking for environment variables...');\n  \n  try {\n    // Check for essential DB environment variables\n    const essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME', 'JWT_SECRET'];\n    const missingEnvVars = [];\n    for (const v of essentialEnvVars) {\n        if (!process.env[v]) {\n            missingEnvVars.push(v);\n        } else {\n            // Avoid logging password in production\n            if (v !== 'DB_PASSWORD' && v !== 'JWT_SECRET') {\n                console.log(`[DB_INIT] Found ENV VAR: ${v} = ${process.env[v]}`);\n            } else {\n                 console.log(`[DB_INIT] Found ENV VAR: ${v} = (hidden)`);\n            }\n        }\n    }\n    \n    if (missingEnvVars.length > 0) {\n      const errorMsg = `Configuration is incomplete. Missing variables: ${missingEnvVars.join(', ')}. Please define these in your backend/.env file. For JWT_SECRET, use a long, random string.`;\n      console.error(`[DB_INIT_ERROR] ${errorMsg}`);\n      throw new Error(errorMsg);\n    }\n\n    // --- SSL Certificate Handling ---\n    const caCertPathOrContent = process.env.DB_SSL_CA;\n    let caCertContent;\n\n    if (caCertPathOrContent) {\n      const potentialPath = path.resolve(process.cwd(), caCertPathOrContent);\n      \n      if (fs.existsSync(potentialPath) && fs.statSync(potentialPath).isFile()) {\n        console.log(`DB_INIT_INFO: DB_SSL_CA points to a file. Reading certificate from \"${potentialPath}\".`);\n        caCertContent = fs.readFileSync(potentialPath, 'utf8');\n      } else {\n        console.log(\"DB_INIT_INFO: DB_SSL_CA does not appear to be a file path. Using its content directly for SSL connection.\");\n        caCertContent = caCertPathOrContent;\n      }\n    } else {\n      console.warn(`DB_WARN: The DB_SSL_CA environment variable is not set. Connecting with SSL using system default CAs. If connection fails, please provide the path to your 'ca.pem' file in the DB_SSL_CA variable in your .env file.`);\n    }\n    \n    const sslConfig = { rejectUnauthorized: true, ca: caCertContent || undefined };\n\n    // --- Connection Pool Creation ---\n    console.log(\"DB_INIT_INFO: Creating database connection pool for the first time.\");\n    const newPool = mysql.createPool({\n      host: process.env.DB_HOST,\n      user: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n      ssl: sslConfig,\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0,\n    });\n\n    try {\n      // Test the connection before assigning it to the singleton\n      const connection = await newPool.getConnection();\n      console.log(\"DB_INIT_SUCCESS: Database connection pool created and verified successfully.\");\n      connection.release();\n    } catch (testError) {\n      console.error(\"CRITICAL_DB_INIT_ERROR: Failed to get a connection from the pool after creation.\", testError);\n      // Destroy the pool if the initial connection test fails\n      newPool.end();\n      throw testError; // Re-throw to be caught by the main catch block\n    }\n\n    pool = newPool;\n    return pool;\n\n  } catch (error) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Failed to create and verify database connection pool. Error: ${error.message}`);\n    // Re-throw the error to be caught by the calling API route\n    throw error;\n  }\n}\n\n// Export the function that provides the pool\nexport { getDbPool };\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAEA,yFAAyF;AACzF,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,WAAW;AAAQ;AAErE,IAAI,OAAO;AAEX,eAAe;IACb,IAAI,MAAM;QACR,OAAO;IACT;IAEA,gCAAgC;IAChC,QAAQ,GAAG,CAAC,wCAAwC,QAAQ,GAAG;IAC/D,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,+CAA+C;QAC/C,MAAM,mBAAmB;YAAC;YAAW;YAAW;YAAe;YAAW;SAAa;QACvF,MAAM,iBAAiB,EAAE;QACzB,KAAK,MAAM,KAAK,iBAAkB;YAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACjB,eAAe,IAAI,CAAC;YACxB,OAAO;gBACH,uCAAuC;gBACvC,IAAI,MAAM,iBAAiB,MAAM,cAAc;oBAC3C,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,GAAG,EAAE,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACnE,OAAO;oBACF,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,WAAW,CAAC;gBAC3D;YACJ;QACJ;QAEA,IAAI,eAAe,MAAM,GAAG,GAAG;YAC7B,MAAM,WAAW,CAAC,gDAAgD,EAAE,eAAe,IAAI,CAAC,MAAM,2FAA2F,CAAC;YAC1L,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,UAAU;YAC3C,MAAM,IAAI,MAAM;QAClB;QAEA,mCAAmC;QACnC,MAAM,sBAAsB,QAAQ,GAAG,CAAC,SAAS;QACjD,IAAI;QAEJ,IAAI,qBAAqB;YACvB,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI;YAElD,IAAI,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,kBAAkB,6FAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,eAAe,MAAM,IAAI;gBACvE,QAAQ,GAAG,CAAC,CAAC,oEAAoE,EAAE,cAAc,EAAE,CAAC;gBACpG,gBAAgB,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,eAAe;YACjD,OAAO;gBACL,QAAQ,GAAG,CAAC;gBACZ,gBAAgB;YAClB;QACF,OAAO;YACL,QAAQ,IAAI,CAAC,CAAC,qNAAqN,CAAC;QACtO;QAEA,MAAM,YAAY;YAAE,oBAAoB;YAAM,IAAI,iBAAiB;QAAU;QAE7E,mCAAmC;QACnC,QAAQ,GAAG,CAAC;QACZ,MAAM,UAAU,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YAC/B,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;YACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;YAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;YAChE,KAAK;YACL,oBAAoB;YACpB,iBAAiB;YACjB,YAAY;QACd;QAEA,IAAI;YACF,2DAA2D;YAC3D,MAAM,aAAa,MAAM,QAAQ,aAAa;YAC9C,QAAQ,GAAG,CAAC;YACZ,WAAW,OAAO;QACpB,EAAE,OAAO,WAAW;YAClB,QAAQ,KAAK,CAAC,oFAAoF;YAClG,wDAAwD;YACxD,QAAQ,GAAG;YACX,MAAM,WAAW,gDAAgD;QACnE;QAEA,OAAO;QACP,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,MAAM,OAAO,EAAE;QACrH,2DAA2D;QAC3D,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/charts/site-po-value-status/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport type { ChartDataPoint, PurchaseOrderStatus } from '@/types';\nimport { getDbPool } from '../../../../../backend/db.js';\n\ninterface SitePOValueQueryResult {\n  site_identifier: string; \n  status: PurchaseOrderStatus; \n  total_value: number | string; \n  po_id: number; \n}\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const month = searchParams.get('month');\n  const year = searchParams.get('year');\n  \n  let connection;\n  try {\n    const pool = await getDbPool();\n    connection = await pool.getConnection();\n    \n    let poWhereClauses: string[] = [\"po.status IN ('Pending Approval', 'Approved')\"];\n    const queryParams: (string | number)[] = [];\n\n    if (month && month !== 'all') {\n      poWhereClauses.push(\"MONTH(po.creationDate) = ?\");\n      queryParams.push(parseInt(month, 10));\n    }\n    if (year && year !== 'all') {\n      poWhereClauses.push(\"YEAR(po.creationDate) = ?\");\n      queryParams.push(parseInt(year, 10));\n    }\n    \n    const poWhereString = poWhereClauses.length > 0 ? `WHERE ${poWhereClauses.join(' AND ')}` : '';\n    \n    const poQuery = `\n      SELECT \n        po.id as po_id,\n        COALESCE(s.siteCode, s.name, 'Unassigned') as site_identifier,\n        po.status,\n        po.grandTotal as total_value\n      FROM PurchaseOrder po\n      LEFT JOIN POItem poi ON po.id = poi.poId \n      LEFT JOIN Site s ON poi.siteId = s.id \n      ${poWhereString}\n      GROUP BY po.id, site_identifier, po.status, po.grandTotal \n      ORDER BY site_identifier ASC, po.status ASC;\n    `;\n    const [poRows]: any[] = await connection.execute(poQuery, queryParams);\n\n    const siteData: { [key: string]: ChartDataPoint } = {};\n    const siteOrder: string[] = [];\n\n    for (const po of poRows as Array<Omit<SitePOValueQueryResult, 'total_value'> & {total_value: number | string | null}>) {\n      const siteIdentifier = po.site_identifier;\n      if (!siteData[siteIdentifier]) {\n        siteData[siteIdentifier] = { \n          name: siteIdentifier,\n          'ApprovedValue': 0,      \n          'PendingApprovalValue': 0    \n        };\n        if (!siteOrder.includes(siteIdentifier)) {\n          siteOrder.push(siteIdentifier);\n        }\n      }\n\n      const poValue = Number(po.total_value) || 0;\n      const currentStatus = po.status ? po.status.trim() as PurchaseOrderStatus : 'Draft';\n\n      if (currentStatus === 'Pending Approval') {\n        siteData[siteIdentifier]['PendingApprovalValue'] = (siteData[siteIdentifier]['PendingApprovalValue'] as number) + poValue;\n      } else if (currentStatus === 'Approved') {\n         siteData[siteIdentifier]['ApprovedValue'] = (siteData[siteIdentifier]['ApprovedValue'] as number) + poValue;\n      }\n    }\n    \n    siteOrder.sort();\n    const chartData = siteOrder.map(siteIdentifier => siteData[siteIdentifier]);\n\n    return NextResponse.json(chartData);\n\n  } catch (error: any) {\n    console.error('Error fetching site PO value status data:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch site PO value status data', details: error.message },\n      { status: 500 }\n    );\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":";;;AACA;AAEA;;;AASO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC;IAC/B,MAAM,OAAO,aAAa,GAAG,CAAC;IAE9B,IAAI;IACJ,IAAI;QACF,MAAM,OAAO,MAAM,CAAA,GAAA,+GAAA,CAAA,YAAS,AAAD;QAC3B,aAAa,MAAM,KAAK,aAAa;QAErC,IAAI,iBAA2B;YAAC;SAAgD;QAChF,MAAM,cAAmC,EAAE;QAE3C,IAAI,SAAS,UAAU,OAAO;YAC5B,eAAe,IAAI,CAAC;YACpB,YAAY,IAAI,CAAC,SAAS,OAAO;QACnC;QACA,IAAI,QAAQ,SAAS,OAAO;YAC1B,eAAe,IAAI,CAAC;YACpB,YAAY,IAAI,CAAC,SAAS,MAAM;QAClC;QAEA,MAAM,gBAAgB,eAAe,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,eAAe,IAAI,CAAC,UAAU,GAAG;QAE5F,MAAM,UAAU,CAAC;;;;;;;;;MASf,EAAE,cAAc;;;IAGlB,CAAC;QACD,MAAM,CAAC,OAAO,GAAU,MAAM,WAAW,OAAO,CAAC,SAAS;QAE1D,MAAM,WAA8C,CAAC;QACrD,MAAM,YAAsB,EAAE;QAE9B,KAAK,MAAM,MAAM,OAAsG;YACrH,MAAM,iBAAiB,GAAG,eAAe;YACzC,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE;gBAC7B,QAAQ,CAAC,eAAe,GAAG;oBACzB,MAAM;oBACN,iBAAiB;oBACjB,wBAAwB;gBAC1B;gBACA,IAAI,CAAC,UAAU,QAAQ,CAAC,iBAAiB;oBACvC,UAAU,IAAI,CAAC;gBACjB;YACF;YAEA,MAAM,UAAU,OAAO,GAAG,WAAW,KAAK;YAC1C,MAAM,gBAAgB,GAAG,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,KAA4B;YAE5E,IAAI,kBAAkB,oBAAoB;gBACxC,QAAQ,CAAC,eAAe,CAAC,uBAAuB,GAAG,AAAC,QAAQ,CAAC,eAAe,CAAC,uBAAuB,GAAc;YACpH,OAAO,IAAI,kBAAkB,YAAY;gBACtC,QAAQ,CAAC,eAAe,CAAC,gBAAgB,GAAG,AAAC,QAAQ,CAAC,eAAe,CAAC,gBAAgB,GAAc;YACvG;QACF;QAEA,UAAU,IAAI;QACd,MAAM,YAAY,UAAU,GAAG,CAAC,CAAA,iBAAkB,QAAQ,CAAC,eAAe;QAE1E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,6CAA6C;QAC3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA6C,SAAS,MAAM,OAAO;QAAC,GAC7E;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,IAAI,YAAY,WAAW,OAAO;IACpC;AACF","debugId":null}}]
}