{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    const errorMessage = `CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. Please define these in your root .env file. Database connections will fail until this is resolved.`;\n    console.error(errorMessage);\n    throw new Error(errorMessage);\n}\n\n// The CA certificate content is now expected to be in an environment variable.\nconst caCert = process.env.DB_SSL_CA;\n\nif (!caCert) {\n    console.warn(`DB_WARN: The DB_SSL_CA environment variable is not set. Database connections may fail if SSL is required by your provider. For local development without SSL, this may be ignored.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    // Conditionally add SSL options only if the certificate is provided.\n    ...(caCert && {\n      ssl: {\n        ca: caCert,\n        rejectUnauthorized: true, // Recommended for production if using a trusted CA\n      }\n    }),\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB environment variables.`);\n}\n\n// Export the connection pool\nexport { pool };\n"],"names":[],"mappings":";;;AACA;;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,MAAM,eAAe,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,oGAAoG,CAAC;IACjO,QAAQ,KAAK,CAAC;IACd,MAAM,IAAI,MAAM;AACpB;AAEA,+EAA+E;AAC/E,MAAM,SAAS,QAAQ,GAAG,CAAC,SAAS;AAEpC,IAAI,CAAC,QAAQ;IACT,QAAQ,IAAI,CAAC,CAAC,kLAAkL,CAAC;AACrM;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,qEAAqE;QACrE,GAAI,UAAU;YACZ,KAAK;gBACH,IAAI;gBACJ,oBAAoB;YACtB;QACF,CAAC;QACD,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,kCAAkC,CAAC;AAC5H","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/quotes/next-quote-number/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { pool } from '../../../../../backend/db.js';\n\nexport async function GET() {\n  try {\n    const prefix = \"Q-\"; // Define your quote number prefix\n    const numberLength = 5; // Desired length of the numeric part, e.g., 00001\n\n    // Query to get the highest numeric part of Quote numbers with the specified prefix\n    const [rows]: any[] = await pool.execute(\n      `SELECT quoteNumber FROM Quote \n       WHERE quoteNumber LIKE ? \n       ORDER BY CAST(SUBSTRING(quoteNumber, ?) AS UNSIGNED) DESC \n       LIMIT 1`,\n      [`${prefix}%`, prefix.length + 1]\n    );\n\n    let nextNumericValue = 1; \n\n    if (rows.length > 0) {\n      const lastQuoteNumber = rows[0].quoteNumber;\n      if (lastQuoteNumber && lastQuoteNumber.startsWith(prefix)) {\n        const numericPartString = lastQuoteNumber.substring(prefix.length);\n        const lastNumericValue = parseInt(numericPartString, 10);\n        \n        if (!isNaN(lastNumericValue)) {\n          nextNumericValue = lastNumericValue + 1;\n        }\n      }\n    }\n\n    const nextQuoteNumber = `${prefix}${String(nextNumericValue).padStart(numberLength, '0')}`;\n    return NextResponse.json({ nextQuoteNumber });\n\n  } catch (error: any) {\n    console.error('[API_ERROR] /api/quotes/next-quote-number:', error);\n    return NextResponse.json({ error: 'Failed to generate next quote number', details: error.message }, { status: 500 });\n  }\n}\n    "],"names":[],"mappings":";;;AACA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,kCAAkC;QACvD,MAAM,eAAe,GAAG,kDAAkD;QAE1E,mFAAmF;QACnF,MAAM,CAAC,KAAK,GAAU,MAAM,+GAAA,CAAA,OAAI,CAAC,OAAO,CACtC,CAAC;;;cAGO,CAAC,EACT;YAAC,GAAG,OAAO,CAAC,CAAC;YAAE,OAAO,MAAM,GAAG;SAAE;QAGnC,IAAI,mBAAmB;QAEvB,IAAI,KAAK,MAAM,GAAG,GAAG;YACnB,MAAM,kBAAkB,IAAI,CAAC,EAAE,CAAC,WAAW;YAC3C,IAAI,mBAAmB,gBAAgB,UAAU,CAAC,SAAS;gBACzD,MAAM,oBAAoB,gBAAgB,SAAS,CAAC,OAAO,MAAM;gBACjE,MAAM,mBAAmB,SAAS,mBAAmB;gBAErD,IAAI,CAAC,MAAM,mBAAmB;oBAC5B,mBAAmB,mBAAmB;gBACxC;YACF;QACF;QAEA,MAAM,kBAAkB,GAAG,SAAS,OAAO,kBAAkB,QAAQ,CAAC,cAAc,MAAM;QAC1F,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAgB;IAE7C,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,8CAA8C;QAC5D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAwC,SAAS,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACpH;AACF","debugId":null}}]
}