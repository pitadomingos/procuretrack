{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    // throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;AAChQ,uFAAuF;AACvF,8DAA8D;AAC9D,sJAAsJ;AAC1J;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/purchase-orders/pending-approval/route.ts"],"sourcesContent":["\nimport { pool } from '../../../../../backend/db.js'; // Adjust path as needed\nimport { NextResponse } from 'next/server';\nimport type { ApprovalQueueItem } from '@/types';\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const approverEmail = searchParams.get('approverEmail');\n\n  if (!approverEmail) {\n    return NextResponse.json({ error: 'Approver email is required' }, { status: 400 });\n  }\n\n  let connection;\n  try {\n    connection = await pool.getConnection();\n\n    // 1. Find the Approver ID from their email\n    const [approverRows]: any[] = await connection.execute(\n      'SELECT id FROM Approver WHERE email = ? AND isActive = TRUE',\n      [approverEmail]\n    );\n\n    if (approverRows.length === 0) {\n      return NextResponse.json({ error: `No active approver found with email ${approverEmail}` }, { status: 404 });\n    }\n    const approverId = approverRows[0].id;\n\n    // 2. Fetch Purchase Orders assigned to this approver that are 'Pending Approval'\n    //    and join with Supplier table to get supplierName\n    //    and join with User table to get creatorName\n    const query = `\n      SELECT\n        po.id,\n        po.poNumber,\n        po.creationDate,\n        po.requestedByName, -- This is the manually entered requester name\n        po.creatorUserId,   -- This is the ID of the system user who created the PO\n        u.name as creatorName, -- Fetched from User table\n        po.grandTotal,\n        po.currency,\n        po.status,\n        s.supplierName\n      FROM PurchaseOrder po\n      LEFT JOIN Supplier s ON po.supplierId = s.supplierCode\n      LEFT JOIN User u ON po.creatorUserId = u.id \n      WHERE po.approverId = ? AND po.status = 'Pending Approval'\n      ORDER BY po.creationDate DESC;\n    `;\n    const [poRows]: any[] = await connection.execute(query, [approverId]);\n\n    const results: ApprovalQueueItem[] = poRows.map((row: any) => ({\n      id: row.id,\n      poNumber: row.poNumber,\n      creationDate: row.creationDate, \n      supplierName: row.supplierName || 'N/A',\n      requestedByName: row.requestedByName || 'N/A', \n      creatorUserId: row.creatorUserId,\n      creatorName: row.creatorName || (row.creatorUserId ? 'Unknown User' : 'System'), // Display creator name\n      grandTotal: parseFloat(row.grandTotal || 0),\n      currency: row.currency,\n      status: row.status,\n    }));\n\n    return NextResponse.json(results);\n\n  } catch (error: any) {\n    console.error('Error fetching pending approvals:', error);\n    return NextResponse.json(\n      {\n        error: 'Failed to fetch pending approvals.',\n        details: error.message,\n        stack: error.stack,\n      },\n      { status: 500 }\n    );\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":";;;AACA,mMAAqD,wBAAwB;AAC7E;;;AAGO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,gBAAgB,aAAa,GAAG,CAAC;IAEvC,IAAI,CAAC,eAAe;QAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA6B,GAAG;YAAE,QAAQ;QAAI;IAClF;IAEA,IAAI;IACJ,IAAI;QACF,aAAa,MAAM,+GAAA,CAAA,OAAI,CAAC,aAAa;QAErC,2CAA2C;QAC3C,MAAM,CAAC,aAAa,GAAU,MAAM,WAAW,OAAO,CACpD,+DACA;YAAC;SAAc;QAGjB,IAAI,aAAa,MAAM,KAAK,GAAG;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,CAAC,oCAAoC,EAAE,eAAe;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAC5G;QACA,MAAM,aAAa,YAAY,CAAC,EAAE,CAAC,EAAE;QAErC,iFAAiF;QACjF,sDAAsD;QACtD,iDAAiD;QACjD,MAAM,QAAQ,CAAC;;;;;;;;;;;;;;;;;IAiBf,CAAC;QACD,MAAM,CAAC,OAAO,GAAU,MAAM,WAAW,OAAO,CAAC,OAAO;YAAC;SAAW;QAEpE,MAAM,UAA+B,OAAO,GAAG,CAAC,CAAC,MAAa,CAAC;gBAC7D,IAAI,IAAI,EAAE;gBACV,UAAU,IAAI,QAAQ;gBACtB,cAAc,IAAI,YAAY;gBAC9B,cAAc,IAAI,YAAY,IAAI;gBAClC,iBAAiB,IAAI,eAAe,IAAI;gBACxC,eAAe,IAAI,aAAa;gBAChC,aAAa,IAAI,WAAW,IAAI,CAAC,IAAI,aAAa,GAAG,iBAAiB,QAAQ;gBAC9E,YAAY,WAAW,IAAI,UAAU,IAAI;gBACzC,UAAU,IAAI,QAAQ;gBACtB,QAAQ,IAAI,MAAM;YACpB,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SAAS,MAAM,OAAO;YACtB,OAAO,MAAM,KAAK;QACpB,GACA;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,IAAI,YAAY,WAAW,OAAO;IACpC;AACF","debugId":null}}]
}