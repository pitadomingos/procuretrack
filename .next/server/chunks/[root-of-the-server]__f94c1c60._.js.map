{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/management-stats/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport type { TagStatus } from '@/types';\n\ninterface ManagementStats {\n  suppliersCount: number;\n  approversCount: number;\n  usersCount: number;\n  sitesCount: number;\n  categoriesCount: number;\n  tagsCount: number;\n  tagStatusSummary?: Record<TagStatus, number>;\n  clientsCount: number;\n}\n\nexport async function GET() {\n  let connection;\n  try {\n    const { pool } = await import('../../../../backend/db.js');\n    connection = await pool.getConnection();\n\n    const [suppliersRows]: any[] = await connection.execute('SELECT COUNT(*) as count FROM Supplier');\n    const suppliersCount = Number(suppliersRows[0]?.count || 0);\n\n    const [approversRows]: any[] = await connection.execute('SELECT COUNT(*) as count FROM Approver');\n    const approversCount = Number(approversRows[0]?.count || 0);\n\n    const [usersRows]: any[] = await connection.execute('SELECT COUNT(*) as count FROM User');\n    const usersCount = Number(usersRows[0]?.count || 0);\n\n    const [sitesRows]: any[] = await connection.execute('SELECT COUNT(*) as count FROM Site');\n    const sitesCount = Number(sitesRows[0]?.count || 0);\n\n    const [categoriesRows]: any[] = await connection.execute('SELECT COUNT(*) as count FROM Category');\n    const categoriesCount = Number(categoriesRows[0]?.count || 0);\n\n    const [tagsTotalRows]: any[] = await connection.execute('SELECT COUNT(*) as count FROM Tag');\n    const tagsCount = Number(tagsTotalRows[0]?.count || 0);\n\n    const [tagStatusRows]: any[] = await connection.execute('SELECT status, COUNT(*) as count FROM Tag GROUP BY status');\n    const tagStatusSummary: Record<string, number> = {};\n    if (Array.isArray(tagStatusRows)) {\n      tagStatusRows.forEach((row: { status: TagStatus, count: number | string }) => {\n        tagStatusSummary[row.status] = Number(row.count);\n      });\n    }\n    \n    const [clientsRows]: any[] = await connection.execute('SELECT COUNT(*) as count FROM Client');\n    const clientsCount = Number(clientsRows[0]?.count || 0);\n\n    const responsePayload: ManagementStats = {\n      suppliersCount,\n      approversCount,\n      usersCount,\n      sitesCount,\n      categoriesCount,\n      tagsCount,\n      tagStatusSummary: tagStatusSummary as Record<TagStatus, number>,\n      clientsCount,\n    };\n    \n    return NextResponse.json(responsePayload);\n\n  } catch (error: any) {\n    console.error('[API_ERROR] /api/management-stats GET: Error fetching management entity counts:', error);\n    return NextResponse.json(\n        { \n            error: 'Failed to fetch management entity counts from database.', \n            details: error.message \n        }, \n        { status: 500 }\n    );\n  } finally {\n    if (connection) connection.release();\n  }\n}\n"],"names":[],"mappings":";;;AACA;;AAcO,eAAe;IACpB,IAAI;IACJ,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG;QACjB,aAAa,MAAM,KAAK,aAAa;QAErC,MAAM,CAAC,cAAc,GAAU,MAAM,WAAW,OAAO,CAAC;QACxD,MAAM,iBAAiB,OAAO,aAAa,CAAC,EAAE,EAAE,SAAS;QAEzD,MAAM,CAAC,cAAc,GAAU,MAAM,WAAW,OAAO,CAAC;QACxD,MAAM,iBAAiB,OAAO,aAAa,CAAC,EAAE,EAAE,SAAS;QAEzD,MAAM,CAAC,UAAU,GAAU,MAAM,WAAW,OAAO,CAAC;QACpD,MAAM,aAAa,OAAO,SAAS,CAAC,EAAE,EAAE,SAAS;QAEjD,MAAM,CAAC,UAAU,GAAU,MAAM,WAAW,OAAO,CAAC;QACpD,MAAM,aAAa,OAAO,SAAS,CAAC,EAAE,EAAE,SAAS;QAEjD,MAAM,CAAC,eAAe,GAAU,MAAM,WAAW,OAAO,CAAC;QACzD,MAAM,kBAAkB,OAAO,cAAc,CAAC,EAAE,EAAE,SAAS;QAE3D,MAAM,CAAC,cAAc,GAAU,MAAM,WAAW,OAAO,CAAC;QACxD,MAAM,YAAY,OAAO,aAAa,CAAC,EAAE,EAAE,SAAS;QAEpD,MAAM,CAAC,cAAc,GAAU,MAAM,WAAW,OAAO,CAAC;QACxD,MAAM,mBAA2C,CAAC;QAClD,IAAI,MAAM,OAAO,CAAC,gBAAgB;YAChC,cAAc,OAAO,CAAC,CAAC;gBACrB,gBAAgB,CAAC,IAAI,MAAM,CAAC,GAAG,OAAO,IAAI,KAAK;YACjD;QACF;QAEA,MAAM,CAAC,YAAY,GAAU,MAAM,WAAW,OAAO,CAAC;QACtD,MAAM,eAAe,OAAO,WAAW,CAAC,EAAE,EAAE,SAAS;QAErD,MAAM,kBAAmC;YACvC;YACA;YACA;YACA;YACA;YACA;YACA,kBAAkB;YAClB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,mFAAmF;QACjG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YACI,OAAO;YACP,SAAS,MAAM,OAAO;QAC1B,GACA;YAAE,QAAQ;QAAI;IAEpB,SAAU;QACR,IAAI,YAAY,WAAW,OAAO;IACpC;AACF","debugId":null}}]
}