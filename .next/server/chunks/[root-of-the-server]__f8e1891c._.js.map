{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    // throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;AAChQ,uFAAuF;AACvF,8DAA8D;AAC9D,sJAAsJ;AAC1J;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/purchase-orders/%5BpoId%5D/items/route.js"],"sourcesContent":["\nimport { pool } from '../../../../../../backend/db.js'; \nimport { NextResponse } from 'next/server';\nimport csv from 'csv-parser';\nimport { Readable } from 'stream'; \n\nexport async function GET(request, { params }) {\n  const { poId } = params;\n\n  try {\n    const [rows] = await pool.execute('SELECT * FROM POItem WHERE poId = ?', [poId]);\n    return NextResponse.json(rows);\n  } catch (error) {\n    console.error(`[API_ERROR] /api/purchase-orders/${poId}/items GET: Error fetching PO items:`, error);\n    return NextResponse.json({ error: `Failed to fetch PO items for PO ${poId}`, details: error.message }, { status: 500 });\n  }\n}\n\nexport async function POST(request, { params }) {\n  const { poId } = params; \n  const contentType = request.headers.get('content-type');\n\n  if (!(contentType && contentType.includes('multipart/form-data'))) {\n    console.warn(`[API_WARN] /api/purchase-orders/${poId}/items POST: Unsupported Content-Type: ${contentType}`);\n    return NextResponse.json({ error: 'Unsupported Content-Type, expected multipart/form-data.' }, { status: 415 });\n  }\n\n  console.log(`[API_INFO] /api/purchase-orders/${poId}/items POST: Received multipart/form-data request for CSV upload.`);\n  try {\n    const formData = await request.formData();\n    const file = formData.get('file');\n\n    if (!file || typeof file === 'string') { // Check if file is a File object\n      console.error(`[API_ERROR] /api/purchase-orders/${poId}/items POST CSV: No file uploaded or file is not a File object.`);\n      return NextResponse.json({ error: 'No file uploaded or invalid file type' }, { status: 400 });\n    }\n    console.log(`[API_INFO] /api/purchase-orders/${poId}/items POST CSV: Received file: ${file.name}, size: ${file.size}, type: ${file.type}`);\n    \n    const fileBuffer = Buffer.from(await file.arrayBuffer());\n    const results = [];\n    const stream = Readable.from(fileBuffer);\n    let firstRecordLogged = false;\n\n    console.log(`[API_INFO] /api/purchase-orders/${poId}/items POST CSV: Starting CSV parsing...`);\n    await new Promise((resolve, reject) => {\n      stream\n        .pipe(csv({\n          mapHeaders: ({ header }) => header.trim() // Trim headers\n        }))\n        .on('headers', (headers) => {\n          console.log(`[API_INFO] /api/purchase-orders/${poId}/items POST CSV: Detected CSV Headers:`, headers);\n        })\n        .on('data', (data) => {\n          if (!firstRecordLogged) {\n            console.log(`[API_DEBUG] /api/purchase-orders/${poId}/items POST CSV: First parsed data record from CSV:`, data);\n            firstRecordLogged = true;\n          }\n          results.push(data);\n        })\n        .on('end', () => {\n          console.log(`[API_INFO] /api/purchase-orders/${poId}/items POST CSV: CSV parsing finished. ${results.length} items found.`);\n          // TODO: Add logic for validating and inserting PO item data into POItem table,\n          // ensuring each item is correctly linked to the poId.\n          resolve();\n        })\n        .on('error', (parseError) => {\n          console.error(`[API_ERROR] /api/purchase-orders/${poId}/items POST CSV: Error during CSV parsing:`, parseError);\n          reject(parseError);\n        });\n    });\n\n    if (results.length === 0) {\n      console.warn(`[API_WARN] /api/purchase-orders/${poId}/items POST CSV: CSV file is empty or could not be parsed into records.`);\n      return NextResponse.json({ message: `PO Items CSV file for PO ID ${poId} is empty or yielded no records.` }, { status: 400 });\n    }\n\n    return NextResponse.json({ message: `PO Items CSV uploaded and parsed successfully for PO ID ${poId}. ${results.length} items found. (Data not saved to DB yet)`, data: results });\n  } catch (error) {\n    console.error(`[API_ERROR] /api/purchase-orders/${poId}/items POST CSV: Error handling PO item file upload:`, error);\n    return NextResponse.json({ error: 'Failed to handle PO item file upload', details: error.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}