{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    // throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;AAChQ,uFAAuF;AACvF,8DAA8D;AAC9D,sJAAsJ;AAC1J;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/categories/%5Bid%5D/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { pool } from '../../../../../backend/db.js';\nimport type { Category } from '@/types';\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const idParam = params.id;\n  console.log(`[API_INFO] /api/categories/${idParam} GET: Received request.`);\n  const id = parseInt(idParam, 10);\n  if (isNaN(id)) {\n    console.warn(`[API_WARN] /api/categories/${idParam} GET: Invalid Category ID format.`);\n    return NextResponse.json({ error: 'Invalid Category ID format' }, { status: 400 });\n  }\n\n  try {\n    console.log(`[API_INFO] /api/categories/${id} GET: Executing query to fetch category.`);\n    const [rows]: any[] = await pool.execute('SELECT id, category FROM Category WHERE id = ?', [id]);\n    if (rows.length === 0) {\n      console.warn(`[API_WARN] /api/categories/${id} GET: Category not found.`);\n      return NextResponse.json({ error: 'Category not found' }, { status: 404 });\n    }\n    console.log(`[API_INFO] /api/categories/${id} GET: Successfully fetched category:`, rows[0]);\n    return NextResponse.json(rows[0]);\n  } catch (error: any) {\n    console.error(`[API_ERROR] /api/categories/${id} GET: Error fetching category:`, error);\n    return NextResponse.json({ error: 'Failed to fetch category', details: error.message, code: error.code || 'UNKNOWN_DB_ERROR' }, { status: 500 });\n  }\n}\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const idParam = params.id;\n  console.log(`[API_INFO] /api/categories/${idParam} PUT: Received request.`);\n  let requestBody;\n  const id = parseInt(idParam, 10);\n  if (isNaN(id)) {\n    console.warn(`[API_WARN] /api/categories/${idParam} PUT: Invalid Category ID format.`);\n    return NextResponse.json({ error: 'Invalid Category ID format' }, { status: 400 });\n  }\n\n  try {\n    requestBody = await request.json();\n    console.log(`[API_INFO] /api/categories/${id} PUT: Request body:`, requestBody);\n    const { category: categoryName } = requestBody as Pick<Category, 'category'>;\n\n    if (!categoryName || typeof categoryName !== 'string' || categoryName.trim() === '') {\n      console.warn(`[API_WARN] /api/categories/${id} PUT: Validation failed - Category name is required.`);\n      return NextResponse.json({ error: 'Category name is required and must be a non-empty string.' }, { status: 400 });\n    }\n\n    const trimmedCategoryName = categoryName.trim();\n    const query = `UPDATE Category SET category = ? WHERE id = ?`;\n    console.log(`[API_INFO] /api/categories/${id} PUT: Executing query: ${query} with values: [\"${trimmedCategoryName}\", ${id}]`);\n    \n    const [result]: any[] = await pool.execute(query, [trimmedCategoryName, id]);\n    console.log(`[API_INFO] /api/categories/${id} PUT: Database update result:`, result);\n\n    if (result.affectedRows === 0) {\n      console.warn(`[API_WARN] /api/categories/${id} PUT: Category not found or no changes made.`);\n      return NextResponse.json({ error: 'Category not found or no changes made' }, { status: 404 });\n    }\n    \n    const [updatedCategoryRows]: any[] = await pool.execute('SELECT id, category FROM Category WHERE id = ?', [id]);\n    if (updatedCategoryRows.length === 0) {\n      console.error(`[API_ERROR] /api/categories/${id} PUT: Category updated but failed to retrieve it for response.`);\n      return NextResponse.json({ error: 'Category updated but failed to retrieve.' }, { status: 500 });\n    }\n    console.log(`[API_INFO] /api/categories/${id} PUT: Successfully updated and retrieved category:`, updatedCategoryRows[0]);\n    return NextResponse.json(updatedCategoryRows[0]);\n\n  } catch (error: any) {\n    console.error(`[API_ERROR] /api/categories/${id} PUT: Unhandled exception during category update. Request body was:`, requestBody, 'Error:', error);\n    if (error.code === 'ER_DUP_ENTRY') {\n      console.warn(`[API_WARN] /api/categories/${id} PUT: Duplicate entry for category name.`);\n      return NextResponse.json({ error: 'Category with this name already exists.' }, { status: 409 });\n    }\n    return NextResponse.json({ error: 'Failed to update category', details: error.message, code: error.code || 'UNKNOWN_SERVER_ERROR' }, { status: 500 });\n  }\n}\n\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  const idParam = params.id;\n  console.log(`[API_INFO] /api/categories/${idParam} DELETE: Received request.`);\n  const id = parseInt(idParam, 10);\n  if (isNaN(id)) {\n    console.warn(`[API_WARN] /api/categories/${idParam} DELETE: Invalid Category ID format.`);\n    return NextResponse.json({ error: 'Invalid Category ID format' }, { status: 400 });\n  }\n\n  try {\n    console.log(`[API_INFO] /api/categories/${id} DELETE: Executing query to delete category.`);\n    const [result]: any[] = await pool.execute('DELETE FROM Category WHERE id = ?', [id]);\n    console.log(`[API_INFO] /api/categories/${id} DELETE: Database delete result:`, result);\n\n    if (result.affectedRows === 0) {\n      console.warn(`[API_WARN] /api/categories/${id} DELETE: Category not found.`);\n      return NextResponse.json({ error: 'Category not found' }, { status: 404 });\n    }\n    console.log(`[API_INFO] /api/categories/${id} DELETE: Successfully deleted category.`);\n    return NextResponse.json({ message: 'Category deleted successfully' }, { status: 200 });\n  } catch (error: any) {\n    console.error(`[API_ERROR] /api/categories/${id} DELETE: Error deleting category:`, error);\n     if (error.code === 'ER_ROW_IS_REFERENCED_2') {\n        console.warn(`[API_WARN] /api/categories/${id} DELETE: Attempted to delete a referenced category.`);\n        return NextResponse.json({ error: 'Cannot delete category. It is currently referenced by other records (e.g., PO Items, Requisition Items). Please remove those references first.' }, { status: 409 });\n    }\n    return NextResponse.json({ error: 'Failed to delete category', details: error.message, code: error.code || 'UNKNOWN_DB_ERROR' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}