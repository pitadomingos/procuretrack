{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\n\n// Configure dotenv to load the .env file from the backend directory at module load time.\ndotenv.config({ path: path.resolve(process.cwd(), 'backend', '.env') });\n\nlet pool = null;\n\nasync function getDbPool() {\n  if (pool) {\n    return pool;\n  }\n\n  // --- Debugging Environment ---\n  console.log('[DB_INIT] Current working directory:', process.cwd());\n  console.log('[DB_INIT] Checking for environment variables...');\n  \n  try {\n    // Check for essential DB environment variables\n    const essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME', 'JWT_SECRET'];\n    const missingEnvVars = [];\n    for (const v of essentialEnvVars) {\n        if (!process.env[v]) {\n            missingEnvVars.push(v);\n        } else {\n            // Avoid logging password in production\n            if (v !== 'DB_PASSWORD' && v !== 'JWT_SECRET') {\n                console.log(`[DB_INIT] Found ENV VAR: ${v} = ${process.env[v]}`);\n            } else {\n                 console.log(`[DB_INIT] Found ENV VAR: ${v} = (hidden)`);\n            }\n        }\n    }\n    \n    if (missingEnvVars.length > 0) {\n      const errorMsg = `Configuration is incomplete. Missing variables: ${missingEnvVars.join(', ')}. Please define these in your backend/.env file. For JWT_SECRET, use a long, random string.`;\n      console.error(`[DB_INIT_ERROR] ${errorMsg}`);\n      throw new Error(errorMsg);\n    }\n\n    // --- SSL Certificate Handling ---\n    const caCertPathOrContent = process.env.DB_SSL_CA;\n    let caCertContent;\n\n    if (caCertPathOrContent) {\n      const potentialPath = path.resolve(process.cwd(), caCertPathOrContent);\n      \n      if (fs.existsSync(potentialPath) && fs.statSync(potentialPath).isFile()) {\n        console.log(`DB_INIT_INFO: DB_SSL_CA points to a file. Reading certificate from \"${potentialPath}\".`);\n        caCertContent = fs.readFileSync(potentialPath, 'utf8');\n      } else {\n        console.log(\"DB_INIT_INFO: DB_SSL_CA does not appear to be a file path. Using its content directly for SSL connection.\");\n        caCertContent = caCertPathOrContent;\n      }\n    } else {\n      console.warn(`DB_WARN: The DB_SSL_CA environment variable is not set. Connecting with SSL using system default CAs. If connection fails, please provide the path to your 'ca.pem' file in the DB_SSL_CA variable in your .env file.`);\n    }\n    \n    const sslConfig = { rejectUnauthorized: true, ca: caCertContent || undefined };\n\n    // --- Connection Pool Creation ---\n    console.log(\"DB_INIT_INFO: Creating database connection pool for the first time.\");\n    const newPool = mysql.createPool({\n      host: process.env.DB_HOST,\n      user: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n      ssl: sslConfig,\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0,\n    });\n\n    try {\n      // Test the connection before assigning it to the singleton\n      const connection = await newPool.getConnection();\n      console.log(\"DB_INIT_SUCCESS: Database connection pool created and verified successfully.\");\n      connection.release();\n    } catch (testError) {\n      console.error(\"CRITICAL_DB_INIT_ERROR: Failed to get a connection from the pool after creation.\", testError);\n      // Destroy the pool if the initial connection test fails\n      newPool.end();\n      throw testError; // Re-throw to be caught by the main catch block\n    }\n\n    pool = newPool;\n    return pool;\n\n  } catch (error) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Failed to create and verify database connection pool. Error: ${error.message}`);\n    // Re-throw the error to be caught by the calling API route\n    throw error;\n  }\n}\n\n// Export the function that provides the pool\nexport { getDbPool };\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAEA,yFAAyF;AACzF,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,WAAW;AAAQ;AAErE,IAAI,OAAO;AAEX,eAAe;IACb,IAAI,MAAM;QACR,OAAO;IACT;IAEA,gCAAgC;IAChC,QAAQ,GAAG,CAAC,wCAAwC,QAAQ,GAAG;IAC/D,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,+CAA+C;QAC/C,MAAM,mBAAmB;YAAC;YAAW;YAAW;YAAe;YAAW;SAAa;QACvF,MAAM,iBAAiB,EAAE;QACzB,KAAK,MAAM,KAAK,iBAAkB;YAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACjB,eAAe,IAAI,CAAC;YACxB,OAAO;gBACH,uCAAuC;gBACvC,IAAI,MAAM,iBAAiB,MAAM,cAAc;oBAC3C,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,GAAG,EAAE,QAAQ,GAAG,CAAC,EAAE,EAAE;gBACnE,OAAO;oBACF,QAAQ,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,WAAW,CAAC;gBAC3D;YACJ;QACJ;QAEA,IAAI,eAAe,MAAM,GAAG,GAAG;YAC7B,MAAM,WAAW,CAAC,gDAAgD,EAAE,eAAe,IAAI,CAAC,MAAM,2FAA2F,CAAC;YAC1L,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,UAAU;YAC3C,MAAM,IAAI,MAAM;QAClB;QAEA,mCAAmC;QACnC,MAAM,sBAAsB,QAAQ,GAAG,CAAC,SAAS;QACjD,IAAI;QAEJ,IAAI,qBAAqB;YACvB,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI;YAElD,IAAI,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,kBAAkB,6FAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,eAAe,MAAM,IAAI;gBACvE,QAAQ,GAAG,CAAC,CAAC,oEAAoE,EAAE,cAAc,EAAE,CAAC;gBACpG,gBAAgB,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,eAAe;YACjD,OAAO;gBACL,QAAQ,GAAG,CAAC;gBACZ,gBAAgB;YAClB;QACF,OAAO;YACL,QAAQ,IAAI,CAAC,CAAC,qNAAqN,CAAC;QACtO;QAEA,MAAM,YAAY;YAAE,oBAAoB;YAAM,IAAI,iBAAiB;QAAU;QAE7E,mCAAmC;QACnC,QAAQ,GAAG,CAAC;QACZ,MAAM,UAAU,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;YAC/B,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;YACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;YACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;YAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;YAChE,KAAK;YACL,oBAAoB;YACpB,iBAAiB;YACjB,YAAY;QACd;QAEA,IAAI;YACF,2DAA2D;YAC3D,MAAM,aAAa,MAAM,QAAQ,aAAa;YAC9C,QAAQ,GAAG,CAAC;YACZ,WAAW,OAAO;QACpB,EAAE,OAAO,WAAW;YAClB,QAAQ,KAAK,CAAC,oFAAoF;YAClG,wDAAwD;YACxD,QAAQ,GAAG;YACX,MAAM,WAAW,gDAAgD;QACnE;QAEA,OAAO;QACP,OAAO;IAET,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,MAAM,OAAO,EAAE;QACrH,2DAA2D;QAC3D,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/activity-log/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport type { ActivityLogEntry } from '@/types';\nimport { getDbPool } from '../../../../backend/db.js';\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const limitParam = searchParams.get('limit');\n  const month = searchParams.get('month');\n  const year = searchParams.get('year');\n  const userFilter = searchParams.get('userFilter');\n  const actionTypeFilter = searchParams.get('actionTypeFilter');\n\n  let limit = 100;\n  if (limitParam) {\n    const parsedLimit = parseInt(limitParam, 10);\n    if (!isNaN(parsedLimit) && parsedLimit > 0) {\n      limit = parsedLimit;\n    }\n  }\n\n  console.log(`[API_INFO] /api/activity-log GET: Received params - limit: ${limit}, month: ${month}, year: ${year}, userFilter: ${userFilter}, actionTypeFilter: ${actionTypeFilter}`);\n\n  let connection;\n  try {\n    const pool = await getDbPool();\n    connection = await pool.getConnection();\n    console.log(`[API_INFO] /api/activity-log GET: Database connection obtained.`);\n\n    let query = `\n      SELECT id, user, action, timestamp, details\n      FROM ActivityLog\n    `;\n    const whereClauses: string[] = [];\n    const queryParams: (string | number)[] = [];\n\n    if (month && month !== 'all') {\n      const parsedMonth = parseInt(month, 10);\n      if(!isNaN(parsedMonth)){\n        whereClauses.push(\"MONTH(timestamp) = ?\");\n        queryParams.push(parsedMonth);\n      } else {\n        console.warn(`[API_WARN] /api/activity-log GET: Invalid month value received: ${month}. Ignoring month filter.`);\n      }\n    }\n    if (year && year !== 'all') {\n      const parsedYear = parseInt(year, 10);\n      if(!isNaN(parsedYear)){\n        whereClauses.push(\"YEAR(timestamp) = ?\");\n        queryParams.push(parsedYear);\n      } else {\n        console.warn(`[API_WARN] /api/activity-log GET: Invalid year value received: ${year}. Ignoring year filter.`);\n      }\n    }\n    if (userFilter && userFilter.trim() !== '') {\n      whereClauses.push(\"user LIKE ?\");\n      queryParams.push(`%${userFilter.trim()}%`);\n    }\n    if (actionTypeFilter && actionTypeFilter.trim() !== '') {\n      whereClauses.push(\"action LIKE ?\");\n      queryParams.push(`%${actionTypeFilter.trim()}%`);\n    }\n\n    if (whereClauses.length > 0) {\n      query += ` WHERE ${whereClauses.join(' AND ')}`;\n    }\n\n    query += ` ORDER BY timestamp DESC LIMIT ?`;\n    queryParams.push(limit);\n    \n    console.log(`[API_INFO] /api/activity-log GET: Executing query: ${query.replace(/\\s+/g, ' ').trim()} with params: ${JSON.stringify(queryParams)}`);\n    \n    const [rows]: any[] = await connection.query(query, queryParams); \n\n    console.log(`[API_INFO] /api/activity-log GET: Successfully fetched ${rows.length} activity log entries.`);\n    \n    const activityLog: ActivityLogEntry[] = rows.map((row: any) => ({\n        ...row,\n        timestamp: new Date(row.timestamp).toLocaleString('en-GB', { \n            day: '2-digit', month: 'short', year: 'numeric', \n            hour: '2-digit', minute: '2-digit', hour12: true \n        })\n    }));\n\n    return NextResponse.json(activityLog);\n  } catch (error: any) {\n    console.error('[API_ERROR] /api/activity-log GET: Error fetching activity log:', error);\n    const errorCode = error.code || 'N/A';\n    const sqlMessage = error.sqlMessage || error.message;\n    const details = `Error Code: ${errorCode}. Message: ${sqlMessage}. SQL State: ${error.sqlState || 'N/A'}`;\n    \n    return NextResponse.json(\n        { \n            error: 'Failed to fetch activity log data from the database.', \n            details: details,\n            rawErrorMessage: error.message\n        }, \n        { status: 500 }\n    );\n  } finally {\n    if (connection) {\n        try {\n            await connection.release();\n            console.log('[API_INFO] /api/activity-log GET: Database connection released.');\n        } catch (releaseError: any) {\n            console.error('[API_ERROR] /api/activity-log GET: Error releasing DB connection:', releaseError.message);\n        }\n    }\n  }\n}\n"],"names":[],"mappings":";;;AACA;AAEA;;;AAEO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,aAAa,aAAa,GAAG,CAAC;IACpC,MAAM,QAAQ,aAAa,GAAG,CAAC;IAC/B,MAAM,OAAO,aAAa,GAAG,CAAC;IAC9B,MAAM,aAAa,aAAa,GAAG,CAAC;IACpC,MAAM,mBAAmB,aAAa,GAAG,CAAC;IAE1C,IAAI,QAAQ;IACZ,IAAI,YAAY;QACd,MAAM,cAAc,SAAS,YAAY;QACzC,IAAI,CAAC,MAAM,gBAAgB,cAAc,GAAG;YAC1C,QAAQ;QACV;IACF;IAEA,QAAQ,GAAG,CAAC,CAAC,2DAA2D,EAAE,MAAM,SAAS,EAAE,MAAM,QAAQ,EAAE,KAAK,cAAc,EAAE,WAAW,oBAAoB,EAAE,kBAAkB;IAEnL,IAAI;IACJ,IAAI;QACF,MAAM,OAAO,MAAM,CAAA,GAAA,+GAAA,CAAA,YAAS,AAAD;QAC3B,aAAa,MAAM,KAAK,aAAa;QACrC,QAAQ,GAAG,CAAC,CAAC,+DAA+D,CAAC;QAE7E,IAAI,QAAQ,CAAC;;;IAGb,CAAC;QACD,MAAM,eAAyB,EAAE;QACjC,MAAM,cAAmC,EAAE;QAE3C,IAAI,SAAS,UAAU,OAAO;YAC5B,MAAM,cAAc,SAAS,OAAO;YACpC,IAAG,CAAC,MAAM,cAAa;gBACrB,aAAa,IAAI,CAAC;gBAClB,YAAY,IAAI,CAAC;YACnB,OAAO;gBACL,QAAQ,IAAI,CAAC,CAAC,gEAAgE,EAAE,MAAM,wBAAwB,CAAC;YACjH;QACF;QACA,IAAI,QAAQ,SAAS,OAAO;YAC1B,MAAM,aAAa,SAAS,MAAM;YAClC,IAAG,CAAC,MAAM,aAAY;gBACpB,aAAa,IAAI,CAAC;gBAClB,YAAY,IAAI,CAAC;YACnB,OAAO;gBACL,QAAQ,IAAI,CAAC,CAAC,+DAA+D,EAAE,KAAK,uBAAuB,CAAC;YAC9G;QACF;QACA,IAAI,cAAc,WAAW,IAAI,OAAO,IAAI;YAC1C,aAAa,IAAI,CAAC;YAClB,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,WAAW,IAAI,GAAG,CAAC,CAAC;QAC3C;QACA,IAAI,oBAAoB,iBAAiB,IAAI,OAAO,IAAI;YACtD,aAAa,IAAI,CAAC;YAClB,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,iBAAiB,IAAI,GAAG,CAAC,CAAC;QACjD;QAEA,IAAI,aAAa,MAAM,GAAG,GAAG;YAC3B,SAAS,CAAC,OAAO,EAAE,aAAa,IAAI,CAAC,UAAU;QACjD;QAEA,SAAS,CAAC,gCAAgC,CAAC;QAC3C,YAAY,IAAI,CAAC;QAEjB,QAAQ,GAAG,CAAC,CAAC,mDAAmD,EAAE,MAAM,OAAO,CAAC,QAAQ,KAAK,IAAI,GAAG,cAAc,EAAE,KAAK,SAAS,CAAC,cAAc;QAEjJ,MAAM,CAAC,KAAK,GAAU,MAAM,WAAW,KAAK,CAAC,OAAO;QAEpD,QAAQ,GAAG,CAAC,CAAC,uDAAuD,EAAE,KAAK,MAAM,CAAC,sBAAsB,CAAC;QAEzG,MAAM,cAAkC,KAAK,GAAG,CAAC,CAAC,MAAa,CAAC;gBAC5D,GAAG,GAAG;gBACN,WAAW,IAAI,KAAK,IAAI,SAAS,EAAE,cAAc,CAAC,SAAS;oBACvD,KAAK;oBAAW,OAAO;oBAAS,MAAM;oBACtC,MAAM;oBAAW,QAAQ;oBAAW,QAAQ;gBAChD;YACJ,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,mEAAmE;QACjF,MAAM,YAAY,MAAM,IAAI,IAAI;QAChC,MAAM,aAAa,MAAM,UAAU,IAAI,MAAM,OAAO;QACpD,MAAM,UAAU,CAAC,YAAY,EAAE,UAAU,WAAW,EAAE,WAAW,aAAa,EAAE,MAAM,QAAQ,IAAI,OAAO;QAEzG,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YACI,OAAO;YACP,SAAS;YACT,iBAAiB,MAAM,OAAO;QAClC,GACA;YAAE,QAAQ;QAAI;IAEpB,SAAU;QACR,IAAI,YAAY;YACZ,IAAI;gBACA,MAAM,WAAW,OAAO;gBACxB,QAAQ,GAAG,CAAC;YAChB,EAAE,OAAO,cAAmB;gBACxB,QAAQ,KAAK,CAAC,qEAAqE,aAAa,OAAO;YAC3G;QACJ;IACF;AACF","debugId":null}}]
}