{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/backend/db.js"],"sourcesContent":["\nimport mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport fs from 'fs';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name in ES module scope\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Construct absolute path to .env file in the parent directory\nconst envPath = path.resolve(__dirname, \".env\");\ndotenv.config({ path: envPath });\n\n// Construct absolute path to ca.pem file in the same directory\nconst caPath = path.resolve(__dirname, \"ca.pem\");\nlet caCert;\n\ntry {\n  if (!fs.existsSync(caPath)) {\n    console.error(`CRITICAL_DB_INIT_ERROR: CA certificate file (ca.pem) not found at expected location: ${caPath}. Database connections requiring SSL will likely fail. Please ensure 'backend/ca.pem' exists.`);\n    // caCert will remain undefined. mysql.createPool might fail if SSL is strictly required.\n  } else {\n    caCert = fs.readFileSync(caPath, 'utf8');\n  }\n} catch (e) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Error reading CA certificate file (ca.pem) at ${caPath}: ${e.message}. Database connections may fail.`);\n  // Depending on the error, caCert might be undefined or an error could be thrown, halting further execution.\n  // For robustness, we could choose to throw here to make the failure explicit.\n  // throw new Error(`Failed to read ca.pem: ${e.message}`);\n}\n\n// Check for essential DB environment variables\nconst essentialEnvVars = ['DB_HOST', 'DB_USER', 'DB_PASSWORD', 'DB_NAME'];\nconst missingEnvVars = essentialEnvVars.filter(v => !process.env[v]);\n\nif (missingEnvVars.length > 0) {\n    console.error(`CRITICAL_DB_INIT_ERROR: Missing essential database environment variables: ${missingEnvVars.join(', ')}. These should be defined in backend/.env for local development or configured in your hosting environment. Database connections will fail.`);\n    // To make the server fail fast and clearly, throwing an error here is a good practice.\n    // This prevents a more obscure \"Internal Server Error\" later.\n    throw new Error(`Missing critical DB environment variables: ${missingEnvVars.join(', ')}. Check your backend/.env file or hosting configuration.`);\n}\n\nlet pool;\ntry {\n  pool = mysql.createPool({\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n    port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,\n    ssl: {\n      ca: caCert, // If caCert is undefined due to file not found, this may cause issues\n      rejectUnauthorized: true, // Recommended for production if using a trusted CA\n    },\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n  console.log(\"DB_INIT_SUCCESS: MySQL connection pool created (this does not guarantee successful connection yet, but configuration is loaded).\");\n} catch (error) {\n  console.error(`CRITICAL_DB_INIT_ERROR: Failed to create MySQL connection pool: ${error.message}. This is a fatal error for database operations.`);\n  // Re-throwing the error here will make the application fail on startup if the pool cannot be initialized,\n  // which is often better than encountering errors later during request handling.\n  throw new Error(`Failed to initialize database connection pool due to: ${error.message}. Review DB configuration (backend/.env) and SSL certificate (backend/ca.pem).`);\n}\n\n// Export the connection pool\nexport {pool};\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAEA,4CAA4C;AAC5C,MAAM,aAAa,CAAA,GAAA,+FAAA,CAAA,gBAAa,AAAD,EAAE,8BAAY,GAAG;AAChD,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC;AAE/B,+DAA+D;AAC/D,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACxC,uIAAA,CAAA,UAAM,CAAC,MAAM,CAAC;IAAE,MAAM;AAAQ;AAE9B,+DAA+D;AAC/D,MAAM,SAAS,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,WAAW;AACvC,IAAI;AAEJ,IAAI;IACF,IAAI,CAAC,6FAAA,CAAA,UAAE,CAAC,UAAU,CAAC,SAAS;QAC1B,QAAQ,KAAK,CAAC,CAAC,qFAAqF,EAAE,OAAO,6FAA6F,CAAC;IAC3M,yFAAyF;IAC3F,OAAO;QACL,SAAS,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,QAAQ;IACnC;AACF,EAAE,OAAO,GAAG;IACV,QAAQ,KAAK,CAAC,CAAC,sEAAsE,EAAE,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,gCAAgC,CAAC;AAC7I,4GAA4G;AAC5G,8EAA8E;AAC9E,0DAA0D;AAC5D;AAEA,+CAA+C;AAC/C,MAAM,mBAAmB;IAAC;IAAW;IAAW;IAAe;CAAU;AACzE,MAAM,iBAAiB,iBAAiB,MAAM,CAAC,CAAA,IAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;AAEnE,IAAI,eAAe,MAAM,GAAG,GAAG;IAC3B,QAAQ,KAAK,CAAC,CAAC,0EAA0E,EAAE,eAAe,IAAI,CAAC,MAAM,0IAA0I,CAAC;IAChQ,uFAAuF;IACvF,8DAA8D;IAC9D,MAAM,IAAI,MAAM,CAAC,2CAA2C,EAAE,eAAe,IAAI,CAAC,MAAM,wDAAwD,CAAC;AACrJ;AAEA,IAAI;AACJ,IAAI;IACF,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;QACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;QACjC,UAAU,QAAQ,GAAG,CAAC,OAAO;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,GAAG,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,MAAM;QAChE,KAAK;YACH,IAAI;YACJ,oBAAoB;QACtB;QACA,oBAAoB;QACpB,iBAAiB;QACjB,YAAY;IACd;IACA,QAAQ,GAAG,CAAC;AACd,EAAE,OAAO,OAAO;IACd,QAAQ,KAAK,CAAC,CAAC,gEAAgE,EAAE,MAAM,OAAO,CAAC,gDAAgD,CAAC;IAChJ,0GAA0G;IAC1G,gFAAgF;IAChF,MAAM,IAAI,MAAM,CAAC,sDAAsD,EAAE,MAAM,OAAO,CAAC,8EAA8E,CAAC;AACxK","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/activity-log/route.ts"],"sourcesContent":["\nimport { NextResponse } from 'next/server';\nimport { pool } from '../../../../backend/db.js';\nimport type { ActivityLogEntry } from '@/types';\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const limitParam = searchParams.get('limit');\n  const month = searchParams.get('month');\n  const year = searchParams.get('year');\n  const userFilter = searchParams.get('userFilter');\n  const actionTypeFilter = searchParams.get('actionTypeFilter');\n\n  let limit = 100;\n  if (limitParam) {\n    const parsedLimit = parseInt(limitParam, 10);\n    if (!isNaN(parsedLimit) && parsedLimit > 0) {\n      limit = parsedLimit;\n    }\n  }\n\n  console.log(`[API_INFO] /api/activity-log GET: Received params - limit: ${limit}, month: ${month}, year: ${year}, userFilter: ${userFilter}, actionTypeFilter: ${actionTypeFilter}`);\n\n  let connection;\n  try {\n    connection = await pool.getConnection();\n    console.log(`[API_INFO] /api/activity-log GET: Database connection obtained.`);\n\n    let query = `\n      SELECT id, user, action, timestamp, details\n      FROM ActivityLog\n    `;\n    const whereClauses: string[] = [];\n    const queryParams: (string | number)[] = [];\n\n    if (month && month !== 'all') {\n      const parsedMonth = parseInt(month, 10);\n      if(!isNaN(parsedMonth)){\n        whereClauses.push(\"MONTH(timestamp) = ?\");\n        queryParams.push(parsedMonth);\n      } else {\n        console.warn(`[API_WARN] /api/activity-log GET: Invalid month value received: ${month}. Ignoring month filter.`);\n      }\n    }\n    if (year && year !== 'all') {\n      const parsedYear = parseInt(year, 10);\n      if(!isNaN(parsedYear)){\n        whereClauses.push(\"YEAR(timestamp) = ?\");\n        queryParams.push(parsedYear);\n      } else {\n        console.warn(`[API_WARN] /api/activity-log GET: Invalid year value received: ${year}. Ignoring year filter.`);\n      }\n    }\n    if (userFilter && userFilter.trim() !== '') {\n      whereClauses.push(\"user LIKE ?\");\n      queryParams.push(`%${userFilter.trim()}%`);\n    }\n    if (actionTypeFilter && actionTypeFilter.trim() !== '') {\n      whereClauses.push(\"action LIKE ?\");\n      queryParams.push(`%${actionTypeFilter.trim()}%`);\n    }\n\n    if (whereClauses.length > 0) {\n      query += ` WHERE ${whereClauses.join(' AND ')}`;\n    }\n\n    query += ` ORDER BY timestamp DESC LIMIT ?`;\n    queryParams.push(limit);\n    \n    console.log(`[API_INFO] /api/activity-log GET: Executing query: ${query.replace(/\\s+/g, ' ').trim()} with params: ${JSON.stringify(queryParams)}`);\n    \n    // Changed from connection.execute to connection.query\n    const [rows]: any[] = await connection.query(query, queryParams); \n\n    console.log(`[API_INFO] /api/activity-log GET: Successfully fetched ${rows.length} activity log entries.`);\n    \n    const activityLog: ActivityLogEntry[] = rows.map((row: any) => ({\n        ...row,\n        timestamp: new Date(row.timestamp).toLocaleString('en-GB', { \n            day: '2-digit', month: 'short', year: 'numeric', \n            hour: '2-digit', minute: '2-digit', hour12: true \n        })\n    }));\n\n    return NextResponse.json(activityLog);\n  } catch (error: any) {\n    console.error('[API_ERROR] /api/activity-log GET: Error fetching activity log:', error);\n    const errorCode = error.code || 'N/A';\n    const sqlMessage = error.sqlMessage || error.message;\n    const details = `Error Code: ${errorCode}. Message: ${sqlMessage}. SQL State: ${error.sqlState || 'N/A'}`;\n    \n    return NextResponse.json(\n        { \n            error: 'Failed to fetch activity log data from the database.', \n            details: details,\n            rawErrorMessage: error.message\n        }, \n        { status: 500 }\n    );\n  } finally {\n    if (connection) {\n        try {\n            await connection.release();\n            console.log('[API_INFO] /api/activity-log GET: Database connection released.');\n        } catch (releaseError: any) {\n            console.error('[API_ERROR] /api/activity-log GET: Error releasing DB connection:', releaseError.message);\n        }\n    }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}